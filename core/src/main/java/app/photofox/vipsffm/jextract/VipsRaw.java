// Generated by jextract

package app.photofox.vipsffm.jextract;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class VipsRaw {

    VipsRaw() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.libraryLookup(System.mapLibraryName("vips"), LIBRARY_ARENA)
            .or(SymbolLookup.loaderLookup())
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;
    private static final int VIPS_ENABLE_DEPRECATED = (int)1L;
    /**
     * {@snippet lang=c :
     * #define VIPS_ENABLE_DEPRECATED 1
     * }
     */
    public static int VIPS_ENABLE_DEPRECATED() {
        return VIPS_ENABLE_DEPRECATED;
    }

    private static class g_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void (g_free)(gpointer mem)
     * }
     */
    public static FunctionDescriptor g_free$descriptor() {
        return g_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void (g_free)(gpointer mem)
     * }
     */
    public static MethodHandle g_free$handle() {
        return g_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void (g_free)(gpointer mem)
     * }
     */
    public static MemorySegment g_free$address() {
        return g_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void (g_free)(gpointer mem)
     * }
     */
    public static void g_free(MemorySegment mem) {
        var mh$ = g_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_free", mem);
            }
            mh$.invokeExact(mem);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_free_sized {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_free_sized");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_free_sized(gpointer mem, size_t size)
     * }
     */
    public static FunctionDescriptor g_free_sized$descriptor() {
        return g_free_sized.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_free_sized(gpointer mem, size_t size)
     * }
     */
    public static MethodHandle g_free_sized$handle() {
        return g_free_sized.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_free_sized(gpointer mem, size_t size)
     * }
     */
    public static MemorySegment g_free_sized$address() {
        return g_free_sized.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_free_sized(gpointer mem, size_t size)
     * }
     */
    public static void g_free_sized(MemorySegment mem, long size) {
        var mh$ = g_free_sized.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_free_sized", mem, size);
            }
            mh$.invokeExact(mem, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_string_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_string_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *(g_string_free)(GString *string, gboolean free_segment)
     * }
     */
    public static FunctionDescriptor g_string_free$descriptor() {
        return g_string_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *(g_string_free)(GString *string, gboolean free_segment)
     * }
     */
    public static MethodHandle g_string_free$handle() {
        return g_string_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gchar *(g_string_free)(GString *string, gboolean free_segment)
     * }
     */
    public static MemorySegment g_string_free$address() {
        return g_string_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gchar *(g_string_free)(GString *string, gboolean free_segment)
     * }
     */
    public static MemorySegment g_string_free(MemorySegment string, int free_segment) {
        var mh$ = g_string_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_string_free", string, free_segment);
            }
            return (MemorySegment)mh$.invokeExact(string, free_segment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_string_free_and_steal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_string_free_and_steal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_string_free_and_steal(GString *string)
     * }
     */
    public static FunctionDescriptor g_string_free_and_steal$descriptor() {
        return g_string_free_and_steal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_string_free_and_steal(GString *string)
     * }
     */
    public static MethodHandle g_string_free_and_steal$handle() {
        return g_string_free_and_steal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gchar *g_string_free_and_steal(GString *string)
     * }
     */
    public static MemorySegment g_string_free_and_steal$address() {
        return g_string_free_and_steal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gchar *g_string_free_and_steal(GString *string)
     * }
     */
    public static MemorySegment g_string_free_and_steal(MemorySegment string) {
        var mh$ = g_string_free_and_steal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_string_free_and_steal", string);
            }
            return (MemorySegment)mh$.invokeExact(string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_string_free_to_bytes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_string_free_to_bytes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GBytes *g_string_free_to_bytes(GString *string)
     * }
     */
    public static FunctionDescriptor g_string_free_to_bytes$descriptor() {
        return g_string_free_to_bytes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GBytes *g_string_free_to_bytes(GString *string)
     * }
     */
    public static MethodHandle g_string_free_to_bytes$handle() {
        return g_string_free_to_bytes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GBytes *g_string_free_to_bytes(GString *string)
     * }
     */
    public static MemorySegment g_string_free_to_bytes$address() {
        return g_string_free_to_bytes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GBytes *g_string_free_to_bytes(GString *string)
     * }
     */
    public static MemorySegment g_string_free_to_bytes(MemorySegment string) {
        var mh$ = g_string_free_to_bytes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_string_free_to_bytes", string);
            }
            return (MemorySegment)mh$.invokeExact(string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_log_type_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_test_log_type_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *g_test_log_type_name(GTestLogType log_type)
     * }
     */
    public static FunctionDescriptor g_test_log_type_name$descriptor() {
        return g_test_log_type_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *g_test_log_type_name(GTestLogType log_type)
     * }
     */
    public static MethodHandle g_test_log_type_name$handle() {
        return g_test_log_type_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *g_test_log_type_name(GTestLogType log_type)
     * }
     */
    public static MemorySegment g_test_log_type_name$address() {
        return g_test_log_type_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *g_test_log_type_name(GTestLogType log_type)
     * }
     */
    public static MemorySegment g_test_log_type_name(int log_type) {
        var mh$ = g_test_log_type_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_log_type_name", log_type);
            }
            return (MemorySegment)mh$.invokeExact(log_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_log_msg_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_test_log_msg_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_test_log_msg_free(GTestLogMsg *tmsg)
     * }
     */
    public static FunctionDescriptor g_test_log_msg_free$descriptor() {
        return g_test_log_msg_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_test_log_msg_free(GTestLogMsg *tmsg)
     * }
     */
    public static MethodHandle g_test_log_msg_free$handle() {
        return g_test_log_msg_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_test_log_msg_free(GTestLogMsg *tmsg)
     * }
     */
    public static MemorySegment g_test_log_msg_free$address() {
        return g_test_log_msg_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_test_log_msg_free(GTestLogMsg *tmsg)
     * }
     */
    public static void g_test_log_msg_free(MemorySegment tmsg) {
        var mh$ = g_test_log_msg_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_log_msg_free", tmsg);
            }
            mh$.invokeExact(tmsg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int G_TYPE_DEBUG_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TYPE_DEBUG_NONE = 0
     * }
     */
    public static int G_TYPE_DEBUG_NONE() {
        return G_TYPE_DEBUG_NONE;
    }
    private static final int G_TYPE_DEBUG_OBJECTS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TYPE_DEBUG_OBJECTS = 1
     * }
     */
    public static int G_TYPE_DEBUG_OBJECTS() {
        return G_TYPE_DEBUG_OBJECTS;
    }
    private static final int G_TYPE_DEBUG_SIGNALS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TYPE_DEBUG_SIGNALS = 2
     * }
     */
    public static int G_TYPE_DEBUG_SIGNALS() {
        return G_TYPE_DEBUG_SIGNALS;
    }
    private static final int G_TYPE_DEBUG_INSTANCE_COUNT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TYPE_DEBUG_INSTANCE_COUNT = 4
     * }
     */
    public static int G_TYPE_DEBUG_INSTANCE_COUNT() {
        return G_TYPE_DEBUG_INSTANCE_COUNT;
    }
    private static final int G_TYPE_DEBUG_MASK = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TYPE_DEBUG_MASK = 7
     * }
     */
    public static int G_TYPE_DEBUG_MASK() {
        return G_TYPE_DEBUG_MASK;
    }

    private static class g_type_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_init");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_init()
     * }
     */
    public static FunctionDescriptor g_type_init$descriptor() {
        return g_type_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_init()
     * }
     */
    public static MethodHandle g_type_init$handle() {
        return g_type_init.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_type_init()
     * }
     */
    public static MemorySegment g_type_init$address() {
        return g_type_init.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_type_init()
     * }
     */
    public static void g_type_init() {
        var mh$ = g_type_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_init");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_init_with_debug_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_init_with_debug_flags");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_init_with_debug_flags(GTypeDebugFlags debug_flags)
     * }
     */
    public static FunctionDescriptor g_type_init_with_debug_flags$descriptor() {
        return g_type_init_with_debug_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_init_with_debug_flags(GTypeDebugFlags debug_flags)
     * }
     */
    public static MethodHandle g_type_init_with_debug_flags$handle() {
        return g_type_init_with_debug_flags.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_type_init_with_debug_flags(GTypeDebugFlags debug_flags)
     * }
     */
    public static MemorySegment g_type_init_with_debug_flags$address() {
        return g_type_init_with_debug_flags.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_type_init_with_debug_flags(GTypeDebugFlags debug_flags)
     * }
     */
    public static void g_type_init_with_debug_flags(int debug_flags) {
        var mh$ = g_type_init_with_debug_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_init_with_debug_flags", debug_flags);
            }
            mh$.invokeExact(debug_flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_type_name(GType type)
     * }
     */
    public static FunctionDescriptor g_type_name$descriptor() {
        return g_type_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_type_name(GType type)
     * }
     */
    public static MethodHandle g_type_name$handle() {
        return g_type_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const gchar *g_type_name(GType type)
     * }
     */
    public static MemorySegment g_type_name$address() {
        return g_type_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const gchar *g_type_name(GType type)
     * }
     */
    public static MemorySegment g_type_name(long type) {
        var mh$ = g_type_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_name", type);
            }
            return (MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_qname {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_qname");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GQuark g_type_qname(GType type)
     * }
     */
    public static FunctionDescriptor g_type_qname$descriptor() {
        return g_type_qname.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GQuark g_type_qname(GType type)
     * }
     */
    public static MethodHandle g_type_qname$handle() {
        return g_type_qname.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GQuark g_type_qname(GType type)
     * }
     */
    public static MemorySegment g_type_qname$address() {
        return g_type_qname.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GQuark g_type_qname(GType type)
     * }
     */
    public static int g_type_qname(long type) {
        var mh$ = g_type_qname.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_qname", type);
            }
            return (int)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_from_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_from_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_type_from_name(const gchar *name)
     * }
     */
    public static FunctionDescriptor g_type_from_name$descriptor() {
        return g_type_from_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_type_from_name(const gchar *name)
     * }
     */
    public static MethodHandle g_type_from_name$handle() {
        return g_type_from_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType g_type_from_name(const gchar *name)
     * }
     */
    public static MemorySegment g_type_from_name$address() {
        return g_type_from_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType g_type_from_name(const gchar *name)
     * }
     */
    public static long g_type_from_name(MemorySegment name) {
        var mh$ = g_type_from_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_from_name", name);
            }
            return (long)mh$.invokeExact(name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_parent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_parent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_type_parent(GType type)
     * }
     */
    public static FunctionDescriptor g_type_parent$descriptor() {
        return g_type_parent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_type_parent(GType type)
     * }
     */
    public static MethodHandle g_type_parent$handle() {
        return g_type_parent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType g_type_parent(GType type)
     * }
     */
    public static MemorySegment g_type_parent$address() {
        return g_type_parent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType g_type_parent(GType type)
     * }
     */
    public static long g_type_parent(long type) {
        var mh$ = g_type_parent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_parent", type);
            }
            return (long)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_depth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_depth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_type_depth(GType type)
     * }
     */
    public static FunctionDescriptor g_type_depth$descriptor() {
        return g_type_depth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_type_depth(GType type)
     * }
     */
    public static MethodHandle g_type_depth$handle() {
        return g_type_depth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern guint g_type_depth(GType type)
     * }
     */
    public static MemorySegment g_type_depth$address() {
        return g_type_depth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern guint g_type_depth(GType type)
     * }
     */
    public static int g_type_depth(long type) {
        var mh$ = g_type_depth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_depth", type);
            }
            return (int)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_next_base {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG,
            VipsRaw.C_LONG,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_next_base");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_type_next_base(GType leaf_type, GType root_type)
     * }
     */
    public static FunctionDescriptor g_type_next_base$descriptor() {
        return g_type_next_base.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_type_next_base(GType leaf_type, GType root_type)
     * }
     */
    public static MethodHandle g_type_next_base$handle() {
        return g_type_next_base.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType g_type_next_base(GType leaf_type, GType root_type)
     * }
     */
    public static MemorySegment g_type_next_base$address() {
        return g_type_next_base.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType g_type_next_base(GType leaf_type, GType root_type)
     * }
     */
    public static long g_type_next_base(long leaf_type, long root_type) {
        var mh$ = g_type_next_base.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_next_base", leaf_type, root_type);
            }
            return (long)mh$.invokeExact(leaf_type, root_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_is_a {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_LONG,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_is_a");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_type_is_a(GType type, GType is_a_type)
     * }
     */
    public static FunctionDescriptor g_type_is_a$descriptor() {
        return g_type_is_a.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_type_is_a(GType type, GType is_a_type)
     * }
     */
    public static MethodHandle g_type_is_a$handle() {
        return g_type_is_a.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean g_type_is_a(GType type, GType is_a_type)
     * }
     */
    public static MemorySegment g_type_is_a$address() {
        return g_type_is_a.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean g_type_is_a(GType type, GType is_a_type)
     * }
     */
    public static int g_type_is_a(long type, long is_a_type) {
        var mh$ = g_type_is_a.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_is_a", type, is_a_type);
            }
            return (int)mh$.invokeExact(type, is_a_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_class_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_class_ref");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_type_class_ref(GType type)
     * }
     */
    public static FunctionDescriptor g_type_class_ref$descriptor() {
        return g_type_class_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_type_class_ref(GType type)
     * }
     */
    public static MethodHandle g_type_class_ref$handle() {
        return g_type_class_ref.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gpointer g_type_class_ref(GType type)
     * }
     */
    public static MemorySegment g_type_class_ref$address() {
        return g_type_class_ref.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gpointer g_type_class_ref(GType type)
     * }
     */
    public static MemorySegment g_type_class_ref(long type) {
        var mh$ = g_type_class_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_class_ref", type);
            }
            return (MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_class_peek {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_class_peek");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_type_class_peek(GType type)
     * }
     */
    public static FunctionDescriptor g_type_class_peek$descriptor() {
        return g_type_class_peek.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_type_class_peek(GType type)
     * }
     */
    public static MethodHandle g_type_class_peek$handle() {
        return g_type_class_peek.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gpointer g_type_class_peek(GType type)
     * }
     */
    public static MemorySegment g_type_class_peek$address() {
        return g_type_class_peek.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gpointer g_type_class_peek(GType type)
     * }
     */
    public static MemorySegment g_type_class_peek(long type) {
        var mh$ = g_type_class_peek.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_class_peek", type);
            }
            return (MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_class_peek_static {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_class_peek_static");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_type_class_peek_static(GType type)
     * }
     */
    public static FunctionDescriptor g_type_class_peek_static$descriptor() {
        return g_type_class_peek_static.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_type_class_peek_static(GType type)
     * }
     */
    public static MethodHandle g_type_class_peek_static$handle() {
        return g_type_class_peek_static.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gpointer g_type_class_peek_static(GType type)
     * }
     */
    public static MemorySegment g_type_class_peek_static$address() {
        return g_type_class_peek_static.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gpointer g_type_class_peek_static(GType type)
     * }
     */
    public static MemorySegment g_type_class_peek_static(long type) {
        var mh$ = g_type_class_peek_static.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_class_peek_static", type);
            }
            return (MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_class_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_class_unref");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_class_unref(gpointer g_class)
     * }
     */
    public static FunctionDescriptor g_type_class_unref$descriptor() {
        return g_type_class_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_class_unref(gpointer g_class)
     * }
     */
    public static MethodHandle g_type_class_unref$handle() {
        return g_type_class_unref.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_type_class_unref(gpointer g_class)
     * }
     */
    public static MemorySegment g_type_class_unref$address() {
        return g_type_class_unref.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_type_class_unref(gpointer g_class)
     * }
     */
    public static void g_type_class_unref(MemorySegment g_class) {
        var mh$ = g_type_class_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_class_unref", g_class);
            }
            mh$.invokeExact(g_class);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_class_peek_parent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_class_peek_parent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_type_class_peek_parent(gpointer g_class)
     * }
     */
    public static FunctionDescriptor g_type_class_peek_parent$descriptor() {
        return g_type_class_peek_parent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_type_class_peek_parent(gpointer g_class)
     * }
     */
    public static MethodHandle g_type_class_peek_parent$handle() {
        return g_type_class_peek_parent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gpointer g_type_class_peek_parent(gpointer g_class)
     * }
     */
    public static MemorySegment g_type_class_peek_parent$address() {
        return g_type_class_peek_parent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gpointer g_type_class_peek_parent(gpointer g_class)
     * }
     */
    public static MemorySegment g_type_class_peek_parent(MemorySegment g_class) {
        var mh$ = g_type_class_peek_parent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_class_peek_parent", g_class);
            }
            return (MemorySegment)mh$.invokeExact(g_class);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_interface_peek {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_interface_peek");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_type_interface_peek(gpointer instance_class, GType iface_type)
     * }
     */
    public static FunctionDescriptor g_type_interface_peek$descriptor() {
        return g_type_interface_peek.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_type_interface_peek(gpointer instance_class, GType iface_type)
     * }
     */
    public static MethodHandle g_type_interface_peek$handle() {
        return g_type_interface_peek.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gpointer g_type_interface_peek(gpointer instance_class, GType iface_type)
     * }
     */
    public static MemorySegment g_type_interface_peek$address() {
        return g_type_interface_peek.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gpointer g_type_interface_peek(gpointer instance_class, GType iface_type)
     * }
     */
    public static MemorySegment g_type_interface_peek(MemorySegment instance_class, long iface_type) {
        var mh$ = g_type_interface_peek.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_interface_peek", instance_class, iface_type);
            }
            return (MemorySegment)mh$.invokeExact(instance_class, iface_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_interface_peek_parent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_interface_peek_parent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_type_interface_peek_parent(gpointer g_iface)
     * }
     */
    public static FunctionDescriptor g_type_interface_peek_parent$descriptor() {
        return g_type_interface_peek_parent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_type_interface_peek_parent(gpointer g_iface)
     * }
     */
    public static MethodHandle g_type_interface_peek_parent$handle() {
        return g_type_interface_peek_parent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gpointer g_type_interface_peek_parent(gpointer g_iface)
     * }
     */
    public static MemorySegment g_type_interface_peek_parent$address() {
        return g_type_interface_peek_parent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gpointer g_type_interface_peek_parent(gpointer g_iface)
     * }
     */
    public static MemorySegment g_type_interface_peek_parent(MemorySegment g_iface) {
        var mh$ = g_type_interface_peek_parent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_interface_peek_parent", g_iface);
            }
            return (MemorySegment)mh$.invokeExact(g_iface);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_default_interface_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_default_interface_ref");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_type_default_interface_ref(GType g_type)
     * }
     */
    public static FunctionDescriptor g_type_default_interface_ref$descriptor() {
        return g_type_default_interface_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_type_default_interface_ref(GType g_type)
     * }
     */
    public static MethodHandle g_type_default_interface_ref$handle() {
        return g_type_default_interface_ref.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gpointer g_type_default_interface_ref(GType g_type)
     * }
     */
    public static MemorySegment g_type_default_interface_ref$address() {
        return g_type_default_interface_ref.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gpointer g_type_default_interface_ref(GType g_type)
     * }
     */
    public static MemorySegment g_type_default_interface_ref(long g_type) {
        var mh$ = g_type_default_interface_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_default_interface_ref", g_type);
            }
            return (MemorySegment)mh$.invokeExact(g_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_default_interface_peek {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_default_interface_peek");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_type_default_interface_peek(GType g_type)
     * }
     */
    public static FunctionDescriptor g_type_default_interface_peek$descriptor() {
        return g_type_default_interface_peek.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_type_default_interface_peek(GType g_type)
     * }
     */
    public static MethodHandle g_type_default_interface_peek$handle() {
        return g_type_default_interface_peek.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gpointer g_type_default_interface_peek(GType g_type)
     * }
     */
    public static MemorySegment g_type_default_interface_peek$address() {
        return g_type_default_interface_peek.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gpointer g_type_default_interface_peek(GType g_type)
     * }
     */
    public static MemorySegment g_type_default_interface_peek(long g_type) {
        var mh$ = g_type_default_interface_peek.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_default_interface_peek", g_type);
            }
            return (MemorySegment)mh$.invokeExact(g_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_default_interface_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_default_interface_unref");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_default_interface_unref(gpointer g_iface)
     * }
     */
    public static FunctionDescriptor g_type_default_interface_unref$descriptor() {
        return g_type_default_interface_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_default_interface_unref(gpointer g_iface)
     * }
     */
    public static MethodHandle g_type_default_interface_unref$handle() {
        return g_type_default_interface_unref.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_type_default_interface_unref(gpointer g_iface)
     * }
     */
    public static MemorySegment g_type_default_interface_unref$address() {
        return g_type_default_interface_unref.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_type_default_interface_unref(gpointer g_iface)
     * }
     */
    public static void g_type_default_interface_unref(MemorySegment g_iface) {
        var mh$ = g_type_default_interface_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_default_interface_unref", g_iface);
            }
            mh$.invokeExact(g_iface);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_children {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_children");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType *g_type_children(GType type, guint *n_children)
     * }
     */
    public static FunctionDescriptor g_type_children$descriptor() {
        return g_type_children.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType *g_type_children(GType type, guint *n_children)
     * }
     */
    public static MethodHandle g_type_children$handle() {
        return g_type_children.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType *g_type_children(GType type, guint *n_children)
     * }
     */
    public static MemorySegment g_type_children$address() {
        return g_type_children.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType *g_type_children(GType type, guint *n_children)
     * }
     */
    public static MemorySegment g_type_children(long type, MemorySegment n_children) {
        var mh$ = g_type_children.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_children", type, n_children);
            }
            return (MemorySegment)mh$.invokeExact(type, n_children);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_interfaces {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_interfaces");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType *g_type_interfaces(GType type, guint *n_interfaces)
     * }
     */
    public static FunctionDescriptor g_type_interfaces$descriptor() {
        return g_type_interfaces.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType *g_type_interfaces(GType type, guint *n_interfaces)
     * }
     */
    public static MethodHandle g_type_interfaces$handle() {
        return g_type_interfaces.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType *g_type_interfaces(GType type, guint *n_interfaces)
     * }
     */
    public static MemorySegment g_type_interfaces$address() {
        return g_type_interfaces.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType *g_type_interfaces(GType type, guint *n_interfaces)
     * }
     */
    public static MemorySegment g_type_interfaces(long type, MemorySegment n_interfaces) {
        var mh$ = g_type_interfaces.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_interfaces", type, n_interfaces);
            }
            return (MemorySegment)mh$.invokeExact(type, n_interfaces);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_set_qdata {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_LONG,
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_set_qdata");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_set_qdata(GType type, GQuark quark, gpointer data)
     * }
     */
    public static FunctionDescriptor g_type_set_qdata$descriptor() {
        return g_type_set_qdata.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_set_qdata(GType type, GQuark quark, gpointer data)
     * }
     */
    public static MethodHandle g_type_set_qdata$handle() {
        return g_type_set_qdata.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_type_set_qdata(GType type, GQuark quark, gpointer data)
     * }
     */
    public static MemorySegment g_type_set_qdata$address() {
        return g_type_set_qdata.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_type_set_qdata(GType type, GQuark quark, gpointer data)
     * }
     */
    public static void g_type_set_qdata(long type, int quark, MemorySegment data) {
        var mh$ = g_type_set_qdata.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_set_qdata", type, quark, data);
            }
            mh$.invokeExact(type, quark, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_get_qdata {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_get_qdata");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_type_get_qdata(GType type, GQuark quark)
     * }
     */
    public static FunctionDescriptor g_type_get_qdata$descriptor() {
        return g_type_get_qdata.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_type_get_qdata(GType type, GQuark quark)
     * }
     */
    public static MethodHandle g_type_get_qdata$handle() {
        return g_type_get_qdata.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gpointer g_type_get_qdata(GType type, GQuark quark)
     * }
     */
    public static MemorySegment g_type_get_qdata$address() {
        return g_type_get_qdata.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gpointer g_type_get_qdata(GType type, GQuark quark)
     * }
     */
    public static MemorySegment g_type_get_qdata(long type, int quark) {
        var mh$ = g_type_get_qdata.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_get_qdata", type, quark);
            }
            return (MemorySegment)mh$.invokeExact(type, quark);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_query {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_LONG,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_query");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_query(GType type, GTypeQuery *query)
     * }
     */
    public static FunctionDescriptor g_type_query$descriptor() {
        return g_type_query.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_query(GType type, GTypeQuery *query)
     * }
     */
    public static MethodHandle g_type_query$handle() {
        return g_type_query.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_type_query(GType type, GTypeQuery *query)
     * }
     */
    public static MemorySegment g_type_query$address() {
        return g_type_query.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_type_query(GType type, GTypeQuery *query)
     * }
     */
    public static void g_type_query(long type, MemorySegment query) {
        var mh$ = g_type_query.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_query", type, query);
            }
            mh$.invokeExact(type, query);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_get_instance_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_get_instance_count");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int g_type_get_instance_count(GType type)
     * }
     */
    public static FunctionDescriptor g_type_get_instance_count$descriptor() {
        return g_type_get_instance_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int g_type_get_instance_count(GType type)
     * }
     */
    public static MethodHandle g_type_get_instance_count$handle() {
        return g_type_get_instance_count.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int g_type_get_instance_count(GType type)
     * }
     */
    public static MemorySegment g_type_get_instance_count$address() {
        return g_type_get_instance_count.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int g_type_get_instance_count(GType type)
     * }
     */
    public static int g_type_get_instance_count(long type) {
        var mh$ = g_type_get_instance_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_get_instance_count", type);
            }
            return (int)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int G_TYPE_FLAG_CLASSED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TYPE_FLAG_CLASSED = 1
     * }
     */
    public static int G_TYPE_FLAG_CLASSED() {
        return G_TYPE_FLAG_CLASSED;
    }
    private static final int G_TYPE_FLAG_INSTANTIATABLE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TYPE_FLAG_INSTANTIATABLE = 2
     * }
     */
    public static int G_TYPE_FLAG_INSTANTIATABLE() {
        return G_TYPE_FLAG_INSTANTIATABLE;
    }
    private static final int G_TYPE_FLAG_DERIVABLE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TYPE_FLAG_DERIVABLE = 4
     * }
     */
    public static int G_TYPE_FLAG_DERIVABLE() {
        return G_TYPE_FLAG_DERIVABLE;
    }
    private static final int G_TYPE_FLAG_DEEP_DERIVABLE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TYPE_FLAG_DEEP_DERIVABLE = 8
     * }
     */
    public static int G_TYPE_FLAG_DEEP_DERIVABLE() {
        return G_TYPE_FLAG_DEEP_DERIVABLE;
    }
    private static final int G_TYPE_FLAG_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TYPE_FLAG_NONE = 0
     * }
     */
    public static int G_TYPE_FLAG_NONE() {
        return G_TYPE_FLAG_NONE;
    }
    private static final int G_TYPE_FLAG_ABSTRACT = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TYPE_FLAG_ABSTRACT = 16
     * }
     */
    public static int G_TYPE_FLAG_ABSTRACT() {
        return G_TYPE_FLAG_ABSTRACT;
    }
    private static final int G_TYPE_FLAG_VALUE_ABSTRACT = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TYPE_FLAG_VALUE_ABSTRACT = 32
     * }
     */
    public static int G_TYPE_FLAG_VALUE_ABSTRACT() {
        return G_TYPE_FLAG_VALUE_ABSTRACT;
    }
    private static final int G_TYPE_FLAG_FINAL = (int)64L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TYPE_FLAG_FINAL = 64
     * }
     */
    public static int G_TYPE_FLAG_FINAL() {
        return G_TYPE_FLAG_FINAL;
    }
    private static final int G_TYPE_FLAG_DEPRECATED = (int)128L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TYPE_FLAG_DEPRECATED = 128
     * }
     */
    public static int G_TYPE_FLAG_DEPRECATED() {
        return G_TYPE_FLAG_DEPRECATED;
    }

    private static class g_type_register_static {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG,
            VipsRaw.C_LONG,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_register_static");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_type_register_static(GType parent_type, const gchar *type_name, const GTypeInfo *info, GTypeFlags flags)
     * }
     */
    public static FunctionDescriptor g_type_register_static$descriptor() {
        return g_type_register_static.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_type_register_static(GType parent_type, const gchar *type_name, const GTypeInfo *info, GTypeFlags flags)
     * }
     */
    public static MethodHandle g_type_register_static$handle() {
        return g_type_register_static.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType g_type_register_static(GType parent_type, const gchar *type_name, const GTypeInfo *info, GTypeFlags flags)
     * }
     */
    public static MemorySegment g_type_register_static$address() {
        return g_type_register_static.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType g_type_register_static(GType parent_type, const gchar *type_name, const GTypeInfo *info, GTypeFlags flags)
     * }
     */
    public static long g_type_register_static(long parent_type, MemorySegment type_name, MemorySegment info, int flags) {
        var mh$ = g_type_register_static.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_register_static", parent_type, type_name, info, flags);
            }
            return (long)mh$.invokeExact(parent_type, type_name, info, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_register_static_simple {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG,
            VipsRaw.C_LONG,
            VipsRaw.C_POINTER,
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_register_static_simple");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_type_register_static_simple(GType parent_type, const gchar *type_name, guint class_size, GClassInitFunc class_init, guint instance_size, GInstanceInitFunc instance_init, GTypeFlags flags)
     * }
     */
    public static FunctionDescriptor g_type_register_static_simple$descriptor() {
        return g_type_register_static_simple.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_type_register_static_simple(GType parent_type, const gchar *type_name, guint class_size, GClassInitFunc class_init, guint instance_size, GInstanceInitFunc instance_init, GTypeFlags flags)
     * }
     */
    public static MethodHandle g_type_register_static_simple$handle() {
        return g_type_register_static_simple.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType g_type_register_static_simple(GType parent_type, const gchar *type_name, guint class_size, GClassInitFunc class_init, guint instance_size, GInstanceInitFunc instance_init, GTypeFlags flags)
     * }
     */
    public static MemorySegment g_type_register_static_simple$address() {
        return g_type_register_static_simple.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType g_type_register_static_simple(GType parent_type, const gchar *type_name, guint class_size, GClassInitFunc class_init, guint instance_size, GInstanceInitFunc instance_init, GTypeFlags flags)
     * }
     */
    public static long g_type_register_static_simple(long parent_type, MemorySegment type_name, int class_size, MemorySegment class_init, int instance_size, MemorySegment instance_init, int flags) {
        var mh$ = g_type_register_static_simple.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_register_static_simple", parent_type, type_name, class_size, class_init, instance_size, instance_init, flags);
            }
            return (long)mh$.invokeExact(parent_type, type_name, class_size, class_init, instance_size, instance_init, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_register_dynamic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG,
            VipsRaw.C_LONG,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_register_dynamic");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_type_register_dynamic(GType parent_type, const gchar *type_name, GTypePlugin *plugin, GTypeFlags flags)
     * }
     */
    public static FunctionDescriptor g_type_register_dynamic$descriptor() {
        return g_type_register_dynamic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_type_register_dynamic(GType parent_type, const gchar *type_name, GTypePlugin *plugin, GTypeFlags flags)
     * }
     */
    public static MethodHandle g_type_register_dynamic$handle() {
        return g_type_register_dynamic.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType g_type_register_dynamic(GType parent_type, const gchar *type_name, GTypePlugin *plugin, GTypeFlags flags)
     * }
     */
    public static MemorySegment g_type_register_dynamic$address() {
        return g_type_register_dynamic.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType g_type_register_dynamic(GType parent_type, const gchar *type_name, GTypePlugin *plugin, GTypeFlags flags)
     * }
     */
    public static long g_type_register_dynamic(long parent_type, MemorySegment type_name, MemorySegment plugin, int flags) {
        var mh$ = g_type_register_dynamic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_register_dynamic", parent_type, type_name, plugin, flags);
            }
            return (long)mh$.invokeExact(parent_type, type_name, plugin, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_register_fundamental {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG,
            VipsRaw.C_LONG,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_register_fundamental");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_type_register_fundamental(GType type_id, const gchar *type_name, const GTypeInfo *info, const GTypeFundamentalInfo *finfo, GTypeFlags flags)
     * }
     */
    public static FunctionDescriptor g_type_register_fundamental$descriptor() {
        return g_type_register_fundamental.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_type_register_fundamental(GType type_id, const gchar *type_name, const GTypeInfo *info, const GTypeFundamentalInfo *finfo, GTypeFlags flags)
     * }
     */
    public static MethodHandle g_type_register_fundamental$handle() {
        return g_type_register_fundamental.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType g_type_register_fundamental(GType type_id, const gchar *type_name, const GTypeInfo *info, const GTypeFundamentalInfo *finfo, GTypeFlags flags)
     * }
     */
    public static MemorySegment g_type_register_fundamental$address() {
        return g_type_register_fundamental.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType g_type_register_fundamental(GType type_id, const gchar *type_name, const GTypeInfo *info, const GTypeFundamentalInfo *finfo, GTypeFlags flags)
     * }
     */
    public static long g_type_register_fundamental(long type_id, MemorySegment type_name, MemorySegment info, MemorySegment finfo, int flags) {
        var mh$ = g_type_register_fundamental.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_register_fundamental", type_id, type_name, info, finfo, flags);
            }
            return (long)mh$.invokeExact(type_id, type_name, info, finfo, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_add_interface_static {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_LONG,
            VipsRaw.C_LONG,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_add_interface_static");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_add_interface_static(GType instance_type, GType interface_type, const GInterfaceInfo *info)
     * }
     */
    public static FunctionDescriptor g_type_add_interface_static$descriptor() {
        return g_type_add_interface_static.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_add_interface_static(GType instance_type, GType interface_type, const GInterfaceInfo *info)
     * }
     */
    public static MethodHandle g_type_add_interface_static$handle() {
        return g_type_add_interface_static.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_type_add_interface_static(GType instance_type, GType interface_type, const GInterfaceInfo *info)
     * }
     */
    public static MemorySegment g_type_add_interface_static$address() {
        return g_type_add_interface_static.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_type_add_interface_static(GType instance_type, GType interface_type, const GInterfaceInfo *info)
     * }
     */
    public static void g_type_add_interface_static(long instance_type, long interface_type, MemorySegment info) {
        var mh$ = g_type_add_interface_static.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_add_interface_static", instance_type, interface_type, info);
            }
            mh$.invokeExact(instance_type, interface_type, info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_add_interface_dynamic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_LONG,
            VipsRaw.C_LONG,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_add_interface_dynamic");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_add_interface_dynamic(GType instance_type, GType interface_type, GTypePlugin *plugin)
     * }
     */
    public static FunctionDescriptor g_type_add_interface_dynamic$descriptor() {
        return g_type_add_interface_dynamic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_add_interface_dynamic(GType instance_type, GType interface_type, GTypePlugin *plugin)
     * }
     */
    public static MethodHandle g_type_add_interface_dynamic$handle() {
        return g_type_add_interface_dynamic.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_type_add_interface_dynamic(GType instance_type, GType interface_type, GTypePlugin *plugin)
     * }
     */
    public static MemorySegment g_type_add_interface_dynamic$address() {
        return g_type_add_interface_dynamic.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_type_add_interface_dynamic(GType instance_type, GType interface_type, GTypePlugin *plugin)
     * }
     */
    public static void g_type_add_interface_dynamic(long instance_type, long interface_type, MemorySegment plugin) {
        var mh$ = g_type_add_interface_dynamic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_add_interface_dynamic", instance_type, interface_type, plugin);
            }
            mh$.invokeExact(instance_type, interface_type, plugin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_interface_add_prerequisite {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_LONG,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_interface_add_prerequisite");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_interface_add_prerequisite(GType interface_type, GType prerequisite_type)
     * }
     */
    public static FunctionDescriptor g_type_interface_add_prerequisite$descriptor() {
        return g_type_interface_add_prerequisite.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_interface_add_prerequisite(GType interface_type, GType prerequisite_type)
     * }
     */
    public static MethodHandle g_type_interface_add_prerequisite$handle() {
        return g_type_interface_add_prerequisite.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_type_interface_add_prerequisite(GType interface_type, GType prerequisite_type)
     * }
     */
    public static MemorySegment g_type_interface_add_prerequisite$address() {
        return g_type_interface_add_prerequisite.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_type_interface_add_prerequisite(GType interface_type, GType prerequisite_type)
     * }
     */
    public static void g_type_interface_add_prerequisite(long interface_type, long prerequisite_type) {
        var mh$ = g_type_interface_add_prerequisite.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_interface_add_prerequisite", interface_type, prerequisite_type);
            }
            mh$.invokeExact(interface_type, prerequisite_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_interface_prerequisites {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_interface_prerequisites");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType *g_type_interface_prerequisites(GType interface_type, guint *n_prerequisites)
     * }
     */
    public static FunctionDescriptor g_type_interface_prerequisites$descriptor() {
        return g_type_interface_prerequisites.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType *g_type_interface_prerequisites(GType interface_type, guint *n_prerequisites)
     * }
     */
    public static MethodHandle g_type_interface_prerequisites$handle() {
        return g_type_interface_prerequisites.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType *g_type_interface_prerequisites(GType interface_type, guint *n_prerequisites)
     * }
     */
    public static MemorySegment g_type_interface_prerequisites$address() {
        return g_type_interface_prerequisites.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType *g_type_interface_prerequisites(GType interface_type, guint *n_prerequisites)
     * }
     */
    public static MemorySegment g_type_interface_prerequisites(long interface_type, MemorySegment n_prerequisites) {
        var mh$ = g_type_interface_prerequisites.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_interface_prerequisites", interface_type, n_prerequisites);
            }
            return (MemorySegment)mh$.invokeExact(interface_type, n_prerequisites);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_interface_instantiatable_prerequisite {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_interface_instantiatable_prerequisite");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_type_interface_instantiatable_prerequisite(GType interface_type)
     * }
     */
    public static FunctionDescriptor g_type_interface_instantiatable_prerequisite$descriptor() {
        return g_type_interface_instantiatable_prerequisite.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_type_interface_instantiatable_prerequisite(GType interface_type)
     * }
     */
    public static MethodHandle g_type_interface_instantiatable_prerequisite$handle() {
        return g_type_interface_instantiatable_prerequisite.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType g_type_interface_instantiatable_prerequisite(GType interface_type)
     * }
     */
    public static MemorySegment g_type_interface_instantiatable_prerequisite$address() {
        return g_type_interface_instantiatable_prerequisite.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType g_type_interface_instantiatable_prerequisite(GType interface_type)
     * }
     */
    public static long g_type_interface_instantiatable_prerequisite(long interface_type) {
        var mh$ = g_type_interface_instantiatable_prerequisite.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_interface_instantiatable_prerequisite", interface_type);
            }
            return (long)mh$.invokeExact(interface_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_class_add_private {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_class_add_private");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_class_add_private(gpointer g_class, gsize private_size)
     * }
     */
    public static FunctionDescriptor g_type_class_add_private$descriptor() {
        return g_type_class_add_private.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_class_add_private(gpointer g_class, gsize private_size)
     * }
     */
    public static MethodHandle g_type_class_add_private$handle() {
        return g_type_class_add_private.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_type_class_add_private(gpointer g_class, gsize private_size)
     * }
     */
    public static MemorySegment g_type_class_add_private$address() {
        return g_type_class_add_private.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_type_class_add_private(gpointer g_class, gsize private_size)
     * }
     */
    public static void g_type_class_add_private(MemorySegment g_class, long private_size) {
        var mh$ = g_type_class_add_private.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_class_add_private", g_class, private_size);
            }
            mh$.invokeExact(g_class, private_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_add_instance_private {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_LONG,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_add_instance_private");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_type_add_instance_private(GType class_type, gsize private_size)
     * }
     */
    public static FunctionDescriptor g_type_add_instance_private$descriptor() {
        return g_type_add_instance_private.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_type_add_instance_private(GType class_type, gsize private_size)
     * }
     */
    public static MethodHandle g_type_add_instance_private$handle() {
        return g_type_add_instance_private.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gint g_type_add_instance_private(GType class_type, gsize private_size)
     * }
     */
    public static MemorySegment g_type_add_instance_private$address() {
        return g_type_add_instance_private.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gint g_type_add_instance_private(GType class_type, gsize private_size)
     * }
     */
    public static int g_type_add_instance_private(long class_type, long private_size) {
        var mh$ = g_type_add_instance_private.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_add_instance_private", class_type, private_size);
            }
            return (int)mh$.invokeExact(class_type, private_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_instance_get_private {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_instance_get_private");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_type_instance_get_private(GTypeInstance *instance, GType private_type)
     * }
     */
    public static FunctionDescriptor g_type_instance_get_private$descriptor() {
        return g_type_instance_get_private.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_type_instance_get_private(GTypeInstance *instance, GType private_type)
     * }
     */
    public static MethodHandle g_type_instance_get_private$handle() {
        return g_type_instance_get_private.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gpointer g_type_instance_get_private(GTypeInstance *instance, GType private_type)
     * }
     */
    public static MemorySegment g_type_instance_get_private$address() {
        return g_type_instance_get_private.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gpointer g_type_instance_get_private(GTypeInstance *instance, GType private_type)
     * }
     */
    public static MemorySegment g_type_instance_get_private(MemorySegment instance, long private_type) {
        var mh$ = g_type_instance_get_private.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_instance_get_private", instance, private_type);
            }
            return (MemorySegment)mh$.invokeExact(instance, private_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_class_adjust_private_offset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_class_adjust_private_offset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_class_adjust_private_offset(gpointer g_class, gint *private_size_or_offset)
     * }
     */
    public static FunctionDescriptor g_type_class_adjust_private_offset$descriptor() {
        return g_type_class_adjust_private_offset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_class_adjust_private_offset(gpointer g_class, gint *private_size_or_offset)
     * }
     */
    public static MethodHandle g_type_class_adjust_private_offset$handle() {
        return g_type_class_adjust_private_offset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_type_class_adjust_private_offset(gpointer g_class, gint *private_size_or_offset)
     * }
     */
    public static MemorySegment g_type_class_adjust_private_offset$address() {
        return g_type_class_adjust_private_offset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_type_class_adjust_private_offset(gpointer g_class, gint *private_size_or_offset)
     * }
     */
    public static void g_type_class_adjust_private_offset(MemorySegment g_class, MemorySegment private_size_or_offset) {
        var mh$ = g_type_class_adjust_private_offset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_class_adjust_private_offset", g_class, private_size_or_offset);
            }
            mh$.invokeExact(g_class, private_size_or_offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_add_class_private {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_LONG,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_add_class_private");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_add_class_private(GType class_type, gsize private_size)
     * }
     */
    public static FunctionDescriptor g_type_add_class_private$descriptor() {
        return g_type_add_class_private.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_add_class_private(GType class_type, gsize private_size)
     * }
     */
    public static MethodHandle g_type_add_class_private$handle() {
        return g_type_add_class_private.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_type_add_class_private(GType class_type, gsize private_size)
     * }
     */
    public static MemorySegment g_type_add_class_private$address() {
        return g_type_add_class_private.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_type_add_class_private(GType class_type, gsize private_size)
     * }
     */
    public static void g_type_add_class_private(long class_type, long private_size) {
        var mh$ = g_type_add_class_private.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_add_class_private", class_type, private_size);
            }
            mh$.invokeExact(class_type, private_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_class_get_private {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_class_get_private");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_type_class_get_private(GTypeClass *klass, GType private_type)
     * }
     */
    public static FunctionDescriptor g_type_class_get_private$descriptor() {
        return g_type_class_get_private.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_type_class_get_private(GTypeClass *klass, GType private_type)
     * }
     */
    public static MethodHandle g_type_class_get_private$handle() {
        return g_type_class_get_private.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gpointer g_type_class_get_private(GTypeClass *klass, GType private_type)
     * }
     */
    public static MemorySegment g_type_class_get_private$address() {
        return g_type_class_get_private.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gpointer g_type_class_get_private(GTypeClass *klass, GType private_type)
     * }
     */
    public static MemorySegment g_type_class_get_private(MemorySegment klass, long private_type) {
        var mh$ = g_type_class_get_private.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_class_get_private", klass, private_type);
            }
            return (MemorySegment)mh$.invokeExact(klass, private_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_class_get_instance_private_offset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_class_get_instance_private_offset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_type_class_get_instance_private_offset(gpointer g_class)
     * }
     */
    public static FunctionDescriptor g_type_class_get_instance_private_offset$descriptor() {
        return g_type_class_get_instance_private_offset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_type_class_get_instance_private_offset(gpointer g_class)
     * }
     */
    public static MethodHandle g_type_class_get_instance_private_offset$handle() {
        return g_type_class_get_instance_private_offset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gint g_type_class_get_instance_private_offset(gpointer g_class)
     * }
     */
    public static MemorySegment g_type_class_get_instance_private_offset$address() {
        return g_type_class_get_instance_private_offset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gint g_type_class_get_instance_private_offset(gpointer g_class)
     * }
     */
    public static int g_type_class_get_instance_private_offset(MemorySegment g_class) {
        var mh$ = g_type_class_get_instance_private_offset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_class_get_instance_private_offset", g_class);
            }
            return (int)mh$.invokeExact(g_class);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_ensure {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_ensure");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_ensure(GType type)
     * }
     */
    public static FunctionDescriptor g_type_ensure$descriptor() {
        return g_type_ensure.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_ensure(GType type)
     * }
     */
    public static MethodHandle g_type_ensure$handle() {
        return g_type_ensure.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_type_ensure(GType type)
     * }
     */
    public static MemorySegment g_type_ensure$address() {
        return g_type_ensure.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_type_ensure(GType type)
     * }
     */
    public static void g_type_ensure(long type) {
        var mh$ = g_type_ensure.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_ensure", type);
            }
            mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_get_type_registration_serial {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_get_type_registration_serial");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_type_get_type_registration_serial()
     * }
     */
    public static FunctionDescriptor g_type_get_type_registration_serial$descriptor() {
        return g_type_get_type_registration_serial.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_type_get_type_registration_serial()
     * }
     */
    public static MethodHandle g_type_get_type_registration_serial$handle() {
        return g_type_get_type_registration_serial.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern guint g_type_get_type_registration_serial()
     * }
     */
    public static MemorySegment g_type_get_type_registration_serial$address() {
        return g_type_get_type_registration_serial.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern guint g_type_get_type_registration_serial()
     * }
     */
    public static int g_type_get_type_registration_serial() {
        var mh$ = g_type_get_type_registration_serial.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_get_type_registration_serial");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_get_plugin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_get_plugin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTypePlugin *g_type_get_plugin(GType type)
     * }
     */
    public static FunctionDescriptor g_type_get_plugin$descriptor() {
        return g_type_get_plugin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTypePlugin *g_type_get_plugin(GType type)
     * }
     */
    public static MethodHandle g_type_get_plugin$handle() {
        return g_type_get_plugin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GTypePlugin *g_type_get_plugin(GType type)
     * }
     */
    public static MemorySegment g_type_get_plugin$address() {
        return g_type_get_plugin.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GTypePlugin *g_type_get_plugin(GType type)
     * }
     */
    public static MemorySegment g_type_get_plugin(long type) {
        var mh$ = g_type_get_plugin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_get_plugin", type);
            }
            return (MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_interface_get_plugin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_interface_get_plugin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTypePlugin *g_type_interface_get_plugin(GType instance_type, GType interface_type)
     * }
     */
    public static FunctionDescriptor g_type_interface_get_plugin$descriptor() {
        return g_type_interface_get_plugin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTypePlugin *g_type_interface_get_plugin(GType instance_type, GType interface_type)
     * }
     */
    public static MethodHandle g_type_interface_get_plugin$handle() {
        return g_type_interface_get_plugin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GTypePlugin *g_type_interface_get_plugin(GType instance_type, GType interface_type)
     * }
     */
    public static MemorySegment g_type_interface_get_plugin$address() {
        return g_type_interface_get_plugin.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GTypePlugin *g_type_interface_get_plugin(GType instance_type, GType interface_type)
     * }
     */
    public static MemorySegment g_type_interface_get_plugin(long instance_type, long interface_type) {
        var mh$ = g_type_interface_get_plugin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_interface_get_plugin", instance_type, interface_type);
            }
            return (MemorySegment)mh$.invokeExact(instance_type, interface_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_fundamental_next {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_fundamental_next");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_type_fundamental_next()
     * }
     */
    public static FunctionDescriptor g_type_fundamental_next$descriptor() {
        return g_type_fundamental_next.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_type_fundamental_next()
     * }
     */
    public static MethodHandle g_type_fundamental_next$handle() {
        return g_type_fundamental_next.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType g_type_fundamental_next()
     * }
     */
    public static MemorySegment g_type_fundamental_next$address() {
        return g_type_fundamental_next.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType g_type_fundamental_next()
     * }
     */
    public static long g_type_fundamental_next() {
        var mh$ = g_type_fundamental_next.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_fundamental_next");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_fundamental {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_fundamental");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_type_fundamental(GType type_id)
     * }
     */
    public static FunctionDescriptor g_type_fundamental$descriptor() {
        return g_type_fundamental.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_type_fundamental(GType type_id)
     * }
     */
    public static MethodHandle g_type_fundamental$handle() {
        return g_type_fundamental.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType g_type_fundamental(GType type_id)
     * }
     */
    public static MemorySegment g_type_fundamental$address() {
        return g_type_fundamental.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType g_type_fundamental(GType type_id)
     * }
     */
    public static long g_type_fundamental(long type_id) {
        var mh$ = g_type_fundamental.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_fundamental", type_id);
            }
            return (long)mh$.invokeExact(type_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_create_instance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_create_instance");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTypeInstance *g_type_create_instance(GType type)
     * }
     */
    public static FunctionDescriptor g_type_create_instance$descriptor() {
        return g_type_create_instance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTypeInstance *g_type_create_instance(GType type)
     * }
     */
    public static MethodHandle g_type_create_instance$handle() {
        return g_type_create_instance.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GTypeInstance *g_type_create_instance(GType type)
     * }
     */
    public static MemorySegment g_type_create_instance$address() {
        return g_type_create_instance.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GTypeInstance *g_type_create_instance(GType type)
     * }
     */
    public static MemorySegment g_type_create_instance(long type) {
        var mh$ = g_type_create_instance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_create_instance", type);
            }
            return (MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_free_instance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_free_instance");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_free_instance(GTypeInstance *instance)
     * }
     */
    public static FunctionDescriptor g_type_free_instance$descriptor() {
        return g_type_free_instance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_free_instance(GTypeInstance *instance)
     * }
     */
    public static MethodHandle g_type_free_instance$handle() {
        return g_type_free_instance.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_type_free_instance(GTypeInstance *instance)
     * }
     */
    public static MemorySegment g_type_free_instance$address() {
        return g_type_free_instance.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_type_free_instance(GTypeInstance *instance)
     * }
     */
    public static void g_type_free_instance(MemorySegment instance) {
        var mh$ = g_type_free_instance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_free_instance", instance);
            }
            mh$.invokeExact(instance);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_add_class_cache_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_add_class_cache_func");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_add_class_cache_func(gpointer cache_data, GTypeClassCacheFunc cache_func)
     * }
     */
    public static FunctionDescriptor g_type_add_class_cache_func$descriptor() {
        return g_type_add_class_cache_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_add_class_cache_func(gpointer cache_data, GTypeClassCacheFunc cache_func)
     * }
     */
    public static MethodHandle g_type_add_class_cache_func$handle() {
        return g_type_add_class_cache_func.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_type_add_class_cache_func(gpointer cache_data, GTypeClassCacheFunc cache_func)
     * }
     */
    public static MemorySegment g_type_add_class_cache_func$address() {
        return g_type_add_class_cache_func.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_type_add_class_cache_func(gpointer cache_data, GTypeClassCacheFunc cache_func)
     * }
     */
    public static void g_type_add_class_cache_func(MemorySegment cache_data, MemorySegment cache_func) {
        var mh$ = g_type_add_class_cache_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_add_class_cache_func", cache_data, cache_func);
            }
            mh$.invokeExact(cache_data, cache_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_remove_class_cache_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_remove_class_cache_func");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_remove_class_cache_func(gpointer cache_data, GTypeClassCacheFunc cache_func)
     * }
     */
    public static FunctionDescriptor g_type_remove_class_cache_func$descriptor() {
        return g_type_remove_class_cache_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_remove_class_cache_func(gpointer cache_data, GTypeClassCacheFunc cache_func)
     * }
     */
    public static MethodHandle g_type_remove_class_cache_func$handle() {
        return g_type_remove_class_cache_func.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_type_remove_class_cache_func(gpointer cache_data, GTypeClassCacheFunc cache_func)
     * }
     */
    public static MemorySegment g_type_remove_class_cache_func$address() {
        return g_type_remove_class_cache_func.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_type_remove_class_cache_func(gpointer cache_data, GTypeClassCacheFunc cache_func)
     * }
     */
    public static void g_type_remove_class_cache_func(MemorySegment cache_data, MemorySegment cache_func) {
        var mh$ = g_type_remove_class_cache_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_remove_class_cache_func", cache_data, cache_func);
            }
            mh$.invokeExact(cache_data, cache_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_class_unref_uncached {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_class_unref_uncached");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_class_unref_uncached(gpointer g_class)
     * }
     */
    public static FunctionDescriptor g_type_class_unref_uncached$descriptor() {
        return g_type_class_unref_uncached.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_class_unref_uncached(gpointer g_class)
     * }
     */
    public static MethodHandle g_type_class_unref_uncached$handle() {
        return g_type_class_unref_uncached.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_type_class_unref_uncached(gpointer g_class)
     * }
     */
    public static MemorySegment g_type_class_unref_uncached$address() {
        return g_type_class_unref_uncached.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_type_class_unref_uncached(gpointer g_class)
     * }
     */
    public static void g_type_class_unref_uncached(MemorySegment g_class) {
        var mh$ = g_type_class_unref_uncached.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_class_unref_uncached", g_class);
            }
            mh$.invokeExact(g_class);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_add_interface_check {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_add_interface_check");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_add_interface_check(gpointer check_data, GTypeInterfaceCheckFunc check_func)
     * }
     */
    public static FunctionDescriptor g_type_add_interface_check$descriptor() {
        return g_type_add_interface_check.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_add_interface_check(gpointer check_data, GTypeInterfaceCheckFunc check_func)
     * }
     */
    public static MethodHandle g_type_add_interface_check$handle() {
        return g_type_add_interface_check.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_type_add_interface_check(gpointer check_data, GTypeInterfaceCheckFunc check_func)
     * }
     */
    public static MemorySegment g_type_add_interface_check$address() {
        return g_type_add_interface_check.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_type_add_interface_check(gpointer check_data, GTypeInterfaceCheckFunc check_func)
     * }
     */
    public static void g_type_add_interface_check(MemorySegment check_data, MemorySegment check_func) {
        var mh$ = g_type_add_interface_check.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_add_interface_check", check_data, check_func);
            }
            mh$.invokeExact(check_data, check_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_remove_interface_check {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_remove_interface_check");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_remove_interface_check(gpointer check_data, GTypeInterfaceCheckFunc check_func)
     * }
     */
    public static FunctionDescriptor g_type_remove_interface_check$descriptor() {
        return g_type_remove_interface_check.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_remove_interface_check(gpointer check_data, GTypeInterfaceCheckFunc check_func)
     * }
     */
    public static MethodHandle g_type_remove_interface_check$handle() {
        return g_type_remove_interface_check.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_type_remove_interface_check(gpointer check_data, GTypeInterfaceCheckFunc check_func)
     * }
     */
    public static MemorySegment g_type_remove_interface_check$address() {
        return g_type_remove_interface_check.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_type_remove_interface_check(gpointer check_data, GTypeInterfaceCheckFunc check_func)
     * }
     */
    public static void g_type_remove_interface_check(MemorySegment check_data, MemorySegment check_func) {
        var mh$ = g_type_remove_interface_check.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_remove_interface_check", check_data, check_func);
            }
            mh$.invokeExact(check_data, check_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_value_table_peek {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_value_table_peek");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTypeValueTable *g_type_value_table_peek(GType type)
     * }
     */
    public static FunctionDescriptor g_type_value_table_peek$descriptor() {
        return g_type_value_table_peek.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTypeValueTable *g_type_value_table_peek(GType type)
     * }
     */
    public static MethodHandle g_type_value_table_peek$handle() {
        return g_type_value_table_peek.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GTypeValueTable *g_type_value_table_peek(GType type)
     * }
     */
    public static MemorySegment g_type_value_table_peek$address() {
        return g_type_value_table_peek.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GTypeValueTable *g_type_value_table_peek(GType type)
     * }
     */
    public static MemorySegment g_type_value_table_peek(long type) {
        var mh$ = g_type_value_table_peek.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_value_table_peek", type);
            }
            return (MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_check_instance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_check_instance");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_type_check_instance(GTypeInstance *instance)
     * }
     */
    public static FunctionDescriptor g_type_check_instance$descriptor() {
        return g_type_check_instance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_type_check_instance(GTypeInstance *instance)
     * }
     */
    public static MethodHandle g_type_check_instance$handle() {
        return g_type_check_instance.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean g_type_check_instance(GTypeInstance *instance)
     * }
     */
    public static MemorySegment g_type_check_instance$address() {
        return g_type_check_instance.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean g_type_check_instance(GTypeInstance *instance)
     * }
     */
    public static int g_type_check_instance(MemorySegment instance) {
        var mh$ = g_type_check_instance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_check_instance", instance);
            }
            return (int)mh$.invokeExact(instance);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_check_instance_cast {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_check_instance_cast");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTypeInstance *g_type_check_instance_cast(GTypeInstance *instance, GType iface_type)
     * }
     */
    public static FunctionDescriptor g_type_check_instance_cast$descriptor() {
        return g_type_check_instance_cast.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTypeInstance *g_type_check_instance_cast(GTypeInstance *instance, GType iface_type)
     * }
     */
    public static MethodHandle g_type_check_instance_cast$handle() {
        return g_type_check_instance_cast.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GTypeInstance *g_type_check_instance_cast(GTypeInstance *instance, GType iface_type)
     * }
     */
    public static MemorySegment g_type_check_instance_cast$address() {
        return g_type_check_instance_cast.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GTypeInstance *g_type_check_instance_cast(GTypeInstance *instance, GType iface_type)
     * }
     */
    public static MemorySegment g_type_check_instance_cast(MemorySegment instance, long iface_type) {
        var mh$ = g_type_check_instance_cast.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_check_instance_cast", instance, iface_type);
            }
            return (MemorySegment)mh$.invokeExact(instance, iface_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_check_instance_is_a {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_check_instance_is_a");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_type_check_instance_is_a(GTypeInstance *instance, GType iface_type)
     * }
     */
    public static FunctionDescriptor g_type_check_instance_is_a$descriptor() {
        return g_type_check_instance_is_a.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_type_check_instance_is_a(GTypeInstance *instance, GType iface_type)
     * }
     */
    public static MethodHandle g_type_check_instance_is_a$handle() {
        return g_type_check_instance_is_a.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean g_type_check_instance_is_a(GTypeInstance *instance, GType iface_type)
     * }
     */
    public static MemorySegment g_type_check_instance_is_a$address() {
        return g_type_check_instance_is_a.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean g_type_check_instance_is_a(GTypeInstance *instance, GType iface_type)
     * }
     */
    public static int g_type_check_instance_is_a(MemorySegment instance, long iface_type) {
        var mh$ = g_type_check_instance_is_a.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_check_instance_is_a", instance, iface_type);
            }
            return (int)mh$.invokeExact(instance, iface_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_check_instance_is_fundamentally_a {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_check_instance_is_fundamentally_a");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_type_check_instance_is_fundamentally_a(GTypeInstance *instance, GType fundamental_type)
     * }
     */
    public static FunctionDescriptor g_type_check_instance_is_fundamentally_a$descriptor() {
        return g_type_check_instance_is_fundamentally_a.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_type_check_instance_is_fundamentally_a(GTypeInstance *instance, GType fundamental_type)
     * }
     */
    public static MethodHandle g_type_check_instance_is_fundamentally_a$handle() {
        return g_type_check_instance_is_fundamentally_a.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean g_type_check_instance_is_fundamentally_a(GTypeInstance *instance, GType fundamental_type)
     * }
     */
    public static MemorySegment g_type_check_instance_is_fundamentally_a$address() {
        return g_type_check_instance_is_fundamentally_a.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean g_type_check_instance_is_fundamentally_a(GTypeInstance *instance, GType fundamental_type)
     * }
     */
    public static int g_type_check_instance_is_fundamentally_a(MemorySegment instance, long fundamental_type) {
        var mh$ = g_type_check_instance_is_fundamentally_a.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_check_instance_is_fundamentally_a", instance, fundamental_type);
            }
            return (int)mh$.invokeExact(instance, fundamental_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_check_class_cast {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_check_class_cast");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTypeClass *g_type_check_class_cast(GTypeClass *g_class, GType is_a_type)
     * }
     */
    public static FunctionDescriptor g_type_check_class_cast$descriptor() {
        return g_type_check_class_cast.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTypeClass *g_type_check_class_cast(GTypeClass *g_class, GType is_a_type)
     * }
     */
    public static MethodHandle g_type_check_class_cast$handle() {
        return g_type_check_class_cast.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GTypeClass *g_type_check_class_cast(GTypeClass *g_class, GType is_a_type)
     * }
     */
    public static MemorySegment g_type_check_class_cast$address() {
        return g_type_check_class_cast.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GTypeClass *g_type_check_class_cast(GTypeClass *g_class, GType is_a_type)
     * }
     */
    public static MemorySegment g_type_check_class_cast(MemorySegment g_class, long is_a_type) {
        var mh$ = g_type_check_class_cast.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_check_class_cast", g_class, is_a_type);
            }
            return (MemorySegment)mh$.invokeExact(g_class, is_a_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_check_class_is_a {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_check_class_is_a");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_type_check_class_is_a(GTypeClass *g_class, GType is_a_type)
     * }
     */
    public static FunctionDescriptor g_type_check_class_is_a$descriptor() {
        return g_type_check_class_is_a.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_type_check_class_is_a(GTypeClass *g_class, GType is_a_type)
     * }
     */
    public static MethodHandle g_type_check_class_is_a$handle() {
        return g_type_check_class_is_a.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean g_type_check_class_is_a(GTypeClass *g_class, GType is_a_type)
     * }
     */
    public static MemorySegment g_type_check_class_is_a$address() {
        return g_type_check_class_is_a.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean g_type_check_class_is_a(GTypeClass *g_class, GType is_a_type)
     * }
     */
    public static int g_type_check_class_is_a(MemorySegment g_class, long is_a_type) {
        var mh$ = g_type_check_class_is_a.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_check_class_is_a", g_class, is_a_type);
            }
            return (int)mh$.invokeExact(g_class, is_a_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_check_is_value_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_check_is_value_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_type_check_is_value_type(GType type)
     * }
     */
    public static FunctionDescriptor g_type_check_is_value_type$descriptor() {
        return g_type_check_is_value_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_type_check_is_value_type(GType type)
     * }
     */
    public static MethodHandle g_type_check_is_value_type$handle() {
        return g_type_check_is_value_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean g_type_check_is_value_type(GType type)
     * }
     */
    public static MemorySegment g_type_check_is_value_type$address() {
        return g_type_check_is_value_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean g_type_check_is_value_type(GType type)
     * }
     */
    public static int g_type_check_is_value_type(long type) {
        var mh$ = g_type_check_is_value_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_check_is_value_type", type);
            }
            return (int)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_check_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_check_value");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_type_check_value(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_type_check_value$descriptor() {
        return g_type_check_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_type_check_value(const GValue *value)
     * }
     */
    public static MethodHandle g_type_check_value$handle() {
        return g_type_check_value.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean g_type_check_value(const GValue *value)
     * }
     */
    public static MemorySegment g_type_check_value$address() {
        return g_type_check_value.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean g_type_check_value(const GValue *value)
     * }
     */
    public static int g_type_check_value(MemorySegment value) {
        var mh$ = g_type_check_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_check_value", value);
            }
            return (int)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_check_value_holds {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_check_value_holds");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_type_check_value_holds(const GValue *value, GType type)
     * }
     */
    public static FunctionDescriptor g_type_check_value_holds$descriptor() {
        return g_type_check_value_holds.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_type_check_value_holds(const GValue *value, GType type)
     * }
     */
    public static MethodHandle g_type_check_value_holds$handle() {
        return g_type_check_value_holds.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean g_type_check_value_holds(const GValue *value, GType type)
     * }
     */
    public static MemorySegment g_type_check_value_holds$address() {
        return g_type_check_value_holds.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean g_type_check_value_holds(const GValue *value, GType type)
     * }
     */
    public static int g_type_check_value_holds(MemorySegment value, long type) {
        var mh$ = g_type_check_value_holds.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_check_value_holds", value, type);
            }
            return (int)mh$.invokeExact(value, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_test_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_LONG,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_test_flags");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_type_test_flags(GType type, guint flags)
     * }
     */
    public static FunctionDescriptor g_type_test_flags$descriptor() {
        return g_type_test_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_type_test_flags(GType type, guint flags)
     * }
     */
    public static MethodHandle g_type_test_flags$handle() {
        return g_type_test_flags.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean g_type_test_flags(GType type, guint flags)
     * }
     */
    public static MemorySegment g_type_test_flags$address() {
        return g_type_test_flags.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean g_type_test_flags(GType type, guint flags)
     * }
     */
    public static int g_type_test_flags(long type, int flags) {
        var mh$ = g_type_test_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_test_flags", type, flags);
            }
            return (int)mh$.invokeExact(type, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_name_from_instance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_name_from_instance");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_type_name_from_instance(GTypeInstance *instance)
     * }
     */
    public static FunctionDescriptor g_type_name_from_instance$descriptor() {
        return g_type_name_from_instance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_type_name_from_instance(GTypeInstance *instance)
     * }
     */
    public static MethodHandle g_type_name_from_instance$handle() {
        return g_type_name_from_instance.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const gchar *g_type_name_from_instance(GTypeInstance *instance)
     * }
     */
    public static MemorySegment g_type_name_from_instance$address() {
        return g_type_name_from_instance.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const gchar *g_type_name_from_instance(GTypeInstance *instance)
     * }
     */
    public static MemorySegment g_type_name_from_instance(MemorySegment instance) {
        var mh$ = g_type_name_from_instance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_name_from_instance", instance);
            }
            return (MemorySegment)mh$.invokeExact(instance);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_name_from_class {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_name_from_class");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_type_name_from_class(GTypeClass *g_class)
     * }
     */
    public static FunctionDescriptor g_type_name_from_class$descriptor() {
        return g_type_name_from_class.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_type_name_from_class(GTypeClass *g_class)
     * }
     */
    public static MethodHandle g_type_name_from_class$handle() {
        return g_type_name_from_class.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const gchar *g_type_name_from_class(GTypeClass *g_class)
     * }
     */
    public static MemorySegment g_type_name_from_class$address() {
        return g_type_name_from_class.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const gchar *g_type_name_from_class(GTypeClass *g_class)
     * }
     */
    public static MemorySegment g_type_name_from_class(MemorySegment g_class) {
        var mh$ = g_type_name_from_class.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_name_from_class", g_class);
            }
            return (MemorySegment)mh$.invokeExact(g_class);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_init");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GValue *g_value_init(GValue *value, GType g_type)
     * }
     */
    public static FunctionDescriptor g_value_init$descriptor() {
        return g_value_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GValue *g_value_init(GValue *value, GType g_type)
     * }
     */
    public static MethodHandle g_value_init$handle() {
        return g_value_init.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GValue *g_value_init(GValue *value, GType g_type)
     * }
     */
    public static MemorySegment g_value_init$address() {
        return g_value_init.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GValue *g_value_init(GValue *value, GType g_type)
     * }
     */
    public static MemorySegment g_value_init(MemorySegment value, long g_type) {
        var mh$ = g_value_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_init", value, g_type);
            }
            return (MemorySegment)mh$.invokeExact(value, g_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_copy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_copy(const GValue *src_value, GValue *dest_value)
     * }
     */
    public static FunctionDescriptor g_value_copy$descriptor() {
        return g_value_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_copy(const GValue *src_value, GValue *dest_value)
     * }
     */
    public static MethodHandle g_value_copy$handle() {
        return g_value_copy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_value_copy(const GValue *src_value, GValue *dest_value)
     * }
     */
    public static MemorySegment g_value_copy$address() {
        return g_value_copy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_value_copy(const GValue *src_value, GValue *dest_value)
     * }
     */
    public static void g_value_copy(MemorySegment src_value, MemorySegment dest_value) {
        var mh$ = g_value_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_copy", src_value, dest_value);
            }
            mh$.invokeExact(src_value, dest_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_reset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_reset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GValue *g_value_reset(GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_reset$descriptor() {
        return g_value_reset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GValue *g_value_reset(GValue *value)
     * }
     */
    public static MethodHandle g_value_reset$handle() {
        return g_value_reset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GValue *g_value_reset(GValue *value)
     * }
     */
    public static MemorySegment g_value_reset$address() {
        return g_value_reset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GValue *g_value_reset(GValue *value)
     * }
     */
    public static MemorySegment g_value_reset(MemorySegment value) {
        var mh$ = g_value_reset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_reset", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_unset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_unset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_unset(GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_unset$descriptor() {
        return g_value_unset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_unset(GValue *value)
     * }
     */
    public static MethodHandle g_value_unset$handle() {
        return g_value_unset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_value_unset(GValue *value)
     * }
     */
    public static MemorySegment g_value_unset$address() {
        return g_value_unset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_value_unset(GValue *value)
     * }
     */
    public static void g_value_unset(MemorySegment value) {
        var mh$ = g_value_unset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_unset", value);
            }
            mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_instance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_set_instance");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_instance(GValue *value, gpointer instance)
     * }
     */
    public static FunctionDescriptor g_value_set_instance$descriptor() {
        return g_value_set_instance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_instance(GValue *value, gpointer instance)
     * }
     */
    public static MethodHandle g_value_set_instance$handle() {
        return g_value_set_instance.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_value_set_instance(GValue *value, gpointer instance)
     * }
     */
    public static MemorySegment g_value_set_instance$address() {
        return g_value_set_instance.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_value_set_instance(GValue *value, gpointer instance)
     * }
     */
    public static void g_value_set_instance(MemorySegment value, MemorySegment instance) {
        var mh$ = g_value_set_instance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_instance", value, instance);
            }
            mh$.invokeExact(value, instance);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_init_from_instance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_init_from_instance");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_init_from_instance(GValue *value, gpointer instance)
     * }
     */
    public static FunctionDescriptor g_value_init_from_instance$descriptor() {
        return g_value_init_from_instance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_init_from_instance(GValue *value, gpointer instance)
     * }
     */
    public static MethodHandle g_value_init_from_instance$handle() {
        return g_value_init_from_instance.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_value_init_from_instance(GValue *value, gpointer instance)
     * }
     */
    public static MemorySegment g_value_init_from_instance$address() {
        return g_value_init_from_instance.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_value_init_from_instance(GValue *value, gpointer instance)
     * }
     */
    public static void g_value_init_from_instance(MemorySegment value, MemorySegment instance) {
        var mh$ = g_value_init_from_instance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_init_from_instance", value, instance);
            }
            mh$.invokeExact(value, instance);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_fits_pointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_fits_pointer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_value_fits_pointer(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_fits_pointer$descriptor() {
        return g_value_fits_pointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_value_fits_pointer(const GValue *value)
     * }
     */
    public static MethodHandle g_value_fits_pointer$handle() {
        return g_value_fits_pointer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean g_value_fits_pointer(const GValue *value)
     * }
     */
    public static MemorySegment g_value_fits_pointer$address() {
        return g_value_fits_pointer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean g_value_fits_pointer(const GValue *value)
     * }
     */
    public static int g_value_fits_pointer(MemorySegment value) {
        var mh$ = g_value_fits_pointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_fits_pointer", value);
            }
            return (int)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_peek_pointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_peek_pointer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_value_peek_pointer(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_peek_pointer$descriptor() {
        return g_value_peek_pointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_value_peek_pointer(const GValue *value)
     * }
     */
    public static MethodHandle g_value_peek_pointer$handle() {
        return g_value_peek_pointer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gpointer g_value_peek_pointer(const GValue *value)
     * }
     */
    public static MemorySegment g_value_peek_pointer$address() {
        return g_value_peek_pointer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gpointer g_value_peek_pointer(const GValue *value)
     * }
     */
    public static MemorySegment g_value_peek_pointer(MemorySegment value) {
        var mh$ = g_value_peek_pointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_peek_pointer", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_type_compatible {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_LONG,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_type_compatible");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_value_type_compatible(GType src_type, GType dest_type)
     * }
     */
    public static FunctionDescriptor g_value_type_compatible$descriptor() {
        return g_value_type_compatible.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_value_type_compatible(GType src_type, GType dest_type)
     * }
     */
    public static MethodHandle g_value_type_compatible$handle() {
        return g_value_type_compatible.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean g_value_type_compatible(GType src_type, GType dest_type)
     * }
     */
    public static MemorySegment g_value_type_compatible$address() {
        return g_value_type_compatible.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean g_value_type_compatible(GType src_type, GType dest_type)
     * }
     */
    public static int g_value_type_compatible(long src_type, long dest_type) {
        var mh$ = g_value_type_compatible.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_type_compatible", src_type, dest_type);
            }
            return (int)mh$.invokeExact(src_type, dest_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_type_transformable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_LONG,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_type_transformable");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_value_type_transformable(GType src_type, GType dest_type)
     * }
     */
    public static FunctionDescriptor g_value_type_transformable$descriptor() {
        return g_value_type_transformable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_value_type_transformable(GType src_type, GType dest_type)
     * }
     */
    public static MethodHandle g_value_type_transformable$handle() {
        return g_value_type_transformable.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean g_value_type_transformable(GType src_type, GType dest_type)
     * }
     */
    public static MemorySegment g_value_type_transformable$address() {
        return g_value_type_transformable.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean g_value_type_transformable(GType src_type, GType dest_type)
     * }
     */
    public static int g_value_type_transformable(long src_type, long dest_type) {
        var mh$ = g_value_type_transformable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_type_transformable", src_type, dest_type);
            }
            return (int)mh$.invokeExact(src_type, dest_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_transform {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_transform");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_value_transform(const GValue *src_value, GValue *dest_value)
     * }
     */
    public static FunctionDescriptor g_value_transform$descriptor() {
        return g_value_transform.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_value_transform(const GValue *src_value, GValue *dest_value)
     * }
     */
    public static MethodHandle g_value_transform$handle() {
        return g_value_transform.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean g_value_transform(const GValue *src_value, GValue *dest_value)
     * }
     */
    public static MemorySegment g_value_transform$address() {
        return g_value_transform.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean g_value_transform(const GValue *src_value, GValue *dest_value)
     * }
     */
    public static int g_value_transform(MemorySegment src_value, MemorySegment dest_value) {
        var mh$ = g_value_transform.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_transform", src_value, dest_value);
            }
            return (int)mh$.invokeExact(src_value, dest_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_register_transform_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_LONG,
            VipsRaw.C_LONG,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_register_transform_func");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_register_transform_func(GType src_type, GType dest_type, GValueTransform transform_func)
     * }
     */
    public static FunctionDescriptor g_value_register_transform_func$descriptor() {
        return g_value_register_transform_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_register_transform_func(GType src_type, GType dest_type, GValueTransform transform_func)
     * }
     */
    public static MethodHandle g_value_register_transform_func$handle() {
        return g_value_register_transform_func.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_value_register_transform_func(GType src_type, GType dest_type, GValueTransform transform_func)
     * }
     */
    public static MemorySegment g_value_register_transform_func$address() {
        return g_value_register_transform_func.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_value_register_transform_func(GType src_type, GType dest_type, GValueTransform transform_func)
     * }
     */
    public static void g_value_register_transform_func(long src_type, long dest_type, MemorySegment transform_func) {
        var mh$ = g_value_register_transform_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_register_transform_func", src_type, dest_type, transform_func);
            }
            mh$.invokeExact(src_type, dest_type, transform_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_spec_get_blurb {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_param_spec_get_blurb");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_param_spec_get_blurb(GParamSpec *pspec)
     * }
     */
    public static FunctionDescriptor g_param_spec_get_blurb$descriptor() {
        return g_param_spec_get_blurb.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_param_spec_get_blurb(GParamSpec *pspec)
     * }
     */
    public static MethodHandle g_param_spec_get_blurb$handle() {
        return g_param_spec_get_blurb.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const gchar *g_param_spec_get_blurb(GParamSpec *pspec)
     * }
     */
    public static MemorySegment g_param_spec_get_blurb$address() {
        return g_param_spec_get_blurb.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const gchar *g_param_spec_get_blurb(GParamSpec *pspec)
     * }
     */
    public static MemorySegment g_param_spec_get_blurb(MemorySegment pspec) {
        var mh$ = g_param_spec_get_blurb.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_spec_get_blurb", pspec);
            }
            return (MemorySegment)mh$.invokeExact(pspec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_param {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_set_param");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_param(GValue *value, GParamSpec *param)
     * }
     */
    public static FunctionDescriptor g_value_set_param$descriptor() {
        return g_value_set_param.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_param(GValue *value, GParamSpec *param)
     * }
     */
    public static MethodHandle g_value_set_param$handle() {
        return g_value_set_param.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_value_set_param(GValue *value, GParamSpec *param)
     * }
     */
    public static MemorySegment g_value_set_param$address() {
        return g_value_set_param.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_value_set_param(GValue *value, GParamSpec *param)
     * }
     */
    public static void g_value_set_param(MemorySegment value, MemorySegment param) {
        var mh$ = g_value_set_param.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_param", value, param);
            }
            mh$.invokeExact(value, param);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_get_param {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_get_param");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GParamSpec *g_value_get_param(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_get_param$descriptor() {
        return g_value_get_param.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GParamSpec *g_value_get_param(const GValue *value)
     * }
     */
    public static MethodHandle g_value_get_param$handle() {
        return g_value_get_param.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GParamSpec *g_value_get_param(const GValue *value)
     * }
     */
    public static MemorySegment g_value_get_param$address() {
        return g_value_get_param.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GParamSpec *g_value_get_param(const GValue *value)
     * }
     */
    public static MemorySegment g_value_get_param(MemorySegment value) {
        var mh$ = g_value_get_param.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_get_param", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_dup_param {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_dup_param");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GParamSpec *g_value_dup_param(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_dup_param$descriptor() {
        return g_value_dup_param.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GParamSpec *g_value_dup_param(const GValue *value)
     * }
     */
    public static MethodHandle g_value_dup_param$handle() {
        return g_value_dup_param.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GParamSpec *g_value_dup_param(const GValue *value)
     * }
     */
    public static MemorySegment g_value_dup_param$address() {
        return g_value_dup_param.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GParamSpec *g_value_dup_param(const GValue *value)
     * }
     */
    public static MemorySegment g_value_dup_param(MemorySegment value) {
        var mh$ = g_value_dup_param.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_dup_param", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_take_param {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_take_param");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_take_param(GValue *value, GParamSpec *param)
     * }
     */
    public static FunctionDescriptor g_value_take_param$descriptor() {
        return g_value_take_param.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_take_param(GValue *value, GParamSpec *param)
     * }
     */
    public static MethodHandle g_value_take_param$handle() {
        return g_value_take_param.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_value_take_param(GValue *value, GParamSpec *param)
     * }
     */
    public static MemorySegment g_value_take_param$address() {
        return g_value_take_param.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_value_take_param(GValue *value, GParamSpec *param)
     * }
     */
    public static void g_value_take_param(MemorySegment value, MemorySegment param) {
        var mh$ = g_value_take_param.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_take_param", value, param);
            }
            mh$.invokeExact(value, param);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_param_take_ownership {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_set_param_take_ownership");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_param_take_ownership(GValue *value, GParamSpec *param)
     * }
     */
    public static FunctionDescriptor g_value_set_param_take_ownership$descriptor() {
        return g_value_set_param_take_ownership.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_param_take_ownership(GValue *value, GParamSpec *param)
     * }
     */
    public static MethodHandle g_value_set_param_take_ownership$handle() {
        return g_value_set_param_take_ownership.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_value_set_param_take_ownership(GValue *value, GParamSpec *param)
     * }
     */
    public static MemorySegment g_value_set_param_take_ownership$address() {
        return g_value_set_param_take_ownership.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_value_set_param_take_ownership(GValue *value, GParamSpec *param)
     * }
     */
    public static void g_value_set_param_take_ownership(MemorySegment value, MemorySegment param) {
        var mh$ = g_value_set_param_take_ownership.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_param_take_ownership", value, param);
            }
            mh$.invokeExact(value, param);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_boxed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_set_boxed");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_boxed(GValue *value, gconstpointer v_boxed)
     * }
     */
    public static FunctionDescriptor g_value_set_boxed$descriptor() {
        return g_value_set_boxed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_boxed(GValue *value, gconstpointer v_boxed)
     * }
     */
    public static MethodHandle g_value_set_boxed$handle() {
        return g_value_set_boxed.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_value_set_boxed(GValue *value, gconstpointer v_boxed)
     * }
     */
    public static MemorySegment g_value_set_boxed$address() {
        return g_value_set_boxed.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_value_set_boxed(GValue *value, gconstpointer v_boxed)
     * }
     */
    public static void g_value_set_boxed(MemorySegment value, MemorySegment v_boxed) {
        var mh$ = g_value_set_boxed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_boxed", value, v_boxed);
            }
            mh$.invokeExact(value, v_boxed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_static_boxed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_set_static_boxed");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_static_boxed(GValue *value, gconstpointer v_boxed)
     * }
     */
    public static FunctionDescriptor g_value_set_static_boxed$descriptor() {
        return g_value_set_static_boxed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_static_boxed(GValue *value, gconstpointer v_boxed)
     * }
     */
    public static MethodHandle g_value_set_static_boxed$handle() {
        return g_value_set_static_boxed.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_value_set_static_boxed(GValue *value, gconstpointer v_boxed)
     * }
     */
    public static MemorySegment g_value_set_static_boxed$address() {
        return g_value_set_static_boxed.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_value_set_static_boxed(GValue *value, gconstpointer v_boxed)
     * }
     */
    public static void g_value_set_static_boxed(MemorySegment value, MemorySegment v_boxed) {
        var mh$ = g_value_set_static_boxed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_static_boxed", value, v_boxed);
            }
            mh$.invokeExact(value, v_boxed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_take_boxed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_take_boxed");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_take_boxed(GValue *value, gconstpointer v_boxed)
     * }
     */
    public static FunctionDescriptor g_value_take_boxed$descriptor() {
        return g_value_take_boxed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_take_boxed(GValue *value, gconstpointer v_boxed)
     * }
     */
    public static MethodHandle g_value_take_boxed$handle() {
        return g_value_take_boxed.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_value_take_boxed(GValue *value, gconstpointer v_boxed)
     * }
     */
    public static MemorySegment g_value_take_boxed$address() {
        return g_value_take_boxed.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_value_take_boxed(GValue *value, gconstpointer v_boxed)
     * }
     */
    public static void g_value_take_boxed(MemorySegment value, MemorySegment v_boxed) {
        var mh$ = g_value_take_boxed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_take_boxed", value, v_boxed);
            }
            mh$.invokeExact(value, v_boxed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_boxed_take_ownership {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_set_boxed_take_ownership");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_boxed_take_ownership(GValue *value, gconstpointer v_boxed)
     * }
     */
    public static FunctionDescriptor g_value_set_boxed_take_ownership$descriptor() {
        return g_value_set_boxed_take_ownership.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_boxed_take_ownership(GValue *value, gconstpointer v_boxed)
     * }
     */
    public static MethodHandle g_value_set_boxed_take_ownership$handle() {
        return g_value_set_boxed_take_ownership.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_value_set_boxed_take_ownership(GValue *value, gconstpointer v_boxed)
     * }
     */
    public static MemorySegment g_value_set_boxed_take_ownership$address() {
        return g_value_set_boxed_take_ownership.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_value_set_boxed_take_ownership(GValue *value, gconstpointer v_boxed)
     * }
     */
    public static void g_value_set_boxed_take_ownership(MemorySegment value, MemorySegment v_boxed) {
        var mh$ = g_value_set_boxed_take_ownership.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_boxed_take_ownership", value, v_boxed);
            }
            mh$.invokeExact(value, v_boxed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_get_boxed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_get_boxed");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_value_get_boxed(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_get_boxed$descriptor() {
        return g_value_get_boxed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_value_get_boxed(const GValue *value)
     * }
     */
    public static MethodHandle g_value_get_boxed$handle() {
        return g_value_get_boxed.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gpointer g_value_get_boxed(const GValue *value)
     * }
     */
    public static MemorySegment g_value_get_boxed$address() {
        return g_value_get_boxed.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gpointer g_value_get_boxed(const GValue *value)
     * }
     */
    public static MemorySegment g_value_get_boxed(MemorySegment value) {
        var mh$ = g_value_get_boxed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_get_boxed", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_dup_boxed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_dup_boxed");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_value_dup_boxed(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_dup_boxed$descriptor() {
        return g_value_dup_boxed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_value_dup_boxed(const GValue *value)
     * }
     */
    public static MethodHandle g_value_dup_boxed$handle() {
        return g_value_dup_boxed.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gpointer g_value_dup_boxed(const GValue *value)
     * }
     */
    public static MemorySegment g_value_dup_boxed$address() {
        return g_value_dup_boxed.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gpointer g_value_dup_boxed(const GValue *value)
     * }
     */
    public static MemorySegment g_value_dup_boxed(MemorySegment value) {
        var mh$ = g_value_dup_boxed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_dup_boxed", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_value_get_type()
     * }
     */
    public static FunctionDescriptor g_value_get_type$descriptor() {
        return g_value_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_value_get_type()
     * }
     */
    public static MethodHandle g_value_get_type$handle() {
        return g_value_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType g_value_get_type()
     * }
     */
    public static MemorySegment g_value_get_type$address() {
        return g_value_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType g_value_get_type()
     * }
     */
    public static long g_value_get_type() {
        var mh$ = g_value_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_class_install_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_class_install_property");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_class_install_property(GObjectClass *oclass, guint property_id, GParamSpec *pspec)
     * }
     */
    public static FunctionDescriptor g_object_class_install_property$descriptor() {
        return g_object_class_install_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_class_install_property(GObjectClass *oclass, guint property_id, GParamSpec *pspec)
     * }
     */
    public static MethodHandle g_object_class_install_property$handle() {
        return g_object_class_install_property.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_object_class_install_property(GObjectClass *oclass, guint property_id, GParamSpec *pspec)
     * }
     */
    public static MemorySegment g_object_class_install_property$address() {
        return g_object_class_install_property.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_object_class_install_property(GObjectClass *oclass, guint property_id, GParamSpec *pspec)
     * }
     */
    public static void g_object_class_install_property(MemorySegment oclass, int property_id, MemorySegment pspec) {
        var mh$ = g_object_class_install_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_class_install_property", oclass, property_id, pspec);
            }
            mh$.invokeExact(oclass, property_id, pspec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_class_find_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_class_find_property");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GParamSpec *g_object_class_find_property(GObjectClass *oclass, const gchar *property_name)
     * }
     */
    public static FunctionDescriptor g_object_class_find_property$descriptor() {
        return g_object_class_find_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GParamSpec *g_object_class_find_property(GObjectClass *oclass, const gchar *property_name)
     * }
     */
    public static MethodHandle g_object_class_find_property$handle() {
        return g_object_class_find_property.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GParamSpec *g_object_class_find_property(GObjectClass *oclass, const gchar *property_name)
     * }
     */
    public static MemorySegment g_object_class_find_property$address() {
        return g_object_class_find_property.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GParamSpec *g_object_class_find_property(GObjectClass *oclass, const gchar *property_name)
     * }
     */
    public static MemorySegment g_object_class_find_property(MemorySegment oclass, MemorySegment property_name) {
        var mh$ = g_object_class_find_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_class_find_property", oclass, property_name);
            }
            return (MemorySegment)mh$.invokeExact(oclass, property_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_class_list_properties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_class_list_properties");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GParamSpec **g_object_class_list_properties(GObjectClass *oclass, guint *n_properties)
     * }
     */
    public static FunctionDescriptor g_object_class_list_properties$descriptor() {
        return g_object_class_list_properties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GParamSpec **g_object_class_list_properties(GObjectClass *oclass, guint *n_properties)
     * }
     */
    public static MethodHandle g_object_class_list_properties$handle() {
        return g_object_class_list_properties.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GParamSpec **g_object_class_list_properties(GObjectClass *oclass, guint *n_properties)
     * }
     */
    public static MemorySegment g_object_class_list_properties$address() {
        return g_object_class_list_properties.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GParamSpec **g_object_class_list_properties(GObjectClass *oclass, guint *n_properties)
     * }
     */
    public static MemorySegment g_object_class_list_properties(MemorySegment oclass, MemorySegment n_properties) {
        var mh$ = g_object_class_list_properties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_class_list_properties", oclass, n_properties);
            }
            return (MemorySegment)mh$.invokeExact(oclass, n_properties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_class_override_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_class_override_property");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_class_override_property(GObjectClass *oclass, guint property_id, const gchar *name)
     * }
     */
    public static FunctionDescriptor g_object_class_override_property$descriptor() {
        return g_object_class_override_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_class_override_property(GObjectClass *oclass, guint property_id, const gchar *name)
     * }
     */
    public static MethodHandle g_object_class_override_property$handle() {
        return g_object_class_override_property.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_object_class_override_property(GObjectClass *oclass, guint property_id, const gchar *name)
     * }
     */
    public static MemorySegment g_object_class_override_property$address() {
        return g_object_class_override_property.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_object_class_override_property(GObjectClass *oclass, guint property_id, const gchar *name)
     * }
     */
    public static void g_object_class_override_property(MemorySegment oclass, int property_id, MemorySegment name) {
        var mh$ = g_object_class_override_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_class_override_property", oclass, property_id, name);
            }
            mh$.invokeExact(oclass, property_id, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_class_install_properties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_class_install_properties");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_class_install_properties(GObjectClass *oclass, guint n_pspecs, GParamSpec **pspecs)
     * }
     */
    public static FunctionDescriptor g_object_class_install_properties$descriptor() {
        return g_object_class_install_properties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_class_install_properties(GObjectClass *oclass, guint n_pspecs, GParamSpec **pspecs)
     * }
     */
    public static MethodHandle g_object_class_install_properties$handle() {
        return g_object_class_install_properties.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_object_class_install_properties(GObjectClass *oclass, guint n_pspecs, GParamSpec **pspecs)
     * }
     */
    public static MemorySegment g_object_class_install_properties$address() {
        return g_object_class_install_properties.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_object_class_install_properties(GObjectClass *oclass, guint n_pspecs, GParamSpec **pspecs)
     * }
     */
    public static void g_object_class_install_properties(MemorySegment oclass, int n_pspecs, MemorySegment pspecs) {
        var mh$ = g_object_class_install_properties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_class_install_properties", oclass, n_pspecs, pspecs);
            }
            mh$.invokeExact(oclass, n_pspecs, pspecs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_interface_install_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_interface_install_property");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_interface_install_property(gpointer g_iface, GParamSpec *pspec)
     * }
     */
    public static FunctionDescriptor g_object_interface_install_property$descriptor() {
        return g_object_interface_install_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_interface_install_property(gpointer g_iface, GParamSpec *pspec)
     * }
     */
    public static MethodHandle g_object_interface_install_property$handle() {
        return g_object_interface_install_property.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_object_interface_install_property(gpointer g_iface, GParamSpec *pspec)
     * }
     */
    public static MemorySegment g_object_interface_install_property$address() {
        return g_object_interface_install_property.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_object_interface_install_property(gpointer g_iface, GParamSpec *pspec)
     * }
     */
    public static void g_object_interface_install_property(MemorySegment g_iface, MemorySegment pspec) {
        var mh$ = g_object_interface_install_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_interface_install_property", g_iface, pspec);
            }
            mh$.invokeExact(g_iface, pspec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_interface_find_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_interface_find_property");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GParamSpec *g_object_interface_find_property(gpointer g_iface, const gchar *property_name)
     * }
     */
    public static FunctionDescriptor g_object_interface_find_property$descriptor() {
        return g_object_interface_find_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GParamSpec *g_object_interface_find_property(gpointer g_iface, const gchar *property_name)
     * }
     */
    public static MethodHandle g_object_interface_find_property$handle() {
        return g_object_interface_find_property.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GParamSpec *g_object_interface_find_property(gpointer g_iface, const gchar *property_name)
     * }
     */
    public static MemorySegment g_object_interface_find_property$address() {
        return g_object_interface_find_property.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GParamSpec *g_object_interface_find_property(gpointer g_iface, const gchar *property_name)
     * }
     */
    public static MemorySegment g_object_interface_find_property(MemorySegment g_iface, MemorySegment property_name) {
        var mh$ = g_object_interface_find_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_interface_find_property", g_iface, property_name);
            }
            return (MemorySegment)mh$.invokeExact(g_iface, property_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_interface_list_properties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_interface_list_properties");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GParamSpec **g_object_interface_list_properties(gpointer g_iface, guint *n_properties_p)
     * }
     */
    public static FunctionDescriptor g_object_interface_list_properties$descriptor() {
        return g_object_interface_list_properties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GParamSpec **g_object_interface_list_properties(gpointer g_iface, guint *n_properties_p)
     * }
     */
    public static MethodHandle g_object_interface_list_properties$handle() {
        return g_object_interface_list_properties.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GParamSpec **g_object_interface_list_properties(gpointer g_iface, guint *n_properties_p)
     * }
     */
    public static MemorySegment g_object_interface_list_properties$address() {
        return g_object_interface_list_properties.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GParamSpec **g_object_interface_list_properties(gpointer g_iface, guint *n_properties_p)
     * }
     */
    public static MemorySegment g_object_interface_list_properties(MemorySegment g_iface, MemorySegment n_properties_p) {
        var mh$ = g_object_interface_list_properties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_interface_list_properties", g_iface, n_properties_p);
            }
            return (MemorySegment)mh$.invokeExact(g_iface, n_properties_p);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_object_get_type()
     * }
     */
    public static FunctionDescriptor g_object_get_type$descriptor() {
        return g_object_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_object_get_type()
     * }
     */
    public static MethodHandle g_object_get_type$handle() {
        return g_object_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType g_object_get_type()
     * }
     */
    public static MemorySegment g_object_get_type$address() {
        return g_object_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType g_object_get_type()
     * }
     */
    public static long g_object_get_type() {
        var mh$ = g_object_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern gpointer g_object_new(GType object_type, const gchar *first_property_name, ...)
     * }
     */
    public static class g_object_new {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                VipsRaw.C_POINTER,
                VipsRaw.C_LONG,
                VipsRaw.C_POINTER
            );
        private static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_new");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_object_new(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern gpointer g_object_new(GType object_type, const gchar *first_property_name, ...)
         * }
         */
        public static g_object_new makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_object_new(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(long object_type, MemorySegment first_property_name, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_object_new", object_type, first_property_name, x2);
                }
                return (MemorySegment)spreader.invokeExact(object_type, first_property_name, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_object_new_with_properties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG,
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_new_with_properties");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GObject *g_object_new_with_properties(GType object_type, guint n_properties, const char *names[], const GValue values[])
     * }
     */
    public static FunctionDescriptor g_object_new_with_properties$descriptor() {
        return g_object_new_with_properties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GObject *g_object_new_with_properties(GType object_type, guint n_properties, const char *names[], const GValue values[])
     * }
     */
    public static MethodHandle g_object_new_with_properties$handle() {
        return g_object_new_with_properties.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GObject *g_object_new_with_properties(GType object_type, guint n_properties, const char *names[], const GValue values[])
     * }
     */
    public static MemorySegment g_object_new_with_properties$address() {
        return g_object_new_with_properties.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GObject *g_object_new_with_properties(GType object_type, guint n_properties, const char *names[], const GValue values[])
     * }
     */
    public static MemorySegment g_object_new_with_properties(long object_type, int n_properties, MemorySegment names, MemorySegment values) {
        var mh$ = g_object_new_with_properties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_new_with_properties", object_type, n_properties, names, values);
            }
            return (MemorySegment)mh$.invokeExact(object_type, n_properties, names, values);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_newv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG,
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_newv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_object_newv(GType object_type, guint n_parameters, GParameter *parameters)
     * }
     */
    public static FunctionDescriptor g_object_newv$descriptor() {
        return g_object_newv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_object_newv(GType object_type, guint n_parameters, GParameter *parameters)
     * }
     */
    public static MethodHandle g_object_newv$handle() {
        return g_object_newv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gpointer g_object_newv(GType object_type, guint n_parameters, GParameter *parameters)
     * }
     */
    public static MemorySegment g_object_newv$address() {
        return g_object_newv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gpointer g_object_newv(GType object_type, guint n_parameters, GParameter *parameters)
     * }
     */
    public static MemorySegment g_object_newv(long object_type, int n_parameters, MemorySegment parameters) {
        var mh$ = g_object_newv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_newv", object_type, n_parameters, parameters);
            }
            return (MemorySegment)mh$.invokeExact(object_type, n_parameters, parameters);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_new_valist {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_new_valist");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GObject *g_object_new_valist(GType object_type, const gchar *first_property_name, va_list var_args)
     * }
     */
    public static FunctionDescriptor g_object_new_valist$descriptor() {
        return g_object_new_valist.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GObject *g_object_new_valist(GType object_type, const gchar *first_property_name, va_list var_args)
     * }
     */
    public static MethodHandle g_object_new_valist$handle() {
        return g_object_new_valist.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GObject *g_object_new_valist(GType object_type, const gchar *first_property_name, va_list var_args)
     * }
     */
    public static MemorySegment g_object_new_valist$address() {
        return g_object_new_valist.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GObject *g_object_new_valist(GType object_type, const gchar *first_property_name, va_list var_args)
     * }
     */
    public static MemorySegment g_object_new_valist(long object_type, MemorySegment first_property_name, MemorySegment var_args) {
        var mh$ = g_object_new_valist.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_new_valist", object_type, first_property_name, var_args);
            }
            return (MemorySegment)mh$.invokeExact(object_type, first_property_name, var_args);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void g_object_set(gpointer object, const gchar *first_property_name, ...)
     * }
     */
    public static class g_object_set {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                VipsRaw.C_POINTER,
                VipsRaw.C_POINTER
            );
        private static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_set");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_object_set(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void g_object_set(gpointer object, const gchar *first_property_name, ...)
         * }
         */
        public static g_object_set makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_object_set(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment object, MemorySegment first_property_name, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_object_set", object, first_property_name, x2);
                }
                spreader.invokeExact(object, first_property_name, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void g_object_get(gpointer object, const gchar *first_property_name, ...)
     * }
     */
    public static class g_object_get {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                VipsRaw.C_POINTER,
                VipsRaw.C_POINTER
            );
        private static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_get");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_object_get(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void g_object_get(gpointer object, const gchar *first_property_name, ...)
         * }
         */
        public static g_object_get makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_object_get(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment object, MemorySegment first_property_name, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_object_get", object, first_property_name, x2);
                }
                spreader.invokeExact(object, first_property_name, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern gpointer g_object_connect(gpointer object, const gchar *signal_spec, ...)
     * }
     */
    public static class g_object_connect {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                VipsRaw.C_POINTER,
                VipsRaw.C_POINTER,
                VipsRaw.C_POINTER
            );
        private static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_connect");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_object_connect(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern gpointer g_object_connect(gpointer object, const gchar *signal_spec, ...)
         * }
         */
        public static g_object_connect makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_object_connect(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment object, MemorySegment signal_spec, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_object_connect", object, signal_spec, x2);
                }
                return (MemorySegment)spreader.invokeExact(object, signal_spec, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void g_object_disconnect(gpointer object, const gchar *signal_spec, ...)
     * }
     */
    public static class g_object_disconnect {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                VipsRaw.C_POINTER,
                VipsRaw.C_POINTER
            );
        private static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_disconnect");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_object_disconnect(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void g_object_disconnect(gpointer object, const gchar *signal_spec, ...)
         * }
         */
        public static g_object_disconnect makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_object_disconnect(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment object, MemorySegment signal_spec, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_object_disconnect", object, signal_spec, x2);
                }
                spreader.invokeExact(object, signal_spec, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_object_setv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_setv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_setv(GObject *object, guint n_properties, const gchar *names[], const GValue values[])
     * }
     */
    public static FunctionDescriptor g_object_setv$descriptor() {
        return g_object_setv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_setv(GObject *object, guint n_properties, const gchar *names[], const GValue values[])
     * }
     */
    public static MethodHandle g_object_setv$handle() {
        return g_object_setv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_object_setv(GObject *object, guint n_properties, const gchar *names[], const GValue values[])
     * }
     */
    public static MemorySegment g_object_setv$address() {
        return g_object_setv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_object_setv(GObject *object, guint n_properties, const gchar *names[], const GValue values[])
     * }
     */
    public static void g_object_setv(MemorySegment object, int n_properties, MemorySegment names, MemorySegment values) {
        var mh$ = g_object_setv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_setv", object, n_properties, names, values);
            }
            mh$.invokeExact(object, n_properties, names, values);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_set_valist {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_set_valist");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_set_valist(GObject *object, const gchar *first_property_name, va_list var_args)
     * }
     */
    public static FunctionDescriptor g_object_set_valist$descriptor() {
        return g_object_set_valist.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_set_valist(GObject *object, const gchar *first_property_name, va_list var_args)
     * }
     */
    public static MethodHandle g_object_set_valist$handle() {
        return g_object_set_valist.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_object_set_valist(GObject *object, const gchar *first_property_name, va_list var_args)
     * }
     */
    public static MemorySegment g_object_set_valist$address() {
        return g_object_set_valist.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_object_set_valist(GObject *object, const gchar *first_property_name, va_list var_args)
     * }
     */
    public static void g_object_set_valist(MemorySegment object, MemorySegment first_property_name, MemorySegment var_args) {
        var mh$ = g_object_set_valist.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_set_valist", object, first_property_name, var_args);
            }
            mh$.invokeExact(object, first_property_name, var_args);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_getv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_getv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_getv(GObject *object, guint n_properties, const gchar *names[], GValue values[])
     * }
     */
    public static FunctionDescriptor g_object_getv$descriptor() {
        return g_object_getv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_getv(GObject *object, guint n_properties, const gchar *names[], GValue values[])
     * }
     */
    public static MethodHandle g_object_getv$handle() {
        return g_object_getv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_object_getv(GObject *object, guint n_properties, const gchar *names[], GValue values[])
     * }
     */
    public static MemorySegment g_object_getv$address() {
        return g_object_getv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_object_getv(GObject *object, guint n_properties, const gchar *names[], GValue values[])
     * }
     */
    public static void g_object_getv(MemorySegment object, int n_properties, MemorySegment names, MemorySegment values) {
        var mh$ = g_object_getv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_getv", object, n_properties, names, values);
            }
            mh$.invokeExact(object, n_properties, names, values);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_get_valist {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_get_valist");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_get_valist(GObject *object, const gchar *first_property_name, va_list var_args)
     * }
     */
    public static FunctionDescriptor g_object_get_valist$descriptor() {
        return g_object_get_valist.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_get_valist(GObject *object, const gchar *first_property_name, va_list var_args)
     * }
     */
    public static MethodHandle g_object_get_valist$handle() {
        return g_object_get_valist.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_object_get_valist(GObject *object, const gchar *first_property_name, va_list var_args)
     * }
     */
    public static MemorySegment g_object_get_valist$address() {
        return g_object_get_valist.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_object_get_valist(GObject *object, const gchar *first_property_name, va_list var_args)
     * }
     */
    public static void g_object_get_valist(MemorySegment object, MemorySegment first_property_name, MemorySegment var_args) {
        var mh$ = g_object_get_valist.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_get_valist", object, first_property_name, var_args);
            }
            mh$.invokeExact(object, first_property_name, var_args);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_set_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_set_property");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_set_property(GObject *object, const gchar *property_name, const GValue *value)
     * }
     */
    public static FunctionDescriptor g_object_set_property$descriptor() {
        return g_object_set_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_set_property(GObject *object, const gchar *property_name, const GValue *value)
     * }
     */
    public static MethodHandle g_object_set_property$handle() {
        return g_object_set_property.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_object_set_property(GObject *object, const gchar *property_name, const GValue *value)
     * }
     */
    public static MemorySegment g_object_set_property$address() {
        return g_object_set_property.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_object_set_property(GObject *object, const gchar *property_name, const GValue *value)
     * }
     */
    public static void g_object_set_property(MemorySegment object, MemorySegment property_name, MemorySegment value) {
        var mh$ = g_object_set_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_set_property", object, property_name, value);
            }
            mh$.invokeExact(object, property_name, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_get_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_get_property");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_get_property(GObject *object, const gchar *property_name, GValue *value)
     * }
     */
    public static FunctionDescriptor g_object_get_property$descriptor() {
        return g_object_get_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_get_property(GObject *object, const gchar *property_name, GValue *value)
     * }
     */
    public static MethodHandle g_object_get_property$handle() {
        return g_object_get_property.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_object_get_property(GObject *object, const gchar *property_name, GValue *value)
     * }
     */
    public static MemorySegment g_object_get_property$address() {
        return g_object_get_property.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_object_get_property(GObject *object, const gchar *property_name, GValue *value)
     * }
     */
    public static void g_object_get_property(MemorySegment object, MemorySegment property_name, MemorySegment value) {
        var mh$ = g_object_get_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_get_property", object, property_name, value);
            }
            mh$.invokeExact(object, property_name, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_freeze_notify {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_freeze_notify");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_freeze_notify(GObject *object)
     * }
     */
    public static FunctionDescriptor g_object_freeze_notify$descriptor() {
        return g_object_freeze_notify.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_freeze_notify(GObject *object)
     * }
     */
    public static MethodHandle g_object_freeze_notify$handle() {
        return g_object_freeze_notify.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_object_freeze_notify(GObject *object)
     * }
     */
    public static MemorySegment g_object_freeze_notify$address() {
        return g_object_freeze_notify.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_object_freeze_notify(GObject *object)
     * }
     */
    public static void g_object_freeze_notify(MemorySegment object) {
        var mh$ = g_object_freeze_notify.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_freeze_notify", object);
            }
            mh$.invokeExact(object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_notify {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_notify");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_notify(GObject *object, const gchar *property_name)
     * }
     */
    public static FunctionDescriptor g_object_notify$descriptor() {
        return g_object_notify.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_notify(GObject *object, const gchar *property_name)
     * }
     */
    public static MethodHandle g_object_notify$handle() {
        return g_object_notify.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_object_notify(GObject *object, const gchar *property_name)
     * }
     */
    public static MemorySegment g_object_notify$address() {
        return g_object_notify.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_object_notify(GObject *object, const gchar *property_name)
     * }
     */
    public static void g_object_notify(MemorySegment object, MemorySegment property_name) {
        var mh$ = g_object_notify.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_notify", object, property_name);
            }
            mh$.invokeExact(object, property_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_notify_by_pspec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_notify_by_pspec");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_notify_by_pspec(GObject *object, GParamSpec *pspec)
     * }
     */
    public static FunctionDescriptor g_object_notify_by_pspec$descriptor() {
        return g_object_notify_by_pspec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_notify_by_pspec(GObject *object, GParamSpec *pspec)
     * }
     */
    public static MethodHandle g_object_notify_by_pspec$handle() {
        return g_object_notify_by_pspec.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_object_notify_by_pspec(GObject *object, GParamSpec *pspec)
     * }
     */
    public static MemorySegment g_object_notify_by_pspec$address() {
        return g_object_notify_by_pspec.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_object_notify_by_pspec(GObject *object, GParamSpec *pspec)
     * }
     */
    public static void g_object_notify_by_pspec(MemorySegment object, MemorySegment pspec) {
        var mh$ = g_object_notify_by_pspec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_notify_by_pspec", object, pspec);
            }
            mh$.invokeExact(object, pspec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_thaw_notify {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_thaw_notify");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_thaw_notify(GObject *object)
     * }
     */
    public static FunctionDescriptor g_object_thaw_notify$descriptor() {
        return g_object_thaw_notify.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_thaw_notify(GObject *object)
     * }
     */
    public static MethodHandle g_object_thaw_notify$handle() {
        return g_object_thaw_notify.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_object_thaw_notify(GObject *object)
     * }
     */
    public static MemorySegment g_object_thaw_notify$address() {
        return g_object_thaw_notify.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_object_thaw_notify(GObject *object)
     * }
     */
    public static void g_object_thaw_notify(MemorySegment object) {
        var mh$ = g_object_thaw_notify.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_thaw_notify", object);
            }
            mh$.invokeExact(object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_is_floating {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_is_floating");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_object_is_floating(gpointer object)
     * }
     */
    public static FunctionDescriptor g_object_is_floating$descriptor() {
        return g_object_is_floating.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_object_is_floating(gpointer object)
     * }
     */
    public static MethodHandle g_object_is_floating$handle() {
        return g_object_is_floating.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean g_object_is_floating(gpointer object)
     * }
     */
    public static MemorySegment g_object_is_floating$address() {
        return g_object_is_floating.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean g_object_is_floating(gpointer object)
     * }
     */
    public static int g_object_is_floating(MemorySegment object) {
        var mh$ = g_object_is_floating.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_is_floating", object);
            }
            return (int)mh$.invokeExact(object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_ref_sink {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_ref_sink");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_object_ref_sink(gpointer object)
     * }
     */
    public static FunctionDescriptor g_object_ref_sink$descriptor() {
        return g_object_ref_sink.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_object_ref_sink(gpointer object)
     * }
     */
    public static MethodHandle g_object_ref_sink$handle() {
        return g_object_ref_sink.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gpointer g_object_ref_sink(gpointer object)
     * }
     */
    public static MemorySegment g_object_ref_sink$address() {
        return g_object_ref_sink.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gpointer g_object_ref_sink(gpointer object)
     * }
     */
    public static MemorySegment g_object_ref_sink(MemorySegment object) {
        var mh$ = g_object_ref_sink.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_ref_sink", object);
            }
            return (MemorySegment)mh$.invokeExact(object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_take_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_take_ref");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_object_take_ref(gpointer object)
     * }
     */
    public static FunctionDescriptor g_object_take_ref$descriptor() {
        return g_object_take_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_object_take_ref(gpointer object)
     * }
     */
    public static MethodHandle g_object_take_ref$handle() {
        return g_object_take_ref.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gpointer g_object_take_ref(gpointer object)
     * }
     */
    public static MemorySegment g_object_take_ref$address() {
        return g_object_take_ref.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gpointer g_object_take_ref(gpointer object)
     * }
     */
    public static MemorySegment g_object_take_ref(MemorySegment object) {
        var mh$ = g_object_take_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_take_ref", object);
            }
            return (MemorySegment)mh$.invokeExact(object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_ref");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_object_ref(gpointer object)
     * }
     */
    public static FunctionDescriptor g_object_ref$descriptor() {
        return g_object_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_object_ref(gpointer object)
     * }
     */
    public static MethodHandle g_object_ref$handle() {
        return g_object_ref.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gpointer g_object_ref(gpointer object)
     * }
     */
    public static MemorySegment g_object_ref$address() {
        return g_object_ref.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gpointer g_object_ref(gpointer object)
     * }
     */
    public static MemorySegment g_object_ref(MemorySegment object) {
        var mh$ = g_object_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_ref", object);
            }
            return (MemorySegment)mh$.invokeExact(object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_unref");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_unref(gpointer object)
     * }
     */
    public static FunctionDescriptor g_object_unref$descriptor() {
        return g_object_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_unref(gpointer object)
     * }
     */
    public static MethodHandle g_object_unref$handle() {
        return g_object_unref.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_object_unref(gpointer object)
     * }
     */
    public static MemorySegment g_object_unref$address() {
        return g_object_unref.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_object_unref(gpointer object)
     * }
     */
    public static void g_object_unref(MemorySegment object) {
        var mh$ = g_object_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_unref", object);
            }
            mh$.invokeExact(object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_weak_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_weak_ref");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_weak_ref(GObject *object, GWeakNotify notify, gpointer data)
     * }
     */
    public static FunctionDescriptor g_object_weak_ref$descriptor() {
        return g_object_weak_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_weak_ref(GObject *object, GWeakNotify notify, gpointer data)
     * }
     */
    public static MethodHandle g_object_weak_ref$handle() {
        return g_object_weak_ref.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_object_weak_ref(GObject *object, GWeakNotify notify, gpointer data)
     * }
     */
    public static MemorySegment g_object_weak_ref$address() {
        return g_object_weak_ref.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_object_weak_ref(GObject *object, GWeakNotify notify, gpointer data)
     * }
     */
    public static void g_object_weak_ref(MemorySegment object, MemorySegment notify, MemorySegment data) {
        var mh$ = g_object_weak_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_weak_ref", object, notify, data);
            }
            mh$.invokeExact(object, notify, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_weak_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_weak_unref");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_weak_unref(GObject *object, GWeakNotify notify, gpointer data)
     * }
     */
    public static FunctionDescriptor g_object_weak_unref$descriptor() {
        return g_object_weak_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_weak_unref(GObject *object, GWeakNotify notify, gpointer data)
     * }
     */
    public static MethodHandle g_object_weak_unref$handle() {
        return g_object_weak_unref.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_object_weak_unref(GObject *object, GWeakNotify notify, gpointer data)
     * }
     */
    public static MemorySegment g_object_weak_unref$address() {
        return g_object_weak_unref.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_object_weak_unref(GObject *object, GWeakNotify notify, gpointer data)
     * }
     */
    public static void g_object_weak_unref(MemorySegment object, MemorySegment notify, MemorySegment data) {
        var mh$ = g_object_weak_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_weak_unref", object, notify, data);
            }
            mh$.invokeExact(object, notify, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_add_weak_pointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_add_weak_pointer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_add_weak_pointer(GObject *object, gpointer *weak_pointer_location)
     * }
     */
    public static FunctionDescriptor g_object_add_weak_pointer$descriptor() {
        return g_object_add_weak_pointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_add_weak_pointer(GObject *object, gpointer *weak_pointer_location)
     * }
     */
    public static MethodHandle g_object_add_weak_pointer$handle() {
        return g_object_add_weak_pointer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_object_add_weak_pointer(GObject *object, gpointer *weak_pointer_location)
     * }
     */
    public static MemorySegment g_object_add_weak_pointer$address() {
        return g_object_add_weak_pointer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_object_add_weak_pointer(GObject *object, gpointer *weak_pointer_location)
     * }
     */
    public static void g_object_add_weak_pointer(MemorySegment object, MemorySegment weak_pointer_location) {
        var mh$ = g_object_add_weak_pointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_add_weak_pointer", object, weak_pointer_location);
            }
            mh$.invokeExact(object, weak_pointer_location);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_remove_weak_pointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_remove_weak_pointer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_remove_weak_pointer(GObject *object, gpointer *weak_pointer_location)
     * }
     */
    public static FunctionDescriptor g_object_remove_weak_pointer$descriptor() {
        return g_object_remove_weak_pointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_remove_weak_pointer(GObject *object, gpointer *weak_pointer_location)
     * }
     */
    public static MethodHandle g_object_remove_weak_pointer$handle() {
        return g_object_remove_weak_pointer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_object_remove_weak_pointer(GObject *object, gpointer *weak_pointer_location)
     * }
     */
    public static MemorySegment g_object_remove_weak_pointer$address() {
        return g_object_remove_weak_pointer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_object_remove_weak_pointer(GObject *object, gpointer *weak_pointer_location)
     * }
     */
    public static void g_object_remove_weak_pointer(MemorySegment object, MemorySegment weak_pointer_location) {
        var mh$ = g_object_remove_weak_pointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_remove_weak_pointer", object, weak_pointer_location);
            }
            mh$.invokeExact(object, weak_pointer_location);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_add_toggle_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_add_toggle_ref");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_add_toggle_ref(GObject *object, GToggleNotify notify, gpointer data)
     * }
     */
    public static FunctionDescriptor g_object_add_toggle_ref$descriptor() {
        return g_object_add_toggle_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_add_toggle_ref(GObject *object, GToggleNotify notify, gpointer data)
     * }
     */
    public static MethodHandle g_object_add_toggle_ref$handle() {
        return g_object_add_toggle_ref.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_object_add_toggle_ref(GObject *object, GToggleNotify notify, gpointer data)
     * }
     */
    public static MemorySegment g_object_add_toggle_ref$address() {
        return g_object_add_toggle_ref.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_object_add_toggle_ref(GObject *object, GToggleNotify notify, gpointer data)
     * }
     */
    public static void g_object_add_toggle_ref(MemorySegment object, MemorySegment notify, MemorySegment data) {
        var mh$ = g_object_add_toggle_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_add_toggle_ref", object, notify, data);
            }
            mh$.invokeExact(object, notify, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_remove_toggle_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_remove_toggle_ref");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_remove_toggle_ref(GObject *object, GToggleNotify notify, gpointer data)
     * }
     */
    public static FunctionDescriptor g_object_remove_toggle_ref$descriptor() {
        return g_object_remove_toggle_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_remove_toggle_ref(GObject *object, GToggleNotify notify, gpointer data)
     * }
     */
    public static MethodHandle g_object_remove_toggle_ref$handle() {
        return g_object_remove_toggle_ref.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_object_remove_toggle_ref(GObject *object, GToggleNotify notify, gpointer data)
     * }
     */
    public static MemorySegment g_object_remove_toggle_ref$address() {
        return g_object_remove_toggle_ref.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_object_remove_toggle_ref(GObject *object, GToggleNotify notify, gpointer data)
     * }
     */
    public static void g_object_remove_toggle_ref(MemorySegment object, MemorySegment notify, MemorySegment data) {
        var mh$ = g_object_remove_toggle_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_remove_toggle_ref", object, notify, data);
            }
            mh$.invokeExact(object, notify, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_get_qdata {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_get_qdata");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_object_get_qdata(GObject *object, GQuark quark)
     * }
     */
    public static FunctionDescriptor g_object_get_qdata$descriptor() {
        return g_object_get_qdata.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_object_get_qdata(GObject *object, GQuark quark)
     * }
     */
    public static MethodHandle g_object_get_qdata$handle() {
        return g_object_get_qdata.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gpointer g_object_get_qdata(GObject *object, GQuark quark)
     * }
     */
    public static MemorySegment g_object_get_qdata$address() {
        return g_object_get_qdata.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gpointer g_object_get_qdata(GObject *object, GQuark quark)
     * }
     */
    public static MemorySegment g_object_get_qdata(MemorySegment object, int quark) {
        var mh$ = g_object_get_qdata.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_get_qdata", object, quark);
            }
            return (MemorySegment)mh$.invokeExact(object, quark);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_set_qdata {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_set_qdata");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_set_qdata(GObject *object, GQuark quark, gpointer data)
     * }
     */
    public static FunctionDescriptor g_object_set_qdata$descriptor() {
        return g_object_set_qdata.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_set_qdata(GObject *object, GQuark quark, gpointer data)
     * }
     */
    public static MethodHandle g_object_set_qdata$handle() {
        return g_object_set_qdata.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_object_set_qdata(GObject *object, GQuark quark, gpointer data)
     * }
     */
    public static MemorySegment g_object_set_qdata$address() {
        return g_object_set_qdata.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_object_set_qdata(GObject *object, GQuark quark, gpointer data)
     * }
     */
    public static void g_object_set_qdata(MemorySegment object, int quark, MemorySegment data) {
        var mh$ = g_object_set_qdata.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_set_qdata", object, quark, data);
            }
            mh$.invokeExact(object, quark, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_set_qdata_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_set_qdata_full");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_set_qdata_full(GObject *object, GQuark quark, gpointer data, GDestroyNotify destroy)
     * }
     */
    public static FunctionDescriptor g_object_set_qdata_full$descriptor() {
        return g_object_set_qdata_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_set_qdata_full(GObject *object, GQuark quark, gpointer data, GDestroyNotify destroy)
     * }
     */
    public static MethodHandle g_object_set_qdata_full$handle() {
        return g_object_set_qdata_full.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_object_set_qdata_full(GObject *object, GQuark quark, gpointer data, GDestroyNotify destroy)
     * }
     */
    public static MemorySegment g_object_set_qdata_full$address() {
        return g_object_set_qdata_full.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_object_set_qdata_full(GObject *object, GQuark quark, gpointer data, GDestroyNotify destroy)
     * }
     */
    public static void g_object_set_qdata_full(MemorySegment object, int quark, MemorySegment data, MemorySegment destroy) {
        var mh$ = g_object_set_qdata_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_set_qdata_full", object, quark, data, destroy);
            }
            mh$.invokeExact(object, quark, data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_steal_qdata {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_steal_qdata");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_object_steal_qdata(GObject *object, GQuark quark)
     * }
     */
    public static FunctionDescriptor g_object_steal_qdata$descriptor() {
        return g_object_steal_qdata.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_object_steal_qdata(GObject *object, GQuark quark)
     * }
     */
    public static MethodHandle g_object_steal_qdata$handle() {
        return g_object_steal_qdata.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gpointer g_object_steal_qdata(GObject *object, GQuark quark)
     * }
     */
    public static MemorySegment g_object_steal_qdata$address() {
        return g_object_steal_qdata.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gpointer g_object_steal_qdata(GObject *object, GQuark quark)
     * }
     */
    public static MemorySegment g_object_steal_qdata(MemorySegment object, int quark) {
        var mh$ = g_object_steal_qdata.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_steal_qdata", object, quark);
            }
            return (MemorySegment)mh$.invokeExact(object, quark);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_dup_qdata {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_dup_qdata");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_object_dup_qdata(GObject *object, GQuark quark, GDuplicateFunc dup_func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_object_dup_qdata$descriptor() {
        return g_object_dup_qdata.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_object_dup_qdata(GObject *object, GQuark quark, GDuplicateFunc dup_func, gpointer user_data)
     * }
     */
    public static MethodHandle g_object_dup_qdata$handle() {
        return g_object_dup_qdata.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gpointer g_object_dup_qdata(GObject *object, GQuark quark, GDuplicateFunc dup_func, gpointer user_data)
     * }
     */
    public static MemorySegment g_object_dup_qdata$address() {
        return g_object_dup_qdata.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gpointer g_object_dup_qdata(GObject *object, GQuark quark, GDuplicateFunc dup_func, gpointer user_data)
     * }
     */
    public static MemorySegment g_object_dup_qdata(MemorySegment object, int quark, MemorySegment dup_func, MemorySegment user_data) {
        var mh$ = g_object_dup_qdata.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_dup_qdata", object, quark, dup_func, user_data);
            }
            return (MemorySegment)mh$.invokeExact(object, quark, dup_func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_replace_qdata {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_replace_qdata");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_object_replace_qdata(GObject *object, GQuark quark, gpointer oldval, gpointer newval, GDestroyNotify destroy, GDestroyNotify *old_destroy)
     * }
     */
    public static FunctionDescriptor g_object_replace_qdata$descriptor() {
        return g_object_replace_qdata.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_object_replace_qdata(GObject *object, GQuark quark, gpointer oldval, gpointer newval, GDestroyNotify destroy, GDestroyNotify *old_destroy)
     * }
     */
    public static MethodHandle g_object_replace_qdata$handle() {
        return g_object_replace_qdata.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean g_object_replace_qdata(GObject *object, GQuark quark, gpointer oldval, gpointer newval, GDestroyNotify destroy, GDestroyNotify *old_destroy)
     * }
     */
    public static MemorySegment g_object_replace_qdata$address() {
        return g_object_replace_qdata.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean g_object_replace_qdata(GObject *object, GQuark quark, gpointer oldval, gpointer newval, GDestroyNotify destroy, GDestroyNotify *old_destroy)
     * }
     */
    public static int g_object_replace_qdata(MemorySegment object, int quark, MemorySegment oldval, MemorySegment newval, MemorySegment destroy, MemorySegment old_destroy) {
        var mh$ = g_object_replace_qdata.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_replace_qdata", object, quark, oldval, newval, destroy, old_destroy);
            }
            return (int)mh$.invokeExact(object, quark, oldval, newval, destroy, old_destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_get_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_get_data");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_object_get_data(GObject *object, const gchar *key)
     * }
     */
    public static FunctionDescriptor g_object_get_data$descriptor() {
        return g_object_get_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_object_get_data(GObject *object, const gchar *key)
     * }
     */
    public static MethodHandle g_object_get_data$handle() {
        return g_object_get_data.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gpointer g_object_get_data(GObject *object, const gchar *key)
     * }
     */
    public static MemorySegment g_object_get_data$address() {
        return g_object_get_data.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gpointer g_object_get_data(GObject *object, const gchar *key)
     * }
     */
    public static MemorySegment g_object_get_data(MemorySegment object, MemorySegment key) {
        var mh$ = g_object_get_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_get_data", object, key);
            }
            return (MemorySegment)mh$.invokeExact(object, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_set_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_set_data");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_set_data(GObject *object, const gchar *key, gpointer data)
     * }
     */
    public static FunctionDescriptor g_object_set_data$descriptor() {
        return g_object_set_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_set_data(GObject *object, const gchar *key, gpointer data)
     * }
     */
    public static MethodHandle g_object_set_data$handle() {
        return g_object_set_data.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_object_set_data(GObject *object, const gchar *key, gpointer data)
     * }
     */
    public static MemorySegment g_object_set_data$address() {
        return g_object_set_data.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_object_set_data(GObject *object, const gchar *key, gpointer data)
     * }
     */
    public static void g_object_set_data(MemorySegment object, MemorySegment key, MemorySegment data) {
        var mh$ = g_object_set_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_set_data", object, key, data);
            }
            mh$.invokeExact(object, key, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_set_data_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_set_data_full");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_set_data_full(GObject *object, const gchar *key, gpointer data, GDestroyNotify destroy)
     * }
     */
    public static FunctionDescriptor g_object_set_data_full$descriptor() {
        return g_object_set_data_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_set_data_full(GObject *object, const gchar *key, gpointer data, GDestroyNotify destroy)
     * }
     */
    public static MethodHandle g_object_set_data_full$handle() {
        return g_object_set_data_full.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_object_set_data_full(GObject *object, const gchar *key, gpointer data, GDestroyNotify destroy)
     * }
     */
    public static MemorySegment g_object_set_data_full$address() {
        return g_object_set_data_full.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_object_set_data_full(GObject *object, const gchar *key, gpointer data, GDestroyNotify destroy)
     * }
     */
    public static void g_object_set_data_full(MemorySegment object, MemorySegment key, MemorySegment data, MemorySegment destroy) {
        var mh$ = g_object_set_data_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_set_data_full", object, key, data, destroy);
            }
            mh$.invokeExact(object, key, data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_steal_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_steal_data");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_object_steal_data(GObject *object, const gchar *key)
     * }
     */
    public static FunctionDescriptor g_object_steal_data$descriptor() {
        return g_object_steal_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_object_steal_data(GObject *object, const gchar *key)
     * }
     */
    public static MethodHandle g_object_steal_data$handle() {
        return g_object_steal_data.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gpointer g_object_steal_data(GObject *object, const gchar *key)
     * }
     */
    public static MemorySegment g_object_steal_data$address() {
        return g_object_steal_data.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gpointer g_object_steal_data(GObject *object, const gchar *key)
     * }
     */
    public static MemorySegment g_object_steal_data(MemorySegment object, MemorySegment key) {
        var mh$ = g_object_steal_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_steal_data", object, key);
            }
            return (MemorySegment)mh$.invokeExact(object, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_dup_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_dup_data");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_object_dup_data(GObject *object, const gchar *key, GDuplicateFunc dup_func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_object_dup_data$descriptor() {
        return g_object_dup_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_object_dup_data(GObject *object, const gchar *key, GDuplicateFunc dup_func, gpointer user_data)
     * }
     */
    public static MethodHandle g_object_dup_data$handle() {
        return g_object_dup_data.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gpointer g_object_dup_data(GObject *object, const gchar *key, GDuplicateFunc dup_func, gpointer user_data)
     * }
     */
    public static MemorySegment g_object_dup_data$address() {
        return g_object_dup_data.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gpointer g_object_dup_data(GObject *object, const gchar *key, GDuplicateFunc dup_func, gpointer user_data)
     * }
     */
    public static MemorySegment g_object_dup_data(MemorySegment object, MemorySegment key, MemorySegment dup_func, MemorySegment user_data) {
        var mh$ = g_object_dup_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_dup_data", object, key, dup_func, user_data);
            }
            return (MemorySegment)mh$.invokeExact(object, key, dup_func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_replace_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_replace_data");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_object_replace_data(GObject *object, const gchar *key, gpointer oldval, gpointer newval, GDestroyNotify destroy, GDestroyNotify *old_destroy)
     * }
     */
    public static FunctionDescriptor g_object_replace_data$descriptor() {
        return g_object_replace_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_object_replace_data(GObject *object, const gchar *key, gpointer oldval, gpointer newval, GDestroyNotify destroy, GDestroyNotify *old_destroy)
     * }
     */
    public static MethodHandle g_object_replace_data$handle() {
        return g_object_replace_data.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean g_object_replace_data(GObject *object, const gchar *key, gpointer oldval, gpointer newval, GDestroyNotify destroy, GDestroyNotify *old_destroy)
     * }
     */
    public static MemorySegment g_object_replace_data$address() {
        return g_object_replace_data.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean g_object_replace_data(GObject *object, const gchar *key, gpointer oldval, gpointer newval, GDestroyNotify destroy, GDestroyNotify *old_destroy)
     * }
     */
    public static int g_object_replace_data(MemorySegment object, MemorySegment key, MemorySegment oldval, MemorySegment newval, MemorySegment destroy, MemorySegment old_destroy) {
        var mh$ = g_object_replace_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_replace_data", object, key, oldval, newval, destroy, old_destroy);
            }
            return (int)mh$.invokeExact(object, key, oldval, newval, destroy, old_destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_watch_closure {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_watch_closure");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_watch_closure(GObject *object, GClosure *closure)
     * }
     */
    public static FunctionDescriptor g_object_watch_closure$descriptor() {
        return g_object_watch_closure.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_watch_closure(GObject *object, GClosure *closure)
     * }
     */
    public static MethodHandle g_object_watch_closure$handle() {
        return g_object_watch_closure.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_object_watch_closure(GObject *object, GClosure *closure)
     * }
     */
    public static MemorySegment g_object_watch_closure$address() {
        return g_object_watch_closure.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_object_watch_closure(GObject *object, GClosure *closure)
     * }
     */
    public static void g_object_watch_closure(MemorySegment object, MemorySegment closure) {
        var mh$ = g_object_watch_closure.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_watch_closure", object, closure);
            }
            mh$.invokeExact(object, closure);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_object {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_set_object");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_object(GValue *value, gpointer v_object)
     * }
     */
    public static FunctionDescriptor g_value_set_object$descriptor() {
        return g_value_set_object.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_object(GValue *value, gpointer v_object)
     * }
     */
    public static MethodHandle g_value_set_object$handle() {
        return g_value_set_object.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_value_set_object(GValue *value, gpointer v_object)
     * }
     */
    public static MemorySegment g_value_set_object$address() {
        return g_value_set_object.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_value_set_object(GValue *value, gpointer v_object)
     * }
     */
    public static void g_value_set_object(MemorySegment value, MemorySegment v_object) {
        var mh$ = g_value_set_object.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_object", value, v_object);
            }
            mh$.invokeExact(value, v_object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_get_object {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_get_object");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_value_get_object(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_get_object$descriptor() {
        return g_value_get_object.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_value_get_object(const GValue *value)
     * }
     */
    public static MethodHandle g_value_get_object$handle() {
        return g_value_get_object.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gpointer g_value_get_object(const GValue *value)
     * }
     */
    public static MemorySegment g_value_get_object$address() {
        return g_value_get_object.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gpointer g_value_get_object(const GValue *value)
     * }
     */
    public static MemorySegment g_value_get_object(MemorySegment value) {
        var mh$ = g_value_get_object.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_get_object", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_dup_object {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_dup_object");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_value_dup_object(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_dup_object$descriptor() {
        return g_value_dup_object.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_value_dup_object(const GValue *value)
     * }
     */
    public static MethodHandle g_value_dup_object$handle() {
        return g_value_dup_object.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gpointer g_value_dup_object(const GValue *value)
     * }
     */
    public static MemorySegment g_value_dup_object$address() {
        return g_value_dup_object.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gpointer g_value_dup_object(const GValue *value)
     * }
     */
    public static MemorySegment g_value_dup_object(MemorySegment value) {
        var mh$ = g_value_dup_object.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_dup_object", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_force_floating {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_force_floating");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_force_floating(GObject *object)
     * }
     */
    public static FunctionDescriptor g_object_force_floating$descriptor() {
        return g_object_force_floating.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_force_floating(GObject *object)
     * }
     */
    public static MethodHandle g_object_force_floating$handle() {
        return g_object_force_floating.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_object_force_floating(GObject *object)
     * }
     */
    public static MemorySegment g_object_force_floating$address() {
        return g_object_force_floating.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_object_force_floating(GObject *object)
     * }
     */
    public static void g_object_force_floating(MemorySegment object) {
        var mh$ = g_object_force_floating.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_force_floating", object);
            }
            mh$.invokeExact(object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_run_dispose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_run_dispose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_run_dispose(GObject *object)
     * }
     */
    public static FunctionDescriptor g_object_run_dispose$descriptor() {
        return g_object_run_dispose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_run_dispose(GObject *object)
     * }
     */
    public static MethodHandle g_object_run_dispose$handle() {
        return g_object_run_dispose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_object_run_dispose(GObject *object)
     * }
     */
    public static MemorySegment g_object_run_dispose$address() {
        return g_object_run_dispose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_object_run_dispose(GObject *object)
     * }
     */
    public static void g_object_run_dispose(MemorySegment object) {
        var mh$ = g_object_run_dispose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_run_dispose", object);
            }
            mh$.invokeExact(object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_take_object {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_take_object");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_take_object(GValue *value, gpointer v_object)
     * }
     */
    public static FunctionDescriptor g_value_take_object$descriptor() {
        return g_value_take_object.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_take_object(GValue *value, gpointer v_object)
     * }
     */
    public static MethodHandle g_value_take_object$handle() {
        return g_value_take_object.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_value_take_object(GValue *value, gpointer v_object)
     * }
     */
    public static MemorySegment g_value_take_object$address() {
        return g_value_take_object.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_value_take_object(GValue *value, gpointer v_object)
     * }
     */
    public static void g_value_take_object(MemorySegment value, MemorySegment v_object) {
        var mh$ = g_value_take_object.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_take_object", value, v_object);
            }
            mh$.invokeExact(value, v_object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_object_take_ownership {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_set_object_take_ownership");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_object_take_ownership(GValue *value, gpointer v_object)
     * }
     */
    public static FunctionDescriptor g_value_set_object_take_ownership$descriptor() {
        return g_value_set_object_take_ownership.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_object_take_ownership(GValue *value, gpointer v_object)
     * }
     */
    public static MethodHandle g_value_set_object_take_ownership$handle() {
        return g_value_set_object_take_ownership.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_value_set_object_take_ownership(GValue *value, gpointer v_object)
     * }
     */
    public static MemorySegment g_value_set_object_take_ownership$address() {
        return g_value_set_object_take_ownership.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_value_set_object_take_ownership(GValue *value, gpointer v_object)
     * }
     */
    public static void g_value_set_object_take_ownership(MemorySegment value, MemorySegment v_object) {
        var mh$ = g_value_set_object_take_ownership.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_object_take_ownership", value, v_object);
            }
            mh$.invokeExact(value, v_object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_compat_control {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG,
            VipsRaw.C_LONG,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_compat_control");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gsize g_object_compat_control(gsize what, gpointer data)
     * }
     */
    public static FunctionDescriptor g_object_compat_control$descriptor() {
        return g_object_compat_control.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gsize g_object_compat_control(gsize what, gpointer data)
     * }
     */
    public static MethodHandle g_object_compat_control$handle() {
        return g_object_compat_control.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gsize g_object_compat_control(gsize what, gpointer data)
     * }
     */
    public static MemorySegment g_object_compat_control$address() {
        return g_object_compat_control.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gsize g_object_compat_control(gsize what, gpointer data)
     * }
     */
    public static long g_object_compat_control(long what, MemorySegment data) {
        var mh$ = g_object_compat_control.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_compat_control", what, data);
            }
            return (long)mh$.invokeExact(what, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_bind_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_bind_property");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GBinding *g_object_bind_property(gpointer source, const gchar *source_property, gpointer target, const gchar *target_property, GBindingFlags flags)
     * }
     */
    public static FunctionDescriptor g_object_bind_property$descriptor() {
        return g_object_bind_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GBinding *g_object_bind_property(gpointer source, const gchar *source_property, gpointer target, const gchar *target_property, GBindingFlags flags)
     * }
     */
    public static MethodHandle g_object_bind_property$handle() {
        return g_object_bind_property.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GBinding *g_object_bind_property(gpointer source, const gchar *source_property, gpointer target, const gchar *target_property, GBindingFlags flags)
     * }
     */
    public static MemorySegment g_object_bind_property$address() {
        return g_object_bind_property.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GBinding *g_object_bind_property(gpointer source, const gchar *source_property, gpointer target, const gchar *target_property, GBindingFlags flags)
     * }
     */
    public static MemorySegment g_object_bind_property(MemorySegment source, MemorySegment source_property, MemorySegment target, MemorySegment target_property, int flags) {
        var mh$ = g_object_bind_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_bind_property", source, source_property, target, target_property, flags);
            }
            return (MemorySegment)mh$.invokeExact(source, source_property, target, target_property, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_bind_property_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_bind_property_full");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GBinding *g_object_bind_property_full(gpointer source, const gchar *source_property, gpointer target, const gchar *target_property, GBindingFlags flags, GBindingTransformFunc transform_to, GBindingTransformFunc transform_from, gpointer user_data, GDestroyNotify notify)
     * }
     */
    public static FunctionDescriptor g_object_bind_property_full$descriptor() {
        return g_object_bind_property_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GBinding *g_object_bind_property_full(gpointer source, const gchar *source_property, gpointer target, const gchar *target_property, GBindingFlags flags, GBindingTransformFunc transform_to, GBindingTransformFunc transform_from, gpointer user_data, GDestroyNotify notify)
     * }
     */
    public static MethodHandle g_object_bind_property_full$handle() {
        return g_object_bind_property_full.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GBinding *g_object_bind_property_full(gpointer source, const gchar *source_property, gpointer target, const gchar *target_property, GBindingFlags flags, GBindingTransformFunc transform_to, GBindingTransformFunc transform_from, gpointer user_data, GDestroyNotify notify)
     * }
     */
    public static MemorySegment g_object_bind_property_full$address() {
        return g_object_bind_property_full.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GBinding *g_object_bind_property_full(gpointer source, const gchar *source_property, gpointer target, const gchar *target_property, GBindingFlags flags, GBindingTransformFunc transform_to, GBindingTransformFunc transform_from, gpointer user_data, GDestroyNotify notify)
     * }
     */
    public static MemorySegment g_object_bind_property_full(MemorySegment source, MemorySegment source_property, MemorySegment target, MemorySegment target_property, int flags, MemorySegment transform_to, MemorySegment transform_from, MemorySegment user_data, MemorySegment notify) {
        var mh$ = g_object_bind_property_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_bind_property_full", source, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
            }
            return (MemorySegment)mh$.invokeExact(source, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_bind_property_with_closures {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_object_bind_property_with_closures");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GBinding *g_object_bind_property_with_closures(gpointer source, const gchar *source_property, gpointer target, const gchar *target_property, GBindingFlags flags, GClosure *transform_to, GClosure *transform_from)
     * }
     */
    public static FunctionDescriptor g_object_bind_property_with_closures$descriptor() {
        return g_object_bind_property_with_closures.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GBinding *g_object_bind_property_with_closures(gpointer source, const gchar *source_property, gpointer target, const gchar *target_property, GBindingFlags flags, GClosure *transform_to, GClosure *transform_from)
     * }
     */
    public static MethodHandle g_object_bind_property_with_closures$handle() {
        return g_object_bind_property_with_closures.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GBinding *g_object_bind_property_with_closures(gpointer source, const gchar *source_property, gpointer target, const gchar *target_property, GBindingFlags flags, GClosure *transform_to, GClosure *transform_from)
     * }
     */
    public static MemorySegment g_object_bind_property_with_closures$address() {
        return g_object_bind_property_with_closures.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GBinding *g_object_bind_property_with_closures(gpointer source, const gchar *source_property, gpointer target, const gchar *target_property, GBindingFlags flags, GClosure *transform_to, GClosure *transform_from)
     * }
     */
    public static MemorySegment g_object_bind_property_with_closures(MemorySegment source, MemorySegment source_property, MemorySegment target, MemorySegment target_property, int flags, MemorySegment transform_to, MemorySegment transform_from) {
        var mh$ = g_object_bind_property_with_closures.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_bind_property_with_closures", source, source_property, target, target_property, flags, transform_to, transform_from);
            }
            return (MemorySegment)mh$.invokeExact(source, source_property, target, target_property, flags, transform_to, transform_from);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_enum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_set_enum");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_enum(GValue *value, gint v_enum)
     * }
     */
    public static FunctionDescriptor g_value_set_enum$descriptor() {
        return g_value_set_enum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_enum(GValue *value, gint v_enum)
     * }
     */
    public static MethodHandle g_value_set_enum$handle() {
        return g_value_set_enum.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_value_set_enum(GValue *value, gint v_enum)
     * }
     */
    public static MemorySegment g_value_set_enum$address() {
        return g_value_set_enum.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_value_set_enum(GValue *value, gint v_enum)
     * }
     */
    public static void g_value_set_enum(MemorySegment value, int v_enum) {
        var mh$ = g_value_set_enum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_enum", value, v_enum);
            }
            mh$.invokeExact(value, v_enum);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_get_enum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_get_enum");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_value_get_enum(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_get_enum$descriptor() {
        return g_value_get_enum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_value_get_enum(const GValue *value)
     * }
     */
    public static MethodHandle g_value_get_enum$handle() {
        return g_value_get_enum.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gint g_value_get_enum(const GValue *value)
     * }
     */
    public static MemorySegment g_value_get_enum$address() {
        return g_value_get_enum.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gint g_value_get_enum(const GValue *value)
     * }
     */
    public static int g_value_get_enum(MemorySegment value) {
        var mh$ = g_value_get_enum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_get_enum", value);
            }
            return (int)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_set_flags");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_flags(GValue *value, guint v_flags)
     * }
     */
    public static FunctionDescriptor g_value_set_flags$descriptor() {
        return g_value_set_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_flags(GValue *value, guint v_flags)
     * }
     */
    public static MethodHandle g_value_set_flags$handle() {
        return g_value_set_flags.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_value_set_flags(GValue *value, guint v_flags)
     * }
     */
    public static MemorySegment g_value_set_flags$address() {
        return g_value_set_flags.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_value_set_flags(GValue *value, guint v_flags)
     * }
     */
    public static void g_value_set_flags(MemorySegment value, int v_flags) {
        var mh$ = g_value_set_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_flags", value, v_flags);
            }
            mh$.invokeExact(value, v_flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_get_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_get_flags");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_value_get_flags(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_get_flags$descriptor() {
        return g_value_get_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_value_get_flags(const GValue *value)
     * }
     */
    public static MethodHandle g_value_get_flags$handle() {
        return g_value_get_flags.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern guint g_value_get_flags(const GValue *value)
     * }
     */
    public static MemorySegment g_value_get_flags$address() {
        return g_value_get_flags.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern guint g_value_get_flags(const GValue *value)
     * }
     */
    public static int g_value_get_flags(MemorySegment value) {
        var mh$ = g_value_get_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_get_flags", value);
            }
            return (int)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_module_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_module_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_type_module_get_type()
     * }
     */
    public static FunctionDescriptor g_type_module_get_type$descriptor() {
        return g_type_module_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_type_module_get_type()
     * }
     */
    public static MethodHandle g_type_module_get_type$handle() {
        return g_type_module_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType g_type_module_get_type()
     * }
     */
    public static MemorySegment g_type_module_get_type$address() {
        return g_type_module_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType g_type_module_get_type()
     * }
     */
    public static long g_type_module_get_type() {
        var mh$ = g_type_module_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_module_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_module_use {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_module_use");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_type_module_use(GTypeModule *module)
     * }
     */
    public static FunctionDescriptor g_type_module_use$descriptor() {
        return g_type_module_use.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_type_module_use(GTypeModule *module)
     * }
     */
    public static MethodHandle g_type_module_use$handle() {
        return g_type_module_use.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean g_type_module_use(GTypeModule *module)
     * }
     */
    public static MemorySegment g_type_module_use$address() {
        return g_type_module_use.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean g_type_module_use(GTypeModule *module)
     * }
     */
    public static int g_type_module_use(MemorySegment module) {
        var mh$ = g_type_module_use.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_module_use", module);
            }
            return (int)mh$.invokeExact(module);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_module_unuse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_module_unuse");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_module_unuse(GTypeModule *module)
     * }
     */
    public static FunctionDescriptor g_type_module_unuse$descriptor() {
        return g_type_module_unuse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_module_unuse(GTypeModule *module)
     * }
     */
    public static MethodHandle g_type_module_unuse$handle() {
        return g_type_module_unuse.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_type_module_unuse(GTypeModule *module)
     * }
     */
    public static MemorySegment g_type_module_unuse$address() {
        return g_type_module_unuse.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_type_module_unuse(GTypeModule *module)
     * }
     */
    public static void g_type_module_unuse(MemorySegment module) {
        var mh$ = g_type_module_unuse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_module_unuse", module);
            }
            mh$.invokeExact(module);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_module_set_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_module_set_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_module_set_name(GTypeModule *module, const gchar *name)
     * }
     */
    public static FunctionDescriptor g_type_module_set_name$descriptor() {
        return g_type_module_set_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_module_set_name(GTypeModule *module, const gchar *name)
     * }
     */
    public static MethodHandle g_type_module_set_name$handle() {
        return g_type_module_set_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_type_module_set_name(GTypeModule *module, const gchar *name)
     * }
     */
    public static MemorySegment g_type_module_set_name$address() {
        return g_type_module_set_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_type_module_set_name(GTypeModule *module, const gchar *name)
     * }
     */
    public static void g_type_module_set_name(MemorySegment module, MemorySegment name) {
        var mh$ = g_type_module_set_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_module_set_name", module, name);
            }
            mh$.invokeExact(module, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_module_register_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG,
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_module_register_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_type_module_register_type(GTypeModule *module, GType parent_type, const gchar *type_name, const GTypeInfo *type_info, GTypeFlags flags)
     * }
     */
    public static FunctionDescriptor g_type_module_register_type$descriptor() {
        return g_type_module_register_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_type_module_register_type(GTypeModule *module, GType parent_type, const gchar *type_name, const GTypeInfo *type_info, GTypeFlags flags)
     * }
     */
    public static MethodHandle g_type_module_register_type$handle() {
        return g_type_module_register_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType g_type_module_register_type(GTypeModule *module, GType parent_type, const gchar *type_name, const GTypeInfo *type_info, GTypeFlags flags)
     * }
     */
    public static MemorySegment g_type_module_register_type$address() {
        return g_type_module_register_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType g_type_module_register_type(GTypeModule *module, GType parent_type, const gchar *type_name, const GTypeInfo *type_info, GTypeFlags flags)
     * }
     */
    public static long g_type_module_register_type(MemorySegment module, long parent_type, MemorySegment type_name, MemorySegment type_info, int flags) {
        var mh$ = g_type_module_register_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_module_register_type", module, parent_type, type_name, type_info, flags);
            }
            return (long)mh$.invokeExact(module, parent_type, type_name, type_info, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_module_add_interface {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG,
            VipsRaw.C_LONG,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_module_add_interface");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_module_add_interface(GTypeModule *module, GType instance_type, GType interface_type, const GInterfaceInfo *interface_info)
     * }
     */
    public static FunctionDescriptor g_type_module_add_interface$descriptor() {
        return g_type_module_add_interface.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_module_add_interface(GTypeModule *module, GType instance_type, GType interface_type, const GInterfaceInfo *interface_info)
     * }
     */
    public static MethodHandle g_type_module_add_interface$handle() {
        return g_type_module_add_interface.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_type_module_add_interface(GTypeModule *module, GType instance_type, GType interface_type, const GInterfaceInfo *interface_info)
     * }
     */
    public static MemorySegment g_type_module_add_interface$address() {
        return g_type_module_add_interface.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_type_module_add_interface(GTypeModule *module, GType instance_type, GType interface_type, const GInterfaceInfo *interface_info)
     * }
     */
    public static void g_type_module_add_interface(MemorySegment module, long instance_type, long interface_type, MemorySegment interface_info) {
        var mh$ = g_type_module_add_interface.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_module_add_interface", module, instance_type, interface_type, interface_info);
            }
            mh$.invokeExact(module, instance_type, interface_type, interface_info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_module_register_enum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_module_register_enum");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_type_module_register_enum(GTypeModule *module, const gchar *name, const GEnumValue *const_static_values)
     * }
     */
    public static FunctionDescriptor g_type_module_register_enum$descriptor() {
        return g_type_module_register_enum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_type_module_register_enum(GTypeModule *module, const gchar *name, const GEnumValue *const_static_values)
     * }
     */
    public static MethodHandle g_type_module_register_enum$handle() {
        return g_type_module_register_enum.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType g_type_module_register_enum(GTypeModule *module, const gchar *name, const GEnumValue *const_static_values)
     * }
     */
    public static MemorySegment g_type_module_register_enum$address() {
        return g_type_module_register_enum.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType g_type_module_register_enum(GTypeModule *module, const gchar *name, const GEnumValue *const_static_values)
     * }
     */
    public static long g_type_module_register_enum(MemorySegment module, MemorySegment name, MemorySegment const_static_values) {
        var mh$ = g_type_module_register_enum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_module_register_enum", module, name, const_static_values);
            }
            return (long)mh$.invokeExact(module, name, const_static_values);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_module_register_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_module_register_flags");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_type_module_register_flags(GTypeModule *module, const gchar *name, const GFlagsValue *const_static_values)
     * }
     */
    public static FunctionDescriptor g_type_module_register_flags$descriptor() {
        return g_type_module_register_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_type_module_register_flags(GTypeModule *module, const gchar *name, const GFlagsValue *const_static_values)
     * }
     */
    public static MethodHandle g_type_module_register_flags$handle() {
        return g_type_module_register_flags.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType g_type_module_register_flags(GTypeModule *module, const gchar *name, const GFlagsValue *const_static_values)
     * }
     */
    public static MemorySegment g_type_module_register_flags$address() {
        return g_type_module_register_flags.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType g_type_module_register_flags(GTypeModule *module, const gchar *name, const GFlagsValue *const_static_values)
     * }
     */
    public static long g_type_module_register_flags(MemorySegment module, MemorySegment name, MemorySegment const_static_values) {
        var mh$ = g_type_module_register_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_module_register_flags", module, name, const_static_values);
            }
            return (long)mh$.invokeExact(module, name, const_static_values);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_plugin_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_plugin_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_type_plugin_get_type()
     * }
     */
    public static FunctionDescriptor g_type_plugin_get_type$descriptor() {
        return g_type_plugin_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_type_plugin_get_type()
     * }
     */
    public static MethodHandle g_type_plugin_get_type$handle() {
        return g_type_plugin_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType g_type_plugin_get_type()
     * }
     */
    public static MemorySegment g_type_plugin_get_type$address() {
        return g_type_plugin_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType g_type_plugin_get_type()
     * }
     */
    public static long g_type_plugin_get_type() {
        var mh$ = g_type_plugin_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_plugin_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_plugin_use {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_plugin_use");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_plugin_use(GTypePlugin *plugin)
     * }
     */
    public static FunctionDescriptor g_type_plugin_use$descriptor() {
        return g_type_plugin_use.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_plugin_use(GTypePlugin *plugin)
     * }
     */
    public static MethodHandle g_type_plugin_use$handle() {
        return g_type_plugin_use.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_type_plugin_use(GTypePlugin *plugin)
     * }
     */
    public static MemorySegment g_type_plugin_use$address() {
        return g_type_plugin_use.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_type_plugin_use(GTypePlugin *plugin)
     * }
     */
    public static void g_type_plugin_use(MemorySegment plugin) {
        var mh$ = g_type_plugin_use.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_plugin_use", plugin);
            }
            mh$.invokeExact(plugin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_plugin_unuse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_plugin_unuse");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_plugin_unuse(GTypePlugin *plugin)
     * }
     */
    public static FunctionDescriptor g_type_plugin_unuse$descriptor() {
        return g_type_plugin_unuse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_plugin_unuse(GTypePlugin *plugin)
     * }
     */
    public static MethodHandle g_type_plugin_unuse$handle() {
        return g_type_plugin_unuse.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_type_plugin_unuse(GTypePlugin *plugin)
     * }
     */
    public static MemorySegment g_type_plugin_unuse$address() {
        return g_type_plugin_unuse.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_type_plugin_unuse(GTypePlugin *plugin)
     * }
     */
    public static void g_type_plugin_unuse(MemorySegment plugin) {
        var mh$ = g_type_plugin_unuse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_plugin_unuse", plugin);
            }
            mh$.invokeExact(plugin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_plugin_complete_type_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_plugin_complete_type_info");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_plugin_complete_type_info(GTypePlugin *plugin, GType g_type, GTypeInfo *info, GTypeValueTable *value_table)
     * }
     */
    public static FunctionDescriptor g_type_plugin_complete_type_info$descriptor() {
        return g_type_plugin_complete_type_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_plugin_complete_type_info(GTypePlugin *plugin, GType g_type, GTypeInfo *info, GTypeValueTable *value_table)
     * }
     */
    public static MethodHandle g_type_plugin_complete_type_info$handle() {
        return g_type_plugin_complete_type_info.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_type_plugin_complete_type_info(GTypePlugin *plugin, GType g_type, GTypeInfo *info, GTypeValueTable *value_table)
     * }
     */
    public static MemorySegment g_type_plugin_complete_type_info$address() {
        return g_type_plugin_complete_type_info.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_type_plugin_complete_type_info(GTypePlugin *plugin, GType g_type, GTypeInfo *info, GTypeValueTable *value_table)
     * }
     */
    public static void g_type_plugin_complete_type_info(MemorySegment plugin, long g_type, MemorySegment info, MemorySegment value_table) {
        var mh$ = g_type_plugin_complete_type_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_plugin_complete_type_info", plugin, g_type, info, value_table);
            }
            mh$.invokeExact(plugin, g_type, info, value_table);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_plugin_complete_interface_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG,
            VipsRaw.C_LONG,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_type_plugin_complete_interface_info");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_plugin_complete_interface_info(GTypePlugin *plugin, GType instance_type, GType interface_type, GInterfaceInfo *info)
     * }
     */
    public static FunctionDescriptor g_type_plugin_complete_interface_info$descriptor() {
        return g_type_plugin_complete_interface_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_plugin_complete_interface_info(GTypePlugin *plugin, GType instance_type, GType interface_type, GInterfaceInfo *info)
     * }
     */
    public static MethodHandle g_type_plugin_complete_interface_info$handle() {
        return g_type_plugin_complete_interface_info.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_type_plugin_complete_interface_info(GTypePlugin *plugin, GType instance_type, GType interface_type, GInterfaceInfo *info)
     * }
     */
    public static MemorySegment g_type_plugin_complete_interface_info$address() {
        return g_type_plugin_complete_interface_info.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_type_plugin_complete_interface_info(GTypePlugin *plugin, GType instance_type, GType interface_type, GInterfaceInfo *info)
     * }
     */
    public static void g_type_plugin_complete_interface_info(MemorySegment plugin, long instance_type, long interface_type, MemorySegment info) {
        var mh$ = g_type_plugin_complete_interface_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_plugin_complete_interface_info", plugin, instance_type, interface_type, info);
            }
            mh$.invokeExact(plugin, instance_type, interface_type, info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_array_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_array_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_value_array_get_type()
     * }
     */
    public static FunctionDescriptor g_value_array_get_type$descriptor() {
        return g_value_array_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_value_array_get_type()
     * }
     */
    public static MethodHandle g_value_array_get_type$handle() {
        return g_value_array_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType g_value_array_get_type()
     * }
     */
    public static MemorySegment g_value_array_get_type$address() {
        return g_value_array_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType g_value_array_get_type()
     * }
     */
    public static long g_value_array_get_type() {
        var mh$ = g_value_array_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_array_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_array_get_nth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_array_get_nth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GValue *g_value_array_get_nth(GValueArray *value_array, guint index_)
     * }
     */
    public static FunctionDescriptor g_value_array_get_nth$descriptor() {
        return g_value_array_get_nth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GValue *g_value_array_get_nth(GValueArray *value_array, guint index_)
     * }
     */
    public static MethodHandle g_value_array_get_nth$handle() {
        return g_value_array_get_nth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GValue *g_value_array_get_nth(GValueArray *value_array, guint index_)
     * }
     */
    public static MemorySegment g_value_array_get_nth$address() {
        return g_value_array_get_nth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GValue *g_value_array_get_nth(GValueArray *value_array, guint index_)
     * }
     */
    public static MemorySegment g_value_array_get_nth(MemorySegment value_array, int index_) {
        var mh$ = g_value_array_get_nth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_array_get_nth", value_array, index_);
            }
            return (MemorySegment)mh$.invokeExact(value_array, index_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_array_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_array_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_new(guint n_prealloced)
     * }
     */
    public static FunctionDescriptor g_value_array_new$descriptor() {
        return g_value_array_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_new(guint n_prealloced)
     * }
     */
    public static MethodHandle g_value_array_new$handle() {
        return g_value_array_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_new(guint n_prealloced)
     * }
     */
    public static MemorySegment g_value_array_new$address() {
        return g_value_array_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_new(guint n_prealloced)
     * }
     */
    public static MemorySegment g_value_array_new(int n_prealloced) {
        var mh$ = g_value_array_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_array_new", n_prealloced);
            }
            return (MemorySegment)mh$.invokeExact(n_prealloced);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_array_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_array_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_array_free(GValueArray *value_array)
     * }
     */
    public static FunctionDescriptor g_value_array_free$descriptor() {
        return g_value_array_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_array_free(GValueArray *value_array)
     * }
     */
    public static MethodHandle g_value_array_free$handle() {
        return g_value_array_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_value_array_free(GValueArray *value_array)
     * }
     */
    public static MemorySegment g_value_array_free$address() {
        return g_value_array_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_value_array_free(GValueArray *value_array)
     * }
     */
    public static void g_value_array_free(MemorySegment value_array) {
        var mh$ = g_value_array_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_array_free", value_array);
            }
            mh$.invokeExact(value_array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_array_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_array_copy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_copy(const GValueArray *value_array)
     * }
     */
    public static FunctionDescriptor g_value_array_copy$descriptor() {
        return g_value_array_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_copy(const GValueArray *value_array)
     * }
     */
    public static MethodHandle g_value_array_copy$handle() {
        return g_value_array_copy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_copy(const GValueArray *value_array)
     * }
     */
    public static MemorySegment g_value_array_copy$address() {
        return g_value_array_copy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_copy(const GValueArray *value_array)
     * }
     */
    public static MemorySegment g_value_array_copy(MemorySegment value_array) {
        var mh$ = g_value_array_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_array_copy", value_array);
            }
            return (MemorySegment)mh$.invokeExact(value_array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_array_prepend {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_array_prepend");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_prepend(GValueArray *value_array, const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_array_prepend$descriptor() {
        return g_value_array_prepend.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_prepend(GValueArray *value_array, const GValue *value)
     * }
     */
    public static MethodHandle g_value_array_prepend$handle() {
        return g_value_array_prepend.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_prepend(GValueArray *value_array, const GValue *value)
     * }
     */
    public static MemorySegment g_value_array_prepend$address() {
        return g_value_array_prepend.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_prepend(GValueArray *value_array, const GValue *value)
     * }
     */
    public static MemorySegment g_value_array_prepend(MemorySegment value_array, MemorySegment value) {
        var mh$ = g_value_array_prepend.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_array_prepend", value_array, value);
            }
            return (MemorySegment)mh$.invokeExact(value_array, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_array_append {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_array_append");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_append(GValueArray *value_array, const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_array_append$descriptor() {
        return g_value_array_append.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_append(GValueArray *value_array, const GValue *value)
     * }
     */
    public static MethodHandle g_value_array_append$handle() {
        return g_value_array_append.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_append(GValueArray *value_array, const GValue *value)
     * }
     */
    public static MemorySegment g_value_array_append$address() {
        return g_value_array_append.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_append(GValueArray *value_array, const GValue *value)
     * }
     */
    public static MemorySegment g_value_array_append(MemorySegment value_array, MemorySegment value) {
        var mh$ = g_value_array_append.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_array_append", value_array, value);
            }
            return (MemorySegment)mh$.invokeExact(value_array, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_array_insert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_array_insert");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_insert(GValueArray *value_array, guint index_, const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_array_insert$descriptor() {
        return g_value_array_insert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_insert(GValueArray *value_array, guint index_, const GValue *value)
     * }
     */
    public static MethodHandle g_value_array_insert$handle() {
        return g_value_array_insert.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_insert(GValueArray *value_array, guint index_, const GValue *value)
     * }
     */
    public static MemorySegment g_value_array_insert$address() {
        return g_value_array_insert.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_insert(GValueArray *value_array, guint index_, const GValue *value)
     * }
     */
    public static MemorySegment g_value_array_insert(MemorySegment value_array, int index_, MemorySegment value) {
        var mh$ = g_value_array_insert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_array_insert", value_array, index_, value);
            }
            return (MemorySegment)mh$.invokeExact(value_array, index_, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_array_remove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_array_remove");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_remove(GValueArray *value_array, guint index_)
     * }
     */
    public static FunctionDescriptor g_value_array_remove$descriptor() {
        return g_value_array_remove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_remove(GValueArray *value_array, guint index_)
     * }
     */
    public static MethodHandle g_value_array_remove$handle() {
        return g_value_array_remove.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_remove(GValueArray *value_array, guint index_)
     * }
     */
    public static MemorySegment g_value_array_remove$address() {
        return g_value_array_remove.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_remove(GValueArray *value_array, guint index_)
     * }
     */
    public static MemorySegment g_value_array_remove(MemorySegment value_array, int index_) {
        var mh$ = g_value_array_remove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_array_remove", value_array, index_);
            }
            return (MemorySegment)mh$.invokeExact(value_array, index_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_array_sort {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_array_sort");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_sort(GValueArray *value_array, GCompareFunc compare_func)
     * }
     */
    public static FunctionDescriptor g_value_array_sort$descriptor() {
        return g_value_array_sort.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_sort(GValueArray *value_array, GCompareFunc compare_func)
     * }
     */
    public static MethodHandle g_value_array_sort$handle() {
        return g_value_array_sort.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_sort(GValueArray *value_array, GCompareFunc compare_func)
     * }
     */
    public static MemorySegment g_value_array_sort$address() {
        return g_value_array_sort.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_sort(GValueArray *value_array, GCompareFunc compare_func)
     * }
     */
    public static MemorySegment g_value_array_sort(MemorySegment value_array, MemorySegment compare_func) {
        var mh$ = g_value_array_sort.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_array_sort", value_array, compare_func);
            }
            return (MemorySegment)mh$.invokeExact(value_array, compare_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_array_sort_with_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_array_sort_with_data");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_sort_with_data(GValueArray *value_array, GCompareDataFunc compare_func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_value_array_sort_with_data$descriptor() {
        return g_value_array_sort_with_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_sort_with_data(GValueArray *value_array, GCompareDataFunc compare_func, gpointer user_data)
     * }
     */
    public static MethodHandle g_value_array_sort_with_data$handle() {
        return g_value_array_sort_with_data.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_sort_with_data(GValueArray *value_array, GCompareDataFunc compare_func, gpointer user_data)
     * }
     */
    public static MemorySegment g_value_array_sort_with_data$address() {
        return g_value_array_sort_with_data.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_sort_with_data(GValueArray *value_array, GCompareDataFunc compare_func, gpointer user_data)
     * }
     */
    public static MemorySegment g_value_array_sort_with_data(MemorySegment value_array, MemorySegment compare_func, MemorySegment user_data) {
        var mh$ = g_value_array_sort_with_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_array_sort_with_data", value_array, compare_func, user_data);
            }
            return (MemorySegment)mh$.invokeExact(value_array, compare_func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_char {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_CHAR
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_set_char");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_char(GValue *value, gchar v_char)
     * }
     */
    public static FunctionDescriptor g_value_set_char$descriptor() {
        return g_value_set_char.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_char(GValue *value, gchar v_char)
     * }
     */
    public static MethodHandle g_value_set_char$handle() {
        return g_value_set_char.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_value_set_char(GValue *value, gchar v_char)
     * }
     */
    public static MemorySegment g_value_set_char$address() {
        return g_value_set_char.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_value_set_char(GValue *value, gchar v_char)
     * }
     */
    public static void g_value_set_char(MemorySegment value, byte v_char) {
        var mh$ = g_value_set_char.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_char", value, v_char);
            }
            mh$.invokeExact(value, v_char);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_get_char {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_CHAR,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_get_char");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar g_value_get_char(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_get_char$descriptor() {
        return g_value_get_char.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar g_value_get_char(const GValue *value)
     * }
     */
    public static MethodHandle g_value_get_char$handle() {
        return g_value_get_char.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gchar g_value_get_char(const GValue *value)
     * }
     */
    public static MemorySegment g_value_get_char$address() {
        return g_value_get_char.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gchar g_value_get_char(const GValue *value)
     * }
     */
    public static byte g_value_get_char(MemorySegment value) {
        var mh$ = g_value_get_char.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_get_char", value);
            }
            return (byte)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_schar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_CHAR
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_set_schar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_schar(GValue *value, gint8 v_char)
     * }
     */
    public static FunctionDescriptor g_value_set_schar$descriptor() {
        return g_value_set_schar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_schar(GValue *value, gint8 v_char)
     * }
     */
    public static MethodHandle g_value_set_schar$handle() {
        return g_value_set_schar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_value_set_schar(GValue *value, gint8 v_char)
     * }
     */
    public static MemorySegment g_value_set_schar$address() {
        return g_value_set_schar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_value_set_schar(GValue *value, gint8 v_char)
     * }
     */
    public static void g_value_set_schar(MemorySegment value, byte v_char) {
        var mh$ = g_value_set_schar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_schar", value, v_char);
            }
            mh$.invokeExact(value, v_char);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_get_schar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_CHAR,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_get_schar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint8 g_value_get_schar(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_get_schar$descriptor() {
        return g_value_get_schar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint8 g_value_get_schar(const GValue *value)
     * }
     */
    public static MethodHandle g_value_get_schar$handle() {
        return g_value_get_schar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gint8 g_value_get_schar(const GValue *value)
     * }
     */
    public static MemorySegment g_value_get_schar$address() {
        return g_value_get_schar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gint8 g_value_get_schar(const GValue *value)
     * }
     */
    public static byte g_value_get_schar(MemorySegment value) {
        var mh$ = g_value_get_schar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_get_schar", value);
            }
            return (byte)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_uchar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_CHAR
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_set_uchar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_uchar(GValue *value, guchar v_uchar)
     * }
     */
    public static FunctionDescriptor g_value_set_uchar$descriptor() {
        return g_value_set_uchar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_uchar(GValue *value, guchar v_uchar)
     * }
     */
    public static MethodHandle g_value_set_uchar$handle() {
        return g_value_set_uchar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_value_set_uchar(GValue *value, guchar v_uchar)
     * }
     */
    public static MemorySegment g_value_set_uchar$address() {
        return g_value_set_uchar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_value_set_uchar(GValue *value, guchar v_uchar)
     * }
     */
    public static void g_value_set_uchar(MemorySegment value, byte v_uchar) {
        var mh$ = g_value_set_uchar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_uchar", value, v_uchar);
            }
            mh$.invokeExact(value, v_uchar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_get_uchar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_CHAR,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_get_uchar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guchar g_value_get_uchar(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_get_uchar$descriptor() {
        return g_value_get_uchar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guchar g_value_get_uchar(const GValue *value)
     * }
     */
    public static MethodHandle g_value_get_uchar$handle() {
        return g_value_get_uchar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern guchar g_value_get_uchar(const GValue *value)
     * }
     */
    public static MemorySegment g_value_get_uchar$address() {
        return g_value_get_uchar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern guchar g_value_get_uchar(const GValue *value)
     * }
     */
    public static byte g_value_get_uchar(MemorySegment value) {
        var mh$ = g_value_get_uchar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_get_uchar", value);
            }
            return (byte)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_boolean {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_set_boolean");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_boolean(GValue *value, gboolean v_boolean)
     * }
     */
    public static FunctionDescriptor g_value_set_boolean$descriptor() {
        return g_value_set_boolean.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_boolean(GValue *value, gboolean v_boolean)
     * }
     */
    public static MethodHandle g_value_set_boolean$handle() {
        return g_value_set_boolean.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_value_set_boolean(GValue *value, gboolean v_boolean)
     * }
     */
    public static MemorySegment g_value_set_boolean$address() {
        return g_value_set_boolean.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_value_set_boolean(GValue *value, gboolean v_boolean)
     * }
     */
    public static void g_value_set_boolean(MemorySegment value, int v_boolean) {
        var mh$ = g_value_set_boolean.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_boolean", value, v_boolean);
            }
            mh$.invokeExact(value, v_boolean);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_get_boolean {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_get_boolean");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_value_get_boolean(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_get_boolean$descriptor() {
        return g_value_get_boolean.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_value_get_boolean(const GValue *value)
     * }
     */
    public static MethodHandle g_value_get_boolean$handle() {
        return g_value_get_boolean.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean g_value_get_boolean(const GValue *value)
     * }
     */
    public static MemorySegment g_value_get_boolean$address() {
        return g_value_get_boolean.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean g_value_get_boolean(const GValue *value)
     * }
     */
    public static int g_value_get_boolean(MemorySegment value) {
        var mh$ = g_value_get_boolean.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_get_boolean", value);
            }
            return (int)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_int {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_set_int");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_int(GValue *value, gint v_int)
     * }
     */
    public static FunctionDescriptor g_value_set_int$descriptor() {
        return g_value_set_int.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_int(GValue *value, gint v_int)
     * }
     */
    public static MethodHandle g_value_set_int$handle() {
        return g_value_set_int.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_value_set_int(GValue *value, gint v_int)
     * }
     */
    public static MemorySegment g_value_set_int$address() {
        return g_value_set_int.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_value_set_int(GValue *value, gint v_int)
     * }
     */
    public static void g_value_set_int(MemorySegment value, int v_int) {
        var mh$ = g_value_set_int.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_int", value, v_int);
            }
            mh$.invokeExact(value, v_int);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_get_int {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_get_int");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_value_get_int(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_get_int$descriptor() {
        return g_value_get_int.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_value_get_int(const GValue *value)
     * }
     */
    public static MethodHandle g_value_get_int$handle() {
        return g_value_get_int.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gint g_value_get_int(const GValue *value)
     * }
     */
    public static MemorySegment g_value_get_int$address() {
        return g_value_get_int.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gint g_value_get_int(const GValue *value)
     * }
     */
    public static int g_value_get_int(MemorySegment value) {
        var mh$ = g_value_get_int.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_get_int", value);
            }
            return (int)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_uint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_set_uint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_uint(GValue *value, guint v_uint)
     * }
     */
    public static FunctionDescriptor g_value_set_uint$descriptor() {
        return g_value_set_uint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_uint(GValue *value, guint v_uint)
     * }
     */
    public static MethodHandle g_value_set_uint$handle() {
        return g_value_set_uint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_value_set_uint(GValue *value, guint v_uint)
     * }
     */
    public static MemorySegment g_value_set_uint$address() {
        return g_value_set_uint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_value_set_uint(GValue *value, guint v_uint)
     * }
     */
    public static void g_value_set_uint(MemorySegment value, int v_uint) {
        var mh$ = g_value_set_uint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_uint", value, v_uint);
            }
            mh$.invokeExact(value, v_uint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_get_uint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_get_uint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_value_get_uint(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_get_uint$descriptor() {
        return g_value_get_uint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_value_get_uint(const GValue *value)
     * }
     */
    public static MethodHandle g_value_get_uint$handle() {
        return g_value_get_uint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern guint g_value_get_uint(const GValue *value)
     * }
     */
    public static MemorySegment g_value_get_uint$address() {
        return g_value_get_uint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern guint g_value_get_uint(const GValue *value)
     * }
     */
    public static int g_value_get_uint(MemorySegment value) {
        var mh$ = g_value_get_uint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_get_uint", value);
            }
            return (int)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_long {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_set_long");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_long(GValue *value, glong v_long)
     * }
     */
    public static FunctionDescriptor g_value_set_long$descriptor() {
        return g_value_set_long.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_long(GValue *value, glong v_long)
     * }
     */
    public static MethodHandle g_value_set_long$handle() {
        return g_value_set_long.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_value_set_long(GValue *value, glong v_long)
     * }
     */
    public static MemorySegment g_value_set_long$address() {
        return g_value_set_long.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_value_set_long(GValue *value, glong v_long)
     * }
     */
    public static void g_value_set_long(MemorySegment value, long v_long) {
        var mh$ = g_value_set_long.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_long", value, v_long);
            }
            mh$.invokeExact(value, v_long);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_get_long {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_get_long");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern glong g_value_get_long(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_get_long$descriptor() {
        return g_value_get_long.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern glong g_value_get_long(const GValue *value)
     * }
     */
    public static MethodHandle g_value_get_long$handle() {
        return g_value_get_long.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern glong g_value_get_long(const GValue *value)
     * }
     */
    public static MemorySegment g_value_get_long$address() {
        return g_value_get_long.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern glong g_value_get_long(const GValue *value)
     * }
     */
    public static long g_value_get_long(MemorySegment value) {
        var mh$ = g_value_get_long.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_get_long", value);
            }
            return (long)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_ulong {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_set_ulong");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_ulong(GValue *value, gulong v_ulong)
     * }
     */
    public static FunctionDescriptor g_value_set_ulong$descriptor() {
        return g_value_set_ulong.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_ulong(GValue *value, gulong v_ulong)
     * }
     */
    public static MethodHandle g_value_set_ulong$handle() {
        return g_value_set_ulong.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_value_set_ulong(GValue *value, gulong v_ulong)
     * }
     */
    public static MemorySegment g_value_set_ulong$address() {
        return g_value_set_ulong.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_value_set_ulong(GValue *value, gulong v_ulong)
     * }
     */
    public static void g_value_set_ulong(MemorySegment value, long v_ulong) {
        var mh$ = g_value_set_ulong.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_ulong", value, v_ulong);
            }
            mh$.invokeExact(value, v_ulong);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_get_ulong {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_get_ulong");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gulong g_value_get_ulong(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_get_ulong$descriptor() {
        return g_value_get_ulong.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gulong g_value_get_ulong(const GValue *value)
     * }
     */
    public static MethodHandle g_value_get_ulong$handle() {
        return g_value_get_ulong.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gulong g_value_get_ulong(const GValue *value)
     * }
     */
    public static MemorySegment g_value_get_ulong$address() {
        return g_value_get_ulong.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gulong g_value_get_ulong(const GValue *value)
     * }
     */
    public static long g_value_get_ulong(MemorySegment value) {
        var mh$ = g_value_get_ulong.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_get_ulong", value);
            }
            return (long)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_int64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_set_int64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_int64(GValue *value, gint64 v_int64)
     * }
     */
    public static FunctionDescriptor g_value_set_int64$descriptor() {
        return g_value_set_int64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_int64(GValue *value, gint64 v_int64)
     * }
     */
    public static MethodHandle g_value_set_int64$handle() {
        return g_value_set_int64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_value_set_int64(GValue *value, gint64 v_int64)
     * }
     */
    public static MemorySegment g_value_set_int64$address() {
        return g_value_set_int64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_value_set_int64(GValue *value, gint64 v_int64)
     * }
     */
    public static void g_value_set_int64(MemorySegment value, long v_int64) {
        var mh$ = g_value_set_int64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_int64", value, v_int64);
            }
            mh$.invokeExact(value, v_int64);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_get_int64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG_LONG,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_get_int64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint64 g_value_get_int64(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_get_int64$descriptor() {
        return g_value_get_int64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint64 g_value_get_int64(const GValue *value)
     * }
     */
    public static MethodHandle g_value_get_int64$handle() {
        return g_value_get_int64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gint64 g_value_get_int64(const GValue *value)
     * }
     */
    public static MemorySegment g_value_get_int64$address() {
        return g_value_get_int64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gint64 g_value_get_int64(const GValue *value)
     * }
     */
    public static long g_value_get_int64(MemorySegment value) {
        var mh$ = g_value_get_int64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_get_int64", value);
            }
            return (long)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_uint64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_set_uint64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_uint64(GValue *value, guint64 v_uint64)
     * }
     */
    public static FunctionDescriptor g_value_set_uint64$descriptor() {
        return g_value_set_uint64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_uint64(GValue *value, guint64 v_uint64)
     * }
     */
    public static MethodHandle g_value_set_uint64$handle() {
        return g_value_set_uint64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_value_set_uint64(GValue *value, guint64 v_uint64)
     * }
     */
    public static MemorySegment g_value_set_uint64$address() {
        return g_value_set_uint64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_value_set_uint64(GValue *value, guint64 v_uint64)
     * }
     */
    public static void g_value_set_uint64(MemorySegment value, long v_uint64) {
        var mh$ = g_value_set_uint64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_uint64", value, v_uint64);
            }
            mh$.invokeExact(value, v_uint64);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_get_uint64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG_LONG,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_get_uint64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint64 g_value_get_uint64(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_get_uint64$descriptor() {
        return g_value_get_uint64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint64 g_value_get_uint64(const GValue *value)
     * }
     */
    public static MethodHandle g_value_get_uint64$handle() {
        return g_value_get_uint64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern guint64 g_value_get_uint64(const GValue *value)
     * }
     */
    public static MemorySegment g_value_get_uint64$address() {
        return g_value_get_uint64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern guint64 g_value_get_uint64(const GValue *value)
     * }
     */
    public static long g_value_get_uint64(MemorySegment value) {
        var mh$ = g_value_get_uint64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_get_uint64", value);
            }
            return (long)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_float {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_FLOAT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_set_float");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_float(GValue *value, gfloat v_float)
     * }
     */
    public static FunctionDescriptor g_value_set_float$descriptor() {
        return g_value_set_float.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_float(GValue *value, gfloat v_float)
     * }
     */
    public static MethodHandle g_value_set_float$handle() {
        return g_value_set_float.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_value_set_float(GValue *value, gfloat v_float)
     * }
     */
    public static MemorySegment g_value_set_float$address() {
        return g_value_set_float.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_value_set_float(GValue *value, gfloat v_float)
     * }
     */
    public static void g_value_set_float(MemorySegment value, float v_float) {
        var mh$ = g_value_set_float.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_float", value, v_float);
            }
            mh$.invokeExact(value, v_float);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_get_float {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_FLOAT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_get_float");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gfloat g_value_get_float(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_get_float$descriptor() {
        return g_value_get_float.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gfloat g_value_get_float(const GValue *value)
     * }
     */
    public static MethodHandle g_value_get_float$handle() {
        return g_value_get_float.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gfloat g_value_get_float(const GValue *value)
     * }
     */
    public static MemorySegment g_value_get_float$address() {
        return g_value_get_float.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gfloat g_value_get_float(const GValue *value)
     * }
     */
    public static float g_value_get_float(MemorySegment value) {
        var mh$ = g_value_get_float.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_get_float", value);
            }
            return (float)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_double {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_DOUBLE
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_set_double");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_double(GValue *value, gdouble v_double)
     * }
     */
    public static FunctionDescriptor g_value_set_double$descriptor() {
        return g_value_set_double.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_double(GValue *value, gdouble v_double)
     * }
     */
    public static MethodHandle g_value_set_double$handle() {
        return g_value_set_double.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_value_set_double(GValue *value, gdouble v_double)
     * }
     */
    public static MemorySegment g_value_set_double$address() {
        return g_value_set_double.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_value_set_double(GValue *value, gdouble v_double)
     * }
     */
    public static void g_value_set_double(MemorySegment value, double v_double) {
        var mh$ = g_value_set_double.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_double", value, v_double);
            }
            mh$.invokeExact(value, v_double);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_get_double {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_DOUBLE,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_get_double");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble g_value_get_double(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_get_double$descriptor() {
        return g_value_get_double.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble g_value_get_double(const GValue *value)
     * }
     */
    public static MethodHandle g_value_get_double$handle() {
        return g_value_get_double.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gdouble g_value_get_double(const GValue *value)
     * }
     */
    public static MemorySegment g_value_get_double$address() {
        return g_value_get_double.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gdouble g_value_get_double(const GValue *value)
     * }
     */
    public static double g_value_get_double(MemorySegment value) {
        var mh$ = g_value_get_double.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_get_double", value);
            }
            return (double)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_set_string");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_string(GValue *value, const gchar *v_string)
     * }
     */
    public static FunctionDescriptor g_value_set_string$descriptor() {
        return g_value_set_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_string(GValue *value, const gchar *v_string)
     * }
     */
    public static MethodHandle g_value_set_string$handle() {
        return g_value_set_string.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_value_set_string(GValue *value, const gchar *v_string)
     * }
     */
    public static MemorySegment g_value_set_string$address() {
        return g_value_set_string.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_value_set_string(GValue *value, const gchar *v_string)
     * }
     */
    public static void g_value_set_string(MemorySegment value, MemorySegment v_string) {
        var mh$ = g_value_set_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_string", value, v_string);
            }
            mh$.invokeExact(value, v_string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_static_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_set_static_string");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_static_string(GValue *value, const gchar *v_string)
     * }
     */
    public static FunctionDescriptor g_value_set_static_string$descriptor() {
        return g_value_set_static_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_static_string(GValue *value, const gchar *v_string)
     * }
     */
    public static MethodHandle g_value_set_static_string$handle() {
        return g_value_set_static_string.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_value_set_static_string(GValue *value, const gchar *v_string)
     * }
     */
    public static MemorySegment g_value_set_static_string$address() {
        return g_value_set_static_string.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_value_set_static_string(GValue *value, const gchar *v_string)
     * }
     */
    public static void g_value_set_static_string(MemorySegment value, MemorySegment v_string) {
        var mh$ = g_value_set_static_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_static_string", value, v_string);
            }
            mh$.invokeExact(value, v_string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_interned_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_set_interned_string");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_interned_string(GValue *value, const gchar *v_string)
     * }
     */
    public static FunctionDescriptor g_value_set_interned_string$descriptor() {
        return g_value_set_interned_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_interned_string(GValue *value, const gchar *v_string)
     * }
     */
    public static MethodHandle g_value_set_interned_string$handle() {
        return g_value_set_interned_string.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_value_set_interned_string(GValue *value, const gchar *v_string)
     * }
     */
    public static MemorySegment g_value_set_interned_string$address() {
        return g_value_set_interned_string.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_value_set_interned_string(GValue *value, const gchar *v_string)
     * }
     */
    public static void g_value_set_interned_string(MemorySegment value, MemorySegment v_string) {
        var mh$ = g_value_set_interned_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_interned_string", value, v_string);
            }
            mh$.invokeExact(value, v_string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_get_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_get_string");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_value_get_string(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_get_string$descriptor() {
        return g_value_get_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_value_get_string(const GValue *value)
     * }
     */
    public static MethodHandle g_value_get_string$handle() {
        return g_value_get_string.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const gchar *g_value_get_string(const GValue *value)
     * }
     */
    public static MemorySegment g_value_get_string$address() {
        return g_value_get_string.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const gchar *g_value_get_string(const GValue *value)
     * }
     */
    public static MemorySegment g_value_get_string(MemorySegment value) {
        var mh$ = g_value_get_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_get_string", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_dup_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_dup_string");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_value_dup_string(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_dup_string$descriptor() {
        return g_value_dup_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_value_dup_string(const GValue *value)
     * }
     */
    public static MethodHandle g_value_dup_string$handle() {
        return g_value_dup_string.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gchar *g_value_dup_string(const GValue *value)
     * }
     */
    public static MemorySegment g_value_dup_string$address() {
        return g_value_dup_string.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gchar *g_value_dup_string(const GValue *value)
     * }
     */
    public static MemorySegment g_value_dup_string(MemorySegment value) {
        var mh$ = g_value_dup_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_dup_string", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_steal_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_steal_string");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_value_steal_string(GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_steal_string$descriptor() {
        return g_value_steal_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_value_steal_string(GValue *value)
     * }
     */
    public static MethodHandle g_value_steal_string$handle() {
        return g_value_steal_string.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gchar *g_value_steal_string(GValue *value)
     * }
     */
    public static MemorySegment g_value_steal_string$address() {
        return g_value_steal_string.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gchar *g_value_steal_string(GValue *value)
     * }
     */
    public static MemorySegment g_value_steal_string(MemorySegment value) {
        var mh$ = g_value_steal_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_steal_string", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_pointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_set_pointer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_pointer(GValue *value, gpointer v_pointer)
     * }
     */
    public static FunctionDescriptor g_value_set_pointer$descriptor() {
        return g_value_set_pointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_pointer(GValue *value, gpointer v_pointer)
     * }
     */
    public static MethodHandle g_value_set_pointer$handle() {
        return g_value_set_pointer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_value_set_pointer(GValue *value, gpointer v_pointer)
     * }
     */
    public static MemorySegment g_value_set_pointer$address() {
        return g_value_set_pointer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_value_set_pointer(GValue *value, gpointer v_pointer)
     * }
     */
    public static void g_value_set_pointer(MemorySegment value, MemorySegment v_pointer) {
        var mh$ = g_value_set_pointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_pointer", value, v_pointer);
            }
            mh$.invokeExact(value, v_pointer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_get_pointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_get_pointer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_value_get_pointer(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_get_pointer$descriptor() {
        return g_value_get_pointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_value_get_pointer(const GValue *value)
     * }
     */
    public static MethodHandle g_value_get_pointer$handle() {
        return g_value_get_pointer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gpointer g_value_get_pointer(const GValue *value)
     * }
     */
    public static MemorySegment g_value_get_pointer$address() {
        return g_value_get_pointer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gpointer g_value_get_pointer(const GValue *value)
     * }
     */
    public static MemorySegment g_value_get_pointer(MemorySegment value) {
        var mh$ = g_value_get_pointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_get_pointer", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_gtype {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_set_gtype");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_gtype(GValue *value, GType v_gtype)
     * }
     */
    public static FunctionDescriptor g_value_set_gtype$descriptor() {
        return g_value_set_gtype.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_gtype(GValue *value, GType v_gtype)
     * }
     */
    public static MethodHandle g_value_set_gtype$handle() {
        return g_value_set_gtype.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_value_set_gtype(GValue *value, GType v_gtype)
     * }
     */
    public static MemorySegment g_value_set_gtype$address() {
        return g_value_set_gtype.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_value_set_gtype(GValue *value, GType v_gtype)
     * }
     */
    public static void g_value_set_gtype(MemorySegment value, long v_gtype) {
        var mh$ = g_value_set_gtype.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_gtype", value, v_gtype);
            }
            mh$.invokeExact(value, v_gtype);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_get_gtype {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_get_gtype");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_value_get_gtype(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_get_gtype$descriptor() {
        return g_value_get_gtype.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_value_get_gtype(const GValue *value)
     * }
     */
    public static MethodHandle g_value_get_gtype$handle() {
        return g_value_get_gtype.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType g_value_get_gtype(const GValue *value)
     * }
     */
    public static MemorySegment g_value_get_gtype$address() {
        return g_value_get_gtype.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType g_value_get_gtype(const GValue *value)
     * }
     */
    public static long g_value_get_gtype(MemorySegment value) {
        var mh$ = g_value_get_gtype.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_get_gtype", value);
            }
            return (long)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_variant {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_set_variant");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_variant(GValue *value, GVariant *variant)
     * }
     */
    public static FunctionDescriptor g_value_set_variant$descriptor() {
        return g_value_set_variant.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_variant(GValue *value, GVariant *variant)
     * }
     */
    public static MethodHandle g_value_set_variant$handle() {
        return g_value_set_variant.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_value_set_variant(GValue *value, GVariant *variant)
     * }
     */
    public static MemorySegment g_value_set_variant$address() {
        return g_value_set_variant.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_value_set_variant(GValue *value, GVariant *variant)
     * }
     */
    public static void g_value_set_variant(MemorySegment value, MemorySegment variant) {
        var mh$ = g_value_set_variant.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_variant", value, variant);
            }
            mh$.invokeExact(value, variant);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_take_variant {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_take_variant");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_take_variant(GValue *value, GVariant *variant)
     * }
     */
    public static FunctionDescriptor g_value_take_variant$descriptor() {
        return g_value_take_variant.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_take_variant(GValue *value, GVariant *variant)
     * }
     */
    public static MethodHandle g_value_take_variant$handle() {
        return g_value_take_variant.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_value_take_variant(GValue *value, GVariant *variant)
     * }
     */
    public static MemorySegment g_value_take_variant$address() {
        return g_value_take_variant.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_value_take_variant(GValue *value, GVariant *variant)
     * }
     */
    public static void g_value_take_variant(MemorySegment value, MemorySegment variant) {
        var mh$ = g_value_take_variant.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_take_variant", value, variant);
            }
            mh$.invokeExact(value, variant);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_get_variant {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_get_variant");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_value_get_variant(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_get_variant$descriptor() {
        return g_value_get_variant.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_value_get_variant(const GValue *value)
     * }
     */
    public static MethodHandle g_value_get_variant$handle() {
        return g_value_get_variant.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GVariant *g_value_get_variant(const GValue *value)
     * }
     */
    public static MemorySegment g_value_get_variant$address() {
        return g_value_get_variant.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GVariant *g_value_get_variant(const GValue *value)
     * }
     */
    public static MemorySegment g_value_get_variant(MemorySegment value) {
        var mh$ = g_value_get_variant.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_get_variant", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_dup_variant {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_dup_variant");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_value_dup_variant(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_dup_variant$descriptor() {
        return g_value_dup_variant.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_value_dup_variant(const GValue *value)
     * }
     */
    public static MethodHandle g_value_dup_variant$handle() {
        return g_value_dup_variant.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GVariant *g_value_dup_variant(const GValue *value)
     * }
     */
    public static MemorySegment g_value_dup_variant$address() {
        return g_value_dup_variant.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GVariant *g_value_dup_variant(const GValue *value)
     * }
     */
    public static MemorySegment g_value_dup_variant(MemorySegment value) {
        var mh$ = g_value_dup_variant.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_dup_variant", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_take_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_take_string");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_take_string(GValue *value, gchar *v_string)
     * }
     */
    public static FunctionDescriptor g_value_take_string$descriptor() {
        return g_value_take_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_take_string(GValue *value, gchar *v_string)
     * }
     */
    public static MethodHandle g_value_take_string$handle() {
        return g_value_take_string.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_value_take_string(GValue *value, gchar *v_string)
     * }
     */
    public static MemorySegment g_value_take_string$address() {
        return g_value_take_string.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_value_take_string(GValue *value, gchar *v_string)
     * }
     */
    public static void g_value_take_string(MemorySegment value, MemorySegment v_string) {
        var mh$ = g_value_take_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_take_string", value, v_string);
            }
            mh$.invokeExact(value, v_string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_string_take_ownership {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("g_value_set_string_take_ownership");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_string_take_ownership(GValue *value, gchar *v_string)
     * }
     */
    public static FunctionDescriptor g_value_set_string_take_ownership$descriptor() {
        return g_value_set_string_take_ownership.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_string_take_ownership(GValue *value, gchar *v_string)
     * }
     */
    public static MethodHandle g_value_set_string_take_ownership$handle() {
        return g_value_set_string_take_ownership.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void g_value_set_string_take_ownership(GValue *value, gchar *v_string)
     * }
     */
    public static MemorySegment g_value_set_string_take_ownership$address() {
        return g_value_set_string_take_ownership.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void g_value_set_string_take_ownership(GValue *value, gchar *v_string)
     * }
     */
    public static void g_value_set_string_take_ownership(MemorySegment value, MemorySegment v_string) {
        var mh$ = g_value_set_string_take_ownership.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_string_take_ownership", value, v_string);
            }
            mh$.invokeExact(value, v_string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef GObject *GObject_autoptr
     * }
     */
    public static final AddressLayout GObject_autoptr = VipsRaw.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GObject_listautoptr
     * }
     */
    public static final AddressLayout GObject_listautoptr = VipsRaw.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GObject_slistautoptr
     * }
     */
    public static final AddressLayout GObject_slistautoptr = VipsRaw.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GObject_queueautoptr
     * }
     */
    public static final AddressLayout GObject_queueautoptr = VipsRaw.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GParamSpec *GParamSpec_autoptr
     * }
     */
    public static final AddressLayout GParamSpec_autoptr = VipsRaw.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GParamSpec_listautoptr
     * }
     */
    public static final AddressLayout GParamSpec_listautoptr = VipsRaw.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GParamSpec_slistautoptr
     * }
     */
    public static final AddressLayout GParamSpec_slistautoptr = VipsRaw.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GParamSpec_queueautoptr
     * }
     */
    public static final AddressLayout GParamSpec_queueautoptr = VipsRaw.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GTypeClass *GTypeClass_autoptr
     * }
     */
    public static final AddressLayout GTypeClass_autoptr = VipsRaw.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GTypeClass_listautoptr
     * }
     */
    public static final AddressLayout GTypeClass_listautoptr = VipsRaw.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GTypeClass_slistautoptr
     * }
     */
    public static final AddressLayout GTypeClass_slistautoptr = VipsRaw.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GTypeClass_queueautoptr
     * }
     */
    public static final AddressLayout GTypeClass_queueautoptr = VipsRaw.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GInputStream *GInputStream_autoptr
     * }
     */
    public static final AddressLayout GInputStream_autoptr = VipsRaw.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GInputStream_listautoptr
     * }
     */
    public static final AddressLayout GInputStream_listautoptr = VipsRaw.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GInputStream_slistautoptr
     * }
     */
    public static final AddressLayout GInputStream_slistautoptr = VipsRaw.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GInputStream_queueautoptr
     * }
     */
    public static final AddressLayout GInputStream_queueautoptr = VipsRaw.C_POINTER;
    private static final int VIPS_PRECISION_INTEGER = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_PRECISION_INTEGER = 0
     * }
     */
    public static int VIPS_PRECISION_INTEGER() {
        return VIPS_PRECISION_INTEGER;
    }
    private static final int VIPS_PRECISION_FLOAT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_PRECISION_FLOAT = 1
     * }
     */
    public static int VIPS_PRECISION_FLOAT() {
        return VIPS_PRECISION_FLOAT;
    }
    private static final int VIPS_PRECISION_APPROXIMATE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_PRECISION_APPROXIMATE = 2
     * }
     */
    public static int VIPS_PRECISION_APPROXIMATE() {
        return VIPS_PRECISION_APPROXIMATE;
    }
    private static final int VIPS_PRECISION_LAST = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_PRECISION_LAST = 3
     * }
     */
    public static int VIPS_PRECISION_LAST() {
        return VIPS_PRECISION_LAST;
    }

    private static class vips_enum_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_enum_string");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *vips_enum_string(GType enm, int value)
     * }
     */
    public static FunctionDescriptor vips_enum_string$descriptor() {
        return vips_enum_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *vips_enum_string(GType enm, int value)
     * }
     */
    public static MethodHandle vips_enum_string$handle() {
        return vips_enum_string.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *vips_enum_string(GType enm, int value)
     * }
     */
    public static MemorySegment vips_enum_string$address() {
        return vips_enum_string.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *vips_enum_string(GType enm, int value)
     * }
     */
    public static MemorySegment vips_enum_string(long enm, int value) {
        var mh$ = vips_enum_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_enum_string", enm, value);
            }
            return (MemorySegment)mh$.invokeExact(enm, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_enum_nick {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_enum_nick");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *vips_enum_nick(GType enm, int value)
     * }
     */
    public static FunctionDescriptor vips_enum_nick$descriptor() {
        return vips_enum_nick.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *vips_enum_nick(GType enm, int value)
     * }
     */
    public static MethodHandle vips_enum_nick$handle() {
        return vips_enum_nick.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *vips_enum_nick(GType enm, int value)
     * }
     */
    public static MemorySegment vips_enum_nick$address() {
        return vips_enum_nick.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *vips_enum_nick(GType enm, int value)
     * }
     */
    public static MemorySegment vips_enum_nick(long enm, int value) {
        var mh$ = vips_enum_nick.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_enum_nick", enm, value);
            }
            return (MemorySegment)mh$.invokeExact(enm, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_enum_from_nick {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_enum_from_nick");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_enum_from_nick(const char *domain, GType type, const char *str)
     * }
     */
    public static FunctionDescriptor vips_enum_from_nick$descriptor() {
        return vips_enum_from_nick.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_enum_from_nick(const char *domain, GType type, const char *str)
     * }
     */
    public static MethodHandle vips_enum_from_nick$handle() {
        return vips_enum_from_nick.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_enum_from_nick(const char *domain, GType type, const char *str)
     * }
     */
    public static MemorySegment vips_enum_from_nick$address() {
        return vips_enum_from_nick.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_enum_from_nick(const char *domain, GType type, const char *str)
     * }
     */
    public static int vips_enum_from_nick(MemorySegment domain, long type, MemorySegment str) {
        var mh$ = vips_enum_from_nick.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_enum_from_nick", domain, type, str);
            }
            return (int)mh$.invokeExact(domain, type, str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VIPS_TOKEN_LEFT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_TOKEN_LEFT = 1
     * }
     */
    public static int VIPS_TOKEN_LEFT() {
        return VIPS_TOKEN_LEFT;
    }
    private static final int VIPS_TOKEN_RIGHT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_TOKEN_RIGHT = 2
     * }
     */
    public static int VIPS_TOKEN_RIGHT() {
        return VIPS_TOKEN_RIGHT;
    }
    private static final int VIPS_TOKEN_STRING = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_TOKEN_STRING = 3
     * }
     */
    public static int VIPS_TOKEN_STRING() {
        return VIPS_TOKEN_STRING;
    }
    private static final int VIPS_TOKEN_EQUALS = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_TOKEN_EQUALS = 4
     * }
     */
    public static int VIPS_TOKEN_EQUALS() {
        return VIPS_TOKEN_EQUALS;
    }
    private static final int VIPS_TOKEN_COMMA = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_TOKEN_COMMA = 5
     * }
     */
    public static int VIPS_TOKEN_COMMA() {
        return VIPS_TOKEN_COMMA;
    }
    private static final int VIPS_ARGUMENT_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ARGUMENT_NONE = 0
     * }
     */
    public static int VIPS_ARGUMENT_NONE() {
        return VIPS_ARGUMENT_NONE;
    }
    private static final int VIPS_ARGUMENT_REQUIRED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ARGUMENT_REQUIRED = 1
     * }
     */
    public static int VIPS_ARGUMENT_REQUIRED() {
        return VIPS_ARGUMENT_REQUIRED;
    }
    private static final int VIPS_ARGUMENT_CONSTRUCT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ARGUMENT_CONSTRUCT = 2
     * }
     */
    public static int VIPS_ARGUMENT_CONSTRUCT() {
        return VIPS_ARGUMENT_CONSTRUCT;
    }
    private static final int VIPS_ARGUMENT_SET_ONCE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ARGUMENT_SET_ONCE = 4
     * }
     */
    public static int VIPS_ARGUMENT_SET_ONCE() {
        return VIPS_ARGUMENT_SET_ONCE;
    }
    private static final int VIPS_ARGUMENT_SET_ALWAYS = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ARGUMENT_SET_ALWAYS = 8
     * }
     */
    public static int VIPS_ARGUMENT_SET_ALWAYS() {
        return VIPS_ARGUMENT_SET_ALWAYS;
    }
    private static final int VIPS_ARGUMENT_INPUT = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ARGUMENT_INPUT = 16
     * }
     */
    public static int VIPS_ARGUMENT_INPUT() {
        return VIPS_ARGUMENT_INPUT;
    }
    private static final int VIPS_ARGUMENT_OUTPUT = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ARGUMENT_OUTPUT = 32
     * }
     */
    public static int VIPS_ARGUMENT_OUTPUT() {
        return VIPS_ARGUMENT_OUTPUT;
    }
    private static final int VIPS_ARGUMENT_DEPRECATED = (int)64L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ARGUMENT_DEPRECATED = 64
     * }
     */
    public static int VIPS_ARGUMENT_DEPRECATED() {
        return VIPS_ARGUMENT_DEPRECATED;
    }
    private static final int VIPS_ARGUMENT_MODIFY = (int)128L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ARGUMENT_MODIFY = 128
     * }
     */
    public static int VIPS_ARGUMENT_MODIFY() {
        return VIPS_ARGUMENT_MODIFY;
    }
    private static final int VIPS_ARGUMENT_NON_HASHABLE = (int)256L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ARGUMENT_NON_HASHABLE = 256
     * }
     */
    public static int VIPS_ARGUMENT_NON_HASHABLE() {
        return VIPS_ARGUMENT_NON_HASHABLE;
    }

    private static class vips_object_get_args {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_object_get_args");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_object_get_args(VipsObject *object, const char ***names, int **flags, int *n_args)
     * }
     */
    public static FunctionDescriptor vips_object_get_args$descriptor() {
        return vips_object_get_args.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_object_get_args(VipsObject *object, const char ***names, int **flags, int *n_args)
     * }
     */
    public static MethodHandle vips_object_get_args$handle() {
        return vips_object_get_args.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_object_get_args(VipsObject *object, const char ***names, int **flags, int *n_args)
     * }
     */
    public static MemorySegment vips_object_get_args$address() {
        return vips_object_get_args.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_object_get_args(VipsObject *object, const char ***names, int **flags, int *n_args)
     * }
     */
    public static int vips_object_get_args(MemorySegment object, MemorySegment names, MemorySegment flags, MemorySegment n_args) {
        var mh$ = vips_object_get_args.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_get_args", object, names, flags, n_args);
            }
            return (int)mh$.invokeExact(object, names, flags, n_args);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_get_argument {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_object_get_argument");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_object_get_argument(VipsObject *object, const char *name, GParamSpec **pspec, VipsArgumentClass **argument_class, VipsArgumentInstance **argument_instance)
     * }
     */
    public static FunctionDescriptor vips_object_get_argument$descriptor() {
        return vips_object_get_argument.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_object_get_argument(VipsObject *object, const char *name, GParamSpec **pspec, VipsArgumentClass **argument_class, VipsArgumentInstance **argument_instance)
     * }
     */
    public static MethodHandle vips_object_get_argument$handle() {
        return vips_object_get_argument.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_object_get_argument(VipsObject *object, const char *name, GParamSpec **pspec, VipsArgumentClass **argument_class, VipsArgumentInstance **argument_instance)
     * }
     */
    public static MemorySegment vips_object_get_argument$address() {
        return vips_object_get_argument.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_object_get_argument(VipsObject *object, const char *name, GParamSpec **pspec, VipsArgumentClass **argument_class, VipsArgumentInstance **argument_instance)
     * }
     */
    public static int vips_object_get_argument(MemorySegment object, MemorySegment name, MemorySegment pspec, MemorySegment argument_class, MemorySegment argument_instance) {
        var mh$ = vips_object_get_argument.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_get_argument", object, name, pspec, argument_class, argument_instance);
            }
            return (int)mh$.invokeExact(object, name, pspec, argument_class, argument_instance);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_argument_isset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_object_argument_isset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_object_argument_isset(VipsObject *object, const char *name)
     * }
     */
    public static FunctionDescriptor vips_object_argument_isset$descriptor() {
        return vips_object_argument_isset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_object_argument_isset(VipsObject *object, const char *name)
     * }
     */
    public static MethodHandle vips_object_argument_isset$handle() {
        return vips_object_argument_isset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_object_argument_isset(VipsObject *object, const char *name)
     * }
     */
    public static MemorySegment vips_object_argument_isset$address() {
        return vips_object_argument_isset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_object_argument_isset(VipsObject *object, const char *name)
     * }
     */
    public static int vips_object_argument_isset(MemorySegment object, MemorySegment name) {
        var mh$ = vips_object_argument_isset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_argument_isset", object, name);
            }
            return (int)mh$.invokeExact(object, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_get_argument_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_object_get_argument_flags");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsArgumentFlags vips_object_get_argument_flags(VipsObject *object, const char *name)
     * }
     */
    public static FunctionDescriptor vips_object_get_argument_flags$descriptor() {
        return vips_object_get_argument_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsArgumentFlags vips_object_get_argument_flags(VipsObject *object, const char *name)
     * }
     */
    public static MethodHandle vips_object_get_argument_flags$handle() {
        return vips_object_get_argument_flags.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsArgumentFlags vips_object_get_argument_flags(VipsObject *object, const char *name)
     * }
     */
    public static MemorySegment vips_object_get_argument_flags$address() {
        return vips_object_get_argument_flags.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsArgumentFlags vips_object_get_argument_flags(VipsObject *object, const char *name)
     * }
     */
    public static int vips_object_get_argument_flags(MemorySegment object, MemorySegment name) {
        var mh$ = vips_object_get_argument_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_get_argument_flags", object, name);
            }
            return (int)mh$.invokeExact(object, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_get_argument_priority {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_object_get_argument_priority");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_object_get_argument_priority(VipsObject *object, const char *name)
     * }
     */
    public static FunctionDescriptor vips_object_get_argument_priority$descriptor() {
        return vips_object_get_argument_priority.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_object_get_argument_priority(VipsObject *object, const char *name)
     * }
     */
    public static MethodHandle vips_object_get_argument_priority$handle() {
        return vips_object_get_argument_priority.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_object_get_argument_priority(VipsObject *object, const char *name)
     * }
     */
    public static MemorySegment vips_object_get_argument_priority$address() {
        return vips_object_get_argument_priority.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_object_get_argument_priority(VipsObject *object, const char *name)
     * }
     */
    public static int vips_object_get_argument_priority(MemorySegment object, MemorySegment name) {
        var mh$ = vips_object_get_argument_priority.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_get_argument_priority", object, name);
            }
            return (int)mh$.invokeExact(object, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_value_is_null {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_value_is_null");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_value_is_null(GParamSpec *psoec, const GValue *value)
     * }
     */
    public static FunctionDescriptor vips_value_is_null$descriptor() {
        return vips_value_is_null.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_value_is_null(GParamSpec *psoec, const GValue *value)
     * }
     */
    public static MethodHandle vips_value_is_null$handle() {
        return vips_value_is_null.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_value_is_null(GParamSpec *psoec, const GValue *value)
     * }
     */
    public static MemorySegment vips_value_is_null$address() {
        return vips_value_is_null.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_value_is_null(GParamSpec *psoec, const GValue *value)
     * }
     */
    public static int vips_value_is_null(MemorySegment psoec, MemorySegment value) {
        var mh$ = vips_value_is_null.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_value_is_null", psoec, value);
            }
            return (int)mh$.invokeExact(psoec, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_set_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_object_set_property");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_object_set_property(GObject *gobject, guint property_id, const GValue *value, GParamSpec *pspec)
     * }
     */
    public static FunctionDescriptor vips_object_set_property$descriptor() {
        return vips_object_set_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_object_set_property(GObject *gobject, guint property_id, const GValue *value, GParamSpec *pspec)
     * }
     */
    public static MethodHandle vips_object_set_property$handle() {
        return vips_object_set_property.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_object_set_property(GObject *gobject, guint property_id, const GValue *value, GParamSpec *pspec)
     * }
     */
    public static MemorySegment vips_object_set_property$address() {
        return vips_object_set_property.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_object_set_property(GObject *gobject, guint property_id, const GValue *value, GParamSpec *pspec)
     * }
     */
    public static void vips_object_set_property(MemorySegment gobject, int property_id, MemorySegment value, MemorySegment pspec) {
        var mh$ = vips_object_set_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_set_property", gobject, property_id, value, pspec);
            }
            mh$.invokeExact(gobject, property_id, value, pspec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_get_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_object_get_property");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_object_get_property(GObject *gobject, guint property_id, GValue *value, GParamSpec *pspec)
     * }
     */
    public static FunctionDescriptor vips_object_get_property$descriptor() {
        return vips_object_get_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_object_get_property(GObject *gobject, guint property_id, GValue *value, GParamSpec *pspec)
     * }
     */
    public static MethodHandle vips_object_get_property$handle() {
        return vips_object_get_property.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_object_get_property(GObject *gobject, guint property_id, GValue *value, GParamSpec *pspec)
     * }
     */
    public static MemorySegment vips_object_get_property$address() {
        return vips_object_get_property.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_object_get_property(GObject *gobject, guint property_id, GValue *value, GParamSpec *pspec)
     * }
     */
    public static void vips_object_get_property(MemorySegment gobject, int property_id, MemorySegment value, MemorySegment pspec) {
        var mh$ = vips_object_get_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_get_property", gobject, property_id, value, pspec);
            }
            mh$.invokeExact(gobject, property_id, value, pspec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_preclose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_object_preclose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_object_preclose(VipsObject *object)
     * }
     */
    public static FunctionDescriptor vips_object_preclose$descriptor() {
        return vips_object_preclose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_object_preclose(VipsObject *object)
     * }
     */
    public static MethodHandle vips_object_preclose$handle() {
        return vips_object_preclose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_object_preclose(VipsObject *object)
     * }
     */
    public static MemorySegment vips_object_preclose$address() {
        return vips_object_preclose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_object_preclose(VipsObject *object)
     * }
     */
    public static void vips_object_preclose(MemorySegment object) {
        var mh$ = vips_object_preclose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_preclose", object);
            }
            mh$.invokeExact(object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_build {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_object_build");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_object_build(VipsObject *object)
     * }
     */
    public static FunctionDescriptor vips_object_build$descriptor() {
        return vips_object_build.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_object_build(VipsObject *object)
     * }
     */
    public static MethodHandle vips_object_build$handle() {
        return vips_object_build.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_object_build(VipsObject *object)
     * }
     */
    public static MemorySegment vips_object_build$address() {
        return vips_object_build.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_object_build(VipsObject *object)
     * }
     */
    public static int vips_object_build(MemorySegment object) {
        var mh$ = vips_object_build.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_build", object);
            }
            return (int)mh$.invokeExact(object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_summary_class {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_object_summary_class");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_object_summary_class(VipsObjectClass *klass, VipsBuf *buf)
     * }
     */
    public static FunctionDescriptor vips_object_summary_class$descriptor() {
        return vips_object_summary_class.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_object_summary_class(VipsObjectClass *klass, VipsBuf *buf)
     * }
     */
    public static MethodHandle vips_object_summary_class$handle() {
        return vips_object_summary_class.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_object_summary_class(VipsObjectClass *klass, VipsBuf *buf)
     * }
     */
    public static MemorySegment vips_object_summary_class$address() {
        return vips_object_summary_class.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_object_summary_class(VipsObjectClass *klass, VipsBuf *buf)
     * }
     */
    public static void vips_object_summary_class(MemorySegment klass, MemorySegment buf) {
        var mh$ = vips_object_summary_class.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_summary_class", klass, buf);
            }
            mh$.invokeExact(klass, buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_summary {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_object_summary");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_object_summary(VipsObject *object, VipsBuf *buf)
     * }
     */
    public static FunctionDescriptor vips_object_summary$descriptor() {
        return vips_object_summary.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_object_summary(VipsObject *object, VipsBuf *buf)
     * }
     */
    public static MethodHandle vips_object_summary$handle() {
        return vips_object_summary.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_object_summary(VipsObject *object, VipsBuf *buf)
     * }
     */
    public static MemorySegment vips_object_summary$address() {
        return vips_object_summary.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_object_summary(VipsObject *object, VipsBuf *buf)
     * }
     */
    public static void vips_object_summary(MemorySegment object, MemorySegment buf) {
        var mh$ = vips_object_summary.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_summary", object, buf);
            }
            mh$.invokeExact(object, buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_dump {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_object_dump");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_object_dump(VipsObject *object, VipsBuf *buf)
     * }
     */
    public static FunctionDescriptor vips_object_dump$descriptor() {
        return vips_object_dump.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_object_dump(VipsObject *object, VipsBuf *buf)
     * }
     */
    public static MethodHandle vips_object_dump$handle() {
        return vips_object_dump.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_object_dump(VipsObject *object, VipsBuf *buf)
     * }
     */
    public static MemorySegment vips_object_dump$address() {
        return vips_object_dump.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_object_dump(VipsObject *object, VipsBuf *buf)
     * }
     */
    public static void vips_object_dump(MemorySegment object, MemorySegment buf) {
        var mh$ = vips_object_dump.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_dump", object, buf);
            }
            mh$.invokeExact(object, buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_print_summary_class {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_object_print_summary_class");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_object_print_summary_class(VipsObjectClass *klass)
     * }
     */
    public static FunctionDescriptor vips_object_print_summary_class$descriptor() {
        return vips_object_print_summary_class.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_object_print_summary_class(VipsObjectClass *klass)
     * }
     */
    public static MethodHandle vips_object_print_summary_class$handle() {
        return vips_object_print_summary_class.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_object_print_summary_class(VipsObjectClass *klass)
     * }
     */
    public static MemorySegment vips_object_print_summary_class$address() {
        return vips_object_print_summary_class.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_object_print_summary_class(VipsObjectClass *klass)
     * }
     */
    public static void vips_object_print_summary_class(MemorySegment klass) {
        var mh$ = vips_object_print_summary_class.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_print_summary_class", klass);
            }
            mh$.invokeExact(klass);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_print_summary {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_object_print_summary");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_object_print_summary(VipsObject *object)
     * }
     */
    public static FunctionDescriptor vips_object_print_summary$descriptor() {
        return vips_object_print_summary.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_object_print_summary(VipsObject *object)
     * }
     */
    public static MethodHandle vips_object_print_summary$handle() {
        return vips_object_print_summary.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_object_print_summary(VipsObject *object)
     * }
     */
    public static MemorySegment vips_object_print_summary$address() {
        return vips_object_print_summary.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_object_print_summary(VipsObject *object)
     * }
     */
    public static void vips_object_print_summary(MemorySegment object) {
        var mh$ = vips_object_print_summary.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_print_summary", object);
            }
            mh$.invokeExact(object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_print_dump {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_object_print_dump");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_object_print_dump(VipsObject *object)
     * }
     */
    public static FunctionDescriptor vips_object_print_dump$descriptor() {
        return vips_object_print_dump.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_object_print_dump(VipsObject *object)
     * }
     */
    public static MethodHandle vips_object_print_dump$handle() {
        return vips_object_print_dump.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_object_print_dump(VipsObject *object)
     * }
     */
    public static MemorySegment vips_object_print_dump$address() {
        return vips_object_print_dump.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_object_print_dump(VipsObject *object)
     * }
     */
    public static void vips_object_print_dump(MemorySegment object) {
        var mh$ = vips_object_print_dump.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_print_dump", object);
            }
            mh$.invokeExact(object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_print_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_object_print_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_object_print_name(VipsObject *object)
     * }
     */
    public static FunctionDescriptor vips_object_print_name$descriptor() {
        return vips_object_print_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_object_print_name(VipsObject *object)
     * }
     */
    public static MethodHandle vips_object_print_name$handle() {
        return vips_object_print_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_object_print_name(VipsObject *object)
     * }
     */
    public static MemorySegment vips_object_print_name$address() {
        return vips_object_print_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_object_print_name(VipsObject *object)
     * }
     */
    public static void vips_object_print_name(MemorySegment object) {
        var mh$ = vips_object_print_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_print_name", object);
            }
            mh$.invokeExact(object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_sanity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_object_sanity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_object_sanity(VipsObject *object)
     * }
     */
    public static FunctionDescriptor vips_object_sanity$descriptor() {
        return vips_object_sanity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_object_sanity(VipsObject *object)
     * }
     */
    public static MethodHandle vips_object_sanity$handle() {
        return vips_object_sanity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_object_sanity(VipsObject *object)
     * }
     */
    public static MemorySegment vips_object_sanity$address() {
        return vips_object_sanity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_object_sanity(VipsObject *object)
     * }
     */
    public static int vips_object_sanity(MemorySegment object) {
        var mh$ = vips_object_sanity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_sanity", object);
            }
            return (int)mh$.invokeExact(object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_object_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_object_get_type()
     * }
     */
    public static FunctionDescriptor vips_object_get_type$descriptor() {
        return vips_object_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_object_get_type()
     * }
     */
    public static MethodHandle vips_object_get_type$handle() {
        return vips_object_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_object_get_type()
     * }
     */
    public static MemorySegment vips_object_get_type$address() {
        return vips_object_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_object_get_type()
     * }
     */
    public static long vips_object_get_type() {
        var mh$ = vips_object_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_class_install_argument {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_INT,
            VipsRaw.C_INT,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_object_class_install_argument");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_object_class_install_argument(VipsObjectClass *cls, GParamSpec *pspec, VipsArgumentFlags flags, int priority, guint offset)
     * }
     */
    public static FunctionDescriptor vips_object_class_install_argument$descriptor() {
        return vips_object_class_install_argument.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_object_class_install_argument(VipsObjectClass *cls, GParamSpec *pspec, VipsArgumentFlags flags, int priority, guint offset)
     * }
     */
    public static MethodHandle vips_object_class_install_argument$handle() {
        return vips_object_class_install_argument.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_object_class_install_argument(VipsObjectClass *cls, GParamSpec *pspec, VipsArgumentFlags flags, int priority, guint offset)
     * }
     */
    public static MemorySegment vips_object_class_install_argument$address() {
        return vips_object_class_install_argument.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_object_class_install_argument(VipsObjectClass *cls, GParamSpec *pspec, VipsArgumentFlags flags, int priority, guint offset)
     * }
     */
    public static void vips_object_class_install_argument(MemorySegment cls, MemorySegment pspec, int flags, int priority, int offset) {
        var mh$ = vips_object_class_install_argument.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_class_install_argument", cls, pspec, flags, priority, offset);
            }
            mh$.invokeExact(cls, pspec, flags, priority, offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_set_argument_from_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_object_set_argument_from_string");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_object_set_argument_from_string(VipsObject *object, const char *name, const char *value)
     * }
     */
    public static FunctionDescriptor vips_object_set_argument_from_string$descriptor() {
        return vips_object_set_argument_from_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_object_set_argument_from_string(VipsObject *object, const char *name, const char *value)
     * }
     */
    public static MethodHandle vips_object_set_argument_from_string$handle() {
        return vips_object_set_argument_from_string.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_object_set_argument_from_string(VipsObject *object, const char *name, const char *value)
     * }
     */
    public static MemorySegment vips_object_set_argument_from_string$address() {
        return vips_object_set_argument_from_string.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_object_set_argument_from_string(VipsObject *object, const char *name, const char *value)
     * }
     */
    public static int vips_object_set_argument_from_string(MemorySegment object, MemorySegment name, MemorySegment value) {
        var mh$ = vips_object_set_argument_from_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_set_argument_from_string", object, name, value);
            }
            return (int)mh$.invokeExact(object, name, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_argument_needsstring {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_object_argument_needsstring");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_object_argument_needsstring(VipsObject *object, const char *name)
     * }
     */
    public static FunctionDescriptor vips_object_argument_needsstring$descriptor() {
        return vips_object_argument_needsstring.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_object_argument_needsstring(VipsObject *object, const char *name)
     * }
     */
    public static MethodHandle vips_object_argument_needsstring$handle() {
        return vips_object_argument_needsstring.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_object_argument_needsstring(VipsObject *object, const char *name)
     * }
     */
    public static MemorySegment vips_object_argument_needsstring$address() {
        return vips_object_argument_needsstring.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_object_argument_needsstring(VipsObject *object, const char *name)
     * }
     */
    public static int vips_object_argument_needsstring(MemorySegment object, MemorySegment name) {
        var mh$ = vips_object_argument_needsstring.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_argument_needsstring", object, name);
            }
            return (int)mh$.invokeExact(object, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_get_argument_to_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_object_get_argument_to_string");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_object_get_argument_to_string(VipsObject *object, const char *name, const char *arg)
     * }
     */
    public static FunctionDescriptor vips_object_get_argument_to_string$descriptor() {
        return vips_object_get_argument_to_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_object_get_argument_to_string(VipsObject *object, const char *name, const char *arg)
     * }
     */
    public static MethodHandle vips_object_get_argument_to_string$handle() {
        return vips_object_get_argument_to_string.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_object_get_argument_to_string(VipsObject *object, const char *name, const char *arg)
     * }
     */
    public static MemorySegment vips_object_get_argument_to_string$address() {
        return vips_object_get_argument_to_string.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_object_get_argument_to_string(VipsObject *object, const char *name, const char *arg)
     * }
     */
    public static int vips_object_get_argument_to_string(MemorySegment object, MemorySegment name, MemorySegment arg) {
        var mh$ = vips_object_get_argument_to_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_get_argument_to_string", object, name, arg);
            }
            return (int)mh$.invokeExact(object, name, arg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_set_required {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_object_set_required");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_object_set_required(VipsObject *object, const char *value)
     * }
     */
    public static FunctionDescriptor vips_object_set_required$descriptor() {
        return vips_object_set_required.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_object_set_required(VipsObject *object, const char *value)
     * }
     */
    public static MethodHandle vips_object_set_required$handle() {
        return vips_object_set_required.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_object_set_required(VipsObject *object, const char *value)
     * }
     */
    public static MemorySegment vips_object_set_required$address() {
        return vips_object_set_required.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_object_set_required(VipsObject *object, const char *value)
     * }
     */
    public static int vips_object_set_required(MemorySegment object, MemorySegment value) {
        var mh$ = vips_object_set_required.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_set_required", object, value);
            }
            return (int)mh$.invokeExact(object, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_object_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsObject *vips_object_new(GType type, VipsObjectSetArguments set, void *a, void *b)
     * }
     */
    public static FunctionDescriptor vips_object_new$descriptor() {
        return vips_object_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsObject *vips_object_new(GType type, VipsObjectSetArguments set, void *a, void *b)
     * }
     */
    public static MethodHandle vips_object_new$handle() {
        return vips_object_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsObject *vips_object_new(GType type, VipsObjectSetArguments set, void *a, void *b)
     * }
     */
    public static MemorySegment vips_object_new$address() {
        return vips_object_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsObject *vips_object_new(GType type, VipsObjectSetArguments set, void *a, void *b)
     * }
     */
    public static MemorySegment vips_object_new(long type, MemorySegment set, MemorySegment a, MemorySegment b) {
        var mh$ = vips_object_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_new", type, set, a, b);
            }
            return (MemorySegment)mh$.invokeExact(type, set, a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_set_valist {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_object_set_valist");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_object_set_valist(VipsObject *object, va_list ap)
     * }
     */
    public static FunctionDescriptor vips_object_set_valist$descriptor() {
        return vips_object_set_valist.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_object_set_valist(VipsObject *object, va_list ap)
     * }
     */
    public static MethodHandle vips_object_set_valist$handle() {
        return vips_object_set_valist.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_object_set_valist(VipsObject *object, va_list ap)
     * }
     */
    public static MemorySegment vips_object_set_valist$address() {
        return vips_object_set_valist.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_object_set_valist(VipsObject *object, va_list ap)
     * }
     */
    public static int vips_object_set_valist(MemorySegment object, MemorySegment ap) {
        var mh$ = vips_object_set_valist.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_set_valist", object, ap);
            }
            return (int)mh$.invokeExact(object, ap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_object_set(VipsObject *object, ...)
     * }
     */
    public static class vips_object_set {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                VipsRaw.C_INT,
                VipsRaw.C_POINTER
            );
        private static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_object_set");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_object_set(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_object_set(VipsObject *object, ...)
         * }
         */
        public static vips_object_set makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_object_set(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment object, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_object_set", object, x1);
                }
                return (int)spreader.invokeExact(object, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class vips_object_set_from_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_object_set_from_string");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_object_set_from_string(VipsObject *object, const char *string)
     * }
     */
    public static FunctionDescriptor vips_object_set_from_string$descriptor() {
        return vips_object_set_from_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_object_set_from_string(VipsObject *object, const char *string)
     * }
     */
    public static MethodHandle vips_object_set_from_string$handle() {
        return vips_object_set_from_string.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_object_set_from_string(VipsObject *object, const char *string)
     * }
     */
    public static MemorySegment vips_object_set_from_string$address() {
        return vips_object_set_from_string.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_object_set_from_string(VipsObject *object, const char *string)
     * }
     */
    public static int vips_object_set_from_string(MemorySegment object, MemorySegment string) {
        var mh$ = vips_object_set_from_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_set_from_string", object, string);
            }
            return (int)mh$.invokeExact(object, string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_new_from_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_object_new_from_string");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsObject *vips_object_new_from_string(VipsObjectClass *object_class, const char *p)
     * }
     */
    public static FunctionDescriptor vips_object_new_from_string$descriptor() {
        return vips_object_new_from_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsObject *vips_object_new_from_string(VipsObjectClass *object_class, const char *p)
     * }
     */
    public static MethodHandle vips_object_new_from_string$handle() {
        return vips_object_new_from_string.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsObject *vips_object_new_from_string(VipsObjectClass *object_class, const char *p)
     * }
     */
    public static MemorySegment vips_object_new_from_string$address() {
        return vips_object_new_from_string.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsObject *vips_object_new_from_string(VipsObjectClass *object_class, const char *p)
     * }
     */
    public static MemorySegment vips_object_new_from_string(MemorySegment object_class, MemorySegment p) {
        var mh$ = vips_object_new_from_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_new_from_string", object_class, p);
            }
            return (MemorySegment)mh$.invokeExact(object_class, p);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_to_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_object_to_string");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_object_to_string(VipsObject *object, VipsBuf *buf)
     * }
     */
    public static FunctionDescriptor vips_object_to_string$descriptor() {
        return vips_object_to_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_object_to_string(VipsObject *object, VipsBuf *buf)
     * }
     */
    public static MethodHandle vips_object_to_string$handle() {
        return vips_object_to_string.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_object_to_string(VipsObject *object, VipsBuf *buf)
     * }
     */
    public static MemorySegment vips_object_to_string$address() {
        return vips_object_to_string.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_object_to_string(VipsObject *object, VipsBuf *buf)
     * }
     */
    public static void vips_object_to_string(MemorySegment object, MemorySegment buf) {
        var mh$ = vips_object_to_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_to_string", object, buf);
            }
            mh$.invokeExact(object, buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_map {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_object_map");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *vips_object_map(VipsSListMap2Fn fn, void *a, void *b)
     * }
     */
    public static FunctionDescriptor vips_object_map$descriptor() {
        return vips_object_map.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *vips_object_map(VipsSListMap2Fn fn, void *a, void *b)
     * }
     */
    public static MethodHandle vips_object_map$handle() {
        return vips_object_map.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *vips_object_map(VipsSListMap2Fn fn, void *a, void *b)
     * }
     */
    public static MemorySegment vips_object_map$address() {
        return vips_object_map.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *vips_object_map(VipsSListMap2Fn fn, void *a, void *b)
     * }
     */
    public static MemorySegment vips_object_map(MemorySegment fn, MemorySegment a, MemorySegment b) {
        var mh$ = vips_object_map.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_map", fn, a, b);
            }
            return (MemorySegment)mh$.invokeExact(fn, a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_type_map {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_type_map");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *vips_type_map(GType base, VipsTypeMap2Fn fn, void *a, void *b)
     * }
     */
    public static FunctionDescriptor vips_type_map$descriptor() {
        return vips_type_map.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *vips_type_map(GType base, VipsTypeMap2Fn fn, void *a, void *b)
     * }
     */
    public static MethodHandle vips_type_map$handle() {
        return vips_type_map.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *vips_type_map(GType base, VipsTypeMap2Fn fn, void *a, void *b)
     * }
     */
    public static MemorySegment vips_type_map$address() {
        return vips_type_map.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *vips_type_map(GType base, VipsTypeMap2Fn fn, void *a, void *b)
     * }
     */
    public static MemorySegment vips_type_map(long base, MemorySegment fn, MemorySegment a, MemorySegment b) {
        var mh$ = vips_type_map.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_type_map", base, fn, a, b);
            }
            return (MemorySegment)mh$.invokeExact(base, fn, a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_type_map_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_type_map_all");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *vips_type_map_all(GType base, VipsTypeMapFn fn, void *a)
     * }
     */
    public static FunctionDescriptor vips_type_map_all$descriptor() {
        return vips_type_map_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *vips_type_map_all(GType base, VipsTypeMapFn fn, void *a)
     * }
     */
    public static MethodHandle vips_type_map_all$handle() {
        return vips_type_map_all.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *vips_type_map_all(GType base, VipsTypeMapFn fn, void *a)
     * }
     */
    public static MemorySegment vips_type_map_all$address() {
        return vips_type_map_all.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *vips_type_map_all(GType base, VipsTypeMapFn fn, void *a)
     * }
     */
    public static MemorySegment vips_type_map_all(long base, MemorySegment fn, MemorySegment a) {
        var mh$ = vips_type_map_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_type_map_all", base, fn, a);
            }
            return (MemorySegment)mh$.invokeExact(base, fn, a);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_type_depth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_type_depth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_type_depth(GType type)
     * }
     */
    public static FunctionDescriptor vips_type_depth$descriptor() {
        return vips_type_depth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_type_depth(GType type)
     * }
     */
    public static MethodHandle vips_type_depth$handle() {
        return vips_type_depth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_type_depth(GType type)
     * }
     */
    public static MemorySegment vips_type_depth$address() {
        return vips_type_depth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_type_depth(GType type)
     * }
     */
    public static int vips_type_depth(long type) {
        var mh$ = vips_type_depth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_type_depth", type);
            }
            return (int)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_type_find {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_type_find");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_type_find(const char *basename, const char *nickname)
     * }
     */
    public static FunctionDescriptor vips_type_find$descriptor() {
        return vips_type_find.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_type_find(const char *basename, const char *nickname)
     * }
     */
    public static MethodHandle vips_type_find$handle() {
        return vips_type_find.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_type_find(const char *basename, const char *nickname)
     * }
     */
    public static MemorySegment vips_type_find$address() {
        return vips_type_find.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_type_find(const char *basename, const char *nickname)
     * }
     */
    public static long vips_type_find(MemorySegment basename, MemorySegment nickname) {
        var mh$ = vips_type_find.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_type_find", basename, nickname);
            }
            return (long)mh$.invokeExact(basename, nickname);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_nickname_find {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_nickname_find");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *vips_nickname_find(GType type)
     * }
     */
    public static FunctionDescriptor vips_nickname_find$descriptor() {
        return vips_nickname_find.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *vips_nickname_find(GType type)
     * }
     */
    public static MethodHandle vips_nickname_find$handle() {
        return vips_nickname_find.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *vips_nickname_find(GType type)
     * }
     */
    public static MemorySegment vips_nickname_find$address() {
        return vips_nickname_find.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *vips_nickname_find(GType type)
     * }
     */
    public static MemorySegment vips_nickname_find(long type) {
        var mh$ = vips_nickname_find.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_nickname_find", type);
            }
            return (MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_local_array {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_object_local_array");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsObject **vips_object_local_array(VipsObject *parent, int n)
     * }
     */
    public static FunctionDescriptor vips_object_local_array$descriptor() {
        return vips_object_local_array.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsObject **vips_object_local_array(VipsObject *parent, int n)
     * }
     */
    public static MethodHandle vips_object_local_array$handle() {
        return vips_object_local_array.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsObject **vips_object_local_array(VipsObject *parent, int n)
     * }
     */
    public static MemorySegment vips_object_local_array$address() {
        return vips_object_local_array.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsObject **vips_object_local_array(VipsObject *parent, int n)
     * }
     */
    public static MemorySegment vips_object_local_array(MemorySegment parent, int n) {
        var mh$ = vips_object_local_array.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_local_array", parent, n);
            }
            return (MemorySegment)mh$.invokeExact(parent, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_local_cb {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_object_local_cb");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_object_local_cb(VipsObject *vobject, GObject *gobject)
     * }
     */
    public static FunctionDescriptor vips_object_local_cb$descriptor() {
        return vips_object_local_cb.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_object_local_cb(VipsObject *vobject, GObject *gobject)
     * }
     */
    public static MethodHandle vips_object_local_cb$handle() {
        return vips_object_local_cb.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_object_local_cb(VipsObject *vobject, GObject *gobject)
     * }
     */
    public static MemorySegment vips_object_local_cb$address() {
        return vips_object_local_cb.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_object_local_cb(VipsObject *vobject, GObject *gobject)
     * }
     */
    public static void vips_object_local_cb(MemorySegment vobject, MemorySegment gobject) {
        var mh$ = vips_object_local_cb.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_local_cb", vobject, gobject);
            }
            mh$.invokeExact(vobject, gobject);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_set_static {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_object_set_static");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_object_set_static(VipsObject *object, gboolean static_object)
     * }
     */
    public static FunctionDescriptor vips_object_set_static$descriptor() {
        return vips_object_set_static.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_object_set_static(VipsObject *object, gboolean static_object)
     * }
     */
    public static MethodHandle vips_object_set_static$handle() {
        return vips_object_set_static.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_object_set_static(VipsObject *object, gboolean static_object)
     * }
     */
    public static MemorySegment vips_object_set_static$address() {
        return vips_object_set_static.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_object_set_static(VipsObject *object, gboolean static_object)
     * }
     */
    public static void vips_object_set_static(MemorySegment object, int static_object) {
        var mh$ = vips_object_set_static.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_set_static", object, static_object);
            }
            mh$.invokeExact(object, static_object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_print_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_object_print_all");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_object_print_all()
     * }
     */
    public static FunctionDescriptor vips_object_print_all$descriptor() {
        return vips_object_print_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_object_print_all()
     * }
     */
    public static MethodHandle vips_object_print_all$handle() {
        return vips_object_print_all.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_object_print_all()
     * }
     */
    public static MemorySegment vips_object_print_all$address() {
        return vips_object_print_all.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_object_print_all()
     * }
     */
    public static void vips_object_print_all() {
        var mh$ = vips_object_print_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_print_all");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_sanity_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_object_sanity_all");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_object_sanity_all()
     * }
     */
    public static FunctionDescriptor vips_object_sanity_all$descriptor() {
        return vips_object_sanity_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_object_sanity_all()
     * }
     */
    public static MethodHandle vips_object_sanity_all$handle() {
        return vips_object_sanity_all.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_object_sanity_all()
     * }
     */
    public static MemorySegment vips_object_sanity_all$address() {
        return vips_object_sanity_all.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_object_sanity_all()
     * }
     */
    public static void vips_object_sanity_all() {
        var mh$ = vips_object_sanity_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_sanity_all");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_rewind {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_object_rewind");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_object_rewind(VipsObject *object)
     * }
     */
    public static FunctionDescriptor vips_object_rewind$descriptor() {
        return vips_object_rewind.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_object_rewind(VipsObject *object)
     * }
     */
    public static MethodHandle vips_object_rewind$handle() {
        return vips_object_rewind.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_object_rewind(VipsObject *object)
     * }
     */
    public static MemorySegment vips_object_rewind$address() {
        return vips_object_rewind.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_object_rewind(VipsObject *object)
     * }
     */
    public static void vips_object_rewind(MemorySegment object) {
        var mh$ = vips_object_rewind.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_rewind", object);
            }
            mh$.invokeExact(object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_unref_outputs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_object_unref_outputs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_object_unref_outputs(VipsObject *object)
     * }
     */
    public static FunctionDescriptor vips_object_unref_outputs$descriptor() {
        return vips_object_unref_outputs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_object_unref_outputs(VipsObject *object)
     * }
     */
    public static MethodHandle vips_object_unref_outputs$handle() {
        return vips_object_unref_outputs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_object_unref_outputs(VipsObject *object)
     * }
     */
    public static MemorySegment vips_object_unref_outputs$address() {
        return vips_object_unref_outputs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_object_unref_outputs(VipsObject *object)
     * }
     */
    public static void vips_object_unref_outputs(MemorySegment object) {
        var mh$ = vips_object_unref_outputs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_unref_outputs", object);
            }
            mh$.invokeExact(object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_get_description {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_object_get_description");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *vips_object_get_description(VipsObject *object)
     * }
     */
    public static FunctionDescriptor vips_object_get_description$descriptor() {
        return vips_object_get_description.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *vips_object_get_description(VipsObject *object)
     * }
     */
    public static MethodHandle vips_object_get_description$handle() {
        return vips_object_get_description.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *vips_object_get_description(VipsObject *object)
     * }
     */
    public static MemorySegment vips_object_get_description$address() {
        return vips_object_get_description.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *vips_object_get_description(VipsObject *object)
     * }
     */
    public static MemorySegment vips_object_get_description(MemorySegment object) {
        var mh$ = vips_object_get_description.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_get_description", object);
            }
            return (MemorySegment)mh$.invokeExact(object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_blob_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_blob_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsBlob *vips_blob_new(VipsCallbackFn free_fn, const void *data, size_t length)
     * }
     */
    public static FunctionDescriptor vips_blob_new$descriptor() {
        return vips_blob_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsBlob *vips_blob_new(VipsCallbackFn free_fn, const void *data, size_t length)
     * }
     */
    public static MethodHandle vips_blob_new$handle() {
        return vips_blob_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsBlob *vips_blob_new(VipsCallbackFn free_fn, const void *data, size_t length)
     * }
     */
    public static MemorySegment vips_blob_new$address() {
        return vips_blob_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsBlob *vips_blob_new(VipsCallbackFn free_fn, const void *data, size_t length)
     * }
     */
    public static MemorySegment vips_blob_new(MemorySegment free_fn, MemorySegment data, long length) {
        var mh$ = vips_blob_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_blob_new", free_fn, data, length);
            }
            return (MemorySegment)mh$.invokeExact(free_fn, data, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_blob_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_blob_copy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsBlob *vips_blob_copy(const void *data, size_t length)
     * }
     */
    public static FunctionDescriptor vips_blob_copy$descriptor() {
        return vips_blob_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsBlob *vips_blob_copy(const void *data, size_t length)
     * }
     */
    public static MethodHandle vips_blob_copy$handle() {
        return vips_blob_copy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsBlob *vips_blob_copy(const void *data, size_t length)
     * }
     */
    public static MemorySegment vips_blob_copy$address() {
        return vips_blob_copy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsBlob *vips_blob_copy(const void *data, size_t length)
     * }
     */
    public static MemorySegment vips_blob_copy(MemorySegment data, long length) {
        var mh$ = vips_blob_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_blob_copy", data, length);
            }
            return (MemorySegment)mh$.invokeExact(data, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_blob_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_blob_get");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const void *vips_blob_get(VipsBlob *blob, size_t *length)
     * }
     */
    public static FunctionDescriptor vips_blob_get$descriptor() {
        return vips_blob_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const void *vips_blob_get(VipsBlob *blob, size_t *length)
     * }
     */
    public static MethodHandle vips_blob_get$handle() {
        return vips_blob_get.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const void *vips_blob_get(VipsBlob *blob, size_t *length)
     * }
     */
    public static MemorySegment vips_blob_get$address() {
        return vips_blob_get.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const void *vips_blob_get(VipsBlob *blob, size_t *length)
     * }
     */
    public static MemorySegment vips_blob_get(MemorySegment blob, MemorySegment length) {
        var mh$ = vips_blob_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_blob_get", blob, length);
            }
            return (MemorySegment)mh$.invokeExact(blob, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_blob_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_blob_set");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_blob_set(VipsBlob *blob, VipsCallbackFn free_fn, const void *data, size_t length)
     * }
     */
    public static FunctionDescriptor vips_blob_set$descriptor() {
        return vips_blob_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_blob_set(VipsBlob *blob, VipsCallbackFn free_fn, const void *data, size_t length)
     * }
     */
    public static MethodHandle vips_blob_set$handle() {
        return vips_blob_set.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_blob_set(VipsBlob *blob, VipsCallbackFn free_fn, const void *data, size_t length)
     * }
     */
    public static MemorySegment vips_blob_set$address() {
        return vips_blob_set.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_blob_set(VipsBlob *blob, VipsCallbackFn free_fn, const void *data, size_t length)
     * }
     */
    public static void vips_blob_set(MemorySegment blob, MemorySegment free_fn, MemorySegment data, long length) {
        var mh$ = vips_blob_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_blob_set", blob, free_fn, data, length);
            }
            mh$.invokeExact(blob, free_fn, data, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_blob_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_blob_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_blob_get_type()
     * }
     */
    public static FunctionDescriptor vips_blob_get_type$descriptor() {
        return vips_blob_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_blob_get_type()
     * }
     */
    public static MethodHandle vips_blob_get_type$handle() {
        return vips_blob_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_blob_get_type()
     * }
     */
    public static MemorySegment vips_blob_get_type$address() {
        return vips_blob_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_blob_get_type()
     * }
     */
    public static long vips_blob_get_type() {
        var mh$ = vips_blob_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_blob_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_array_double_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_array_double_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsArrayDouble *vips_array_double_new(const double *array, int n)
     * }
     */
    public static FunctionDescriptor vips_array_double_new$descriptor() {
        return vips_array_double_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsArrayDouble *vips_array_double_new(const double *array, int n)
     * }
     */
    public static MethodHandle vips_array_double_new$handle() {
        return vips_array_double_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsArrayDouble *vips_array_double_new(const double *array, int n)
     * }
     */
    public static MemorySegment vips_array_double_new$address() {
        return vips_array_double_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsArrayDouble *vips_array_double_new(const double *array, int n)
     * }
     */
    public static MemorySegment vips_array_double_new(MemorySegment array, int n) {
        var mh$ = vips_array_double_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_array_double_new", array, n);
            }
            return (MemorySegment)mh$.invokeExact(array, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern VipsArrayDouble *vips_array_double_newv(int n, ...)
     * }
     */
    public static class vips_array_double_newv {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                VipsRaw.C_POINTER,
                VipsRaw.C_INT
            );
        private static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_array_double_newv");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_array_double_newv(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern VipsArrayDouble *vips_array_double_newv(int n, ...)
         * }
         */
        public static vips_array_double_newv makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_array_double_newv(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(int n, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_array_double_newv", n, x1);
                }
                return (MemorySegment)spreader.invokeExact(n, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class vips_array_double_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_array_double_get");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double *vips_array_double_get(VipsArrayDouble *array, int *n)
     * }
     */
    public static FunctionDescriptor vips_array_double_get$descriptor() {
        return vips_array_double_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double *vips_array_double_get(VipsArrayDouble *array, int *n)
     * }
     */
    public static MethodHandle vips_array_double_get$handle() {
        return vips_array_double_get.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double *vips_array_double_get(VipsArrayDouble *array, int *n)
     * }
     */
    public static MemorySegment vips_array_double_get$address() {
        return vips_array_double_get.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double *vips_array_double_get(VipsArrayDouble *array, int *n)
     * }
     */
    public static MemorySegment vips_array_double_get(MemorySegment array, MemorySegment n) {
        var mh$ = vips_array_double_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_array_double_get", array, n);
            }
            return (MemorySegment)mh$.invokeExact(array, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_array_double_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_array_double_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_array_double_get_type()
     * }
     */
    public static FunctionDescriptor vips_array_double_get_type$descriptor() {
        return vips_array_double_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_array_double_get_type()
     * }
     */
    public static MethodHandle vips_array_double_get_type$handle() {
        return vips_array_double_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_array_double_get_type()
     * }
     */
    public static MemorySegment vips_array_double_get_type$address() {
        return vips_array_double_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_array_double_get_type()
     * }
     */
    public static long vips_array_double_get_type() {
        var mh$ = vips_array_double_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_array_double_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_array_int_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_array_int_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsArrayInt *vips_array_int_new(const int *array, int n)
     * }
     */
    public static FunctionDescriptor vips_array_int_new$descriptor() {
        return vips_array_int_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsArrayInt *vips_array_int_new(const int *array, int n)
     * }
     */
    public static MethodHandle vips_array_int_new$handle() {
        return vips_array_int_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsArrayInt *vips_array_int_new(const int *array, int n)
     * }
     */
    public static MemorySegment vips_array_int_new$address() {
        return vips_array_int_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsArrayInt *vips_array_int_new(const int *array, int n)
     * }
     */
    public static MemorySegment vips_array_int_new(MemorySegment array, int n) {
        var mh$ = vips_array_int_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_array_int_new", array, n);
            }
            return (MemorySegment)mh$.invokeExact(array, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern VipsArrayInt *vips_array_int_newv(int n, ...)
     * }
     */
    public static class vips_array_int_newv {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                VipsRaw.C_POINTER,
                VipsRaw.C_INT
            );
        private static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_array_int_newv");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_array_int_newv(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern VipsArrayInt *vips_array_int_newv(int n, ...)
         * }
         */
        public static vips_array_int_newv makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_array_int_newv(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(int n, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_array_int_newv", n, x1);
                }
                return (MemorySegment)spreader.invokeExact(n, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class vips_array_int_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_array_int_get");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int *vips_array_int_get(VipsArrayInt *array, int *n)
     * }
     */
    public static FunctionDescriptor vips_array_int_get$descriptor() {
        return vips_array_int_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int *vips_array_int_get(VipsArrayInt *array, int *n)
     * }
     */
    public static MethodHandle vips_array_int_get$handle() {
        return vips_array_int_get.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int *vips_array_int_get(VipsArrayInt *array, int *n)
     * }
     */
    public static MemorySegment vips_array_int_get$address() {
        return vips_array_int_get.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int *vips_array_int_get(VipsArrayInt *array, int *n)
     * }
     */
    public static MemorySegment vips_array_int_get(MemorySegment array, MemorySegment n) {
        var mh$ = vips_array_int_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_array_int_get", array, n);
            }
            return (MemorySegment)mh$.invokeExact(array, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_array_int_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_array_int_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_array_int_get_type()
     * }
     */
    public static FunctionDescriptor vips_array_int_get_type$descriptor() {
        return vips_array_int_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_array_int_get_type()
     * }
     */
    public static MethodHandle vips_array_int_get_type$handle() {
        return vips_array_int_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_array_int_get_type()
     * }
     */
    public static MemorySegment vips_array_int_get_type$address() {
        return vips_array_int_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_array_int_get_type()
     * }
     */
    public static long vips_array_int_get_type() {
        var mh$ = vips_array_int_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_array_int_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_array_image_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_array_image_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_array_image_get_type()
     * }
     */
    public static FunctionDescriptor vips_array_image_get_type$descriptor() {
        return vips_array_image_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_array_image_get_type()
     * }
     */
    public static MethodHandle vips_array_image_get_type$handle() {
        return vips_array_image_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_array_image_get_type()
     * }
     */
    public static MemorySegment vips_array_image_get_type$address() {
        return vips_array_image_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_array_image_get_type()
     * }
     */
    public static long vips_array_image_get_type() {
        var mh$ = vips_array_image_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_array_image_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_value_set_area {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_value_set_area");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_value_set_area(GValue *value, VipsCallbackFn free_fn, void *data)
     * }
     */
    public static FunctionDescriptor vips_value_set_area$descriptor() {
        return vips_value_set_area.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_value_set_area(GValue *value, VipsCallbackFn free_fn, void *data)
     * }
     */
    public static MethodHandle vips_value_set_area$handle() {
        return vips_value_set_area.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_value_set_area(GValue *value, VipsCallbackFn free_fn, void *data)
     * }
     */
    public static MemorySegment vips_value_set_area$address() {
        return vips_value_set_area.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_value_set_area(GValue *value, VipsCallbackFn free_fn, void *data)
     * }
     */
    public static void vips_value_set_area(MemorySegment value, MemorySegment free_fn, MemorySegment data) {
        var mh$ = vips_value_set_area.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_value_set_area", value, free_fn, data);
            }
            mh$.invokeExact(value, free_fn, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_value_get_area {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_value_get_area");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *vips_value_get_area(const GValue *value, size_t *length)
     * }
     */
    public static FunctionDescriptor vips_value_get_area$descriptor() {
        return vips_value_get_area.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *vips_value_get_area(const GValue *value, size_t *length)
     * }
     */
    public static MethodHandle vips_value_get_area$handle() {
        return vips_value_get_area.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *vips_value_get_area(const GValue *value, size_t *length)
     * }
     */
    public static MemorySegment vips_value_get_area$address() {
        return vips_value_get_area.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *vips_value_get_area(const GValue *value, size_t *length)
     * }
     */
    public static MemorySegment vips_value_get_area(MemorySegment value, MemorySegment length) {
        var mh$ = vips_value_get_area.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_value_get_area", value, length);
            }
            return (MemorySegment)mh$.invokeExact(value, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_value_get_save_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_value_get_save_string");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *vips_value_get_save_string(const GValue *value)
     * }
     */
    public static FunctionDescriptor vips_value_get_save_string$descriptor() {
        return vips_value_get_save_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *vips_value_get_save_string(const GValue *value)
     * }
     */
    public static MethodHandle vips_value_get_save_string$handle() {
        return vips_value_get_save_string.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *vips_value_get_save_string(const GValue *value)
     * }
     */
    public static MemorySegment vips_value_get_save_string$address() {
        return vips_value_get_save_string.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *vips_value_get_save_string(const GValue *value)
     * }
     */
    public static MemorySegment vips_value_get_save_string(MemorySegment value) {
        var mh$ = vips_value_get_save_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_value_get_save_string", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_value_set_save_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_value_set_save_string");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_value_set_save_string(GValue *value, const char *str)
     * }
     */
    public static FunctionDescriptor vips_value_set_save_string$descriptor() {
        return vips_value_set_save_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_value_set_save_string(GValue *value, const char *str)
     * }
     */
    public static MethodHandle vips_value_set_save_string$handle() {
        return vips_value_set_save_string.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_value_set_save_string(GValue *value, const char *str)
     * }
     */
    public static MemorySegment vips_value_set_save_string$address() {
        return vips_value_set_save_string.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_value_set_save_string(GValue *value, const char *str)
     * }
     */
    public static void vips_value_set_save_string(MemorySegment value, MemorySegment str) {
        var mh$ = vips_value_set_save_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_value_set_save_string", value, str);
            }
            mh$.invokeExact(value, str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void vips_value_set_save_stringf(GValue *value, const char *fmt, ...)
     * }
     */
    public static class vips_value_set_save_stringf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                VipsRaw.C_POINTER,
                VipsRaw.C_POINTER
            );
        private static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_value_set_save_stringf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_value_set_save_stringf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void vips_value_set_save_stringf(GValue *value, const char *fmt, ...)
         * }
         */
        public static vips_value_set_save_stringf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_value_set_save_stringf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment value, MemorySegment fmt, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_value_set_save_stringf", value, fmt, x2);
                }
                spreader.invokeExact(value, fmt, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class vips_value_get_ref_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_value_get_ref_string");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *vips_value_get_ref_string(const GValue *value, size_t *length)
     * }
     */
    public static FunctionDescriptor vips_value_get_ref_string$descriptor() {
        return vips_value_get_ref_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *vips_value_get_ref_string(const GValue *value, size_t *length)
     * }
     */
    public static MethodHandle vips_value_get_ref_string$handle() {
        return vips_value_get_ref_string.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *vips_value_get_ref_string(const GValue *value, size_t *length)
     * }
     */
    public static MemorySegment vips_value_get_ref_string$address() {
        return vips_value_get_ref_string.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *vips_value_get_ref_string(const GValue *value, size_t *length)
     * }
     */
    public static MemorySegment vips_value_get_ref_string(MemorySegment value, MemorySegment length) {
        var mh$ = vips_value_get_ref_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_value_get_ref_string", value, length);
            }
            return (MemorySegment)mh$.invokeExact(value, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_value_set_ref_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_value_set_ref_string");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_value_set_ref_string(GValue *value, const char *str)
     * }
     */
    public static FunctionDescriptor vips_value_set_ref_string$descriptor() {
        return vips_value_set_ref_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_value_set_ref_string(GValue *value, const char *str)
     * }
     */
    public static MethodHandle vips_value_set_ref_string$handle() {
        return vips_value_set_ref_string.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_value_set_ref_string(GValue *value, const char *str)
     * }
     */
    public static MemorySegment vips_value_set_ref_string$address() {
        return vips_value_set_ref_string.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_value_set_ref_string(GValue *value, const char *str)
     * }
     */
    public static void vips_value_set_ref_string(MemorySegment value, MemorySegment str) {
        var mh$ = vips_value_set_ref_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_value_set_ref_string", value, str);
            }
            mh$.invokeExact(value, str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_value_get_blob {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_value_get_blob");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *vips_value_get_blob(const GValue *value, size_t *length)
     * }
     */
    public static FunctionDescriptor vips_value_get_blob$descriptor() {
        return vips_value_get_blob.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *vips_value_get_blob(const GValue *value, size_t *length)
     * }
     */
    public static MethodHandle vips_value_get_blob$handle() {
        return vips_value_get_blob.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *vips_value_get_blob(const GValue *value, size_t *length)
     * }
     */
    public static MemorySegment vips_value_get_blob$address() {
        return vips_value_get_blob.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *vips_value_get_blob(const GValue *value, size_t *length)
     * }
     */
    public static MemorySegment vips_value_get_blob(MemorySegment value, MemorySegment length) {
        var mh$ = vips_value_get_blob.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_value_get_blob", value, length);
            }
            return (MemorySegment)mh$.invokeExact(value, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_value_set_blob {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_value_set_blob");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_value_set_blob(GValue *value, VipsCallbackFn free_fn, const void *data, size_t length)
     * }
     */
    public static FunctionDescriptor vips_value_set_blob$descriptor() {
        return vips_value_set_blob.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_value_set_blob(GValue *value, VipsCallbackFn free_fn, const void *data, size_t length)
     * }
     */
    public static MethodHandle vips_value_set_blob$handle() {
        return vips_value_set_blob.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_value_set_blob(GValue *value, VipsCallbackFn free_fn, const void *data, size_t length)
     * }
     */
    public static MemorySegment vips_value_set_blob$address() {
        return vips_value_set_blob.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_value_set_blob(GValue *value, VipsCallbackFn free_fn, const void *data, size_t length)
     * }
     */
    public static void vips_value_set_blob(MemorySegment value, MemorySegment free_fn, MemorySegment data, long length) {
        var mh$ = vips_value_set_blob.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_value_set_blob", value, free_fn, data, length);
            }
            mh$.invokeExact(value, free_fn, data, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_value_set_blob_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_value_set_blob_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_value_set_blob_free(GValue *value, void *data, size_t length)
     * }
     */
    public static FunctionDescriptor vips_value_set_blob_free$descriptor() {
        return vips_value_set_blob_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_value_set_blob_free(GValue *value, void *data, size_t length)
     * }
     */
    public static MethodHandle vips_value_set_blob_free$handle() {
        return vips_value_set_blob_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_value_set_blob_free(GValue *value, void *data, size_t length)
     * }
     */
    public static MemorySegment vips_value_set_blob_free$address() {
        return vips_value_set_blob_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_value_set_blob_free(GValue *value, void *data, size_t length)
     * }
     */
    public static void vips_value_set_blob_free(MemorySegment value, MemorySegment data, long length) {
        var mh$ = vips_value_set_blob_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_value_set_blob_free", value, data, length);
            }
            mh$.invokeExact(value, data, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_value_set_array {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_INT,
            VipsRaw.C_LONG,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_value_set_array");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_value_set_array(GValue *value, int n, GType type, size_t sizeof_type)
     * }
     */
    public static FunctionDescriptor vips_value_set_array$descriptor() {
        return vips_value_set_array.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_value_set_array(GValue *value, int n, GType type, size_t sizeof_type)
     * }
     */
    public static MethodHandle vips_value_set_array$handle() {
        return vips_value_set_array.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_value_set_array(GValue *value, int n, GType type, size_t sizeof_type)
     * }
     */
    public static MemorySegment vips_value_set_array$address() {
        return vips_value_set_array.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_value_set_array(GValue *value, int n, GType type, size_t sizeof_type)
     * }
     */
    public static void vips_value_set_array(MemorySegment value, int n, long type, long sizeof_type) {
        var mh$ = vips_value_set_array.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_value_set_array", value, n, type, sizeof_type);
            }
            mh$.invokeExact(value, n, type, sizeof_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_value_get_array {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_value_get_array");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *vips_value_get_array(const GValue *value, int *n, GType *type, size_t *sizeof_type)
     * }
     */
    public static FunctionDescriptor vips_value_get_array$descriptor() {
        return vips_value_get_array.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *vips_value_get_array(const GValue *value, int *n, GType *type, size_t *sizeof_type)
     * }
     */
    public static MethodHandle vips_value_get_array$handle() {
        return vips_value_get_array.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *vips_value_get_array(const GValue *value, int *n, GType *type, size_t *sizeof_type)
     * }
     */
    public static MemorySegment vips_value_get_array$address() {
        return vips_value_get_array.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *vips_value_get_array(const GValue *value, int *n, GType *type, size_t *sizeof_type)
     * }
     */
    public static MemorySegment vips_value_get_array(MemorySegment value, MemorySegment n, MemorySegment type, MemorySegment sizeof_type) {
        var mh$ = vips_value_get_array.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_value_get_array", value, n, type, sizeof_type);
            }
            return (MemorySegment)mh$.invokeExact(value, n, type, sizeof_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_value_get_array_double {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_value_get_array_double");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double *vips_value_get_array_double(const GValue *value, int *n)
     * }
     */
    public static FunctionDescriptor vips_value_get_array_double$descriptor() {
        return vips_value_get_array_double.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double *vips_value_get_array_double(const GValue *value, int *n)
     * }
     */
    public static MethodHandle vips_value_get_array_double$handle() {
        return vips_value_get_array_double.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double *vips_value_get_array_double(const GValue *value, int *n)
     * }
     */
    public static MemorySegment vips_value_get_array_double$address() {
        return vips_value_get_array_double.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double *vips_value_get_array_double(const GValue *value, int *n)
     * }
     */
    public static MemorySegment vips_value_get_array_double(MemorySegment value, MemorySegment n) {
        var mh$ = vips_value_get_array_double.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_value_get_array_double", value, n);
            }
            return (MemorySegment)mh$.invokeExact(value, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_value_set_array_double {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_value_set_array_double");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_value_set_array_double(GValue *value, const double *array, int n)
     * }
     */
    public static FunctionDescriptor vips_value_set_array_double$descriptor() {
        return vips_value_set_array_double.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_value_set_array_double(GValue *value, const double *array, int n)
     * }
     */
    public static MethodHandle vips_value_set_array_double$handle() {
        return vips_value_set_array_double.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_value_set_array_double(GValue *value, const double *array, int n)
     * }
     */
    public static MemorySegment vips_value_set_array_double$address() {
        return vips_value_set_array_double.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_value_set_array_double(GValue *value, const double *array, int n)
     * }
     */
    public static void vips_value_set_array_double(MemorySegment value, MemorySegment array, int n) {
        var mh$ = vips_value_set_array_double.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_value_set_array_double", value, array, n);
            }
            mh$.invokeExact(value, array, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_value_get_array_int {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_value_get_array_int");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int *vips_value_get_array_int(const GValue *value, int *n)
     * }
     */
    public static FunctionDescriptor vips_value_get_array_int$descriptor() {
        return vips_value_get_array_int.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int *vips_value_get_array_int(const GValue *value, int *n)
     * }
     */
    public static MethodHandle vips_value_get_array_int$handle() {
        return vips_value_get_array_int.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int *vips_value_get_array_int(const GValue *value, int *n)
     * }
     */
    public static MemorySegment vips_value_get_array_int$address() {
        return vips_value_get_array_int.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int *vips_value_get_array_int(const GValue *value, int *n)
     * }
     */
    public static MemorySegment vips_value_get_array_int(MemorySegment value, MemorySegment n) {
        var mh$ = vips_value_get_array_int.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_value_get_array_int", value, n);
            }
            return (MemorySegment)mh$.invokeExact(value, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_value_set_array_int {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_value_set_array_int");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_value_set_array_int(GValue *value, const int *array, int n)
     * }
     */
    public static FunctionDescriptor vips_value_set_array_int$descriptor() {
        return vips_value_set_array_int.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_value_set_array_int(GValue *value, const int *array, int n)
     * }
     */
    public static MethodHandle vips_value_set_array_int$handle() {
        return vips_value_set_array_int.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_value_set_array_int(GValue *value, const int *array, int n)
     * }
     */
    public static MemorySegment vips_value_set_array_int$address() {
        return vips_value_set_array_int.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_value_set_array_int(GValue *value, const int *array, int n)
     * }
     */
    public static void vips_value_set_array_int(MemorySegment value, MemorySegment array, int n) {
        var mh$ = vips_value_set_array_int.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_value_set_array_int", value, array, n);
            }
            mh$.invokeExact(value, array, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_value_get_array_object {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_value_get_array_object");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GObject **vips_value_get_array_object(const GValue *value, int *n)
     * }
     */
    public static FunctionDescriptor vips_value_get_array_object$descriptor() {
        return vips_value_get_array_object.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GObject **vips_value_get_array_object(const GValue *value, int *n)
     * }
     */
    public static MethodHandle vips_value_get_array_object$handle() {
        return vips_value_get_array_object.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GObject **vips_value_get_array_object(const GValue *value, int *n)
     * }
     */
    public static MemorySegment vips_value_get_array_object$address() {
        return vips_value_get_array_object.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GObject **vips_value_get_array_object(const GValue *value, int *n)
     * }
     */
    public static MemorySegment vips_value_get_array_object(MemorySegment value, MemorySegment n) {
        var mh$ = vips_value_get_array_object.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_value_get_array_object", value, n);
            }
            return (MemorySegment)mh$.invokeExact(value, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_value_set_array_object {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_value_set_array_object");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_value_set_array_object(GValue *value, int n)
     * }
     */
    public static FunctionDescriptor vips_value_set_array_object$descriptor() {
        return vips_value_set_array_object.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_value_set_array_object(GValue *value, int n)
     * }
     */
    public static MethodHandle vips_value_set_array_object$handle() {
        return vips_value_set_array_object.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_value_set_array_object(GValue *value, int n)
     * }
     */
    public static MemorySegment vips_value_set_array_object$address() {
        return vips_value_set_array_object.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_value_set_array_object(GValue *value, int n)
     * }
     */
    public static void vips_value_set_array_object(MemorySegment value, int n) {
        var mh$ = vips_value_set_array_object.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_value_set_array_object", value, n);
            }
            mh$.invokeExact(value, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_source_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_source_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_source_get_type()
     * }
     */
    public static FunctionDescriptor vips_source_get_type$descriptor() {
        return vips_source_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_source_get_type()
     * }
     */
    public static MethodHandle vips_source_get_type$handle() {
        return vips_source_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_source_get_type()
     * }
     */
    public static MemorySegment vips_source_get_type$address() {
        return vips_source_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_source_get_type()
     * }
     */
    public static long vips_source_get_type() {
        var mh$ = vips_source_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_source_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_source_new_from_descriptor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_source_new_from_descriptor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsSource *vips_source_new_from_descriptor(int descriptor)
     * }
     */
    public static FunctionDescriptor vips_source_new_from_descriptor$descriptor() {
        return vips_source_new_from_descriptor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsSource *vips_source_new_from_descriptor(int descriptor)
     * }
     */
    public static MethodHandle vips_source_new_from_descriptor$handle() {
        return vips_source_new_from_descriptor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsSource *vips_source_new_from_descriptor(int descriptor)
     * }
     */
    public static MemorySegment vips_source_new_from_descriptor$address() {
        return vips_source_new_from_descriptor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsSource *vips_source_new_from_descriptor(int descriptor)
     * }
     */
    public static MemorySegment vips_source_new_from_descriptor(int descriptor) {
        var mh$ = vips_source_new_from_descriptor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_source_new_from_descriptor", descriptor);
            }
            return (MemorySegment)mh$.invokeExact(descriptor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_source_new_from_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_source_new_from_file");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsSource *vips_source_new_from_file(const char *filename)
     * }
     */
    public static FunctionDescriptor vips_source_new_from_file$descriptor() {
        return vips_source_new_from_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsSource *vips_source_new_from_file(const char *filename)
     * }
     */
    public static MethodHandle vips_source_new_from_file$handle() {
        return vips_source_new_from_file.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsSource *vips_source_new_from_file(const char *filename)
     * }
     */
    public static MemorySegment vips_source_new_from_file$address() {
        return vips_source_new_from_file.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsSource *vips_source_new_from_file(const char *filename)
     * }
     */
    public static MemorySegment vips_source_new_from_file(MemorySegment filename) {
        var mh$ = vips_source_new_from_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_source_new_from_file", filename);
            }
            return (MemorySegment)mh$.invokeExact(filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_source_new_from_blob {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_source_new_from_blob");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsSource *vips_source_new_from_blob(VipsBlob *blob)
     * }
     */
    public static FunctionDescriptor vips_source_new_from_blob$descriptor() {
        return vips_source_new_from_blob.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsSource *vips_source_new_from_blob(VipsBlob *blob)
     * }
     */
    public static MethodHandle vips_source_new_from_blob$handle() {
        return vips_source_new_from_blob.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsSource *vips_source_new_from_blob(VipsBlob *blob)
     * }
     */
    public static MemorySegment vips_source_new_from_blob$address() {
        return vips_source_new_from_blob.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsSource *vips_source_new_from_blob(VipsBlob *blob)
     * }
     */
    public static MemorySegment vips_source_new_from_blob(MemorySegment blob) {
        var mh$ = vips_source_new_from_blob.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_source_new_from_blob", blob);
            }
            return (MemorySegment)mh$.invokeExact(blob);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_source_new_from_target {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_source_new_from_target");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsSource *vips_source_new_from_target(VipsTarget *target)
     * }
     */
    public static FunctionDescriptor vips_source_new_from_target$descriptor() {
        return vips_source_new_from_target.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsSource *vips_source_new_from_target(VipsTarget *target)
     * }
     */
    public static MethodHandle vips_source_new_from_target$handle() {
        return vips_source_new_from_target.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsSource *vips_source_new_from_target(VipsTarget *target)
     * }
     */
    public static MemorySegment vips_source_new_from_target$address() {
        return vips_source_new_from_target.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsSource *vips_source_new_from_target(VipsTarget *target)
     * }
     */
    public static MemorySegment vips_source_new_from_target(MemorySegment target) {
        var mh$ = vips_source_new_from_target.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_source_new_from_target", target);
            }
            return (MemorySegment)mh$.invokeExact(target);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_source_new_from_memory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_source_new_from_memory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsSource *vips_source_new_from_memory(const void *data, size_t size)
     * }
     */
    public static FunctionDescriptor vips_source_new_from_memory$descriptor() {
        return vips_source_new_from_memory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsSource *vips_source_new_from_memory(const void *data, size_t size)
     * }
     */
    public static MethodHandle vips_source_new_from_memory$handle() {
        return vips_source_new_from_memory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsSource *vips_source_new_from_memory(const void *data, size_t size)
     * }
     */
    public static MemorySegment vips_source_new_from_memory$address() {
        return vips_source_new_from_memory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsSource *vips_source_new_from_memory(const void *data, size_t size)
     * }
     */
    public static MemorySegment vips_source_new_from_memory(MemorySegment data, long size) {
        var mh$ = vips_source_new_from_memory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_source_new_from_memory", data, size);
            }
            return (MemorySegment)mh$.invokeExact(data, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_source_new_from_options {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_source_new_from_options");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsSource *vips_source_new_from_options(const char *options)
     * }
     */
    public static FunctionDescriptor vips_source_new_from_options$descriptor() {
        return vips_source_new_from_options.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsSource *vips_source_new_from_options(const char *options)
     * }
     */
    public static MethodHandle vips_source_new_from_options$handle() {
        return vips_source_new_from_options.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsSource *vips_source_new_from_options(const char *options)
     * }
     */
    public static MemorySegment vips_source_new_from_options$address() {
        return vips_source_new_from_options.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsSource *vips_source_new_from_options(const char *options)
     * }
     */
    public static MemorySegment vips_source_new_from_options(MemorySegment options) {
        var mh$ = vips_source_new_from_options.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_source_new_from_options", options);
            }
            return (MemorySegment)mh$.invokeExact(options);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_source_minimise {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_source_minimise");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_source_minimise(VipsSource *source)
     * }
     */
    public static FunctionDescriptor vips_source_minimise$descriptor() {
        return vips_source_minimise.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_source_minimise(VipsSource *source)
     * }
     */
    public static MethodHandle vips_source_minimise$handle() {
        return vips_source_minimise.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_source_minimise(VipsSource *source)
     * }
     */
    public static MemorySegment vips_source_minimise$address() {
        return vips_source_minimise.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_source_minimise(VipsSource *source)
     * }
     */
    public static void vips_source_minimise(MemorySegment source) {
        var mh$ = vips_source_minimise.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_source_minimise", source);
            }
            mh$.invokeExact(source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_source_unminimise {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_source_unminimise");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_source_unminimise(VipsSource *source)
     * }
     */
    public static FunctionDescriptor vips_source_unminimise$descriptor() {
        return vips_source_unminimise.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_source_unminimise(VipsSource *source)
     * }
     */
    public static MethodHandle vips_source_unminimise$handle() {
        return vips_source_unminimise.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_source_unminimise(VipsSource *source)
     * }
     */
    public static MemorySegment vips_source_unminimise$address() {
        return vips_source_unminimise.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_source_unminimise(VipsSource *source)
     * }
     */
    public static int vips_source_unminimise(MemorySegment source) {
        var mh$ = vips_source_unminimise.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_source_unminimise", source);
            }
            return (int)mh$.invokeExact(source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_source_decode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_source_decode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_source_decode(VipsSource *source)
     * }
     */
    public static FunctionDescriptor vips_source_decode$descriptor() {
        return vips_source_decode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_source_decode(VipsSource *source)
     * }
     */
    public static MethodHandle vips_source_decode$handle() {
        return vips_source_decode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_source_decode(VipsSource *source)
     * }
     */
    public static MemorySegment vips_source_decode$address() {
        return vips_source_decode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_source_decode(VipsSource *source)
     * }
     */
    public static int vips_source_decode(MemorySegment source) {
        var mh$ = vips_source_decode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_source_decode", source);
            }
            return (int)mh$.invokeExact(source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_source_read {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG_LONG,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_source_read");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint64 vips_source_read(VipsSource *source, void *data, size_t length)
     * }
     */
    public static FunctionDescriptor vips_source_read$descriptor() {
        return vips_source_read.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint64 vips_source_read(VipsSource *source, void *data, size_t length)
     * }
     */
    public static MethodHandle vips_source_read$handle() {
        return vips_source_read.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gint64 vips_source_read(VipsSource *source, void *data, size_t length)
     * }
     */
    public static MemorySegment vips_source_read$address() {
        return vips_source_read.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gint64 vips_source_read(VipsSource *source, void *data, size_t length)
     * }
     */
    public static long vips_source_read(MemorySegment source, MemorySegment data, long length) {
        var mh$ = vips_source_read.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_source_read", source, data, length);
            }
            return (long)mh$.invokeExact(source, data, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_source_is_mappable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_source_is_mappable");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_source_is_mappable(VipsSource *source)
     * }
     */
    public static FunctionDescriptor vips_source_is_mappable$descriptor() {
        return vips_source_is_mappable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_source_is_mappable(VipsSource *source)
     * }
     */
    public static MethodHandle vips_source_is_mappable$handle() {
        return vips_source_is_mappable.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_source_is_mappable(VipsSource *source)
     * }
     */
    public static MemorySegment vips_source_is_mappable$address() {
        return vips_source_is_mappable.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_source_is_mappable(VipsSource *source)
     * }
     */
    public static int vips_source_is_mappable(MemorySegment source) {
        var mh$ = vips_source_is_mappable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_source_is_mappable", source);
            }
            return (int)mh$.invokeExact(source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_source_is_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_source_is_file");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_source_is_file(VipsSource *source)
     * }
     */
    public static FunctionDescriptor vips_source_is_file$descriptor() {
        return vips_source_is_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_source_is_file(VipsSource *source)
     * }
     */
    public static MethodHandle vips_source_is_file$handle() {
        return vips_source_is_file.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_source_is_file(VipsSource *source)
     * }
     */
    public static MemorySegment vips_source_is_file$address() {
        return vips_source_is_file.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_source_is_file(VipsSource *source)
     * }
     */
    public static int vips_source_is_file(MemorySegment source) {
        var mh$ = vips_source_is_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_source_is_file", source);
            }
            return (int)mh$.invokeExact(source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_source_map {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_source_map");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const void *vips_source_map(VipsSource *source, size_t *length)
     * }
     */
    public static FunctionDescriptor vips_source_map$descriptor() {
        return vips_source_map.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const void *vips_source_map(VipsSource *source, size_t *length)
     * }
     */
    public static MethodHandle vips_source_map$handle() {
        return vips_source_map.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const void *vips_source_map(VipsSource *source, size_t *length)
     * }
     */
    public static MemorySegment vips_source_map$address() {
        return vips_source_map.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const void *vips_source_map(VipsSource *source, size_t *length)
     * }
     */
    public static MemorySegment vips_source_map(MemorySegment source, MemorySegment length) {
        var mh$ = vips_source_map.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_source_map", source, length);
            }
            return (MemorySegment)mh$.invokeExact(source, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_source_map_blob {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_source_map_blob");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsBlob *vips_source_map_blob(VipsSource *source)
     * }
     */
    public static FunctionDescriptor vips_source_map_blob$descriptor() {
        return vips_source_map_blob.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsBlob *vips_source_map_blob(VipsSource *source)
     * }
     */
    public static MethodHandle vips_source_map_blob$handle() {
        return vips_source_map_blob.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsBlob *vips_source_map_blob(VipsSource *source)
     * }
     */
    public static MemorySegment vips_source_map_blob$address() {
        return vips_source_map_blob.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsBlob *vips_source_map_blob(VipsSource *source)
     * }
     */
    public static MemorySegment vips_source_map_blob(MemorySegment source) {
        var mh$ = vips_source_map_blob.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_source_map_blob", source);
            }
            return (MemorySegment)mh$.invokeExact(source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_source_seek {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG_LONG,
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG_LONG,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_source_seek");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint64 vips_source_seek(VipsSource *source, gint64 offset, int whence)
     * }
     */
    public static FunctionDescriptor vips_source_seek$descriptor() {
        return vips_source_seek.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint64 vips_source_seek(VipsSource *source, gint64 offset, int whence)
     * }
     */
    public static MethodHandle vips_source_seek$handle() {
        return vips_source_seek.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gint64 vips_source_seek(VipsSource *source, gint64 offset, int whence)
     * }
     */
    public static MemorySegment vips_source_seek$address() {
        return vips_source_seek.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gint64 vips_source_seek(VipsSource *source, gint64 offset, int whence)
     * }
     */
    public static long vips_source_seek(MemorySegment source, long offset, int whence) {
        var mh$ = vips_source_seek.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_source_seek", source, offset, whence);
            }
            return (long)mh$.invokeExact(source, offset, whence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_source_rewind {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_source_rewind");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_source_rewind(VipsSource *source)
     * }
     */
    public static FunctionDescriptor vips_source_rewind$descriptor() {
        return vips_source_rewind.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_source_rewind(VipsSource *source)
     * }
     */
    public static MethodHandle vips_source_rewind$handle() {
        return vips_source_rewind.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_source_rewind(VipsSource *source)
     * }
     */
    public static MemorySegment vips_source_rewind$address() {
        return vips_source_rewind.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_source_rewind(VipsSource *source)
     * }
     */
    public static int vips_source_rewind(MemorySegment source) {
        var mh$ = vips_source_rewind.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_source_rewind", source);
            }
            return (int)mh$.invokeExact(source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_source_sniff_at_most {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG_LONG,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_source_sniff_at_most");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint64 vips_source_sniff_at_most(VipsSource *source, unsigned char **data, size_t length)
     * }
     */
    public static FunctionDescriptor vips_source_sniff_at_most$descriptor() {
        return vips_source_sniff_at_most.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint64 vips_source_sniff_at_most(VipsSource *source, unsigned char **data, size_t length)
     * }
     */
    public static MethodHandle vips_source_sniff_at_most$handle() {
        return vips_source_sniff_at_most.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gint64 vips_source_sniff_at_most(VipsSource *source, unsigned char **data, size_t length)
     * }
     */
    public static MemorySegment vips_source_sniff_at_most$address() {
        return vips_source_sniff_at_most.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gint64 vips_source_sniff_at_most(VipsSource *source, unsigned char **data, size_t length)
     * }
     */
    public static long vips_source_sniff_at_most(MemorySegment source, MemorySegment data, long length) {
        var mh$ = vips_source_sniff_at_most.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_source_sniff_at_most", source, data, length);
            }
            return (long)mh$.invokeExact(source, data, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_source_sniff {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_source_sniff");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned char *vips_source_sniff(VipsSource *source, size_t length)
     * }
     */
    public static FunctionDescriptor vips_source_sniff$descriptor() {
        return vips_source_sniff.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned char *vips_source_sniff(VipsSource *source, size_t length)
     * }
     */
    public static MethodHandle vips_source_sniff$handle() {
        return vips_source_sniff.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned char *vips_source_sniff(VipsSource *source, size_t length)
     * }
     */
    public static MemorySegment vips_source_sniff$address() {
        return vips_source_sniff.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned char *vips_source_sniff(VipsSource *source, size_t length)
     * }
     */
    public static MemorySegment vips_source_sniff(MemorySegment source, long length) {
        var mh$ = vips_source_sniff.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_source_sniff", source, length);
            }
            return (MemorySegment)mh$.invokeExact(source, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_source_length {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG_LONG,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_source_length");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint64 vips_source_length(VipsSource *source)
     * }
     */
    public static FunctionDescriptor vips_source_length$descriptor() {
        return vips_source_length.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint64 vips_source_length(VipsSource *source)
     * }
     */
    public static MethodHandle vips_source_length$handle() {
        return vips_source_length.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gint64 vips_source_length(VipsSource *source)
     * }
     */
    public static MemorySegment vips_source_length$address() {
        return vips_source_length.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gint64 vips_source_length(VipsSource *source)
     * }
     */
    public static long vips_source_length(MemorySegment source) {
        var mh$ = vips_source_length.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_source_length", source);
            }
            return (long)mh$.invokeExact(source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_source_custom_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_source_custom_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_source_custom_get_type()
     * }
     */
    public static FunctionDescriptor vips_source_custom_get_type$descriptor() {
        return vips_source_custom_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_source_custom_get_type()
     * }
     */
    public static MethodHandle vips_source_custom_get_type$handle() {
        return vips_source_custom_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_source_custom_get_type()
     * }
     */
    public static MemorySegment vips_source_custom_get_type$address() {
        return vips_source_custom_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_source_custom_get_type()
     * }
     */
    public static long vips_source_custom_get_type() {
        var mh$ = vips_source_custom_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_source_custom_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_source_custom_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_source_custom_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsSourceCustom *vips_source_custom_new()
     * }
     */
    public static FunctionDescriptor vips_source_custom_new$descriptor() {
        return vips_source_custom_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsSourceCustom *vips_source_custom_new()
     * }
     */
    public static MethodHandle vips_source_custom_new$handle() {
        return vips_source_custom_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsSourceCustom *vips_source_custom_new()
     * }
     */
    public static MemorySegment vips_source_custom_new$address() {
        return vips_source_custom_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsSourceCustom *vips_source_custom_new()
     * }
     */
    public static MemorySegment vips_source_custom_new() {
        var mh$ = vips_source_custom_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_source_custom_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_source_g_input_stream_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_source_g_input_stream_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsSourceGInputStream *vips_source_g_input_stream_new(GInputStream *stream)
     * }
     */
    public static FunctionDescriptor vips_source_g_input_stream_new$descriptor() {
        return vips_source_g_input_stream_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsSourceGInputStream *vips_source_g_input_stream_new(GInputStream *stream)
     * }
     */
    public static MethodHandle vips_source_g_input_stream_new$handle() {
        return vips_source_g_input_stream_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsSourceGInputStream *vips_source_g_input_stream_new(GInputStream *stream)
     * }
     */
    public static MemorySegment vips_source_g_input_stream_new$address() {
        return vips_source_g_input_stream_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsSourceGInputStream *vips_source_g_input_stream_new(GInputStream *stream)
     * }
     */
    public static MemorySegment vips_source_g_input_stream_new(MemorySegment stream) {
        var mh$ = vips_source_g_input_stream_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_source_g_input_stream_new", stream);
            }
            return (MemorySegment)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_target_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_target_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_target_get_type()
     * }
     */
    public static FunctionDescriptor vips_target_get_type$descriptor() {
        return vips_target_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_target_get_type()
     * }
     */
    public static MethodHandle vips_target_get_type$handle() {
        return vips_target_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_target_get_type()
     * }
     */
    public static MemorySegment vips_target_get_type$address() {
        return vips_target_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_target_get_type()
     * }
     */
    public static long vips_target_get_type() {
        var mh$ = vips_target_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_target_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_target_new_to_descriptor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_target_new_to_descriptor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsTarget *vips_target_new_to_descriptor(int descriptor)
     * }
     */
    public static FunctionDescriptor vips_target_new_to_descriptor$descriptor() {
        return vips_target_new_to_descriptor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsTarget *vips_target_new_to_descriptor(int descriptor)
     * }
     */
    public static MethodHandle vips_target_new_to_descriptor$handle() {
        return vips_target_new_to_descriptor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsTarget *vips_target_new_to_descriptor(int descriptor)
     * }
     */
    public static MemorySegment vips_target_new_to_descriptor$address() {
        return vips_target_new_to_descriptor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsTarget *vips_target_new_to_descriptor(int descriptor)
     * }
     */
    public static MemorySegment vips_target_new_to_descriptor(int descriptor) {
        var mh$ = vips_target_new_to_descriptor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_target_new_to_descriptor", descriptor);
            }
            return (MemorySegment)mh$.invokeExact(descriptor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_target_new_to_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_target_new_to_file");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsTarget *vips_target_new_to_file(const char *filename)
     * }
     */
    public static FunctionDescriptor vips_target_new_to_file$descriptor() {
        return vips_target_new_to_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsTarget *vips_target_new_to_file(const char *filename)
     * }
     */
    public static MethodHandle vips_target_new_to_file$handle() {
        return vips_target_new_to_file.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsTarget *vips_target_new_to_file(const char *filename)
     * }
     */
    public static MemorySegment vips_target_new_to_file$address() {
        return vips_target_new_to_file.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsTarget *vips_target_new_to_file(const char *filename)
     * }
     */
    public static MemorySegment vips_target_new_to_file(MemorySegment filename) {
        var mh$ = vips_target_new_to_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_target_new_to_file", filename);
            }
            return (MemorySegment)mh$.invokeExact(filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_target_new_to_memory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_target_new_to_memory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsTarget *vips_target_new_to_memory()
     * }
     */
    public static FunctionDescriptor vips_target_new_to_memory$descriptor() {
        return vips_target_new_to_memory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsTarget *vips_target_new_to_memory()
     * }
     */
    public static MethodHandle vips_target_new_to_memory$handle() {
        return vips_target_new_to_memory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsTarget *vips_target_new_to_memory()
     * }
     */
    public static MemorySegment vips_target_new_to_memory$address() {
        return vips_target_new_to_memory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsTarget *vips_target_new_to_memory()
     * }
     */
    public static MemorySegment vips_target_new_to_memory() {
        var mh$ = vips_target_new_to_memory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_target_new_to_memory");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_target_new_temp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_target_new_temp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsTarget *vips_target_new_temp(VipsTarget *target)
     * }
     */
    public static FunctionDescriptor vips_target_new_temp$descriptor() {
        return vips_target_new_temp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsTarget *vips_target_new_temp(VipsTarget *target)
     * }
     */
    public static MethodHandle vips_target_new_temp$handle() {
        return vips_target_new_temp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsTarget *vips_target_new_temp(VipsTarget *target)
     * }
     */
    public static MemorySegment vips_target_new_temp$address() {
        return vips_target_new_temp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsTarget *vips_target_new_temp(VipsTarget *target)
     * }
     */
    public static MemorySegment vips_target_new_temp(MemorySegment target) {
        var mh$ = vips_target_new_temp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_target_new_temp", target);
            }
            return (MemorySegment)mh$.invokeExact(target);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_target_write {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_target_write");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_target_write(VipsTarget *target, const void *data, size_t length)
     * }
     */
    public static FunctionDescriptor vips_target_write$descriptor() {
        return vips_target_write.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_target_write(VipsTarget *target, const void *data, size_t length)
     * }
     */
    public static MethodHandle vips_target_write$handle() {
        return vips_target_write.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_target_write(VipsTarget *target, const void *data, size_t length)
     * }
     */
    public static MemorySegment vips_target_write$address() {
        return vips_target_write.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_target_write(VipsTarget *target, const void *data, size_t length)
     * }
     */
    public static int vips_target_write(MemorySegment target, MemorySegment data, long length) {
        var mh$ = vips_target_write.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_target_write", target, data, length);
            }
            return (int)mh$.invokeExact(target, data, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_target_read {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG_LONG,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_target_read");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint64 vips_target_read(VipsTarget *target, void *buffer, size_t length)
     * }
     */
    public static FunctionDescriptor vips_target_read$descriptor() {
        return vips_target_read.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint64 vips_target_read(VipsTarget *target, void *buffer, size_t length)
     * }
     */
    public static MethodHandle vips_target_read$handle() {
        return vips_target_read.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gint64 vips_target_read(VipsTarget *target, void *buffer, size_t length)
     * }
     */
    public static MemorySegment vips_target_read$address() {
        return vips_target_read.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gint64 vips_target_read(VipsTarget *target, void *buffer, size_t length)
     * }
     */
    public static long vips_target_read(MemorySegment target, MemorySegment buffer, long length) {
        var mh$ = vips_target_read.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_target_read", target, buffer, length);
            }
            return (long)mh$.invokeExact(target, buffer, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_target_seek {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG_LONG,
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG_LONG,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_target_seek");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint64 vips_target_seek(VipsTarget *target, gint64 offset, int whence)
     * }
     */
    public static FunctionDescriptor vips_target_seek$descriptor() {
        return vips_target_seek.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint64 vips_target_seek(VipsTarget *target, gint64 offset, int whence)
     * }
     */
    public static MethodHandle vips_target_seek$handle() {
        return vips_target_seek.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gint64 vips_target_seek(VipsTarget *target, gint64 offset, int whence)
     * }
     */
    public static MemorySegment vips_target_seek$address() {
        return vips_target_seek.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gint64 vips_target_seek(VipsTarget *target, gint64 offset, int whence)
     * }
     */
    public static long vips_target_seek(MemorySegment target, long offset, int whence) {
        var mh$ = vips_target_seek.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_target_seek", target, offset, whence);
            }
            return (long)mh$.invokeExact(target, offset, whence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_target_end {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_target_end");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_target_end(VipsTarget *target)
     * }
     */
    public static FunctionDescriptor vips_target_end$descriptor() {
        return vips_target_end.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_target_end(VipsTarget *target)
     * }
     */
    public static MethodHandle vips_target_end$handle() {
        return vips_target_end.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_target_end(VipsTarget *target)
     * }
     */
    public static MemorySegment vips_target_end$address() {
        return vips_target_end.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_target_end(VipsTarget *target)
     * }
     */
    public static int vips_target_end(MemorySegment target) {
        var mh$ = vips_target_end.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_target_end", target);
            }
            return (int)mh$.invokeExact(target);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_target_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_target_finish");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_target_finish(VipsTarget *target)
     * }
     */
    public static FunctionDescriptor vips_target_finish$descriptor() {
        return vips_target_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_target_finish(VipsTarget *target)
     * }
     */
    public static MethodHandle vips_target_finish$handle() {
        return vips_target_finish.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_target_finish(VipsTarget *target)
     * }
     */
    public static MemorySegment vips_target_finish$address() {
        return vips_target_finish.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_target_finish(VipsTarget *target)
     * }
     */
    public static void vips_target_finish(MemorySegment target) {
        var mh$ = vips_target_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_target_finish", target);
            }
            mh$.invokeExact(target);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_target_steal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_target_steal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned char *vips_target_steal(VipsTarget *target, size_t *length)
     * }
     */
    public static FunctionDescriptor vips_target_steal$descriptor() {
        return vips_target_steal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned char *vips_target_steal(VipsTarget *target, size_t *length)
     * }
     */
    public static MethodHandle vips_target_steal$handle() {
        return vips_target_steal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned char *vips_target_steal(VipsTarget *target, size_t *length)
     * }
     */
    public static MemorySegment vips_target_steal$address() {
        return vips_target_steal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned char *vips_target_steal(VipsTarget *target, size_t *length)
     * }
     */
    public static MemorySegment vips_target_steal(MemorySegment target, MemorySegment length) {
        var mh$ = vips_target_steal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_target_steal", target, length);
            }
            return (MemorySegment)mh$.invokeExact(target, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_target_steal_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_target_steal_text");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *vips_target_steal_text(VipsTarget *target)
     * }
     */
    public static FunctionDescriptor vips_target_steal_text$descriptor() {
        return vips_target_steal_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *vips_target_steal_text(VipsTarget *target)
     * }
     */
    public static MethodHandle vips_target_steal_text$handle() {
        return vips_target_steal_text.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *vips_target_steal_text(VipsTarget *target)
     * }
     */
    public static MemorySegment vips_target_steal_text$address() {
        return vips_target_steal_text.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *vips_target_steal_text(VipsTarget *target)
     * }
     */
    public static MemorySegment vips_target_steal_text(MemorySegment target) {
        var mh$ = vips_target_steal_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_target_steal_text", target);
            }
            return (MemorySegment)mh$.invokeExact(target);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_target_putc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_target_putc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_target_putc(VipsTarget *target, int ch)
     * }
     */
    public static FunctionDescriptor vips_target_putc$descriptor() {
        return vips_target_putc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_target_putc(VipsTarget *target, int ch)
     * }
     */
    public static MethodHandle vips_target_putc$handle() {
        return vips_target_putc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_target_putc(VipsTarget *target, int ch)
     * }
     */
    public static MemorySegment vips_target_putc$address() {
        return vips_target_putc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_target_putc(VipsTarget *target, int ch)
     * }
     */
    public static int vips_target_putc(MemorySegment target, int ch) {
        var mh$ = vips_target_putc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_target_putc", target, ch);
            }
            return (int)mh$.invokeExact(target, ch);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_target_writes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_target_writes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_target_writes(VipsTarget *target, const char *str)
     * }
     */
    public static FunctionDescriptor vips_target_writes$descriptor() {
        return vips_target_writes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_target_writes(VipsTarget *target, const char *str)
     * }
     */
    public static MethodHandle vips_target_writes$handle() {
        return vips_target_writes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_target_writes(VipsTarget *target, const char *str)
     * }
     */
    public static MemorySegment vips_target_writes$address() {
        return vips_target_writes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_target_writes(VipsTarget *target, const char *str)
     * }
     */
    public static int vips_target_writes(MemorySegment target, MemorySegment str) {
        var mh$ = vips_target_writes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_target_writes", target, str);
            }
            return (int)mh$.invokeExact(target, str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_target_writef(VipsTarget *target, const char *fmt, ...)
     * }
     */
    public static class vips_target_writef {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                VipsRaw.C_INT,
                VipsRaw.C_POINTER,
                VipsRaw.C_POINTER
            );
        private static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_target_writef");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_target_writef(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_target_writef(VipsTarget *target, const char *fmt, ...)
         * }
         */
        public static vips_target_writef makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_target_writef(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment target, MemorySegment fmt, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_target_writef", target, fmt, x2);
                }
                return (int)spreader.invokeExact(target, fmt, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class vips_target_write_amp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_target_write_amp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_target_write_amp(VipsTarget *target, const char *str)
     * }
     */
    public static FunctionDescriptor vips_target_write_amp$descriptor() {
        return vips_target_write_amp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_target_write_amp(VipsTarget *target, const char *str)
     * }
     */
    public static MethodHandle vips_target_write_amp$handle() {
        return vips_target_write_amp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_target_write_amp(VipsTarget *target, const char *str)
     * }
     */
    public static MemorySegment vips_target_write_amp$address() {
        return vips_target_write_amp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_target_write_amp(VipsTarget *target, const char *str)
     * }
     */
    public static int vips_target_write_amp(MemorySegment target, MemorySegment str) {
        var mh$ = vips_target_write_amp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_target_write_amp", target, str);
            }
            return (int)mh$.invokeExact(target, str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_target_custom_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_target_custom_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_target_custom_get_type()
     * }
     */
    public static FunctionDescriptor vips_target_custom_get_type$descriptor() {
        return vips_target_custom_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_target_custom_get_type()
     * }
     */
    public static MethodHandle vips_target_custom_get_type$handle() {
        return vips_target_custom_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_target_custom_get_type()
     * }
     */
    public static MemorySegment vips_target_custom_get_type$address() {
        return vips_target_custom_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_target_custom_get_type()
     * }
     */
    public static long vips_target_custom_get_type() {
        var mh$ = vips_target_custom_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_target_custom_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_target_custom_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_target_custom_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsTargetCustom *vips_target_custom_new()
     * }
     */
    public static FunctionDescriptor vips_target_custom_new$descriptor() {
        return vips_target_custom_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsTargetCustom *vips_target_custom_new()
     * }
     */
    public static MethodHandle vips_target_custom_new$handle() {
        return vips_target_custom_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsTargetCustom *vips_target_custom_new()
     * }
     */
    public static MemorySegment vips_target_custom_new$address() {
        return vips_target_custom_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsTargetCustom *vips_target_custom_new()
     * }
     */
    public static MemorySegment vips_target_custom_new() {
        var mh$ = vips_target_custom_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_target_custom_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VIPS_REGION_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _RegionType.VIPS_REGION_NONE = 0
     * }
     */
    public static int VIPS_REGION_NONE() {
        return VIPS_REGION_NONE;
    }
    private static final int VIPS_REGION_BUFFER = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _RegionType.VIPS_REGION_BUFFER = 1
     * }
     */
    public static int VIPS_REGION_BUFFER() {
        return VIPS_REGION_BUFFER;
    }
    private static final int VIPS_REGION_OTHER_REGION = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _RegionType.VIPS_REGION_OTHER_REGION = 2
     * }
     */
    public static int VIPS_REGION_OTHER_REGION() {
        return VIPS_REGION_OTHER_REGION;
    }
    private static final int VIPS_REGION_OTHER_IMAGE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _RegionType.VIPS_REGION_OTHER_IMAGE = 3
     * }
     */
    public static int VIPS_REGION_OTHER_IMAGE() {
        return VIPS_REGION_OTHER_IMAGE;
    }
    private static final int VIPS_REGION_WINDOW = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _RegionType.VIPS_REGION_WINDOW = 4
     * }
     */
    public static int VIPS_REGION_WINDOW() {
        return VIPS_REGION_WINDOW;
    }
    private static final int VIPS_REGION_SHRINK_MEAN = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_REGION_SHRINK_MEAN = 0
     * }
     */
    public static int VIPS_REGION_SHRINK_MEAN() {
        return VIPS_REGION_SHRINK_MEAN;
    }
    private static final int VIPS_REGION_SHRINK_MEDIAN = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_REGION_SHRINK_MEDIAN = 1
     * }
     */
    public static int VIPS_REGION_SHRINK_MEDIAN() {
        return VIPS_REGION_SHRINK_MEDIAN;
    }
    private static final int VIPS_REGION_SHRINK_MODE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_REGION_SHRINK_MODE = 2
     * }
     */
    public static int VIPS_REGION_SHRINK_MODE() {
        return VIPS_REGION_SHRINK_MODE;
    }
    private static final int VIPS_REGION_SHRINK_MAX = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_REGION_SHRINK_MAX = 3
     * }
     */
    public static int VIPS_REGION_SHRINK_MAX() {
        return VIPS_REGION_SHRINK_MAX;
    }
    private static final int VIPS_REGION_SHRINK_MIN = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_REGION_SHRINK_MIN = 4
     * }
     */
    public static int VIPS_REGION_SHRINK_MIN() {
        return VIPS_REGION_SHRINK_MIN;
    }
    private static final int VIPS_REGION_SHRINK_NEAREST = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_REGION_SHRINK_NEAREST = 5
     * }
     */
    public static int VIPS_REGION_SHRINK_NEAREST() {
        return VIPS_REGION_SHRINK_NEAREST;
    }
    private static final int VIPS_REGION_SHRINK_LAST = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_REGION_SHRINK_LAST = 6
     * }
     */
    public static int VIPS_REGION_SHRINK_LAST() {
        return VIPS_REGION_SHRINK_LAST;
    }
    private static final int VIPS_DEMAND_STYLE_ERROR = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_DEMAND_STYLE_ERROR = -1
     * }
     */
    public static int VIPS_DEMAND_STYLE_ERROR() {
        return VIPS_DEMAND_STYLE_ERROR;
    }
    private static final int VIPS_DEMAND_STYLE_SMALLTILE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_DEMAND_STYLE_SMALLTILE = 0
     * }
     */
    public static int VIPS_DEMAND_STYLE_SMALLTILE() {
        return VIPS_DEMAND_STYLE_SMALLTILE;
    }
    private static final int VIPS_DEMAND_STYLE_FATSTRIP = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_DEMAND_STYLE_FATSTRIP = 1
     * }
     */
    public static int VIPS_DEMAND_STYLE_FATSTRIP() {
        return VIPS_DEMAND_STYLE_FATSTRIP;
    }
    private static final int VIPS_DEMAND_STYLE_THINSTRIP = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_DEMAND_STYLE_THINSTRIP = 2
     * }
     */
    public static int VIPS_DEMAND_STYLE_THINSTRIP() {
        return VIPS_DEMAND_STYLE_THINSTRIP;
    }
    private static final int VIPS_DEMAND_STYLE_ANY = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_DEMAND_STYLE_ANY = 3
     * }
     */
    public static int VIPS_DEMAND_STYLE_ANY() {
        return VIPS_DEMAND_STYLE_ANY;
    }
    private static final int VIPS_IMAGE_ERROR = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_IMAGE_ERROR = -1
     * }
     */
    public static int VIPS_IMAGE_ERROR() {
        return VIPS_IMAGE_ERROR;
    }
    private static final int VIPS_IMAGE_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_IMAGE_NONE = 0
     * }
     */
    public static int VIPS_IMAGE_NONE() {
        return VIPS_IMAGE_NONE;
    }
    private static final int VIPS_IMAGE_SETBUF = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_IMAGE_SETBUF = 1
     * }
     */
    public static int VIPS_IMAGE_SETBUF() {
        return VIPS_IMAGE_SETBUF;
    }
    private static final int VIPS_IMAGE_SETBUF_FOREIGN = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_IMAGE_SETBUF_FOREIGN = 2
     * }
     */
    public static int VIPS_IMAGE_SETBUF_FOREIGN() {
        return VIPS_IMAGE_SETBUF_FOREIGN;
    }
    private static final int VIPS_IMAGE_OPENIN = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_IMAGE_OPENIN = 3
     * }
     */
    public static int VIPS_IMAGE_OPENIN() {
        return VIPS_IMAGE_OPENIN;
    }
    private static final int VIPS_IMAGE_MMAPIN = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_IMAGE_MMAPIN = 4
     * }
     */
    public static int VIPS_IMAGE_MMAPIN() {
        return VIPS_IMAGE_MMAPIN;
    }
    private static final int VIPS_IMAGE_MMAPINRW = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_IMAGE_MMAPINRW = 5
     * }
     */
    public static int VIPS_IMAGE_MMAPINRW() {
        return VIPS_IMAGE_MMAPINRW;
    }
    private static final int VIPS_IMAGE_OPENOUT = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_IMAGE_OPENOUT = 6
     * }
     */
    public static int VIPS_IMAGE_OPENOUT() {
        return VIPS_IMAGE_OPENOUT;
    }
    private static final int VIPS_IMAGE_PARTIAL = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_IMAGE_PARTIAL = 7
     * }
     */
    public static int VIPS_IMAGE_PARTIAL() {
        return VIPS_IMAGE_PARTIAL;
    }
    private static final int VIPS_INTERPRETATION_ERROR = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERPRETATION_ERROR = -1
     * }
     */
    public static int VIPS_INTERPRETATION_ERROR() {
        return VIPS_INTERPRETATION_ERROR;
    }
    private static final int VIPS_INTERPRETATION_MULTIBAND = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERPRETATION_MULTIBAND = 0
     * }
     */
    public static int VIPS_INTERPRETATION_MULTIBAND() {
        return VIPS_INTERPRETATION_MULTIBAND;
    }
    private static final int VIPS_INTERPRETATION_B_W = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERPRETATION_B_W = 1
     * }
     */
    public static int VIPS_INTERPRETATION_B_W() {
        return VIPS_INTERPRETATION_B_W;
    }
    private static final int VIPS_INTERPRETATION_HISTOGRAM = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERPRETATION_HISTOGRAM = 10
     * }
     */
    public static int VIPS_INTERPRETATION_HISTOGRAM() {
        return VIPS_INTERPRETATION_HISTOGRAM;
    }
    private static final int VIPS_INTERPRETATION_XYZ = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERPRETATION_XYZ = 12
     * }
     */
    public static int VIPS_INTERPRETATION_XYZ() {
        return VIPS_INTERPRETATION_XYZ;
    }
    private static final int VIPS_INTERPRETATION_LAB = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERPRETATION_LAB = 13
     * }
     */
    public static int VIPS_INTERPRETATION_LAB() {
        return VIPS_INTERPRETATION_LAB;
    }
    private static final int VIPS_INTERPRETATION_CMYK = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERPRETATION_CMYK = 15
     * }
     */
    public static int VIPS_INTERPRETATION_CMYK() {
        return VIPS_INTERPRETATION_CMYK;
    }
    private static final int VIPS_INTERPRETATION_LABQ = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERPRETATION_LABQ = 16
     * }
     */
    public static int VIPS_INTERPRETATION_LABQ() {
        return VIPS_INTERPRETATION_LABQ;
    }
    private static final int VIPS_INTERPRETATION_RGB = (int)17L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERPRETATION_RGB = 17
     * }
     */
    public static int VIPS_INTERPRETATION_RGB() {
        return VIPS_INTERPRETATION_RGB;
    }
    private static final int VIPS_INTERPRETATION_CMC = (int)18L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERPRETATION_CMC = 18
     * }
     */
    public static int VIPS_INTERPRETATION_CMC() {
        return VIPS_INTERPRETATION_CMC;
    }
    private static final int VIPS_INTERPRETATION_LCH = (int)19L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERPRETATION_LCH = 19
     * }
     */
    public static int VIPS_INTERPRETATION_LCH() {
        return VIPS_INTERPRETATION_LCH;
    }
    private static final int VIPS_INTERPRETATION_LABS = (int)21L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERPRETATION_LABS = 21
     * }
     */
    public static int VIPS_INTERPRETATION_LABS() {
        return VIPS_INTERPRETATION_LABS;
    }
    private static final int VIPS_INTERPRETATION_sRGB = (int)22L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERPRETATION_sRGB = 22
     * }
     */
    public static int VIPS_INTERPRETATION_sRGB() {
        return VIPS_INTERPRETATION_sRGB;
    }
    private static final int VIPS_INTERPRETATION_YXY = (int)23L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERPRETATION_YXY = 23
     * }
     */
    public static int VIPS_INTERPRETATION_YXY() {
        return VIPS_INTERPRETATION_YXY;
    }
    private static final int VIPS_INTERPRETATION_FOURIER = (int)24L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERPRETATION_FOURIER = 24
     * }
     */
    public static int VIPS_INTERPRETATION_FOURIER() {
        return VIPS_INTERPRETATION_FOURIER;
    }
    private static final int VIPS_INTERPRETATION_RGB16 = (int)25L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERPRETATION_RGB16 = 25
     * }
     */
    public static int VIPS_INTERPRETATION_RGB16() {
        return VIPS_INTERPRETATION_RGB16;
    }
    private static final int VIPS_INTERPRETATION_GREY16 = (int)26L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERPRETATION_GREY16 = 26
     * }
     */
    public static int VIPS_INTERPRETATION_GREY16() {
        return VIPS_INTERPRETATION_GREY16;
    }
    private static final int VIPS_INTERPRETATION_MATRIX = (int)27L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERPRETATION_MATRIX = 27
     * }
     */
    public static int VIPS_INTERPRETATION_MATRIX() {
        return VIPS_INTERPRETATION_MATRIX;
    }
    private static final int VIPS_INTERPRETATION_scRGB = (int)28L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERPRETATION_scRGB = 28
     * }
     */
    public static int VIPS_INTERPRETATION_scRGB() {
        return VIPS_INTERPRETATION_scRGB;
    }
    private static final int VIPS_INTERPRETATION_HSV = (int)29L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERPRETATION_HSV = 29
     * }
     */
    public static int VIPS_INTERPRETATION_HSV() {
        return VIPS_INTERPRETATION_HSV;
    }
    private static final int VIPS_INTERPRETATION_LAST = (int)30L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERPRETATION_LAST = 30
     * }
     */
    public static int VIPS_INTERPRETATION_LAST() {
        return VIPS_INTERPRETATION_LAST;
    }
    private static final int VIPS_FORMAT_NOTSET = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FORMAT_NOTSET = -1
     * }
     */
    public static int VIPS_FORMAT_NOTSET() {
        return VIPS_FORMAT_NOTSET;
    }
    private static final int VIPS_FORMAT_UCHAR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FORMAT_UCHAR = 0
     * }
     */
    public static int VIPS_FORMAT_UCHAR() {
        return VIPS_FORMAT_UCHAR;
    }
    private static final int VIPS_FORMAT_CHAR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FORMAT_CHAR = 1
     * }
     */
    public static int VIPS_FORMAT_CHAR() {
        return VIPS_FORMAT_CHAR;
    }
    private static final int VIPS_FORMAT_USHORT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FORMAT_USHORT = 2
     * }
     */
    public static int VIPS_FORMAT_USHORT() {
        return VIPS_FORMAT_USHORT;
    }
    private static final int VIPS_FORMAT_SHORT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FORMAT_SHORT = 3
     * }
     */
    public static int VIPS_FORMAT_SHORT() {
        return VIPS_FORMAT_SHORT;
    }
    private static final int VIPS_FORMAT_UINT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FORMAT_UINT = 4
     * }
     */
    public static int VIPS_FORMAT_UINT() {
        return VIPS_FORMAT_UINT;
    }
    private static final int VIPS_FORMAT_INT = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FORMAT_INT = 5
     * }
     */
    public static int VIPS_FORMAT_INT() {
        return VIPS_FORMAT_INT;
    }
    private static final int VIPS_FORMAT_FLOAT = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FORMAT_FLOAT = 6
     * }
     */
    public static int VIPS_FORMAT_FLOAT() {
        return VIPS_FORMAT_FLOAT;
    }
    private static final int VIPS_FORMAT_COMPLEX = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FORMAT_COMPLEX = 7
     * }
     */
    public static int VIPS_FORMAT_COMPLEX() {
        return VIPS_FORMAT_COMPLEX;
    }
    private static final int VIPS_FORMAT_DOUBLE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FORMAT_DOUBLE = 8
     * }
     */
    public static int VIPS_FORMAT_DOUBLE() {
        return VIPS_FORMAT_DOUBLE;
    }
    private static final int VIPS_FORMAT_DPCOMPLEX = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FORMAT_DPCOMPLEX = 9
     * }
     */
    public static int VIPS_FORMAT_DPCOMPLEX() {
        return VIPS_FORMAT_DPCOMPLEX;
    }
    private static final int VIPS_FORMAT_LAST = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FORMAT_LAST = 10
     * }
     */
    public static int VIPS_FORMAT_LAST() {
        return VIPS_FORMAT_LAST;
    }
    private static final int VIPS_CODING_ERROR = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_CODING_ERROR = -1
     * }
     */
    public static int VIPS_CODING_ERROR() {
        return VIPS_CODING_ERROR;
    }
    private static final int VIPS_CODING_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_CODING_NONE = 0
     * }
     */
    public static int VIPS_CODING_NONE() {
        return VIPS_CODING_NONE;
    }
    private static final int VIPS_CODING_LABQ = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_CODING_LABQ = 2
     * }
     */
    public static int VIPS_CODING_LABQ() {
        return VIPS_CODING_LABQ;
    }
    private static final int VIPS_CODING_RAD = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_CODING_RAD = 6
     * }
     */
    public static int VIPS_CODING_RAD() {
        return VIPS_CODING_RAD;
    }
    private static final int VIPS_CODING_LAST = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_CODING_LAST = 7
     * }
     */
    public static int VIPS_CODING_LAST() {
        return VIPS_CODING_LAST;
    }
    private static final int VIPS_ACCESS_RANDOM = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ACCESS_RANDOM = 0
     * }
     */
    public static int VIPS_ACCESS_RANDOM() {
        return VIPS_ACCESS_RANDOM;
    }
    private static final int VIPS_ACCESS_SEQUENTIAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ACCESS_SEQUENTIAL = 1
     * }
     */
    public static int VIPS_ACCESS_SEQUENTIAL() {
        return VIPS_ACCESS_SEQUENTIAL;
    }
    private static final int VIPS_ACCESS_SEQUENTIAL_UNBUFFERED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ACCESS_SEQUENTIAL_UNBUFFERED = 2
     * }
     */
    public static int VIPS_ACCESS_SEQUENTIAL_UNBUFFERED() {
        return VIPS_ACCESS_SEQUENTIAL_UNBUFFERED;
    }
    private static final int VIPS_ACCESS_LAST = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ACCESS_LAST = 3
     * }
     */
    public static int VIPS_ACCESS_LAST() {
        return VIPS_ACCESS_LAST;
    }

    private static class vips_image_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_image_get_type()
     * }
     */
    public static FunctionDescriptor vips_image_get_type$descriptor() {
        return vips_image_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_image_get_type()
     * }
     */
    public static MethodHandle vips_image_get_type$handle() {
        return vips_image_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_image_get_type()
     * }
     */
    public static MemorySegment vips_image_get_type$address() {
        return vips_image_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_image_get_type()
     * }
     */
    public static long vips_image_get_type() {
        var mh$ = vips_image_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_invalidate_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_invalidate_all");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_image_invalidate_all(VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_invalidate_all$descriptor() {
        return vips_image_invalidate_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_image_invalidate_all(VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_invalidate_all$handle() {
        return vips_image_invalidate_all.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_image_invalidate_all(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_invalidate_all$address() {
        return vips_image_invalidate_all.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_image_invalidate_all(VipsImage *image)
     * }
     */
    public static void vips_image_invalidate_all(MemorySegment image) {
        var mh$ = vips_image_invalidate_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_invalidate_all", image);
            }
            mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_minimise_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_minimise_all");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_image_minimise_all(VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_minimise_all$descriptor() {
        return vips_image_minimise_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_image_minimise_all(VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_minimise_all$handle() {
        return vips_image_minimise_all.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_image_minimise_all(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_minimise_all$address() {
        return vips_image_minimise_all.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_image_minimise_all(VipsImage *image)
     * }
     */
    public static void vips_image_minimise_all(MemorySegment image) {
        var mh$ = vips_image_minimise_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_minimise_all", image);
            }
            mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_is_sequential {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_is_sequential");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_image_is_sequential(VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_is_sequential$descriptor() {
        return vips_image_is_sequential.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_image_is_sequential(VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_is_sequential$handle() {
        return vips_image_is_sequential.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_image_is_sequential(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_is_sequential$address() {
        return vips_image_is_sequential.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_image_is_sequential(VipsImage *image)
     * }
     */
    public static int vips_image_is_sequential(MemorySegment image) {
        var mh$ = vips_image_is_sequential.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_is_sequential", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_set_progress {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_set_progress");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_image_set_progress(VipsImage *image, gboolean progress)
     * }
     */
    public static FunctionDescriptor vips_image_set_progress$descriptor() {
        return vips_image_set_progress.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_image_set_progress(VipsImage *image, gboolean progress)
     * }
     */
    public static MethodHandle vips_image_set_progress$handle() {
        return vips_image_set_progress.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_image_set_progress(VipsImage *image, gboolean progress)
     * }
     */
    public static MemorySegment vips_image_set_progress$address() {
        return vips_image_set_progress.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_image_set_progress(VipsImage *image, gboolean progress)
     * }
     */
    public static void vips_image_set_progress(MemorySegment image, int progress) {
        var mh$ = vips_image_set_progress.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_set_progress", image, progress);
            }
            mh$.invokeExact(image, progress);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_iskilled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_iskilled");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_image_iskilled(VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_iskilled$descriptor() {
        return vips_image_iskilled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_image_iskilled(VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_iskilled$handle() {
        return vips_image_iskilled.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_image_iskilled(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_iskilled$address() {
        return vips_image_iskilled.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_image_iskilled(VipsImage *image)
     * }
     */
    public static int vips_image_iskilled(MemorySegment image) {
        var mh$ = vips_image_iskilled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_iskilled", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_set_kill {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_set_kill");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_image_set_kill(VipsImage *image, gboolean kill)
     * }
     */
    public static FunctionDescriptor vips_image_set_kill$descriptor() {
        return vips_image_set_kill.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_image_set_kill(VipsImage *image, gboolean kill)
     * }
     */
    public static MethodHandle vips_image_set_kill$handle() {
        return vips_image_set_kill.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_image_set_kill(VipsImage *image, gboolean kill)
     * }
     */
    public static MemorySegment vips_image_set_kill$address() {
        return vips_image_set_kill.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_image_set_kill(VipsImage *image, gboolean kill)
     * }
     */
    public static void vips_image_set_kill(MemorySegment image, int kill) {
        var mh$ = vips_image_set_kill.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_set_kill", image, kill);
            }
            mh$.invokeExact(image, kill);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new()
     * }
     */
    public static FunctionDescriptor vips_image_new$descriptor() {
        return vips_image_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new()
     * }
     */
    public static MethodHandle vips_image_new$handle() {
        return vips_image_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new()
     * }
     */
    public static MemorySegment vips_image_new$address() {
        return vips_image_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new()
     * }
     */
    public static MemorySegment vips_image_new() {
        var mh$ = vips_image_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_new_memory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_new_memory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_memory()
     * }
     */
    public static FunctionDescriptor vips_image_new_memory$descriptor() {
        return vips_image_new_memory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_memory()
     * }
     */
    public static MethodHandle vips_image_new_memory$handle() {
        return vips_image_new_memory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_memory()
     * }
     */
    public static MemorySegment vips_image_new_memory$address() {
        return vips_image_new_memory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_memory()
     * }
     */
    public static MemorySegment vips_image_new_memory() {
        var mh$ = vips_image_new_memory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_new_memory");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_memory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_memory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_memory()
     * }
     */
    public static FunctionDescriptor vips_image_memory$descriptor() {
        return vips_image_memory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_memory()
     * }
     */
    public static MethodHandle vips_image_memory$handle() {
        return vips_image_memory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_memory()
     * }
     */
    public static MemorySegment vips_image_memory$address() {
        return vips_image_memory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsImage *vips_image_memory()
     * }
     */
    public static MemorySegment vips_image_memory() {
        var mh$ = vips_image_memory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_memory");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_file(const char *name, ...)
     * }
     */
    public static class vips_image_new_from_file {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                VipsRaw.C_POINTER,
                VipsRaw.C_POINTER
            );
        private static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_new_from_file");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_image_new_from_file(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern VipsImage *vips_image_new_from_file(const char *name, ...)
         * }
         */
        public static vips_image_new_from_file makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_image_new_from_file(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment name, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_image_new_from_file", name, x1);
                }
                return (MemorySegment)spreader.invokeExact(name, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class vips_image_new_from_file_RW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_new_from_file_RW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_file_RW(const char *filename)
     * }
     */
    public static FunctionDescriptor vips_image_new_from_file_RW$descriptor() {
        return vips_image_new_from_file_RW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_file_RW(const char *filename)
     * }
     */
    public static MethodHandle vips_image_new_from_file_RW$handle() {
        return vips_image_new_from_file_RW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_file_RW(const char *filename)
     * }
     */
    public static MemorySegment vips_image_new_from_file_RW$address() {
        return vips_image_new_from_file_RW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_file_RW(const char *filename)
     * }
     */
    public static MemorySegment vips_image_new_from_file_RW(MemorySegment filename) {
        var mh$ = vips_image_new_from_file_RW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_new_from_file_RW", filename);
            }
            return (MemorySegment)mh$.invokeExact(filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_new_from_file_raw {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_INT,
            VipsRaw.C_INT,
            VipsRaw.C_INT,
            VipsRaw.C_LONG_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_new_from_file_raw");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_file_raw(const char *filename, int xsize, int ysize, int bands, guint64 offset)
     * }
     */
    public static FunctionDescriptor vips_image_new_from_file_raw$descriptor() {
        return vips_image_new_from_file_raw.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_file_raw(const char *filename, int xsize, int ysize, int bands, guint64 offset)
     * }
     */
    public static MethodHandle vips_image_new_from_file_raw$handle() {
        return vips_image_new_from_file_raw.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_file_raw(const char *filename, int xsize, int ysize, int bands, guint64 offset)
     * }
     */
    public static MemorySegment vips_image_new_from_file_raw$address() {
        return vips_image_new_from_file_raw.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_file_raw(const char *filename, int xsize, int ysize, int bands, guint64 offset)
     * }
     */
    public static MemorySegment vips_image_new_from_file_raw(MemorySegment filename, int xsize, int ysize, int bands, long offset) {
        var mh$ = vips_image_new_from_file_raw.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_new_from_file_raw", filename, xsize, ysize, bands, offset);
            }
            return (MemorySegment)mh$.invokeExact(filename, xsize, ysize, bands, offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_new_from_memory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG,
            VipsRaw.C_INT,
            VipsRaw.C_INT,
            VipsRaw.C_INT,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_new_from_memory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_memory(const void *data, size_t size, int width, int height, int bands, VipsBandFormat format)
     * }
     */
    public static FunctionDescriptor vips_image_new_from_memory$descriptor() {
        return vips_image_new_from_memory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_memory(const void *data, size_t size, int width, int height, int bands, VipsBandFormat format)
     * }
     */
    public static MethodHandle vips_image_new_from_memory$handle() {
        return vips_image_new_from_memory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_memory(const void *data, size_t size, int width, int height, int bands, VipsBandFormat format)
     * }
     */
    public static MemorySegment vips_image_new_from_memory$address() {
        return vips_image_new_from_memory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_memory(const void *data, size_t size, int width, int height, int bands, VipsBandFormat format)
     * }
     */
    public static MemorySegment vips_image_new_from_memory(MemorySegment data, long size, int width, int height, int bands, int format) {
        var mh$ = vips_image_new_from_memory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_new_from_memory", data, size, width, height, bands, format);
            }
            return (MemorySegment)mh$.invokeExact(data, size, width, height, bands, format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_new_from_memory_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG,
            VipsRaw.C_INT,
            VipsRaw.C_INT,
            VipsRaw.C_INT,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_new_from_memory_copy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_memory_copy(const void *data, size_t size, int width, int height, int bands, VipsBandFormat format)
     * }
     */
    public static FunctionDescriptor vips_image_new_from_memory_copy$descriptor() {
        return vips_image_new_from_memory_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_memory_copy(const void *data, size_t size, int width, int height, int bands, VipsBandFormat format)
     * }
     */
    public static MethodHandle vips_image_new_from_memory_copy$handle() {
        return vips_image_new_from_memory_copy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_memory_copy(const void *data, size_t size, int width, int height, int bands, VipsBandFormat format)
     * }
     */
    public static MemorySegment vips_image_new_from_memory_copy$address() {
        return vips_image_new_from_memory_copy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_memory_copy(const void *data, size_t size, int width, int height, int bands, VipsBandFormat format)
     * }
     */
    public static MemorySegment vips_image_new_from_memory_copy(MemorySegment data, long size, int width, int height, int bands, int format) {
        var mh$ = vips_image_new_from_memory_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_new_from_memory_copy", data, size, width, height, bands, format);
            }
            return (MemorySegment)mh$.invokeExact(data, size, width, height, bands, format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_buffer(const void *buf, size_t len, const char *option_string, ...)
     * }
     */
    public static class vips_image_new_from_buffer {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                VipsRaw.C_POINTER,
                VipsRaw.C_POINTER,
                VipsRaw.C_LONG,
                VipsRaw.C_POINTER
            );
        private static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_new_from_buffer");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_image_new_from_buffer(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern VipsImage *vips_image_new_from_buffer(const void *buf, size_t len, const char *option_string, ...)
         * }
         */
        public static vips_image_new_from_buffer makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_image_new_from_buffer(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment buf, long len, MemorySegment option_string, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_image_new_from_buffer", buf, len, option_string, x3);
                }
                return (MemorySegment)spreader.invokeExact(buf, len, option_string, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_source(VipsSource *source, const char *option_string, ...)
     * }
     */
    public static class vips_image_new_from_source {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                VipsRaw.C_POINTER,
                VipsRaw.C_POINTER,
                VipsRaw.C_POINTER
            );
        private static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_new_from_source");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_image_new_from_source(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern VipsImage *vips_image_new_from_source(VipsSource *source, const char *option_string, ...)
         * }
         */
        public static vips_image_new_from_source makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_image_new_from_source(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment source, MemorySegment option_string, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_image_new_from_source", source, option_string, x2);
                }
                return (MemorySegment)spreader.invokeExact(source, option_string, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class vips_image_new_matrix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_INT,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_new_matrix");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_matrix(int width, int height)
     * }
     */
    public static FunctionDescriptor vips_image_new_matrix$descriptor() {
        return vips_image_new_matrix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_matrix(int width, int height)
     * }
     */
    public static MethodHandle vips_image_new_matrix$handle() {
        return vips_image_new_matrix.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_matrix(int width, int height)
     * }
     */
    public static MemorySegment vips_image_new_matrix$address() {
        return vips_image_new_matrix.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_matrix(int width, int height)
     * }
     */
    public static MemorySegment vips_image_new_matrix(int width, int height) {
        var mh$ = vips_image_new_matrix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_new_matrix", width, height);
            }
            return (MemorySegment)mh$.invokeExact(width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_matrixv(int width, int height, ...)
     * }
     */
    public static class vips_image_new_matrixv {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                VipsRaw.C_POINTER,
                VipsRaw.C_INT,
                VipsRaw.C_INT
            );
        private static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_new_matrixv");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_image_new_matrixv(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern VipsImage *vips_image_new_matrixv(int width, int height, ...)
         * }
         */
        public static vips_image_new_matrixv makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_image_new_matrixv(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(int width, int height, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_image_new_matrixv", width, height, x2);
                }
                return (MemorySegment)spreader.invokeExact(width, height, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class vips_image_new_matrix_from_array {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_INT,
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_new_matrix_from_array");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_matrix_from_array(int width, int height, const double *array, int size)
     * }
     */
    public static FunctionDescriptor vips_image_new_matrix_from_array$descriptor() {
        return vips_image_new_matrix_from_array.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_matrix_from_array(int width, int height, const double *array, int size)
     * }
     */
    public static MethodHandle vips_image_new_matrix_from_array$handle() {
        return vips_image_new_matrix_from_array.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_matrix_from_array(int width, int height, const double *array, int size)
     * }
     */
    public static MemorySegment vips_image_new_matrix_from_array$address() {
        return vips_image_new_matrix_from_array.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_matrix_from_array(int width, int height, const double *array, int size)
     * }
     */
    public static MemorySegment vips_image_new_matrix_from_array(int width, int height, MemorySegment array, int size) {
        var mh$ = vips_image_new_matrix_from_array.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_new_matrix_from_array", width, height, array, size);
            }
            return (MemorySegment)mh$.invokeExact(width, height, array, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_matrix_from_array {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_INT,
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_matrix_from_array");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_matrix_from_array(int width, int height, const double *array, int size)
     * }
     */
    public static FunctionDescriptor vips_image_matrix_from_array$descriptor() {
        return vips_image_matrix_from_array.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_matrix_from_array(int width, int height, const double *array, int size)
     * }
     */
    public static MethodHandle vips_image_matrix_from_array$handle() {
        return vips_image_matrix_from_array.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_matrix_from_array(int width, int height, const double *array, int size)
     * }
     */
    public static MemorySegment vips_image_matrix_from_array$address() {
        return vips_image_matrix_from_array.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsImage *vips_image_matrix_from_array(int width, int height, const double *array, int size)
     * }
     */
    public static MemorySegment vips_image_matrix_from_array(int width, int height, MemorySegment array, int size) {
        var mh$ = vips_image_matrix_from_array.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_matrix_from_array", width, height, array, size);
            }
            return (MemorySegment)mh$.invokeExact(width, height, array, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_new_from_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_new_from_image");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_image(VipsImage *image, const double *c, int n)
     * }
     */
    public static FunctionDescriptor vips_image_new_from_image$descriptor() {
        return vips_image_new_from_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_image(VipsImage *image, const double *c, int n)
     * }
     */
    public static MethodHandle vips_image_new_from_image$handle() {
        return vips_image_new_from_image.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_image(VipsImage *image, const double *c, int n)
     * }
     */
    public static MemorySegment vips_image_new_from_image$address() {
        return vips_image_new_from_image.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_image(VipsImage *image, const double *c, int n)
     * }
     */
    public static MemorySegment vips_image_new_from_image(MemorySegment image, MemorySegment c, int n) {
        var mh$ = vips_image_new_from_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_new_from_image", image, c, n);
            }
            return (MemorySegment)mh$.invokeExact(image, c, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_new_from_image1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_DOUBLE
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_new_from_image1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_image1(VipsImage *image, double c)
     * }
     */
    public static FunctionDescriptor vips_image_new_from_image1$descriptor() {
        return vips_image_new_from_image1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_image1(VipsImage *image, double c)
     * }
     */
    public static MethodHandle vips_image_new_from_image1$handle() {
        return vips_image_new_from_image1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_image1(VipsImage *image, double c)
     * }
     */
    public static MemorySegment vips_image_new_from_image1$address() {
        return vips_image_new_from_image1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_image1(VipsImage *image, double c)
     * }
     */
    public static MemorySegment vips_image_new_from_image1(MemorySegment image, double c) {
        var mh$ = vips_image_new_from_image1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_new_from_image1", image, c);
            }
            return (MemorySegment)mh$.invokeExact(image, c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_set_delete_on_close {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_set_delete_on_close");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_image_set_delete_on_close(VipsImage *image, gboolean delete_on_close)
     * }
     */
    public static FunctionDescriptor vips_image_set_delete_on_close$descriptor() {
        return vips_image_set_delete_on_close.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_image_set_delete_on_close(VipsImage *image, gboolean delete_on_close)
     * }
     */
    public static MethodHandle vips_image_set_delete_on_close$handle() {
        return vips_image_set_delete_on_close.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_image_set_delete_on_close(VipsImage *image, gboolean delete_on_close)
     * }
     */
    public static MemorySegment vips_image_set_delete_on_close$address() {
        return vips_image_set_delete_on_close.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_image_set_delete_on_close(VipsImage *image, gboolean delete_on_close)
     * }
     */
    public static void vips_image_set_delete_on_close(MemorySegment image, int delete_on_close) {
        var mh$ = vips_image_set_delete_on_close.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_set_delete_on_close", image, delete_on_close);
            }
            mh$.invokeExact(image, delete_on_close);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_new_temp_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_new_temp_file");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_temp_file(const char *format)
     * }
     */
    public static FunctionDescriptor vips_image_new_temp_file$descriptor() {
        return vips_image_new_temp_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_temp_file(const char *format)
     * }
     */
    public static MethodHandle vips_image_new_temp_file$handle() {
        return vips_image_new_temp_file.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_temp_file(const char *format)
     * }
     */
    public static MemorySegment vips_image_new_temp_file$address() {
        return vips_image_new_temp_file.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_temp_file(const char *format)
     * }
     */
    public static MemorySegment vips_image_new_temp_file(MemorySegment format) {
        var mh$ = vips_image_new_temp_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_new_temp_file", format);
            }
            return (MemorySegment)mh$.invokeExact(format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_write {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_write");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_write(VipsImage *image, VipsImage *out)
     * }
     */
    public static FunctionDescriptor vips_image_write$descriptor() {
        return vips_image_write.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_write(VipsImage *image, VipsImage *out)
     * }
     */
    public static MethodHandle vips_image_write$handle() {
        return vips_image_write.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_write(VipsImage *image, VipsImage *out)
     * }
     */
    public static MemorySegment vips_image_write$address() {
        return vips_image_write.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_write(VipsImage *image, VipsImage *out)
     * }
     */
    public static int vips_image_write(MemorySegment image, MemorySegment out) {
        var mh$ = vips_image_write.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_write", image, out);
            }
            return (int)mh$.invokeExact(image, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_image_write_to_file(VipsImage *image, const char *name, ...)
     * }
     */
    public static class vips_image_write_to_file {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                VipsRaw.C_INT,
                VipsRaw.C_POINTER,
                VipsRaw.C_POINTER
            );
        private static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_write_to_file");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_image_write_to_file(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_image_write_to_file(VipsImage *image, const char *name, ...)
         * }
         */
        public static vips_image_write_to_file makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_image_write_to_file(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment image, MemorySegment name, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_image_write_to_file", image, name, x2);
                }
                return (int)spreader.invokeExact(image, name, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_image_write_to_buffer(VipsImage *in, const char *suffix, void **buf, size_t *size, ...)
     * }
     */
    public static class vips_image_write_to_buffer {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                VipsRaw.C_INT,
                VipsRaw.C_POINTER,
                VipsRaw.C_POINTER,
                VipsRaw.C_POINTER,
                VipsRaw.C_POINTER
            );
        private static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_write_to_buffer");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_image_write_to_buffer(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_image_write_to_buffer(VipsImage *in, const char *suffix, void **buf, size_t *size, ...)
         * }
         */
        public static vips_image_write_to_buffer makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_image_write_to_buffer(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment suffix, MemorySegment buf, MemorySegment size, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_image_write_to_buffer", in, suffix, buf, size, x4);
                }
                return (int)spreader.invokeExact(in, suffix, buf, size, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_image_write_to_target(VipsImage *in, const char *suffix, VipsTarget *target, ...)
     * }
     */
    public static class vips_image_write_to_target {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                VipsRaw.C_INT,
                VipsRaw.C_POINTER,
                VipsRaw.C_POINTER,
                VipsRaw.C_POINTER
            );
        private static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_write_to_target");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_image_write_to_target(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_image_write_to_target(VipsImage *in, const char *suffix, VipsTarget *target, ...)
         * }
         */
        public static vips_image_write_to_target makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_image_write_to_target(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment suffix, MemorySegment target, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_image_write_to_target", in, suffix, target, x3);
                }
                return (int)spreader.invokeExact(in, suffix, target, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class vips_image_write_to_memory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_write_to_memory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *vips_image_write_to_memory(VipsImage *in, size_t *size)
     * }
     */
    public static FunctionDescriptor vips_image_write_to_memory$descriptor() {
        return vips_image_write_to_memory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *vips_image_write_to_memory(VipsImage *in, size_t *size)
     * }
     */
    public static MethodHandle vips_image_write_to_memory$handle() {
        return vips_image_write_to_memory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *vips_image_write_to_memory(VipsImage *in, size_t *size)
     * }
     */
    public static MemorySegment vips_image_write_to_memory$address() {
        return vips_image_write_to_memory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *vips_image_write_to_memory(VipsImage *in, size_t *size)
     * }
     */
    public static MemorySegment vips_image_write_to_memory(MemorySegment in, MemorySegment size) {
        var mh$ = vips_image_write_to_memory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_write_to_memory", in, size);
            }
            return (MemorySegment)mh$.invokeExact(in, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_decode_predict {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_decode_predict");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_decode_predict(VipsImage *in, int *bands, VipsBandFormat *format)
     * }
     */
    public static FunctionDescriptor vips_image_decode_predict$descriptor() {
        return vips_image_decode_predict.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_decode_predict(VipsImage *in, int *bands, VipsBandFormat *format)
     * }
     */
    public static MethodHandle vips_image_decode_predict$handle() {
        return vips_image_decode_predict.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_decode_predict(VipsImage *in, int *bands, VipsBandFormat *format)
     * }
     */
    public static MemorySegment vips_image_decode_predict$address() {
        return vips_image_decode_predict.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_decode_predict(VipsImage *in, int *bands, VipsBandFormat *format)
     * }
     */
    public static int vips_image_decode_predict(MemorySegment in, MemorySegment bands, MemorySegment format) {
        var mh$ = vips_image_decode_predict.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_decode_predict", in, bands, format);
            }
            return (int)mh$.invokeExact(in, bands, format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_decode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_decode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_decode(VipsImage *in, VipsImage **out)
     * }
     */
    public static FunctionDescriptor vips_image_decode$descriptor() {
        return vips_image_decode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_decode(VipsImage *in, VipsImage **out)
     * }
     */
    public static MethodHandle vips_image_decode$handle() {
        return vips_image_decode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_decode(VipsImage *in, VipsImage **out)
     * }
     */
    public static MemorySegment vips_image_decode$address() {
        return vips_image_decode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_decode(VipsImage *in, VipsImage **out)
     * }
     */
    public static int vips_image_decode(MemorySegment in, MemorySegment out) {
        var mh$ = vips_image_decode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_decode", in, out);
            }
            return (int)mh$.invokeExact(in, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_encode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_encode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_encode(VipsImage *in, VipsImage **out, VipsCoding coding)
     * }
     */
    public static FunctionDescriptor vips_image_encode$descriptor() {
        return vips_image_encode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_encode(VipsImage *in, VipsImage **out, VipsCoding coding)
     * }
     */
    public static MethodHandle vips_image_encode$handle() {
        return vips_image_encode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_encode(VipsImage *in, VipsImage **out, VipsCoding coding)
     * }
     */
    public static MemorySegment vips_image_encode$address() {
        return vips_image_encode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_encode(VipsImage *in, VipsImage **out, VipsCoding coding)
     * }
     */
    public static int vips_image_encode(MemorySegment in, MemorySegment out, int coding) {
        var mh$ = vips_image_encode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_encode", in, out, coding);
            }
            return (int)mh$.invokeExact(in, out, coding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_isMSBfirst {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_isMSBfirst");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_image_isMSBfirst(VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_isMSBfirst$descriptor() {
        return vips_image_isMSBfirst.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_image_isMSBfirst(VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_isMSBfirst$handle() {
        return vips_image_isMSBfirst.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_image_isMSBfirst(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_isMSBfirst$address() {
        return vips_image_isMSBfirst.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_image_isMSBfirst(VipsImage *image)
     * }
     */
    public static int vips_image_isMSBfirst(MemorySegment image) {
        var mh$ = vips_image_isMSBfirst.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_isMSBfirst", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_isfile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_isfile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_image_isfile(VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_isfile$descriptor() {
        return vips_image_isfile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_image_isfile(VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_isfile$handle() {
        return vips_image_isfile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_image_isfile(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_isfile$address() {
        return vips_image_isfile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_image_isfile(VipsImage *image)
     * }
     */
    public static int vips_image_isfile(MemorySegment image) {
        var mh$ = vips_image_isfile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_isfile", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_ispartial {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_ispartial");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_image_ispartial(VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_ispartial$descriptor() {
        return vips_image_ispartial.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_image_ispartial(VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_ispartial$handle() {
        return vips_image_ispartial.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_image_ispartial(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_ispartial$address() {
        return vips_image_ispartial.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_image_ispartial(VipsImage *image)
     * }
     */
    public static int vips_image_ispartial(MemorySegment image) {
        var mh$ = vips_image_ispartial.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_ispartial", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_hasalpha {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_hasalpha");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_image_hasalpha(VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_hasalpha$descriptor() {
        return vips_image_hasalpha.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_image_hasalpha(VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_hasalpha$handle() {
        return vips_image_hasalpha.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_image_hasalpha(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_hasalpha$address() {
        return vips_image_hasalpha.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_image_hasalpha(VipsImage *image)
     * }
     */
    public static int vips_image_hasalpha(MemorySegment image) {
        var mh$ = vips_image_hasalpha.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_hasalpha", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_copy_memory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_copy_memory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_copy_memory(VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_copy_memory$descriptor() {
        return vips_image_copy_memory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_copy_memory(VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_copy_memory$handle() {
        return vips_image_copy_memory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_copy_memory(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_copy_memory$address() {
        return vips_image_copy_memory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsImage *vips_image_copy_memory(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_copy_memory(MemorySegment image) {
        var mh$ = vips_image_copy_memory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_copy_memory", image);
            }
            return (MemorySegment)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_wio_input {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_wio_input");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_wio_input(VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_wio_input$descriptor() {
        return vips_image_wio_input.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_wio_input(VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_wio_input$handle() {
        return vips_image_wio_input.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_wio_input(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_wio_input$address() {
        return vips_image_wio_input.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_wio_input(VipsImage *image)
     * }
     */
    public static int vips_image_wio_input(MemorySegment image) {
        var mh$ = vips_image_wio_input.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_wio_input", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_pio_input {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_pio_input");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_pio_input(VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_pio_input$descriptor() {
        return vips_image_pio_input.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_pio_input(VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_pio_input$handle() {
        return vips_image_pio_input.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_pio_input(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_pio_input$address() {
        return vips_image_pio_input.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_pio_input(VipsImage *image)
     * }
     */
    public static int vips_image_pio_input(MemorySegment image) {
        var mh$ = vips_image_pio_input.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_pio_input", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_pio_output {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_pio_output");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_pio_output(VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_pio_output$descriptor() {
        return vips_image_pio_output.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_pio_output(VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_pio_output$handle() {
        return vips_image_pio_output.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_pio_output(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_pio_output$address() {
        return vips_image_pio_output.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_pio_output(VipsImage *image)
     * }
     */
    public static int vips_image_pio_output(MemorySegment image) {
        var mh$ = vips_image_pio_output.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_pio_output", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_inplace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_inplace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_inplace(VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_inplace$descriptor() {
        return vips_image_inplace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_inplace(VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_inplace$handle() {
        return vips_image_inplace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_inplace(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_inplace$address() {
        return vips_image_inplace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_inplace(VipsImage *image)
     * }
     */
    public static int vips_image_inplace(MemorySegment image) {
        var mh$ = vips_image_inplace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_inplace", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_write_prepare {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_write_prepare");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_write_prepare(VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_write_prepare$descriptor() {
        return vips_image_write_prepare.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_write_prepare(VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_write_prepare$handle() {
        return vips_image_write_prepare.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_write_prepare(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_write_prepare$address() {
        return vips_image_write_prepare.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_write_prepare(VipsImage *image)
     * }
     */
    public static int vips_image_write_prepare(MemorySegment image) {
        var mh$ = vips_image_write_prepare.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_write_prepare", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_write_line {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_write_line");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_write_line(VipsImage *image, int ypos, VipsPel *linebuffer)
     * }
     */
    public static FunctionDescriptor vips_image_write_line$descriptor() {
        return vips_image_write_line.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_write_line(VipsImage *image, int ypos, VipsPel *linebuffer)
     * }
     */
    public static MethodHandle vips_image_write_line$handle() {
        return vips_image_write_line.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_write_line(VipsImage *image, int ypos, VipsPel *linebuffer)
     * }
     */
    public static MemorySegment vips_image_write_line$address() {
        return vips_image_write_line.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_write_line(VipsImage *image, int ypos, VipsPel *linebuffer)
     * }
     */
    public static int vips_image_write_line(MemorySegment image, int ypos, MemorySegment linebuffer) {
        var mh$ = vips_image_write_line.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_write_line", image, ypos, linebuffer);
            }
            return (int)mh$.invokeExact(image, ypos, linebuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_array_image_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_array_image_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsArrayImage *vips_array_image_new(VipsImage **array, int n)
     * }
     */
    public static FunctionDescriptor vips_array_image_new$descriptor() {
        return vips_array_image_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsArrayImage *vips_array_image_new(VipsImage **array, int n)
     * }
     */
    public static MethodHandle vips_array_image_new$handle() {
        return vips_array_image_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsArrayImage *vips_array_image_new(VipsImage **array, int n)
     * }
     */
    public static MemorySegment vips_array_image_new$address() {
        return vips_array_image_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsArrayImage *vips_array_image_new(VipsImage **array, int n)
     * }
     */
    public static MemorySegment vips_array_image_new(MemorySegment array, int n) {
        var mh$ = vips_array_image_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_array_image_new", array, n);
            }
            return (MemorySegment)mh$.invokeExact(array, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern VipsArrayImage *vips_array_image_newv(int n, ...)
     * }
     */
    public static class vips_array_image_newv {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                VipsRaw.C_POINTER,
                VipsRaw.C_INT
            );
        private static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_array_image_newv");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_array_image_newv(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern VipsArrayImage *vips_array_image_newv(int n, ...)
         * }
         */
        public static vips_array_image_newv makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_array_image_newv(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(int n, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_array_image_newv", n, x1);
                }
                return (MemorySegment)spreader.invokeExact(n, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class vips_array_image_new_from_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_array_image_new_from_string");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsArrayImage *vips_array_image_new_from_string(const char *string, VipsAccess flags)
     * }
     */
    public static FunctionDescriptor vips_array_image_new_from_string$descriptor() {
        return vips_array_image_new_from_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsArrayImage *vips_array_image_new_from_string(const char *string, VipsAccess flags)
     * }
     */
    public static MethodHandle vips_array_image_new_from_string$handle() {
        return vips_array_image_new_from_string.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsArrayImage *vips_array_image_new_from_string(const char *string, VipsAccess flags)
     * }
     */
    public static MemorySegment vips_array_image_new_from_string$address() {
        return vips_array_image_new_from_string.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsArrayImage *vips_array_image_new_from_string(const char *string, VipsAccess flags)
     * }
     */
    public static MemorySegment vips_array_image_new_from_string(MemorySegment string, int flags) {
        var mh$ = vips_array_image_new_from_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_array_image_new_from_string", string, flags);
            }
            return (MemorySegment)mh$.invokeExact(string, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_array_image_empty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_array_image_empty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsArrayImage *vips_array_image_empty()
     * }
     */
    public static FunctionDescriptor vips_array_image_empty$descriptor() {
        return vips_array_image_empty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsArrayImage *vips_array_image_empty()
     * }
     */
    public static MethodHandle vips_array_image_empty$handle() {
        return vips_array_image_empty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsArrayImage *vips_array_image_empty()
     * }
     */
    public static MemorySegment vips_array_image_empty$address() {
        return vips_array_image_empty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsArrayImage *vips_array_image_empty()
     * }
     */
    public static MemorySegment vips_array_image_empty() {
        var mh$ = vips_array_image_empty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_array_image_empty");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_array_image_append {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_array_image_append");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsArrayImage *vips_array_image_append(VipsArrayImage *array, VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_array_image_append$descriptor() {
        return vips_array_image_append.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsArrayImage *vips_array_image_append(VipsArrayImage *array, VipsImage *image)
     * }
     */
    public static MethodHandle vips_array_image_append$handle() {
        return vips_array_image_append.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsArrayImage *vips_array_image_append(VipsArrayImage *array, VipsImage *image)
     * }
     */
    public static MemorySegment vips_array_image_append$address() {
        return vips_array_image_append.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsArrayImage *vips_array_image_append(VipsArrayImage *array, VipsImage *image)
     * }
     */
    public static MemorySegment vips_array_image_append(MemorySegment array, MemorySegment image) {
        var mh$ = vips_array_image_append.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_array_image_append", array, image);
            }
            return (MemorySegment)mh$.invokeExact(array, image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_array_image_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_array_image_get");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsImage **vips_array_image_get(VipsArrayImage *array, int *n)
     * }
     */
    public static FunctionDescriptor vips_array_image_get$descriptor() {
        return vips_array_image_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsImage **vips_array_image_get(VipsArrayImage *array, int *n)
     * }
     */
    public static MethodHandle vips_array_image_get$handle() {
        return vips_array_image_get.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsImage **vips_array_image_get(VipsArrayImage *array, int *n)
     * }
     */
    public static MemorySegment vips_array_image_get$address() {
        return vips_array_image_get.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsImage **vips_array_image_get(VipsArrayImage *array, int *n)
     * }
     */
    public static MemorySegment vips_array_image_get(MemorySegment array, MemorySegment n) {
        var mh$ = vips_array_image_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_array_image_get", array, n);
            }
            return (MemorySegment)mh$.invokeExact(array, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_value_get_array_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_value_get_array_image");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsImage **vips_value_get_array_image(const GValue *value, int *n)
     * }
     */
    public static FunctionDescriptor vips_value_get_array_image$descriptor() {
        return vips_value_get_array_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsImage **vips_value_get_array_image(const GValue *value, int *n)
     * }
     */
    public static MethodHandle vips_value_get_array_image$handle() {
        return vips_value_get_array_image.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsImage **vips_value_get_array_image(const GValue *value, int *n)
     * }
     */
    public static MemorySegment vips_value_get_array_image$address() {
        return vips_value_get_array_image.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsImage **vips_value_get_array_image(const GValue *value, int *n)
     * }
     */
    public static MemorySegment vips_value_get_array_image(MemorySegment value, MemorySegment n) {
        var mh$ = vips_value_get_array_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_value_get_array_image", value, n);
            }
            return (MemorySegment)mh$.invokeExact(value, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_value_set_array_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_value_set_array_image");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_value_set_array_image(GValue *value, int n)
     * }
     */
    public static FunctionDescriptor vips_value_set_array_image$descriptor() {
        return vips_value_set_array_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_value_set_array_image(GValue *value, int n)
     * }
     */
    public static MethodHandle vips_value_set_array_image$handle() {
        return vips_value_set_array_image.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_value_set_array_image(GValue *value, int n)
     * }
     */
    public static MemorySegment vips_value_set_array_image$address() {
        return vips_value_set_array_image.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_value_set_array_image(GValue *value, int n)
     * }
     */
    public static void vips_value_set_array_image(MemorySegment value, int n) {
        var mh$ = vips_value_set_array_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_value_set_array_image", value, n);
            }
            mh$.invokeExact(value, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_free_buffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_free_buffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_image_free_buffer(VipsImage *image, void *buffer)
     * }
     */
    public static FunctionDescriptor vips_image_free_buffer$descriptor() {
        return vips_image_free_buffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_image_free_buffer(VipsImage *image, void *buffer)
     * }
     */
    public static MethodHandle vips_image_free_buffer$handle() {
        return vips_image_free_buffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_image_free_buffer(VipsImage *image, void *buffer)
     * }
     */
    public static MemorySegment vips_image_free_buffer$address() {
        return vips_image_free_buffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_image_free_buffer(VipsImage *image, void *buffer)
     * }
     */
    public static void vips_image_free_buffer(MemorySegment image, MemorySegment buffer) {
        var mh$ = vips_image_free_buffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_free_buffer", image, buffer);
            }
            mh$.invokeExact(image, buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_error_buffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_error_buffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *vips_error_buffer()
     * }
     */
    public static FunctionDescriptor vips_error_buffer$descriptor() {
        return vips_error_buffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *vips_error_buffer()
     * }
     */
    public static MethodHandle vips_error_buffer$handle() {
        return vips_error_buffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *vips_error_buffer()
     * }
     */
    public static MemorySegment vips_error_buffer$address() {
        return vips_error_buffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *vips_error_buffer()
     * }
     */
    public static MemorySegment vips_error_buffer() {
        var mh$ = vips_error_buffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_error_buffer");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_error_buffer_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_error_buffer_copy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *vips_error_buffer_copy()
     * }
     */
    public static FunctionDescriptor vips_error_buffer_copy$descriptor() {
        return vips_error_buffer_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *vips_error_buffer_copy()
     * }
     */
    public static MethodHandle vips_error_buffer_copy$handle() {
        return vips_error_buffer_copy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *vips_error_buffer_copy()
     * }
     */
    public static MemorySegment vips_error_buffer_copy$address() {
        return vips_error_buffer_copy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *vips_error_buffer_copy()
     * }
     */
    public static MemorySegment vips_error_buffer_copy() {
        var mh$ = vips_error_buffer_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_error_buffer_copy");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_error_clear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_error_clear");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_error_clear()
     * }
     */
    public static FunctionDescriptor vips_error_clear$descriptor() {
        return vips_error_clear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_error_clear()
     * }
     */
    public static MethodHandle vips_error_clear$handle() {
        return vips_error_clear.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_error_clear()
     * }
     */
    public static MemorySegment vips_error_clear$address() {
        return vips_error_clear.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_error_clear()
     * }
     */
    public static void vips_error_clear() {
        var mh$ = vips_error_clear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_error_clear");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_error_freeze {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_error_freeze");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_error_freeze()
     * }
     */
    public static FunctionDescriptor vips_error_freeze$descriptor() {
        return vips_error_freeze.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_error_freeze()
     * }
     */
    public static MethodHandle vips_error_freeze$handle() {
        return vips_error_freeze.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_error_freeze()
     * }
     */
    public static MemorySegment vips_error_freeze$address() {
        return vips_error_freeze.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_error_freeze()
     * }
     */
    public static void vips_error_freeze() {
        var mh$ = vips_error_freeze.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_error_freeze");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_error_thaw {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_error_thaw");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_error_thaw()
     * }
     */
    public static FunctionDescriptor vips_error_thaw$descriptor() {
        return vips_error_thaw.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_error_thaw()
     * }
     */
    public static MethodHandle vips_error_thaw$handle() {
        return vips_error_thaw.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_error_thaw()
     * }
     */
    public static MemorySegment vips_error_thaw$address() {
        return vips_error_thaw.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_error_thaw()
     * }
     */
    public static void vips_error_thaw() {
        var mh$ = vips_error_thaw.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_error_thaw");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void vips_error(const char *domain, const char *fmt, ...)
     * }
     */
    public static class vips_error {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                VipsRaw.C_POINTER,
                VipsRaw.C_POINTER
            );
        private static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_error");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_error(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void vips_error(const char *domain, const char *fmt, ...)
         * }
         */
        public static vips_error makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_error(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment domain, MemorySegment fmt, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_error", domain, fmt, x2);
                }
                spreader.invokeExact(domain, fmt, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void vips_error_system(int err, const char *domain, const char *fmt, ...)
     * }
     */
    public static class vips_error_system {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                VipsRaw.C_INT,
                VipsRaw.C_POINTER,
                VipsRaw.C_POINTER
            );
        private static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_error_system");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_error_system(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void vips_error_system(int err, const char *domain, const char *fmt, ...)
         * }
         */
        public static vips_error_system makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_error_system(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(int err, MemorySegment domain, MemorySegment fmt, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_error_system", err, domain, fmt, x3);
                }
                spreader.invokeExact(err, domain, fmt, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class vips_error_g {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_error_g");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_error_g(GError **error)
     * }
     */
    public static FunctionDescriptor vips_error_g$descriptor() {
        return vips_error_g.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_error_g(GError **error)
     * }
     */
    public static MethodHandle vips_error_g$handle() {
        return vips_error_g.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_error_g(GError **error)
     * }
     */
    public static MemorySegment vips_error_g$address() {
        return vips_error_g.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_error_g(GError **error)
     * }
     */
    public static void vips_error_g(MemorySegment error) {
        var mh$ = vips_error_g.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_error_g", error);
            }
            mh$.invokeExact(error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void vips_error_exit(const char *fmt, ...)
     * }
     */
    public static class vips_error_exit {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                VipsRaw.C_POINTER
            );
        private static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_error_exit");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_error_exit(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void vips_error_exit(const char *fmt, ...)
         * }
         */
        public static vips_error_exit makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_error_exit(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment fmt, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_error_exit", fmt, x1);
                }
                spreader.invokeExact(fmt, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }
    private static final int VIPS_FORMAT_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FORMAT_NONE = 0
     * }
     */
    public static int VIPS_FORMAT_NONE() {
        return VIPS_FORMAT_NONE;
    }
    private static final int VIPS_FORMAT_PARTIAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FORMAT_PARTIAL = 1
     * }
     */
    public static int VIPS_FORMAT_PARTIAL() {
        return VIPS_FORMAT_PARTIAL;
    }
    private static final int VIPS_FORMAT_BIGENDIAN = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FORMAT_BIGENDIAN = 2
     * }
     */
    public static int VIPS_FORMAT_BIGENDIAN() {
        return VIPS_FORMAT_BIGENDIAN;
    }

    private static class vips_image_generate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_generate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_generate(VipsImage *image, VipsStartFn start_fn, VipsGenerateFn generate_fn, VipsStopFn stop_fn, void *a, void *b)
     * }
     */
    public static FunctionDescriptor vips_image_generate$descriptor() {
        return vips_image_generate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_generate(VipsImage *image, VipsStartFn start_fn, VipsGenerateFn generate_fn, VipsStopFn stop_fn, void *a, void *b)
     * }
     */
    public static MethodHandle vips_image_generate$handle() {
        return vips_image_generate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_generate(VipsImage *image, VipsStartFn start_fn, VipsGenerateFn generate_fn, VipsStopFn stop_fn, void *a, void *b)
     * }
     */
    public static MemorySegment vips_image_generate$address() {
        return vips_image_generate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_generate(VipsImage *image, VipsStartFn start_fn, VipsGenerateFn generate_fn, VipsStopFn stop_fn, void *a, void *b)
     * }
     */
    public static int vips_image_generate(MemorySegment image, MemorySegment start_fn, MemorySegment generate_fn, MemorySegment stop_fn, MemorySegment a, MemorySegment b) {
        var mh$ = vips_image_generate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_generate", image, start_fn, generate_fn, stop_fn, a, b);
            }
            return (int)mh$.invokeExact(image, start_fn, generate_fn, stop_fn, a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_pipeline_array {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_pipeline_array");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_pipeline_array(VipsImage *image, VipsDemandStyle hint, VipsImage **in)
     * }
     */
    public static FunctionDescriptor vips_image_pipeline_array$descriptor() {
        return vips_image_pipeline_array.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_pipeline_array(VipsImage *image, VipsDemandStyle hint, VipsImage **in)
     * }
     */
    public static MethodHandle vips_image_pipeline_array$handle() {
        return vips_image_pipeline_array.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_pipeline_array(VipsImage *image, VipsDemandStyle hint, VipsImage **in)
     * }
     */
    public static MemorySegment vips_image_pipeline_array$address() {
        return vips_image_pipeline_array.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_pipeline_array(VipsImage *image, VipsDemandStyle hint, VipsImage **in)
     * }
     */
    public static int vips_image_pipeline_array(MemorySegment image, int hint, MemorySegment in) {
        var mh$ = vips_image_pipeline_array.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_pipeline_array", image, hint, in);
            }
            return (int)mh$.invokeExact(image, hint, in);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_image_pipelinev(VipsImage *image, VipsDemandStyle hint, ...)
     * }
     */
    public static class vips_image_pipelinev {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                VipsRaw.C_INT,
                VipsRaw.C_POINTER,
                VipsRaw.C_INT
            );
        private static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_pipelinev");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_image_pipelinev(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_image_pipelinev(VipsImage *image, VipsDemandStyle hint, ...)
         * }
         */
        public static vips_image_pipelinev makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_image_pipelinev(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment image, int hint, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_image_pipelinev", image, hint, x2);
                }
                return (int)spreader.invokeExact(image, hint, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class vips_image_get_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_get_width");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_get_width(const VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_get_width$descriptor() {
        return vips_image_get_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_get_width(const VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_get_width$handle() {
        return vips_image_get_width.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_get_width(const VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_width$address() {
        return vips_image_get_width.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_get_width(const VipsImage *image)
     * }
     */
    public static int vips_image_get_width(MemorySegment image) {
        var mh$ = vips_image_get_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_width", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_height {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_get_height");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_get_height(const VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_get_height$descriptor() {
        return vips_image_get_height.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_get_height(const VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_get_height$handle() {
        return vips_image_get_height.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_get_height(const VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_height$address() {
        return vips_image_get_height.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_get_height(const VipsImage *image)
     * }
     */
    public static int vips_image_get_height(MemorySegment image) {
        var mh$ = vips_image_get_height.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_height", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_bands {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_get_bands");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_get_bands(const VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_get_bands$descriptor() {
        return vips_image_get_bands.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_get_bands(const VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_get_bands$handle() {
        return vips_image_get_bands.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_get_bands(const VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_bands$address() {
        return vips_image_get_bands.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_get_bands(const VipsImage *image)
     * }
     */
    public static int vips_image_get_bands(MemorySegment image) {
        var mh$ = vips_image_get_bands.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_bands", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_format {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_get_format");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsBandFormat vips_image_get_format(const VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_get_format$descriptor() {
        return vips_image_get_format.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsBandFormat vips_image_get_format(const VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_get_format$handle() {
        return vips_image_get_format.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsBandFormat vips_image_get_format(const VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_format$address() {
        return vips_image_get_format.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsBandFormat vips_image_get_format(const VipsImage *image)
     * }
     */
    public static int vips_image_get_format(MemorySegment image) {
        var mh$ = vips_image_get_format.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_format", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_format_max {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_DOUBLE,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_get_format_max");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double vips_image_get_format_max(VipsBandFormat format)
     * }
     */
    public static FunctionDescriptor vips_image_get_format_max$descriptor() {
        return vips_image_get_format_max.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double vips_image_get_format_max(VipsBandFormat format)
     * }
     */
    public static MethodHandle vips_image_get_format_max$handle() {
        return vips_image_get_format_max.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double vips_image_get_format_max(VipsBandFormat format)
     * }
     */
    public static MemorySegment vips_image_get_format_max$address() {
        return vips_image_get_format_max.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double vips_image_get_format_max(VipsBandFormat format)
     * }
     */
    public static double vips_image_get_format_max(int format) {
        var mh$ = vips_image_get_format_max.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_format_max", format);
            }
            return (double)mh$.invokeExact(format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_guess_format {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_guess_format");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsBandFormat vips_image_guess_format(const VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_guess_format$descriptor() {
        return vips_image_guess_format.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsBandFormat vips_image_guess_format(const VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_guess_format$handle() {
        return vips_image_guess_format.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsBandFormat vips_image_guess_format(const VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_guess_format$address() {
        return vips_image_guess_format.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsBandFormat vips_image_guess_format(const VipsImage *image)
     * }
     */
    public static int vips_image_guess_format(MemorySegment image) {
        var mh$ = vips_image_guess_format.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_guess_format", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_coding {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_get_coding");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsCoding vips_image_get_coding(const VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_get_coding$descriptor() {
        return vips_image_get_coding.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsCoding vips_image_get_coding(const VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_get_coding$handle() {
        return vips_image_get_coding.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsCoding vips_image_get_coding(const VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_coding$address() {
        return vips_image_get_coding.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsCoding vips_image_get_coding(const VipsImage *image)
     * }
     */
    public static int vips_image_get_coding(MemorySegment image) {
        var mh$ = vips_image_get_coding.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_coding", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_interpretation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_get_interpretation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsInterpretation vips_image_get_interpretation(const VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_get_interpretation$descriptor() {
        return vips_image_get_interpretation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsInterpretation vips_image_get_interpretation(const VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_get_interpretation$handle() {
        return vips_image_get_interpretation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsInterpretation vips_image_get_interpretation(const VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_interpretation$address() {
        return vips_image_get_interpretation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsInterpretation vips_image_get_interpretation(const VipsImage *image)
     * }
     */
    public static int vips_image_get_interpretation(MemorySegment image) {
        var mh$ = vips_image_get_interpretation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_interpretation", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_guess_interpretation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_guess_interpretation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsInterpretation vips_image_guess_interpretation(const VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_guess_interpretation$descriptor() {
        return vips_image_guess_interpretation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsInterpretation vips_image_guess_interpretation(const VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_guess_interpretation$handle() {
        return vips_image_guess_interpretation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsInterpretation vips_image_guess_interpretation(const VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_guess_interpretation$address() {
        return vips_image_guess_interpretation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsInterpretation vips_image_guess_interpretation(const VipsImage *image)
     * }
     */
    public static int vips_image_guess_interpretation(MemorySegment image) {
        var mh$ = vips_image_guess_interpretation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_guess_interpretation", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_xres {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_DOUBLE,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_get_xres");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double vips_image_get_xres(const VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_get_xres$descriptor() {
        return vips_image_get_xres.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double vips_image_get_xres(const VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_get_xres$handle() {
        return vips_image_get_xres.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double vips_image_get_xres(const VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_xres$address() {
        return vips_image_get_xres.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double vips_image_get_xres(const VipsImage *image)
     * }
     */
    public static double vips_image_get_xres(MemorySegment image) {
        var mh$ = vips_image_get_xres.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_xres", image);
            }
            return (double)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_yres {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_DOUBLE,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_get_yres");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double vips_image_get_yres(const VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_get_yres$descriptor() {
        return vips_image_get_yres.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double vips_image_get_yres(const VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_get_yres$handle() {
        return vips_image_get_yres.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double vips_image_get_yres(const VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_yres$address() {
        return vips_image_get_yres.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double vips_image_get_yres(const VipsImage *image)
     * }
     */
    public static double vips_image_get_yres(MemorySegment image) {
        var mh$ = vips_image_get_yres.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_yres", image);
            }
            return (double)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_xoffset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_get_xoffset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_get_xoffset(const VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_get_xoffset$descriptor() {
        return vips_image_get_xoffset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_get_xoffset(const VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_get_xoffset$handle() {
        return vips_image_get_xoffset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_get_xoffset(const VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_xoffset$address() {
        return vips_image_get_xoffset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_get_xoffset(const VipsImage *image)
     * }
     */
    public static int vips_image_get_xoffset(MemorySegment image) {
        var mh$ = vips_image_get_xoffset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_xoffset", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_yoffset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_get_yoffset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_get_yoffset(const VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_get_yoffset$descriptor() {
        return vips_image_get_yoffset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_get_yoffset(const VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_get_yoffset$handle() {
        return vips_image_get_yoffset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_get_yoffset(const VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_yoffset$address() {
        return vips_image_get_yoffset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_get_yoffset(const VipsImage *image)
     * }
     */
    public static int vips_image_get_yoffset(MemorySegment image) {
        var mh$ = vips_image_get_yoffset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_yoffset", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_filename {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_get_filename");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *vips_image_get_filename(const VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_get_filename$descriptor() {
        return vips_image_get_filename.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *vips_image_get_filename(const VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_get_filename$handle() {
        return vips_image_get_filename.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *vips_image_get_filename(const VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_filename$address() {
        return vips_image_get_filename.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *vips_image_get_filename(const VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_filename(MemorySegment image) {
        var mh$ = vips_image_get_filename.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_filename", image);
            }
            return (MemorySegment)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_get_mode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *vips_image_get_mode(const VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_get_mode$descriptor() {
        return vips_image_get_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *vips_image_get_mode(const VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_get_mode$handle() {
        return vips_image_get_mode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *vips_image_get_mode(const VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_mode$address() {
        return vips_image_get_mode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *vips_image_get_mode(const VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_mode(MemorySegment image) {
        var mh$ = vips_image_get_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_mode", image);
            }
            return (MemorySegment)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_scale {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_DOUBLE,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_get_scale");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double vips_image_get_scale(const VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_get_scale$descriptor() {
        return vips_image_get_scale.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double vips_image_get_scale(const VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_get_scale$handle() {
        return vips_image_get_scale.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double vips_image_get_scale(const VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_scale$address() {
        return vips_image_get_scale.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double vips_image_get_scale(const VipsImage *image)
     * }
     */
    public static double vips_image_get_scale(MemorySegment image) {
        var mh$ = vips_image_get_scale.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_scale", image);
            }
            return (double)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_offset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_DOUBLE,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_get_offset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double vips_image_get_offset(const VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_get_offset$descriptor() {
        return vips_image_get_offset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double vips_image_get_offset(const VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_get_offset$handle() {
        return vips_image_get_offset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double vips_image_get_offset(const VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_offset$address() {
        return vips_image_get_offset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double vips_image_get_offset(const VipsImage *image)
     * }
     */
    public static double vips_image_get_offset(MemorySegment image) {
        var mh$ = vips_image_get_offset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_offset", image);
            }
            return (double)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_page_height {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_get_page_height");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_get_page_height(VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_get_page_height$descriptor() {
        return vips_image_get_page_height.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_get_page_height(VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_get_page_height$handle() {
        return vips_image_get_page_height.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_get_page_height(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_page_height$address() {
        return vips_image_get_page_height.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_get_page_height(VipsImage *image)
     * }
     */
    public static int vips_image_get_page_height(MemorySegment image) {
        var mh$ = vips_image_get_page_height.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_page_height", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_n_pages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_get_n_pages");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_get_n_pages(VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_get_n_pages$descriptor() {
        return vips_image_get_n_pages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_get_n_pages(VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_get_n_pages$handle() {
        return vips_image_get_n_pages.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_get_n_pages(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_n_pages$address() {
        return vips_image_get_n_pages.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_get_n_pages(VipsImage *image)
     * }
     */
    public static int vips_image_get_n_pages(MemorySegment image) {
        var mh$ = vips_image_get_n_pages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_n_pages", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_n_subifds {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_get_n_subifds");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_get_n_subifds(VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_get_n_subifds$descriptor() {
        return vips_image_get_n_subifds.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_get_n_subifds(VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_get_n_subifds$handle() {
        return vips_image_get_n_subifds.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_get_n_subifds(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_n_subifds$address() {
        return vips_image_get_n_subifds.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_get_n_subifds(VipsImage *image)
     * }
     */
    public static int vips_image_get_n_subifds(MemorySegment image) {
        var mh$ = vips_image_get_n_subifds.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_n_subifds", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_orientation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_get_orientation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_get_orientation(VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_get_orientation$descriptor() {
        return vips_image_get_orientation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_get_orientation(VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_get_orientation$handle() {
        return vips_image_get_orientation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_get_orientation(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_orientation$address() {
        return vips_image_get_orientation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_get_orientation(VipsImage *image)
     * }
     */
    public static int vips_image_get_orientation(MemorySegment image) {
        var mh$ = vips_image_get_orientation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_orientation", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_orientation_swap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_get_orientation_swap");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_image_get_orientation_swap(VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_get_orientation_swap$descriptor() {
        return vips_image_get_orientation_swap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_image_get_orientation_swap(VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_get_orientation_swap$handle() {
        return vips_image_get_orientation_swap.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_image_get_orientation_swap(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_orientation_swap$address() {
        return vips_image_get_orientation_swap.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_image_get_orientation_swap(VipsImage *image)
     * }
     */
    public static int vips_image_get_orientation_swap(MemorySegment image) {
        var mh$ = vips_image_get_orientation_swap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_orientation_swap", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_concurrency {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_get_concurrency");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_get_concurrency(VipsImage *image, int default_concurrency)
     * }
     */
    public static FunctionDescriptor vips_image_get_concurrency$descriptor() {
        return vips_image_get_concurrency.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_get_concurrency(VipsImage *image, int default_concurrency)
     * }
     */
    public static MethodHandle vips_image_get_concurrency$handle() {
        return vips_image_get_concurrency.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_get_concurrency(VipsImage *image, int default_concurrency)
     * }
     */
    public static MemorySegment vips_image_get_concurrency$address() {
        return vips_image_get_concurrency.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_get_concurrency(VipsImage *image, int default_concurrency)
     * }
     */
    public static int vips_image_get_concurrency(MemorySegment image, int default_concurrency) {
        var mh$ = vips_image_get_concurrency.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_concurrency", image, default_concurrency);
            }
            return (int)mh$.invokeExact(image, default_concurrency);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_get_data");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const void *vips_image_get_data(VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_get_data$descriptor() {
        return vips_image_get_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const void *vips_image_get_data(VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_get_data$handle() {
        return vips_image_get_data.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const void *vips_image_get_data(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_data$address() {
        return vips_image_get_data.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const void *vips_image_get_data(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_data(MemorySegment image) {
        var mh$ = vips_image_get_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_data", image);
            }
            return (MemorySegment)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_init_fields {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_INT,
            VipsRaw.C_INT,
            VipsRaw.C_INT,
            VipsRaw.C_INT,
            VipsRaw.C_INT,
            VipsRaw.C_INT,
            VipsRaw.C_DOUBLE,
            VipsRaw.C_DOUBLE
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_init_fields");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_image_init_fields(VipsImage *image, int xsize, int ysize, int bands, VipsBandFormat format, VipsCoding coding, VipsInterpretation interpretation, double xres, double yres)
     * }
     */
    public static FunctionDescriptor vips_image_init_fields$descriptor() {
        return vips_image_init_fields.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_image_init_fields(VipsImage *image, int xsize, int ysize, int bands, VipsBandFormat format, VipsCoding coding, VipsInterpretation interpretation, double xres, double yres)
     * }
     */
    public static MethodHandle vips_image_init_fields$handle() {
        return vips_image_init_fields.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_image_init_fields(VipsImage *image, int xsize, int ysize, int bands, VipsBandFormat format, VipsCoding coding, VipsInterpretation interpretation, double xres, double yres)
     * }
     */
    public static MemorySegment vips_image_init_fields$address() {
        return vips_image_init_fields.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_image_init_fields(VipsImage *image, int xsize, int ysize, int bands, VipsBandFormat format, VipsCoding coding, VipsInterpretation interpretation, double xres, double yres)
     * }
     */
    public static void vips_image_init_fields(MemorySegment image, int xsize, int ysize, int bands, int format, int coding, int interpretation, double xres, double yres) {
        var mh$ = vips_image_init_fields.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_init_fields", image, xsize, ysize, bands, format, coding, interpretation, xres, yres);
            }
            mh$.invokeExact(image, xsize, ysize, bands, format, coding, interpretation, xres, yres);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_set");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_image_set(VipsImage *image, const char *name, GValue *value)
     * }
     */
    public static FunctionDescriptor vips_image_set$descriptor() {
        return vips_image_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_image_set(VipsImage *image, const char *name, GValue *value)
     * }
     */
    public static MethodHandle vips_image_set$handle() {
        return vips_image_set.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_image_set(VipsImage *image, const char *name, GValue *value)
     * }
     */
    public static MemorySegment vips_image_set$address() {
        return vips_image_set.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_image_set(VipsImage *image, const char *name, GValue *value)
     * }
     */
    public static void vips_image_set(MemorySegment image, MemorySegment name, MemorySegment value) {
        var mh$ = vips_image_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_set", image, name, value);
            }
            mh$.invokeExact(image, name, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_get");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_get(const VipsImage *image, const char *name, GValue *value_copy)
     * }
     */
    public static FunctionDescriptor vips_image_get$descriptor() {
        return vips_image_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_get(const VipsImage *image, const char *name, GValue *value_copy)
     * }
     */
    public static MethodHandle vips_image_get$handle() {
        return vips_image_get.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_get(const VipsImage *image, const char *name, GValue *value_copy)
     * }
     */
    public static MemorySegment vips_image_get$address() {
        return vips_image_get.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_get(const VipsImage *image, const char *name, GValue *value_copy)
     * }
     */
    public static int vips_image_get(MemorySegment image, MemorySegment name, MemorySegment value_copy) {
        var mh$ = vips_image_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get", image, name, value_copy);
            }
            return (int)mh$.invokeExact(image, name, value_copy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_as_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_get_as_string");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_get_as_string(const VipsImage *image, const char *name, char **out)
     * }
     */
    public static FunctionDescriptor vips_image_get_as_string$descriptor() {
        return vips_image_get_as_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_get_as_string(const VipsImage *image, const char *name, char **out)
     * }
     */
    public static MethodHandle vips_image_get_as_string$handle() {
        return vips_image_get_as_string.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_get_as_string(const VipsImage *image, const char *name, char **out)
     * }
     */
    public static MemorySegment vips_image_get_as_string$address() {
        return vips_image_get_as_string.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_get_as_string(const VipsImage *image, const char *name, char **out)
     * }
     */
    public static int vips_image_get_as_string(MemorySegment image, MemorySegment name, MemorySegment out) {
        var mh$ = vips_image_get_as_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_as_string", image, name, out);
            }
            return (int)mh$.invokeExact(image, name, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_typeof {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_get_typeof");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_image_get_typeof(const VipsImage *image, const char *name)
     * }
     */
    public static FunctionDescriptor vips_image_get_typeof$descriptor() {
        return vips_image_get_typeof.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_image_get_typeof(const VipsImage *image, const char *name)
     * }
     */
    public static MethodHandle vips_image_get_typeof$handle() {
        return vips_image_get_typeof.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_image_get_typeof(const VipsImage *image, const char *name)
     * }
     */
    public static MemorySegment vips_image_get_typeof$address() {
        return vips_image_get_typeof.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_image_get_typeof(const VipsImage *image, const char *name)
     * }
     */
    public static long vips_image_get_typeof(MemorySegment image, MemorySegment name) {
        var mh$ = vips_image_get_typeof.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_typeof", image, name);
            }
            return (long)mh$.invokeExact(image, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_remove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_remove");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_image_remove(VipsImage *image, const char *name)
     * }
     */
    public static FunctionDescriptor vips_image_remove$descriptor() {
        return vips_image_remove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_image_remove(VipsImage *image, const char *name)
     * }
     */
    public static MethodHandle vips_image_remove$handle() {
        return vips_image_remove.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_image_remove(VipsImage *image, const char *name)
     * }
     */
    public static MemorySegment vips_image_remove$address() {
        return vips_image_remove.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_image_remove(VipsImage *image, const char *name)
     * }
     */
    public static int vips_image_remove(MemorySegment image, MemorySegment name) {
        var mh$ = vips_image_remove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_remove", image, name);
            }
            return (int)mh$.invokeExact(image, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_map {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_map");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *vips_image_map(VipsImage *image, VipsImageMapFn fn, void *a)
     * }
     */
    public static FunctionDescriptor vips_image_map$descriptor() {
        return vips_image_map.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *vips_image_map(VipsImage *image, VipsImageMapFn fn, void *a)
     * }
     */
    public static MethodHandle vips_image_map$handle() {
        return vips_image_map.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *vips_image_map(VipsImage *image, VipsImageMapFn fn, void *a)
     * }
     */
    public static MemorySegment vips_image_map$address() {
        return vips_image_map.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *vips_image_map(VipsImage *image, VipsImageMapFn fn, void *a)
     * }
     */
    public static MemorySegment vips_image_map(MemorySegment image, MemorySegment fn, MemorySegment a) {
        var mh$ = vips_image_map.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_map", image, fn, a);
            }
            return (MemorySegment)mh$.invokeExact(image, fn, a);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_fields {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_get_fields");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar **vips_image_get_fields(VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_get_fields$descriptor() {
        return vips_image_get_fields.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar **vips_image_get_fields(VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_get_fields$handle() {
        return vips_image_get_fields.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gchar **vips_image_get_fields(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_fields$address() {
        return vips_image_get_fields.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gchar **vips_image_get_fields(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_fields(MemorySegment image) {
        var mh$ = vips_image_get_fields.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_fields", image);
            }
            return (MemorySegment)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_set_area {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_set_area");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_image_set_area(VipsImage *image, const char *name, VipsCallbackFn free_fn, void *data)
     * }
     */
    public static FunctionDescriptor vips_image_set_area$descriptor() {
        return vips_image_set_area.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_image_set_area(VipsImage *image, const char *name, VipsCallbackFn free_fn, void *data)
     * }
     */
    public static MethodHandle vips_image_set_area$handle() {
        return vips_image_set_area.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_image_set_area(VipsImage *image, const char *name, VipsCallbackFn free_fn, void *data)
     * }
     */
    public static MemorySegment vips_image_set_area$address() {
        return vips_image_set_area.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_image_set_area(VipsImage *image, const char *name, VipsCallbackFn free_fn, void *data)
     * }
     */
    public static void vips_image_set_area(MemorySegment image, MemorySegment name, MemorySegment free_fn, MemorySegment data) {
        var mh$ = vips_image_set_area.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_set_area", image, name, free_fn, data);
            }
            mh$.invokeExact(image, name, free_fn, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_area {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_get_area");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_get_area(const VipsImage *image, const char *name, const void **data)
     * }
     */
    public static FunctionDescriptor vips_image_get_area$descriptor() {
        return vips_image_get_area.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_get_area(const VipsImage *image, const char *name, const void **data)
     * }
     */
    public static MethodHandle vips_image_get_area$handle() {
        return vips_image_get_area.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_get_area(const VipsImage *image, const char *name, const void **data)
     * }
     */
    public static MemorySegment vips_image_get_area$address() {
        return vips_image_get_area.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_get_area(const VipsImage *image, const char *name, const void **data)
     * }
     */
    public static int vips_image_get_area(MemorySegment image, MemorySegment name, MemorySegment data) {
        var mh$ = vips_image_get_area.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_area", image, name, data);
            }
            return (int)mh$.invokeExact(image, name, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_set_blob {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_set_blob");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_image_set_blob(VipsImage *image, const char *name, VipsCallbackFn free_fn, const void *data, size_t length)
     * }
     */
    public static FunctionDescriptor vips_image_set_blob$descriptor() {
        return vips_image_set_blob.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_image_set_blob(VipsImage *image, const char *name, VipsCallbackFn free_fn, const void *data, size_t length)
     * }
     */
    public static MethodHandle vips_image_set_blob$handle() {
        return vips_image_set_blob.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_image_set_blob(VipsImage *image, const char *name, VipsCallbackFn free_fn, const void *data, size_t length)
     * }
     */
    public static MemorySegment vips_image_set_blob$address() {
        return vips_image_set_blob.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_image_set_blob(VipsImage *image, const char *name, VipsCallbackFn free_fn, const void *data, size_t length)
     * }
     */
    public static void vips_image_set_blob(MemorySegment image, MemorySegment name, MemorySegment free_fn, MemorySegment data, long length) {
        var mh$ = vips_image_set_blob.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_set_blob", image, name, free_fn, data, length);
            }
            mh$.invokeExact(image, name, free_fn, data, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_set_blob_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_set_blob_copy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_image_set_blob_copy(VipsImage *image, const char *name, const void *data, size_t length)
     * }
     */
    public static FunctionDescriptor vips_image_set_blob_copy$descriptor() {
        return vips_image_set_blob_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_image_set_blob_copy(VipsImage *image, const char *name, const void *data, size_t length)
     * }
     */
    public static MethodHandle vips_image_set_blob_copy$handle() {
        return vips_image_set_blob_copy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_image_set_blob_copy(VipsImage *image, const char *name, const void *data, size_t length)
     * }
     */
    public static MemorySegment vips_image_set_blob_copy$address() {
        return vips_image_set_blob_copy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_image_set_blob_copy(VipsImage *image, const char *name, const void *data, size_t length)
     * }
     */
    public static void vips_image_set_blob_copy(MemorySegment image, MemorySegment name, MemorySegment data, long length) {
        var mh$ = vips_image_set_blob_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_set_blob_copy", image, name, data, length);
            }
            mh$.invokeExact(image, name, data, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_blob {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_get_blob");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_get_blob(const VipsImage *image, const char *name, const void **data, size_t *length)
     * }
     */
    public static FunctionDescriptor vips_image_get_blob$descriptor() {
        return vips_image_get_blob.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_get_blob(const VipsImage *image, const char *name, const void **data, size_t *length)
     * }
     */
    public static MethodHandle vips_image_get_blob$handle() {
        return vips_image_get_blob.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_get_blob(const VipsImage *image, const char *name, const void **data, size_t *length)
     * }
     */
    public static MemorySegment vips_image_get_blob$address() {
        return vips_image_get_blob.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_get_blob(const VipsImage *image, const char *name, const void **data, size_t *length)
     * }
     */
    public static int vips_image_get_blob(MemorySegment image, MemorySegment name, MemorySegment data, MemorySegment length) {
        var mh$ = vips_image_get_blob.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_blob", image, name, data, length);
            }
            return (int)mh$.invokeExact(image, name, data, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_int {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_get_int");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_get_int(const VipsImage *image, const char *name, int *out)
     * }
     */
    public static FunctionDescriptor vips_image_get_int$descriptor() {
        return vips_image_get_int.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_get_int(const VipsImage *image, const char *name, int *out)
     * }
     */
    public static MethodHandle vips_image_get_int$handle() {
        return vips_image_get_int.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_get_int(const VipsImage *image, const char *name, int *out)
     * }
     */
    public static MemorySegment vips_image_get_int$address() {
        return vips_image_get_int.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_get_int(const VipsImage *image, const char *name, int *out)
     * }
     */
    public static int vips_image_get_int(MemorySegment image, MemorySegment name, MemorySegment out) {
        var mh$ = vips_image_get_int.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_int", image, name, out);
            }
            return (int)mh$.invokeExact(image, name, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_set_int {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_set_int");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_image_set_int(VipsImage *image, const char *name, int i)
     * }
     */
    public static FunctionDescriptor vips_image_set_int$descriptor() {
        return vips_image_set_int.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_image_set_int(VipsImage *image, const char *name, int i)
     * }
     */
    public static MethodHandle vips_image_set_int$handle() {
        return vips_image_set_int.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_image_set_int(VipsImage *image, const char *name, int i)
     * }
     */
    public static MemorySegment vips_image_set_int$address() {
        return vips_image_set_int.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_image_set_int(VipsImage *image, const char *name, int i)
     * }
     */
    public static void vips_image_set_int(MemorySegment image, MemorySegment name, int i) {
        var mh$ = vips_image_set_int.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_set_int", image, name, i);
            }
            mh$.invokeExact(image, name, i);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_double {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_get_double");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_get_double(const VipsImage *image, const char *name, double *out)
     * }
     */
    public static FunctionDescriptor vips_image_get_double$descriptor() {
        return vips_image_get_double.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_get_double(const VipsImage *image, const char *name, double *out)
     * }
     */
    public static MethodHandle vips_image_get_double$handle() {
        return vips_image_get_double.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_get_double(const VipsImage *image, const char *name, double *out)
     * }
     */
    public static MemorySegment vips_image_get_double$address() {
        return vips_image_get_double.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_get_double(const VipsImage *image, const char *name, double *out)
     * }
     */
    public static int vips_image_get_double(MemorySegment image, MemorySegment name, MemorySegment out) {
        var mh$ = vips_image_get_double.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_double", image, name, out);
            }
            return (int)mh$.invokeExact(image, name, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_set_double {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_DOUBLE
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_set_double");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_image_set_double(VipsImage *image, const char *name, double d)
     * }
     */
    public static FunctionDescriptor vips_image_set_double$descriptor() {
        return vips_image_set_double.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_image_set_double(VipsImage *image, const char *name, double d)
     * }
     */
    public static MethodHandle vips_image_set_double$handle() {
        return vips_image_set_double.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_image_set_double(VipsImage *image, const char *name, double d)
     * }
     */
    public static MemorySegment vips_image_set_double$address() {
        return vips_image_set_double.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_image_set_double(VipsImage *image, const char *name, double d)
     * }
     */
    public static void vips_image_set_double(MemorySegment image, MemorySegment name, double d) {
        var mh$ = vips_image_set_double.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_set_double", image, name, d);
            }
            mh$.invokeExact(image, name, d);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_get_string");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_get_string(const VipsImage *image, const char *name, const char **out)
     * }
     */
    public static FunctionDescriptor vips_image_get_string$descriptor() {
        return vips_image_get_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_get_string(const VipsImage *image, const char *name, const char **out)
     * }
     */
    public static MethodHandle vips_image_get_string$handle() {
        return vips_image_get_string.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_get_string(const VipsImage *image, const char *name, const char **out)
     * }
     */
    public static MemorySegment vips_image_get_string$address() {
        return vips_image_get_string.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_get_string(const VipsImage *image, const char *name, const char **out)
     * }
     */
    public static int vips_image_get_string(MemorySegment image, MemorySegment name, MemorySegment out) {
        var mh$ = vips_image_get_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_string", image, name, out);
            }
            return (int)mh$.invokeExact(image, name, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_set_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_set_string");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_image_set_string(VipsImage *image, const char *name, const char *str)
     * }
     */
    public static FunctionDescriptor vips_image_set_string$descriptor() {
        return vips_image_set_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_image_set_string(VipsImage *image, const char *name, const char *str)
     * }
     */
    public static MethodHandle vips_image_set_string$handle() {
        return vips_image_set_string.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_image_set_string(VipsImage *image, const char *name, const char *str)
     * }
     */
    public static MemorySegment vips_image_set_string$address() {
        return vips_image_set_string.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_image_set_string(VipsImage *image, const char *name, const char *str)
     * }
     */
    public static void vips_image_set_string(MemorySegment image, MemorySegment name, MemorySegment str) {
        var mh$ = vips_image_set_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_set_string", image, name, str);
            }
            mh$.invokeExact(image, name, str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_print_field {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_print_field");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_image_print_field(const VipsImage *image, const char *name)
     * }
     */
    public static FunctionDescriptor vips_image_print_field$descriptor() {
        return vips_image_print_field.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_image_print_field(const VipsImage *image, const char *name)
     * }
     */
    public static MethodHandle vips_image_print_field$handle() {
        return vips_image_print_field.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_image_print_field(const VipsImage *image, const char *name)
     * }
     */
    public static MemorySegment vips_image_print_field$address() {
        return vips_image_print_field.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_image_print_field(const VipsImage *image, const char *name)
     * }
     */
    public static void vips_image_print_field(MemorySegment image, MemorySegment name) {
        var mh$ = vips_image_print_field.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_print_field", image, name);
            }
            mh$.invokeExact(image, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_get_image");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_get_image(const VipsImage *image, const char *name, VipsImage **out)
     * }
     */
    public static FunctionDescriptor vips_image_get_image$descriptor() {
        return vips_image_get_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_get_image(const VipsImage *image, const char *name, VipsImage **out)
     * }
     */
    public static MethodHandle vips_image_get_image$handle() {
        return vips_image_get_image.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_get_image(const VipsImage *image, const char *name, VipsImage **out)
     * }
     */
    public static MemorySegment vips_image_get_image$address() {
        return vips_image_get_image.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_get_image(const VipsImage *image, const char *name, VipsImage **out)
     * }
     */
    public static int vips_image_get_image(MemorySegment image, MemorySegment name, MemorySegment out) {
        var mh$ = vips_image_get_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_image", image, name, out);
            }
            return (int)mh$.invokeExact(image, name, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_set_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_set_image");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_image_set_image(VipsImage *image, const char *name, VipsImage *im)
     * }
     */
    public static FunctionDescriptor vips_image_set_image$descriptor() {
        return vips_image_set_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_image_set_image(VipsImage *image, const char *name, VipsImage *im)
     * }
     */
    public static MethodHandle vips_image_set_image$handle() {
        return vips_image_set_image.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_image_set_image(VipsImage *image, const char *name, VipsImage *im)
     * }
     */
    public static MemorySegment vips_image_set_image$address() {
        return vips_image_set_image.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_image_set_image(VipsImage *image, const char *name, VipsImage *im)
     * }
     */
    public static void vips_image_set_image(MemorySegment image, MemorySegment name, MemorySegment im) {
        var mh$ = vips_image_set_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_set_image", image, name, im);
            }
            mh$.invokeExact(image, name, im);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_set_array_int {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_set_array_int");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_image_set_array_int(VipsImage *image, const char *name, const int *array, int n)
     * }
     */
    public static FunctionDescriptor vips_image_set_array_int$descriptor() {
        return vips_image_set_array_int.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_image_set_array_int(VipsImage *image, const char *name, const int *array, int n)
     * }
     */
    public static MethodHandle vips_image_set_array_int$handle() {
        return vips_image_set_array_int.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_image_set_array_int(VipsImage *image, const char *name, const int *array, int n)
     * }
     */
    public static MemorySegment vips_image_set_array_int$address() {
        return vips_image_set_array_int.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_image_set_array_int(VipsImage *image, const char *name, const int *array, int n)
     * }
     */
    public static void vips_image_set_array_int(MemorySegment image, MemorySegment name, MemorySegment array, int n) {
        var mh$ = vips_image_set_array_int.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_set_array_int", image, name, array, n);
            }
            mh$.invokeExact(image, name, array, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_array_int {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_get_array_int");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_get_array_int(VipsImage *image, const char *name, int **out, int *n)
     * }
     */
    public static FunctionDescriptor vips_image_get_array_int$descriptor() {
        return vips_image_get_array_int.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_get_array_int(VipsImage *image, const char *name, int **out, int *n)
     * }
     */
    public static MethodHandle vips_image_get_array_int$handle() {
        return vips_image_get_array_int.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_get_array_int(VipsImage *image, const char *name, int **out, int *n)
     * }
     */
    public static MemorySegment vips_image_get_array_int$address() {
        return vips_image_get_array_int.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_get_array_int(VipsImage *image, const char *name, int **out, int *n)
     * }
     */
    public static int vips_image_get_array_int(MemorySegment image, MemorySegment name, MemorySegment out, MemorySegment n) {
        var mh$ = vips_image_get_array_int.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_array_int", image, name, out, n);
            }
            return (int)mh$.invokeExact(image, name, out, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_array_double {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_get_array_double");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_get_array_double(VipsImage *image, const char *name, double **out, int *n)
     * }
     */
    public static FunctionDescriptor vips_image_get_array_double$descriptor() {
        return vips_image_get_array_double.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_get_array_double(VipsImage *image, const char *name, double **out, int *n)
     * }
     */
    public static MethodHandle vips_image_get_array_double$handle() {
        return vips_image_get_array_double.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_get_array_double(VipsImage *image, const char *name, double **out, int *n)
     * }
     */
    public static MemorySegment vips_image_get_array_double$address() {
        return vips_image_get_array_double.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_get_array_double(VipsImage *image, const char *name, double **out, int *n)
     * }
     */
    public static int vips_image_get_array_double(MemorySegment image, MemorySegment name, MemorySegment out, MemorySegment n) {
        var mh$ = vips_image_get_array_double.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_array_double", image, name, out, n);
            }
            return (int)mh$.invokeExact(image, name, out, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_set_array_double {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_set_array_double");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_image_set_array_double(VipsImage *image, const char *name, const double *array, int n)
     * }
     */
    public static FunctionDescriptor vips_image_set_array_double$descriptor() {
        return vips_image_set_array_double.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_image_set_array_double(VipsImage *image, const char *name, const double *array, int n)
     * }
     */
    public static MethodHandle vips_image_set_array_double$handle() {
        return vips_image_set_array_double.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_image_set_array_double(VipsImage *image, const char *name, const double *array, int n)
     * }
     */
    public static MemorySegment vips_image_set_array_double$address() {
        return vips_image_set_array_double.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_image_set_array_double(VipsImage *image, const char *name, const double *array, int n)
     * }
     */
    public static void vips_image_set_array_double(MemorySegment image, MemorySegment name, MemorySegment array, int n) {
        var mh$ = vips_image_set_array_double.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_set_array_double", image, name, array, n);
            }
            mh$.invokeExact(image, name, array, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_image_history_printf(VipsImage *image, const char *format, ...)
     * }
     */
    public static class vips_image_history_printf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                VipsRaw.C_INT,
                VipsRaw.C_POINTER,
                VipsRaw.C_POINTER
            );
        private static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_history_printf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_image_history_printf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_image_history_printf(VipsImage *image, const char *format, ...)
         * }
         */
        public static vips_image_history_printf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_image_history_printf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment image, MemorySegment format, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_image_history_printf", image, format, x2);
                }
                return (int)spreader.invokeExact(image, format, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class vips_image_history_args {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER,
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_history_args");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_history_args(VipsImage *image, const char *name, int argc, char *argv[])
     * }
     */
    public static FunctionDescriptor vips_image_history_args$descriptor() {
        return vips_image_history_args.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_history_args(VipsImage *image, const char *name, int argc, char *argv[])
     * }
     */
    public static MethodHandle vips_image_history_args$handle() {
        return vips_image_history_args.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_history_args(VipsImage *image, const char *name, int argc, char *argv[])
     * }
     */
    public static MemorySegment vips_image_history_args$address() {
        return vips_image_history_args.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_history_args(VipsImage *image, const char *name, int argc, char *argv[])
     * }
     */
    public static int vips_image_history_args(MemorySegment image, MemorySegment name, int argc, MemorySegment argv) {
        var mh$ = vips_image_history_args.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_history_args", image, name, argc, argv);
            }
            return (int)mh$.invokeExact(image, name, argc, argv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_history {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_get_history");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *vips_image_get_history(VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_get_history$descriptor() {
        return vips_image_get_history.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *vips_image_get_history(VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_get_history$handle() {
        return vips_image_get_history.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *vips_image_get_history(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_history$address() {
        return vips_image_get_history.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *vips_image_get_history(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_history(MemorySegment image) {
        var mh$ = vips_image_get_history.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_history", image);
            }
            return (MemorySegment)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VIPS_OPERATION_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_NONE = 0
     * }
     */
    public static int VIPS_OPERATION_NONE() {
        return VIPS_OPERATION_NONE;
    }
    private static final int VIPS_OPERATION_SEQUENTIAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_SEQUENTIAL = 1
     * }
     */
    public static int VIPS_OPERATION_SEQUENTIAL() {
        return VIPS_OPERATION_SEQUENTIAL;
    }
    private static final int VIPS_OPERATION_SEQUENTIAL_UNBUFFERED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_SEQUENTIAL_UNBUFFERED = 2
     * }
     */
    public static int VIPS_OPERATION_SEQUENTIAL_UNBUFFERED() {
        return VIPS_OPERATION_SEQUENTIAL_UNBUFFERED;
    }
    private static final int VIPS_OPERATION_NOCACHE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_NOCACHE = 4
     * }
     */
    public static int VIPS_OPERATION_NOCACHE() {
        return VIPS_OPERATION_NOCACHE;
    }
    private static final int VIPS_OPERATION_DEPRECATED = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_DEPRECATED = 8
     * }
     */
    public static int VIPS_OPERATION_DEPRECATED() {
        return VIPS_OPERATION_DEPRECATED;
    }
    private static final int VIPS_OPERATION_UNTRUSTED = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_UNTRUSTED = 16
     * }
     */
    public static int VIPS_OPERATION_UNTRUSTED() {
        return VIPS_OPERATION_UNTRUSTED;
    }
    private static final int VIPS_OPERATION_BLOCKED = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_BLOCKED = 32
     * }
     */
    public static int VIPS_OPERATION_BLOCKED() {
        return VIPS_OPERATION_BLOCKED;
    }
    private static final int VIPS_OPERATION_REVALIDATE = (int)64L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_REVALIDATE = 64
     * }
     */
    public static int VIPS_OPERATION_REVALIDATE() {
        return VIPS_OPERATION_REVALIDATE;
    }

    private static class vips_operation_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_operation_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_operation_get_type()
     * }
     */
    public static FunctionDescriptor vips_operation_get_type$descriptor() {
        return vips_operation_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_operation_get_type()
     * }
     */
    public static MethodHandle vips_operation_get_type$handle() {
        return vips_operation_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_operation_get_type()
     * }
     */
    public static MemorySegment vips_operation_get_type$address() {
        return vips_operation_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_operation_get_type()
     * }
     */
    public static long vips_operation_get_type() {
        var mh$ = vips_operation_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_operation_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_operation_get_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_operation_get_flags");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsOperationFlags vips_operation_get_flags(VipsOperation *operation)
     * }
     */
    public static FunctionDescriptor vips_operation_get_flags$descriptor() {
        return vips_operation_get_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsOperationFlags vips_operation_get_flags(VipsOperation *operation)
     * }
     */
    public static MethodHandle vips_operation_get_flags$handle() {
        return vips_operation_get_flags.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsOperationFlags vips_operation_get_flags(VipsOperation *operation)
     * }
     */
    public static MemorySegment vips_operation_get_flags$address() {
        return vips_operation_get_flags.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsOperationFlags vips_operation_get_flags(VipsOperation *operation)
     * }
     */
    public static int vips_operation_get_flags(MemorySegment operation) {
        var mh$ = vips_operation_get_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_operation_get_flags", operation);
            }
            return (int)mh$.invokeExact(operation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_operation_class_print_usage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_operation_class_print_usage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_operation_class_print_usage(VipsOperationClass *operation_class)
     * }
     */
    public static FunctionDescriptor vips_operation_class_print_usage$descriptor() {
        return vips_operation_class_print_usage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_operation_class_print_usage(VipsOperationClass *operation_class)
     * }
     */
    public static MethodHandle vips_operation_class_print_usage$handle() {
        return vips_operation_class_print_usage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_operation_class_print_usage(VipsOperationClass *operation_class)
     * }
     */
    public static MemorySegment vips_operation_class_print_usage$address() {
        return vips_operation_class_print_usage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_operation_class_print_usage(VipsOperationClass *operation_class)
     * }
     */
    public static void vips_operation_class_print_usage(MemorySegment operation_class) {
        var mh$ = vips_operation_class_print_usage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_operation_class_print_usage", operation_class);
            }
            mh$.invokeExact(operation_class);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_operation_invalidate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_operation_invalidate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_operation_invalidate(VipsOperation *operation)
     * }
     */
    public static FunctionDescriptor vips_operation_invalidate$descriptor() {
        return vips_operation_invalidate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_operation_invalidate(VipsOperation *operation)
     * }
     */
    public static MethodHandle vips_operation_invalidate$handle() {
        return vips_operation_invalidate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_operation_invalidate(VipsOperation *operation)
     * }
     */
    public static MemorySegment vips_operation_invalidate$address() {
        return vips_operation_invalidate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_operation_invalidate(VipsOperation *operation)
     * }
     */
    public static void vips_operation_invalidate(MemorySegment operation) {
        var mh$ = vips_operation_invalidate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_operation_invalidate", operation);
            }
            mh$.invokeExact(operation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_operation_call_valist {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_operation_call_valist");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_operation_call_valist(VipsOperation *operation, va_list ap)
     * }
     */
    public static FunctionDescriptor vips_operation_call_valist$descriptor() {
        return vips_operation_call_valist.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_operation_call_valist(VipsOperation *operation, va_list ap)
     * }
     */
    public static MethodHandle vips_operation_call_valist$handle() {
        return vips_operation_call_valist.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_operation_call_valist(VipsOperation *operation, va_list ap)
     * }
     */
    public static MemorySegment vips_operation_call_valist$address() {
        return vips_operation_call_valist.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_operation_call_valist(VipsOperation *operation, va_list ap)
     * }
     */
    public static int vips_operation_call_valist(MemorySegment operation, MemorySegment ap) {
        var mh$ = vips_operation_call_valist.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_operation_call_valist", operation, ap);
            }
            return (int)mh$.invokeExact(operation, ap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_operation_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_operation_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsOperation *vips_operation_new(const char *name)
     * }
     */
    public static FunctionDescriptor vips_operation_new$descriptor() {
        return vips_operation_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsOperation *vips_operation_new(const char *name)
     * }
     */
    public static MethodHandle vips_operation_new$handle() {
        return vips_operation_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsOperation *vips_operation_new(const char *name)
     * }
     */
    public static MemorySegment vips_operation_new$address() {
        return vips_operation_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsOperation *vips_operation_new(const char *name)
     * }
     */
    public static MemorySegment vips_operation_new(MemorySegment name) {
        var mh$ = vips_operation_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_operation_new", name);
            }
            return (MemorySegment)mh$.invokeExact(name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_cache_drop_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_cache_drop_all");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_cache_drop_all()
     * }
     */
    public static FunctionDescriptor vips_cache_drop_all$descriptor() {
        return vips_cache_drop_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_cache_drop_all()
     * }
     */
    public static MethodHandle vips_cache_drop_all$handle() {
        return vips_cache_drop_all.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_cache_drop_all()
     * }
     */
    public static MemorySegment vips_cache_drop_all$address() {
        return vips_cache_drop_all.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_cache_drop_all()
     * }
     */
    public static void vips_cache_drop_all() {
        var mh$ = vips_cache_drop_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_cache_drop_all");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_cache_operation_lookup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_cache_operation_lookup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsOperation *vips_cache_operation_lookup(VipsOperation *operation)
     * }
     */
    public static FunctionDescriptor vips_cache_operation_lookup$descriptor() {
        return vips_cache_operation_lookup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsOperation *vips_cache_operation_lookup(VipsOperation *operation)
     * }
     */
    public static MethodHandle vips_cache_operation_lookup$handle() {
        return vips_cache_operation_lookup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsOperation *vips_cache_operation_lookup(VipsOperation *operation)
     * }
     */
    public static MemorySegment vips_cache_operation_lookup$address() {
        return vips_cache_operation_lookup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsOperation *vips_cache_operation_lookup(VipsOperation *operation)
     * }
     */
    public static MemorySegment vips_cache_operation_lookup(MemorySegment operation) {
        var mh$ = vips_cache_operation_lookup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_cache_operation_lookup", operation);
            }
            return (MemorySegment)mh$.invokeExact(operation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_cache_operation_add {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_cache_operation_add");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_cache_operation_add(VipsOperation *operation)
     * }
     */
    public static FunctionDescriptor vips_cache_operation_add$descriptor() {
        return vips_cache_operation_add.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_cache_operation_add(VipsOperation *operation)
     * }
     */
    public static MethodHandle vips_cache_operation_add$handle() {
        return vips_cache_operation_add.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_cache_operation_add(VipsOperation *operation)
     * }
     */
    public static MemorySegment vips_cache_operation_add$address() {
        return vips_cache_operation_add.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_cache_operation_add(VipsOperation *operation)
     * }
     */
    public static void vips_cache_operation_add(MemorySegment operation) {
        var mh$ = vips_cache_operation_add.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_cache_operation_add", operation);
            }
            mh$.invokeExact(operation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_cache_operation_buildp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_cache_operation_buildp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_cache_operation_buildp(VipsOperation **operation)
     * }
     */
    public static FunctionDescriptor vips_cache_operation_buildp$descriptor() {
        return vips_cache_operation_buildp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_cache_operation_buildp(VipsOperation **operation)
     * }
     */
    public static MethodHandle vips_cache_operation_buildp$handle() {
        return vips_cache_operation_buildp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_cache_operation_buildp(VipsOperation **operation)
     * }
     */
    public static MemorySegment vips_cache_operation_buildp$address() {
        return vips_cache_operation_buildp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_cache_operation_buildp(VipsOperation **operation)
     * }
     */
    public static int vips_cache_operation_buildp(MemorySegment operation) {
        var mh$ = vips_cache_operation_buildp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_cache_operation_buildp", operation);
            }
            return (int)mh$.invokeExact(operation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_cache_operation_build {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_cache_operation_build");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsOperation *vips_cache_operation_build(VipsOperation *operation)
     * }
     */
    public static FunctionDescriptor vips_cache_operation_build$descriptor() {
        return vips_cache_operation_build.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsOperation *vips_cache_operation_build(VipsOperation *operation)
     * }
     */
    public static MethodHandle vips_cache_operation_build$handle() {
        return vips_cache_operation_build.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsOperation *vips_cache_operation_build(VipsOperation *operation)
     * }
     */
    public static MemorySegment vips_cache_operation_build$address() {
        return vips_cache_operation_build.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsOperation *vips_cache_operation_build(VipsOperation *operation)
     * }
     */
    public static MemorySegment vips_cache_operation_build(MemorySegment operation) {
        var mh$ = vips_cache_operation_build.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_cache_operation_build", operation);
            }
            return (MemorySegment)mh$.invokeExact(operation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_cache_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_cache_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_cache_print()
     * }
     */
    public static FunctionDescriptor vips_cache_print$descriptor() {
        return vips_cache_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_cache_print()
     * }
     */
    public static MethodHandle vips_cache_print$handle() {
        return vips_cache_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_cache_print()
     * }
     */
    public static MemorySegment vips_cache_print$address() {
        return vips_cache_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_cache_print()
     * }
     */
    public static void vips_cache_print() {
        var mh$ = vips_cache_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_cache_print");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_cache_set_max {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_cache_set_max");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_cache_set_max(int max)
     * }
     */
    public static FunctionDescriptor vips_cache_set_max$descriptor() {
        return vips_cache_set_max.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_cache_set_max(int max)
     * }
     */
    public static MethodHandle vips_cache_set_max$handle() {
        return vips_cache_set_max.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_cache_set_max(int max)
     * }
     */
    public static MemorySegment vips_cache_set_max$address() {
        return vips_cache_set_max.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_cache_set_max(int max)
     * }
     */
    public static void vips_cache_set_max(int max) {
        var mh$ = vips_cache_set_max.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_cache_set_max", max);
            }
            mh$.invokeExact(max);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_cache_set_max_mem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_LONG
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_cache_set_max_mem");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_cache_set_max_mem(size_t max_mem)
     * }
     */
    public static FunctionDescriptor vips_cache_set_max_mem$descriptor() {
        return vips_cache_set_max_mem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_cache_set_max_mem(size_t max_mem)
     * }
     */
    public static MethodHandle vips_cache_set_max_mem$handle() {
        return vips_cache_set_max_mem.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_cache_set_max_mem(size_t max_mem)
     * }
     */
    public static MemorySegment vips_cache_set_max_mem$address() {
        return vips_cache_set_max_mem.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_cache_set_max_mem(size_t max_mem)
     * }
     */
    public static void vips_cache_set_max_mem(long max_mem) {
        var mh$ = vips_cache_set_max_mem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_cache_set_max_mem", max_mem);
            }
            mh$.invokeExact(max_mem);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_cache_get_max {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_cache_get_max");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_cache_get_max()
     * }
     */
    public static FunctionDescriptor vips_cache_get_max$descriptor() {
        return vips_cache_get_max.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_cache_get_max()
     * }
     */
    public static MethodHandle vips_cache_get_max$handle() {
        return vips_cache_get_max.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_cache_get_max()
     * }
     */
    public static MemorySegment vips_cache_get_max$address() {
        return vips_cache_get_max.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_cache_get_max()
     * }
     */
    public static int vips_cache_get_max() {
        var mh$ = vips_cache_get_max.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_cache_get_max");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_cache_get_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_cache_get_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_cache_get_size()
     * }
     */
    public static FunctionDescriptor vips_cache_get_size$descriptor() {
        return vips_cache_get_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_cache_get_size()
     * }
     */
    public static MethodHandle vips_cache_get_size$handle() {
        return vips_cache_get_size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_cache_get_size()
     * }
     */
    public static MemorySegment vips_cache_get_size$address() {
        return vips_cache_get_size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_cache_get_size()
     * }
     */
    public static int vips_cache_get_size() {
        var mh$ = vips_cache_get_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_cache_get_size");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_cache_get_max_mem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_cache_get_max_mem");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t vips_cache_get_max_mem()
     * }
     */
    public static FunctionDescriptor vips_cache_get_max_mem$descriptor() {
        return vips_cache_get_max_mem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t vips_cache_get_max_mem()
     * }
     */
    public static MethodHandle vips_cache_get_max_mem$handle() {
        return vips_cache_get_max_mem.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern size_t vips_cache_get_max_mem()
     * }
     */
    public static MemorySegment vips_cache_get_max_mem$address() {
        return vips_cache_get_max_mem.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern size_t vips_cache_get_max_mem()
     * }
     */
    public static long vips_cache_get_max_mem() {
        var mh$ = vips_cache_get_max_mem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_cache_get_max_mem");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_cache_get_max_files {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_cache_get_max_files");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_cache_get_max_files()
     * }
     */
    public static FunctionDescriptor vips_cache_get_max_files$descriptor() {
        return vips_cache_get_max_files.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_cache_get_max_files()
     * }
     */
    public static MethodHandle vips_cache_get_max_files$handle() {
        return vips_cache_get_max_files.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_cache_get_max_files()
     * }
     */
    public static MemorySegment vips_cache_get_max_files$address() {
        return vips_cache_get_max_files.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_cache_get_max_files()
     * }
     */
    public static int vips_cache_get_max_files() {
        var mh$ = vips_cache_get_max_files.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_cache_get_max_files");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_cache_set_max_files {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_cache_set_max_files");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_cache_set_max_files(int max_files)
     * }
     */
    public static FunctionDescriptor vips_cache_set_max_files$descriptor() {
        return vips_cache_set_max_files.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_cache_set_max_files(int max_files)
     * }
     */
    public static MethodHandle vips_cache_set_max_files$handle() {
        return vips_cache_set_max_files.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_cache_set_max_files(int max_files)
     * }
     */
    public static MemorySegment vips_cache_set_max_files$address() {
        return vips_cache_set_max_files.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_cache_set_max_files(int max_files)
     * }
     */
    public static void vips_cache_set_max_files(int max_files) {
        var mh$ = vips_cache_set_max_files.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_cache_set_max_files", max_files);
            }
            mh$.invokeExact(max_files);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_cache_set_dump {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_cache_set_dump");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_cache_set_dump(gboolean dump)
     * }
     */
    public static FunctionDescriptor vips_cache_set_dump$descriptor() {
        return vips_cache_set_dump.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_cache_set_dump(gboolean dump)
     * }
     */
    public static MethodHandle vips_cache_set_dump$handle() {
        return vips_cache_set_dump.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_cache_set_dump(gboolean dump)
     * }
     */
    public static MemorySegment vips_cache_set_dump$address() {
        return vips_cache_set_dump.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_cache_set_dump(gboolean dump)
     * }
     */
    public static void vips_cache_set_dump(int dump) {
        var mh$ = vips_cache_set_dump.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_cache_set_dump", dump);
            }
            mh$.invokeExact(dump);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_cache_set_trace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_cache_set_trace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_cache_set_trace(gboolean trace)
     * }
     */
    public static FunctionDescriptor vips_cache_set_trace$descriptor() {
        return vips_cache_set_trace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_cache_set_trace(gboolean trace)
     * }
     */
    public static MethodHandle vips_cache_set_trace$handle() {
        return vips_cache_set_trace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_cache_set_trace(gboolean trace)
     * }
     */
    public static MemorySegment vips_cache_set_trace$address() {
        return vips_cache_set_trace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_cache_set_trace(gboolean trace)
     * }
     */
    public static void vips_cache_set_trace(int trace) {
        var mh$ = vips_cache_set_trace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_cache_set_trace", trace);
            }
            mh$.invokeExact(trace);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_operation_block_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_operation_block_set");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_operation_block_set(const char *name, gboolean state)
     * }
     */
    public static FunctionDescriptor vips_operation_block_set$descriptor() {
        return vips_operation_block_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_operation_block_set(const char *name, gboolean state)
     * }
     */
    public static MethodHandle vips_operation_block_set$handle() {
        return vips_operation_block_set.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_operation_block_set(const char *name, gboolean state)
     * }
     */
    public static MemorySegment vips_operation_block_set$address() {
        return vips_operation_block_set.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_operation_block_set(const char *name, gboolean state)
     * }
     */
    public static void vips_operation_block_set(MemorySegment name, int state) {
        var mh$ = vips_operation_block_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_operation_block_set", name, state);
            }
            mh$.invokeExact(name, state);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VIPS_FOREIGN_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_NONE = 0
     * }
     */
    public static int VIPS_FOREIGN_NONE() {
        return VIPS_FOREIGN_NONE;
    }
    private static final int VIPS_FOREIGN_PARTIAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_PARTIAL = 1
     * }
     */
    public static int VIPS_FOREIGN_PARTIAL() {
        return VIPS_FOREIGN_PARTIAL;
    }
    private static final int VIPS_FOREIGN_BIGENDIAN = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_BIGENDIAN = 2
     * }
     */
    public static int VIPS_FOREIGN_BIGENDIAN() {
        return VIPS_FOREIGN_BIGENDIAN;
    }
    private static final int VIPS_FOREIGN_SEQUENTIAL = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_SEQUENTIAL = 4
     * }
     */
    public static int VIPS_FOREIGN_SEQUENTIAL() {
        return VIPS_FOREIGN_SEQUENTIAL;
    }
    private static final int VIPS_FOREIGN_ALL = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_ALL = 7
     * }
     */
    public static int VIPS_FOREIGN_ALL() {
        return VIPS_FOREIGN_ALL;
    }
    private static final int VIPS_FAIL_ON_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FAIL_ON_NONE = 0
     * }
     */
    public static int VIPS_FAIL_ON_NONE() {
        return VIPS_FAIL_ON_NONE;
    }
    private static final int VIPS_FAIL_ON_TRUNCATED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FAIL_ON_TRUNCATED = 1
     * }
     */
    public static int VIPS_FAIL_ON_TRUNCATED() {
        return VIPS_FAIL_ON_TRUNCATED;
    }
    private static final int VIPS_FAIL_ON_ERROR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FAIL_ON_ERROR = 2
     * }
     */
    public static int VIPS_FAIL_ON_ERROR() {
        return VIPS_FAIL_ON_ERROR;
    }
    private static final int VIPS_FAIL_ON_WARNING = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FAIL_ON_WARNING = 3
     * }
     */
    public static int VIPS_FAIL_ON_WARNING() {
        return VIPS_FAIL_ON_WARNING;
    }
    private static final int VIPS_FAIL_ON_LAST = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FAIL_ON_LAST = 4
     * }
     */
    public static int VIPS_FAIL_ON_LAST() {
        return VIPS_FAIL_ON_LAST;
    }
    private static final int VIPS_SAVEABLE_MONO = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_SAVEABLE_MONO = 0
     * }
     */
    public static int VIPS_SAVEABLE_MONO() {
        return VIPS_SAVEABLE_MONO;
    }
    private static final int VIPS_SAVEABLE_RGB = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_SAVEABLE_RGB = 1
     * }
     */
    public static int VIPS_SAVEABLE_RGB() {
        return VIPS_SAVEABLE_RGB;
    }
    private static final int VIPS_SAVEABLE_RGBA = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_SAVEABLE_RGBA = 2
     * }
     */
    public static int VIPS_SAVEABLE_RGBA() {
        return VIPS_SAVEABLE_RGBA;
    }
    private static final int VIPS_SAVEABLE_RGBA_ONLY = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_SAVEABLE_RGBA_ONLY = 3
     * }
     */
    public static int VIPS_SAVEABLE_RGBA_ONLY() {
        return VIPS_SAVEABLE_RGBA_ONLY;
    }
    private static final int VIPS_SAVEABLE_RGB_CMYK = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_SAVEABLE_RGB_CMYK = 4
     * }
     */
    public static int VIPS_SAVEABLE_RGB_CMYK() {
        return VIPS_SAVEABLE_RGB_CMYK;
    }
    private static final int VIPS_SAVEABLE_ANY = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_SAVEABLE_ANY = 5
     * }
     */
    public static int VIPS_SAVEABLE_ANY() {
        return VIPS_SAVEABLE_ANY;
    }
    private static final int VIPS_SAVEABLE_LAST = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_SAVEABLE_LAST = 6
     * }
     */
    public static int VIPS_SAVEABLE_LAST() {
        return VIPS_SAVEABLE_LAST;
    }
    private static final int VIPS_FOREIGN_KEEP_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_KEEP_NONE = 0
     * }
     */
    public static int VIPS_FOREIGN_KEEP_NONE() {
        return VIPS_FOREIGN_KEEP_NONE;
    }
    private static final int VIPS_FOREIGN_KEEP_EXIF = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_KEEP_EXIF = 1
     * }
     */
    public static int VIPS_FOREIGN_KEEP_EXIF() {
        return VIPS_FOREIGN_KEEP_EXIF;
    }
    private static final int VIPS_FOREIGN_KEEP_XMP = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_KEEP_XMP = 2
     * }
     */
    public static int VIPS_FOREIGN_KEEP_XMP() {
        return VIPS_FOREIGN_KEEP_XMP;
    }
    private static final int VIPS_FOREIGN_KEEP_IPTC = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_KEEP_IPTC = 4
     * }
     */
    public static int VIPS_FOREIGN_KEEP_IPTC() {
        return VIPS_FOREIGN_KEEP_IPTC;
    }
    private static final int VIPS_FOREIGN_KEEP_ICC = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_KEEP_ICC = 8
     * }
     */
    public static int VIPS_FOREIGN_KEEP_ICC() {
        return VIPS_FOREIGN_KEEP_ICC;
    }
    private static final int VIPS_FOREIGN_KEEP_OTHER = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_KEEP_OTHER = 16
     * }
     */
    public static int VIPS_FOREIGN_KEEP_OTHER() {
        return VIPS_FOREIGN_KEEP_OTHER;
    }
    private static final int VIPS_FOREIGN_KEEP_ALL = (int)31L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_KEEP_ALL = 31
     * }
     */
    public static int VIPS_FOREIGN_KEEP_ALL() {
        return VIPS_FOREIGN_KEEP_ALL;
    }
    private static final int VIPS_FOREIGN_SUBSAMPLE_AUTO = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_SUBSAMPLE_AUTO = 0
     * }
     */
    public static int VIPS_FOREIGN_SUBSAMPLE_AUTO() {
        return VIPS_FOREIGN_SUBSAMPLE_AUTO;
    }
    private static final int VIPS_FOREIGN_SUBSAMPLE_ON = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_SUBSAMPLE_ON = 1
     * }
     */
    public static int VIPS_FOREIGN_SUBSAMPLE_ON() {
        return VIPS_FOREIGN_SUBSAMPLE_ON;
    }
    private static final int VIPS_FOREIGN_SUBSAMPLE_OFF = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_SUBSAMPLE_OFF = 2
     * }
     */
    public static int VIPS_FOREIGN_SUBSAMPLE_OFF() {
        return VIPS_FOREIGN_SUBSAMPLE_OFF;
    }
    private static final int VIPS_FOREIGN_SUBSAMPLE_LAST = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_SUBSAMPLE_LAST = 3
     * }
     */
    public static int VIPS_FOREIGN_SUBSAMPLE_LAST() {
        return VIPS_FOREIGN_SUBSAMPLE_LAST;
    }
    private static final int VIPS_FOREIGN_JPEG_SUBSAMPLE_AUTO = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_JPEG_SUBSAMPLE_AUTO = 0
     * }
     */
    public static int VIPS_FOREIGN_JPEG_SUBSAMPLE_AUTO() {
        return VIPS_FOREIGN_JPEG_SUBSAMPLE_AUTO;
    }
    private static final int VIPS_FOREIGN_JPEG_SUBSAMPLE_ON = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_JPEG_SUBSAMPLE_ON = 1
     * }
     */
    public static int VIPS_FOREIGN_JPEG_SUBSAMPLE_ON() {
        return VIPS_FOREIGN_JPEG_SUBSAMPLE_ON;
    }
    private static final int VIPS_FOREIGN_JPEG_SUBSAMPLE_OFF = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_JPEG_SUBSAMPLE_OFF = 2
     * }
     */
    public static int VIPS_FOREIGN_JPEG_SUBSAMPLE_OFF() {
        return VIPS_FOREIGN_JPEG_SUBSAMPLE_OFF;
    }
    private static final int VIPS_FOREIGN_JPEG_SUBSAMPLE_LAST = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_JPEG_SUBSAMPLE_LAST = 3
     * }
     */
    public static int VIPS_FOREIGN_JPEG_SUBSAMPLE_LAST() {
        return VIPS_FOREIGN_JPEG_SUBSAMPLE_LAST;
    }
    private static final int VIPS_FOREIGN_WEBP_PRESET_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_WEBP_PRESET_DEFAULT = 0
     * }
     */
    public static int VIPS_FOREIGN_WEBP_PRESET_DEFAULT() {
        return VIPS_FOREIGN_WEBP_PRESET_DEFAULT;
    }
    private static final int VIPS_FOREIGN_WEBP_PRESET_PICTURE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_WEBP_PRESET_PICTURE = 1
     * }
     */
    public static int VIPS_FOREIGN_WEBP_PRESET_PICTURE() {
        return VIPS_FOREIGN_WEBP_PRESET_PICTURE;
    }
    private static final int VIPS_FOREIGN_WEBP_PRESET_PHOTO = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_WEBP_PRESET_PHOTO = 2
     * }
     */
    public static int VIPS_FOREIGN_WEBP_PRESET_PHOTO() {
        return VIPS_FOREIGN_WEBP_PRESET_PHOTO;
    }
    private static final int VIPS_FOREIGN_WEBP_PRESET_DRAWING = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_WEBP_PRESET_DRAWING = 3
     * }
     */
    public static int VIPS_FOREIGN_WEBP_PRESET_DRAWING() {
        return VIPS_FOREIGN_WEBP_PRESET_DRAWING;
    }
    private static final int VIPS_FOREIGN_WEBP_PRESET_ICON = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_WEBP_PRESET_ICON = 4
     * }
     */
    public static int VIPS_FOREIGN_WEBP_PRESET_ICON() {
        return VIPS_FOREIGN_WEBP_PRESET_ICON;
    }
    private static final int VIPS_FOREIGN_WEBP_PRESET_TEXT = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_WEBP_PRESET_TEXT = 5
     * }
     */
    public static int VIPS_FOREIGN_WEBP_PRESET_TEXT() {
        return VIPS_FOREIGN_WEBP_PRESET_TEXT;
    }
    private static final int VIPS_FOREIGN_WEBP_PRESET_LAST = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_WEBP_PRESET_LAST = 6
     * }
     */
    public static int VIPS_FOREIGN_WEBP_PRESET_LAST() {
        return VIPS_FOREIGN_WEBP_PRESET_LAST;
    }
    private static final int VIPS_FOREIGN_TIFF_COMPRESSION_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_TIFF_COMPRESSION_NONE = 0
     * }
     */
    public static int VIPS_FOREIGN_TIFF_COMPRESSION_NONE() {
        return VIPS_FOREIGN_TIFF_COMPRESSION_NONE;
    }
    private static final int VIPS_FOREIGN_TIFF_COMPRESSION_JPEG = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_TIFF_COMPRESSION_JPEG = 1
     * }
     */
    public static int VIPS_FOREIGN_TIFF_COMPRESSION_JPEG() {
        return VIPS_FOREIGN_TIFF_COMPRESSION_JPEG;
    }
    private static final int VIPS_FOREIGN_TIFF_COMPRESSION_DEFLATE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_TIFF_COMPRESSION_DEFLATE = 2
     * }
     */
    public static int VIPS_FOREIGN_TIFF_COMPRESSION_DEFLATE() {
        return VIPS_FOREIGN_TIFF_COMPRESSION_DEFLATE;
    }
    private static final int VIPS_FOREIGN_TIFF_COMPRESSION_PACKBITS = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_TIFF_COMPRESSION_PACKBITS = 3
     * }
     */
    public static int VIPS_FOREIGN_TIFF_COMPRESSION_PACKBITS() {
        return VIPS_FOREIGN_TIFF_COMPRESSION_PACKBITS;
    }
    private static final int VIPS_FOREIGN_TIFF_COMPRESSION_CCITTFAX4 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_TIFF_COMPRESSION_CCITTFAX4 = 4
     * }
     */
    public static int VIPS_FOREIGN_TIFF_COMPRESSION_CCITTFAX4() {
        return VIPS_FOREIGN_TIFF_COMPRESSION_CCITTFAX4;
    }
    private static final int VIPS_FOREIGN_TIFF_COMPRESSION_LZW = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_TIFF_COMPRESSION_LZW = 5
     * }
     */
    public static int VIPS_FOREIGN_TIFF_COMPRESSION_LZW() {
        return VIPS_FOREIGN_TIFF_COMPRESSION_LZW;
    }
    private static final int VIPS_FOREIGN_TIFF_COMPRESSION_WEBP = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_TIFF_COMPRESSION_WEBP = 6
     * }
     */
    public static int VIPS_FOREIGN_TIFF_COMPRESSION_WEBP() {
        return VIPS_FOREIGN_TIFF_COMPRESSION_WEBP;
    }
    private static final int VIPS_FOREIGN_TIFF_COMPRESSION_ZSTD = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_TIFF_COMPRESSION_ZSTD = 7
     * }
     */
    public static int VIPS_FOREIGN_TIFF_COMPRESSION_ZSTD() {
        return VIPS_FOREIGN_TIFF_COMPRESSION_ZSTD;
    }
    private static final int VIPS_FOREIGN_TIFF_COMPRESSION_JP2K = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_TIFF_COMPRESSION_JP2K = 8
     * }
     */
    public static int VIPS_FOREIGN_TIFF_COMPRESSION_JP2K() {
        return VIPS_FOREIGN_TIFF_COMPRESSION_JP2K;
    }
    private static final int VIPS_FOREIGN_TIFF_COMPRESSION_LAST = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_TIFF_COMPRESSION_LAST = 9
     * }
     */
    public static int VIPS_FOREIGN_TIFF_COMPRESSION_LAST() {
        return VIPS_FOREIGN_TIFF_COMPRESSION_LAST;
    }
    private static final int VIPS_FOREIGN_TIFF_PREDICTOR_NONE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_TIFF_PREDICTOR_NONE = 1
     * }
     */
    public static int VIPS_FOREIGN_TIFF_PREDICTOR_NONE() {
        return VIPS_FOREIGN_TIFF_PREDICTOR_NONE;
    }
    private static final int VIPS_FOREIGN_TIFF_PREDICTOR_HORIZONTAL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_TIFF_PREDICTOR_HORIZONTAL = 2
     * }
     */
    public static int VIPS_FOREIGN_TIFF_PREDICTOR_HORIZONTAL() {
        return VIPS_FOREIGN_TIFF_PREDICTOR_HORIZONTAL;
    }
    private static final int VIPS_FOREIGN_TIFF_PREDICTOR_FLOAT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_TIFF_PREDICTOR_FLOAT = 3
     * }
     */
    public static int VIPS_FOREIGN_TIFF_PREDICTOR_FLOAT() {
        return VIPS_FOREIGN_TIFF_PREDICTOR_FLOAT;
    }
    private static final int VIPS_FOREIGN_TIFF_PREDICTOR_LAST = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_TIFF_PREDICTOR_LAST = 4
     * }
     */
    public static int VIPS_FOREIGN_TIFF_PREDICTOR_LAST() {
        return VIPS_FOREIGN_TIFF_PREDICTOR_LAST;
    }
    private static final int VIPS_FOREIGN_TIFF_RESUNIT_CM = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_TIFF_RESUNIT_CM = 0
     * }
     */
    public static int VIPS_FOREIGN_TIFF_RESUNIT_CM() {
        return VIPS_FOREIGN_TIFF_RESUNIT_CM;
    }
    private static final int VIPS_FOREIGN_TIFF_RESUNIT_INCH = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_TIFF_RESUNIT_INCH = 1
     * }
     */
    public static int VIPS_FOREIGN_TIFF_RESUNIT_INCH() {
        return VIPS_FOREIGN_TIFF_RESUNIT_INCH;
    }
    private static final int VIPS_FOREIGN_TIFF_RESUNIT_LAST = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_TIFF_RESUNIT_LAST = 2
     * }
     */
    public static int VIPS_FOREIGN_TIFF_RESUNIT_LAST() {
        return VIPS_FOREIGN_TIFF_RESUNIT_LAST;
    }
    private static final int VIPS_FOREIGN_PNG_FILTER_NONE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_PNG_FILTER_NONE = 8
     * }
     */
    public static int VIPS_FOREIGN_PNG_FILTER_NONE() {
        return VIPS_FOREIGN_PNG_FILTER_NONE;
    }
    private static final int VIPS_FOREIGN_PNG_FILTER_SUB = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_PNG_FILTER_SUB = 16
     * }
     */
    public static int VIPS_FOREIGN_PNG_FILTER_SUB() {
        return VIPS_FOREIGN_PNG_FILTER_SUB;
    }
    private static final int VIPS_FOREIGN_PNG_FILTER_UP = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_PNG_FILTER_UP = 32
     * }
     */
    public static int VIPS_FOREIGN_PNG_FILTER_UP() {
        return VIPS_FOREIGN_PNG_FILTER_UP;
    }
    private static final int VIPS_FOREIGN_PNG_FILTER_AVG = (int)64L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_PNG_FILTER_AVG = 64
     * }
     */
    public static int VIPS_FOREIGN_PNG_FILTER_AVG() {
        return VIPS_FOREIGN_PNG_FILTER_AVG;
    }
    private static final int VIPS_FOREIGN_PNG_FILTER_PAETH = (int)128L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_PNG_FILTER_PAETH = 128
     * }
     */
    public static int VIPS_FOREIGN_PNG_FILTER_PAETH() {
        return VIPS_FOREIGN_PNG_FILTER_PAETH;
    }
    private static final int VIPS_FOREIGN_PNG_FILTER_ALL = (int)248L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_PNG_FILTER_ALL = 248
     * }
     */
    public static int VIPS_FOREIGN_PNG_FILTER_ALL() {
        return VIPS_FOREIGN_PNG_FILTER_ALL;
    }
    private static final int VIPS_FOREIGN_PPM_FORMAT_PBM = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_PPM_FORMAT_PBM = 0
     * }
     */
    public static int VIPS_FOREIGN_PPM_FORMAT_PBM() {
        return VIPS_FOREIGN_PPM_FORMAT_PBM;
    }
    private static final int VIPS_FOREIGN_PPM_FORMAT_PGM = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_PPM_FORMAT_PGM = 1
     * }
     */
    public static int VIPS_FOREIGN_PPM_FORMAT_PGM() {
        return VIPS_FOREIGN_PPM_FORMAT_PGM;
    }
    private static final int VIPS_FOREIGN_PPM_FORMAT_PPM = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_PPM_FORMAT_PPM = 2
     * }
     */
    public static int VIPS_FOREIGN_PPM_FORMAT_PPM() {
        return VIPS_FOREIGN_PPM_FORMAT_PPM;
    }
    private static final int VIPS_FOREIGN_PPM_FORMAT_PFM = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_PPM_FORMAT_PFM = 3
     * }
     */
    public static int VIPS_FOREIGN_PPM_FORMAT_PFM() {
        return VIPS_FOREIGN_PPM_FORMAT_PFM;
    }
    private static final int VIPS_FOREIGN_PPM_FORMAT_PNM = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_PPM_FORMAT_PNM = 4
     * }
     */
    public static int VIPS_FOREIGN_PPM_FORMAT_PNM() {
        return VIPS_FOREIGN_PPM_FORMAT_PNM;
    }
    private static final int VIPS_FOREIGN_PPM_FORMAT_LAST = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_PPM_FORMAT_LAST = 5
     * }
     */
    public static int VIPS_FOREIGN_PPM_FORMAT_LAST() {
        return VIPS_FOREIGN_PPM_FORMAT_LAST;
    }
    private static final int VIPS_FOREIGN_DZ_LAYOUT_DZ = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_DZ_LAYOUT_DZ = 0
     * }
     */
    public static int VIPS_FOREIGN_DZ_LAYOUT_DZ() {
        return VIPS_FOREIGN_DZ_LAYOUT_DZ;
    }
    private static final int VIPS_FOREIGN_DZ_LAYOUT_ZOOMIFY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_DZ_LAYOUT_ZOOMIFY = 1
     * }
     */
    public static int VIPS_FOREIGN_DZ_LAYOUT_ZOOMIFY() {
        return VIPS_FOREIGN_DZ_LAYOUT_ZOOMIFY;
    }
    private static final int VIPS_FOREIGN_DZ_LAYOUT_GOOGLE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_DZ_LAYOUT_GOOGLE = 2
     * }
     */
    public static int VIPS_FOREIGN_DZ_LAYOUT_GOOGLE() {
        return VIPS_FOREIGN_DZ_LAYOUT_GOOGLE;
    }
    private static final int VIPS_FOREIGN_DZ_LAYOUT_IIIF = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_DZ_LAYOUT_IIIF = 3
     * }
     */
    public static int VIPS_FOREIGN_DZ_LAYOUT_IIIF() {
        return VIPS_FOREIGN_DZ_LAYOUT_IIIF;
    }
    private static final int VIPS_FOREIGN_DZ_LAYOUT_IIIF3 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_DZ_LAYOUT_IIIF3 = 4
     * }
     */
    public static int VIPS_FOREIGN_DZ_LAYOUT_IIIF3() {
        return VIPS_FOREIGN_DZ_LAYOUT_IIIF3;
    }
    private static final int VIPS_FOREIGN_DZ_LAYOUT_LAST = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_DZ_LAYOUT_LAST = 5
     * }
     */
    public static int VIPS_FOREIGN_DZ_LAYOUT_LAST() {
        return VIPS_FOREIGN_DZ_LAYOUT_LAST;
    }
    private static final int VIPS_FOREIGN_DZ_DEPTH_ONEPIXEL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_DZ_DEPTH_ONEPIXEL = 0
     * }
     */
    public static int VIPS_FOREIGN_DZ_DEPTH_ONEPIXEL() {
        return VIPS_FOREIGN_DZ_DEPTH_ONEPIXEL;
    }
    private static final int VIPS_FOREIGN_DZ_DEPTH_ONETILE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_DZ_DEPTH_ONETILE = 1
     * }
     */
    public static int VIPS_FOREIGN_DZ_DEPTH_ONETILE() {
        return VIPS_FOREIGN_DZ_DEPTH_ONETILE;
    }
    private static final int VIPS_FOREIGN_DZ_DEPTH_ONE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_DZ_DEPTH_ONE = 2
     * }
     */
    public static int VIPS_FOREIGN_DZ_DEPTH_ONE() {
        return VIPS_FOREIGN_DZ_DEPTH_ONE;
    }
    private static final int VIPS_FOREIGN_DZ_DEPTH_LAST = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_DZ_DEPTH_LAST = 3
     * }
     */
    public static int VIPS_FOREIGN_DZ_DEPTH_LAST() {
        return VIPS_FOREIGN_DZ_DEPTH_LAST;
    }
    private static final int VIPS_FOREIGN_DZ_CONTAINER_FS = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_DZ_CONTAINER_FS = 0
     * }
     */
    public static int VIPS_FOREIGN_DZ_CONTAINER_FS() {
        return VIPS_FOREIGN_DZ_CONTAINER_FS;
    }
    private static final int VIPS_FOREIGN_DZ_CONTAINER_ZIP = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_DZ_CONTAINER_ZIP = 1
     * }
     */
    public static int VIPS_FOREIGN_DZ_CONTAINER_ZIP() {
        return VIPS_FOREIGN_DZ_CONTAINER_ZIP;
    }
    private static final int VIPS_FOREIGN_DZ_CONTAINER_SZI = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_DZ_CONTAINER_SZI = 2
     * }
     */
    public static int VIPS_FOREIGN_DZ_CONTAINER_SZI() {
        return VIPS_FOREIGN_DZ_CONTAINER_SZI;
    }
    private static final int VIPS_FOREIGN_DZ_CONTAINER_LAST = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_DZ_CONTAINER_LAST = 3
     * }
     */
    public static int VIPS_FOREIGN_DZ_CONTAINER_LAST() {
        return VIPS_FOREIGN_DZ_CONTAINER_LAST;
    }
    private static final int VIPS_FOREIGN_HEIF_COMPRESSION_HEVC = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_HEIF_COMPRESSION_HEVC = 1
     * }
     */
    public static int VIPS_FOREIGN_HEIF_COMPRESSION_HEVC() {
        return VIPS_FOREIGN_HEIF_COMPRESSION_HEVC;
    }
    private static final int VIPS_FOREIGN_HEIF_COMPRESSION_AVC = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_HEIF_COMPRESSION_AVC = 2
     * }
     */
    public static int VIPS_FOREIGN_HEIF_COMPRESSION_AVC() {
        return VIPS_FOREIGN_HEIF_COMPRESSION_AVC;
    }
    private static final int VIPS_FOREIGN_HEIF_COMPRESSION_JPEG = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_HEIF_COMPRESSION_JPEG = 3
     * }
     */
    public static int VIPS_FOREIGN_HEIF_COMPRESSION_JPEG() {
        return VIPS_FOREIGN_HEIF_COMPRESSION_JPEG;
    }
    private static final int VIPS_FOREIGN_HEIF_COMPRESSION_AV1 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_HEIF_COMPRESSION_AV1 = 4
     * }
     */
    public static int VIPS_FOREIGN_HEIF_COMPRESSION_AV1() {
        return VIPS_FOREIGN_HEIF_COMPRESSION_AV1;
    }
    private static final int VIPS_FOREIGN_HEIF_COMPRESSION_LAST = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_HEIF_COMPRESSION_LAST = 5
     * }
     */
    public static int VIPS_FOREIGN_HEIF_COMPRESSION_LAST() {
        return VIPS_FOREIGN_HEIF_COMPRESSION_LAST;
    }
    private static final int VIPS_FOREIGN_HEIF_ENCODER_AUTO = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_HEIF_ENCODER_AUTO = 0
     * }
     */
    public static int VIPS_FOREIGN_HEIF_ENCODER_AUTO() {
        return VIPS_FOREIGN_HEIF_ENCODER_AUTO;
    }
    private static final int VIPS_FOREIGN_HEIF_ENCODER_AOM = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_HEIF_ENCODER_AOM = 1
     * }
     */
    public static int VIPS_FOREIGN_HEIF_ENCODER_AOM() {
        return VIPS_FOREIGN_HEIF_ENCODER_AOM;
    }
    private static final int VIPS_FOREIGN_HEIF_ENCODER_RAV1E = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_HEIF_ENCODER_RAV1E = 2
     * }
     */
    public static int VIPS_FOREIGN_HEIF_ENCODER_RAV1E() {
        return VIPS_FOREIGN_HEIF_ENCODER_RAV1E;
    }
    private static final int VIPS_FOREIGN_HEIF_ENCODER_SVT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_HEIF_ENCODER_SVT = 3
     * }
     */
    public static int VIPS_FOREIGN_HEIF_ENCODER_SVT() {
        return VIPS_FOREIGN_HEIF_ENCODER_SVT;
    }
    private static final int VIPS_FOREIGN_HEIF_ENCODER_X265 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_HEIF_ENCODER_X265 = 4
     * }
     */
    public static int VIPS_FOREIGN_HEIF_ENCODER_X265() {
        return VIPS_FOREIGN_HEIF_ENCODER_X265;
    }
    private static final int VIPS_FOREIGN_HEIF_ENCODER_LAST = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_HEIF_ENCODER_LAST = 5
     * }
     */
    public static int VIPS_FOREIGN_HEIF_ENCODER_LAST() {
        return VIPS_FOREIGN_HEIF_ENCODER_LAST;
    }

    private static class vips_operation_math_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_operation_math_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_operation_math_get_type()
     * }
     */
    public static FunctionDescriptor vips_operation_math_get_type$descriptor() {
        return vips_operation_math_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_operation_math_get_type()
     * }
     */
    public static MethodHandle vips_operation_math_get_type$handle() {
        return vips_operation_math_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_operation_math_get_type()
     * }
     */
    public static MemorySegment vips_operation_math_get_type$address() {
        return vips_operation_math_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_operation_math_get_type()
     * }
     */
    public static long vips_operation_math_get_type() {
        var mh$ = vips_operation_math_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_operation_math_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_operation_math2_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_operation_math2_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_operation_math2_get_type()
     * }
     */
    public static FunctionDescriptor vips_operation_math2_get_type$descriptor() {
        return vips_operation_math2_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_operation_math2_get_type()
     * }
     */
    public static MethodHandle vips_operation_math2_get_type$handle() {
        return vips_operation_math2_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_operation_math2_get_type()
     * }
     */
    public static MemorySegment vips_operation_math2_get_type$address() {
        return vips_operation_math2_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_operation_math2_get_type()
     * }
     */
    public static long vips_operation_math2_get_type() {
        var mh$ = vips_operation_math2_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_operation_math2_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_operation_round_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_operation_round_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_operation_round_get_type()
     * }
     */
    public static FunctionDescriptor vips_operation_round_get_type$descriptor() {
        return vips_operation_round_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_operation_round_get_type()
     * }
     */
    public static MethodHandle vips_operation_round_get_type$handle() {
        return vips_operation_round_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_operation_round_get_type()
     * }
     */
    public static MemorySegment vips_operation_round_get_type$address() {
        return vips_operation_round_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_operation_round_get_type()
     * }
     */
    public static long vips_operation_round_get_type() {
        var mh$ = vips_operation_round_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_operation_round_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_operation_relational_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_operation_relational_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_operation_relational_get_type()
     * }
     */
    public static FunctionDescriptor vips_operation_relational_get_type$descriptor() {
        return vips_operation_relational_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_operation_relational_get_type()
     * }
     */
    public static MethodHandle vips_operation_relational_get_type$handle() {
        return vips_operation_relational_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_operation_relational_get_type()
     * }
     */
    public static MemorySegment vips_operation_relational_get_type$address() {
        return vips_operation_relational_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_operation_relational_get_type()
     * }
     */
    public static long vips_operation_relational_get_type() {
        var mh$ = vips_operation_relational_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_operation_relational_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_operation_boolean_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_operation_boolean_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_operation_boolean_get_type()
     * }
     */
    public static FunctionDescriptor vips_operation_boolean_get_type$descriptor() {
        return vips_operation_boolean_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_operation_boolean_get_type()
     * }
     */
    public static MethodHandle vips_operation_boolean_get_type$handle() {
        return vips_operation_boolean_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_operation_boolean_get_type()
     * }
     */
    public static MemorySegment vips_operation_boolean_get_type$address() {
        return vips_operation_boolean_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_operation_boolean_get_type()
     * }
     */
    public static long vips_operation_boolean_get_type() {
        var mh$ = vips_operation_boolean_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_operation_boolean_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_operation_complex_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_operation_complex_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_operation_complex_get_type()
     * }
     */
    public static FunctionDescriptor vips_operation_complex_get_type$descriptor() {
        return vips_operation_complex_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_operation_complex_get_type()
     * }
     */
    public static MethodHandle vips_operation_complex_get_type$handle() {
        return vips_operation_complex_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_operation_complex_get_type()
     * }
     */
    public static MemorySegment vips_operation_complex_get_type$address() {
        return vips_operation_complex_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_operation_complex_get_type()
     * }
     */
    public static long vips_operation_complex_get_type() {
        var mh$ = vips_operation_complex_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_operation_complex_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_operation_complex2_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_operation_complex2_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_operation_complex2_get_type()
     * }
     */
    public static FunctionDescriptor vips_operation_complex2_get_type$descriptor() {
        return vips_operation_complex2_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_operation_complex2_get_type()
     * }
     */
    public static MethodHandle vips_operation_complex2_get_type$handle() {
        return vips_operation_complex2_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_operation_complex2_get_type()
     * }
     */
    public static MemorySegment vips_operation_complex2_get_type$address() {
        return vips_operation_complex2_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_operation_complex2_get_type()
     * }
     */
    public static long vips_operation_complex2_get_type() {
        var mh$ = vips_operation_complex2_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_operation_complex2_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_operation_complexget_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_operation_complexget_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_operation_complexget_get_type()
     * }
     */
    public static FunctionDescriptor vips_operation_complexget_get_type$descriptor() {
        return vips_operation_complexget_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_operation_complexget_get_type()
     * }
     */
    public static MethodHandle vips_operation_complexget_get_type$handle() {
        return vips_operation_complexget_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_operation_complexget_get_type()
     * }
     */
    public static MemorySegment vips_operation_complexget_get_type$address() {
        return vips_operation_complexget_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_operation_complexget_get_type()
     * }
     */
    public static long vips_operation_complexget_get_type() {
        var mh$ = vips_operation_complexget_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_operation_complexget_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_image_type_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_image_type_get_type()
     * }
     */
    public static FunctionDescriptor vips_image_type_get_type$descriptor() {
        return vips_image_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_image_type_get_type()
     * }
     */
    public static MethodHandle vips_image_type_get_type$handle() {
        return vips_image_type_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_image_type_get_type()
     * }
     */
    public static MemorySegment vips_image_type_get_type$address() {
        return vips_image_type_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_image_type_get_type()
     * }
     */
    public static long vips_image_type_get_type() {
        var mh$ = vips_image_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_operation_morphology_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_operation_morphology_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_operation_morphology_get_type()
     * }
     */
    public static FunctionDescriptor vips_operation_morphology_get_type$descriptor() {
        return vips_operation_morphology_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_operation_morphology_get_type()
     * }
     */
    public static MethodHandle vips_operation_morphology_get_type$handle() {
        return vips_operation_morphology_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_operation_morphology_get_type()
     * }
     */
    public static MemorySegment vips_operation_morphology_get_type$address() {
        return vips_operation_morphology_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_operation_morphology_get_type()
     * }
     */
    public static long vips_operation_morphology_get_type() {
        var mh$ = vips_operation_morphology_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_operation_morphology_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_operation_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_LONG    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_operation_flags_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_operation_flags_get_type()
     * }
     */
    public static FunctionDescriptor vips_operation_flags_get_type$descriptor() {
        return vips_operation_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_operation_flags_get_type()
     * }
     */
    public static MethodHandle vips_operation_flags_get_type$handle() {
        return vips_operation_flags_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_operation_flags_get_type()
     * }
     */
    public static MemorySegment vips_operation_flags_get_type$address() {
        return vips_operation_flags_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_operation_flags_get_type()
     * }
     */
    public static long vips_operation_flags_get_type() {
        var mh$ = vips_operation_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_operation_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VIPS_OPERATION_MATH_SIN = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_MATH_SIN = 0
     * }
     */
    public static int VIPS_OPERATION_MATH_SIN() {
        return VIPS_OPERATION_MATH_SIN;
    }
    private static final int VIPS_OPERATION_MATH_COS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_MATH_COS = 1
     * }
     */
    public static int VIPS_OPERATION_MATH_COS() {
        return VIPS_OPERATION_MATH_COS;
    }
    private static final int VIPS_OPERATION_MATH_TAN = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_MATH_TAN = 2
     * }
     */
    public static int VIPS_OPERATION_MATH_TAN() {
        return VIPS_OPERATION_MATH_TAN;
    }
    private static final int VIPS_OPERATION_MATH_ASIN = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_MATH_ASIN = 3
     * }
     */
    public static int VIPS_OPERATION_MATH_ASIN() {
        return VIPS_OPERATION_MATH_ASIN;
    }
    private static final int VIPS_OPERATION_MATH_ACOS = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_MATH_ACOS = 4
     * }
     */
    public static int VIPS_OPERATION_MATH_ACOS() {
        return VIPS_OPERATION_MATH_ACOS;
    }
    private static final int VIPS_OPERATION_MATH_ATAN = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_MATH_ATAN = 5
     * }
     */
    public static int VIPS_OPERATION_MATH_ATAN() {
        return VIPS_OPERATION_MATH_ATAN;
    }
    private static final int VIPS_OPERATION_MATH_LOG = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_MATH_LOG = 6
     * }
     */
    public static int VIPS_OPERATION_MATH_LOG() {
        return VIPS_OPERATION_MATH_LOG;
    }
    private static final int VIPS_OPERATION_MATH_LOG10 = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_MATH_LOG10 = 7
     * }
     */
    public static int VIPS_OPERATION_MATH_LOG10() {
        return VIPS_OPERATION_MATH_LOG10;
    }
    private static final int VIPS_OPERATION_MATH_EXP = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_MATH_EXP = 8
     * }
     */
    public static int VIPS_OPERATION_MATH_EXP() {
        return VIPS_OPERATION_MATH_EXP;
    }
    private static final int VIPS_OPERATION_MATH_EXP10 = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_MATH_EXP10 = 9
     * }
     */
    public static int VIPS_OPERATION_MATH_EXP10() {
        return VIPS_OPERATION_MATH_EXP10;
    }
    private static final int VIPS_OPERATION_MATH_SINH = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_MATH_SINH = 10
     * }
     */
    public static int VIPS_OPERATION_MATH_SINH() {
        return VIPS_OPERATION_MATH_SINH;
    }
    private static final int VIPS_OPERATION_MATH_COSH = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_MATH_COSH = 11
     * }
     */
    public static int VIPS_OPERATION_MATH_COSH() {
        return VIPS_OPERATION_MATH_COSH;
    }
    private static final int VIPS_OPERATION_MATH_TANH = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_MATH_TANH = 12
     * }
     */
    public static int VIPS_OPERATION_MATH_TANH() {
        return VIPS_OPERATION_MATH_TANH;
    }
    private static final int VIPS_OPERATION_MATH_ASINH = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_MATH_ASINH = 13
     * }
     */
    public static int VIPS_OPERATION_MATH_ASINH() {
        return VIPS_OPERATION_MATH_ASINH;
    }
    private static final int VIPS_OPERATION_MATH_ACOSH = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_MATH_ACOSH = 14
     * }
     */
    public static int VIPS_OPERATION_MATH_ACOSH() {
        return VIPS_OPERATION_MATH_ACOSH;
    }
    private static final int VIPS_OPERATION_MATH_ATANH = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_MATH_ATANH = 15
     * }
     */
    public static int VIPS_OPERATION_MATH_ATANH() {
        return VIPS_OPERATION_MATH_ATANH;
    }
    private static final int VIPS_OPERATION_MATH_LAST = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_MATH_LAST = 16
     * }
     */
    public static int VIPS_OPERATION_MATH_LAST() {
        return VIPS_OPERATION_MATH_LAST;
    }
    private static final int VIPS_OPERATION_MATH2_POW = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_MATH2_POW = 0
     * }
     */
    public static int VIPS_OPERATION_MATH2_POW() {
        return VIPS_OPERATION_MATH2_POW;
    }
    private static final int VIPS_OPERATION_MATH2_WOP = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_MATH2_WOP = 1
     * }
     */
    public static int VIPS_OPERATION_MATH2_WOP() {
        return VIPS_OPERATION_MATH2_WOP;
    }
    private static final int VIPS_OPERATION_MATH2_ATAN2 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_MATH2_ATAN2 = 2
     * }
     */
    public static int VIPS_OPERATION_MATH2_ATAN2() {
        return VIPS_OPERATION_MATH2_ATAN2;
    }
    private static final int VIPS_OPERATION_MATH2_LAST = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_MATH2_LAST = 3
     * }
     */
    public static int VIPS_OPERATION_MATH2_LAST() {
        return VIPS_OPERATION_MATH2_LAST;
    }
    private static final int VIPS_OPERATION_ROUND_RINT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_ROUND_RINT = 0
     * }
     */
    public static int VIPS_OPERATION_ROUND_RINT() {
        return VIPS_OPERATION_ROUND_RINT;
    }
    private static final int VIPS_OPERATION_ROUND_CEIL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_ROUND_CEIL = 1
     * }
     */
    public static int VIPS_OPERATION_ROUND_CEIL() {
        return VIPS_OPERATION_ROUND_CEIL;
    }
    private static final int VIPS_OPERATION_ROUND_FLOOR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_ROUND_FLOOR = 2
     * }
     */
    public static int VIPS_OPERATION_ROUND_FLOOR() {
        return VIPS_OPERATION_ROUND_FLOOR;
    }
    private static final int VIPS_OPERATION_ROUND_LAST = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_ROUND_LAST = 3
     * }
     */
    public static int VIPS_OPERATION_ROUND_LAST() {
        return VIPS_OPERATION_ROUND_LAST;
    }
    private static final int VIPS_OPERATION_RELATIONAL_EQUAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_RELATIONAL_EQUAL = 0
     * }
     */
    public static int VIPS_OPERATION_RELATIONAL_EQUAL() {
        return VIPS_OPERATION_RELATIONAL_EQUAL;
    }
    private static final int VIPS_OPERATION_RELATIONAL_NOTEQ = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_RELATIONAL_NOTEQ = 1
     * }
     */
    public static int VIPS_OPERATION_RELATIONAL_NOTEQ() {
        return VIPS_OPERATION_RELATIONAL_NOTEQ;
    }
    private static final int VIPS_OPERATION_RELATIONAL_LESS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_RELATIONAL_LESS = 2
     * }
     */
    public static int VIPS_OPERATION_RELATIONAL_LESS() {
        return VIPS_OPERATION_RELATIONAL_LESS;
    }
    private static final int VIPS_OPERATION_RELATIONAL_LESSEQ = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_RELATIONAL_LESSEQ = 3
     * }
     */
    public static int VIPS_OPERATION_RELATIONAL_LESSEQ() {
        return VIPS_OPERATION_RELATIONAL_LESSEQ;
    }
    private static final int VIPS_OPERATION_RELATIONAL_MORE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_RELATIONAL_MORE = 4
     * }
     */
    public static int VIPS_OPERATION_RELATIONAL_MORE() {
        return VIPS_OPERATION_RELATIONAL_MORE;
    }
    private static final int VIPS_OPERATION_RELATIONAL_MOREEQ = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_RELATIONAL_MOREEQ = 5
     * }
     */
    public static int VIPS_OPERATION_RELATIONAL_MOREEQ() {
        return VIPS_OPERATION_RELATIONAL_MOREEQ;
    }
    private static final int VIPS_OPERATION_RELATIONAL_LAST = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_RELATIONAL_LAST = 6
     * }
     */
    public static int VIPS_OPERATION_RELATIONAL_LAST() {
        return VIPS_OPERATION_RELATIONAL_LAST;
    }
    private static final int VIPS_OPERATION_BOOLEAN_AND = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_BOOLEAN_AND = 0
     * }
     */
    public static int VIPS_OPERATION_BOOLEAN_AND() {
        return VIPS_OPERATION_BOOLEAN_AND;
    }
    private static final int VIPS_OPERATION_BOOLEAN_OR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_BOOLEAN_OR = 1
     * }
     */
    public static int VIPS_OPERATION_BOOLEAN_OR() {
        return VIPS_OPERATION_BOOLEAN_OR;
    }
    private static final int VIPS_OPERATION_BOOLEAN_EOR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_BOOLEAN_EOR = 2
     * }
     */
    public static int VIPS_OPERATION_BOOLEAN_EOR() {
        return VIPS_OPERATION_BOOLEAN_EOR;
    }
    private static final int VIPS_OPERATION_BOOLEAN_LSHIFT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_BOOLEAN_LSHIFT = 3
     * }
     */
    public static int VIPS_OPERATION_BOOLEAN_LSHIFT() {
        return VIPS_OPERATION_BOOLEAN_LSHIFT;
    }
    private static final int VIPS_OPERATION_BOOLEAN_RSHIFT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_BOOLEAN_RSHIFT = 4
     * }
     */
    public static int VIPS_OPERATION_BOOLEAN_RSHIFT() {
        return VIPS_OPERATION_BOOLEAN_RSHIFT;
    }
    private static final int VIPS_OPERATION_BOOLEAN_LAST = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_BOOLEAN_LAST = 5
     * }
     */
    public static int VIPS_OPERATION_BOOLEAN_LAST() {
        return VIPS_OPERATION_BOOLEAN_LAST;
    }
    private static final int VIPS_OPERATION_COMPLEX_POLAR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_COMPLEX_POLAR = 0
     * }
     */
    public static int VIPS_OPERATION_COMPLEX_POLAR() {
        return VIPS_OPERATION_COMPLEX_POLAR;
    }
    private static final int VIPS_OPERATION_COMPLEX_RECT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_COMPLEX_RECT = 1
     * }
     */
    public static int VIPS_OPERATION_COMPLEX_RECT() {
        return VIPS_OPERATION_COMPLEX_RECT;
    }
    private static final int VIPS_OPERATION_COMPLEX_CONJ = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_COMPLEX_CONJ = 2
     * }
     */
    public static int VIPS_OPERATION_COMPLEX_CONJ() {
        return VIPS_OPERATION_COMPLEX_CONJ;
    }
    private static final int VIPS_OPERATION_COMPLEX_LAST = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_COMPLEX_LAST = 3
     * }
     */
    public static int VIPS_OPERATION_COMPLEX_LAST() {
        return VIPS_OPERATION_COMPLEX_LAST;
    }
    private static final int VIPS_OPERATION_COMPLEX2_CROSS_PHASE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_COMPLEX2_CROSS_PHASE = 0
     * }
     */
    public static int VIPS_OPERATION_COMPLEX2_CROSS_PHASE() {
        return VIPS_OPERATION_COMPLEX2_CROSS_PHASE;
    }
    private static final int VIPS_OPERATION_COMPLEX2_LAST = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_COMPLEX2_LAST = 1
     * }
     */
    public static int VIPS_OPERATION_COMPLEX2_LAST() {
        return VIPS_OPERATION_COMPLEX2_LAST;
    }
    private static final int VIPS_OPERATION_COMPLEXGET_REAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_COMPLEXGET_REAL = 0
     * }
     */
    public static int VIPS_OPERATION_COMPLEXGET_REAL() {
        return VIPS_OPERATION_COMPLEXGET_REAL;
    }
    private static final int VIPS_OPERATION_COMPLEXGET_IMAG = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_COMPLEXGET_IMAG = 1
     * }
     */
    public static int VIPS_OPERATION_COMPLEXGET_IMAG() {
        return VIPS_OPERATION_COMPLEXGET_IMAG;
    }
    private static final int VIPS_OPERATION_COMPLEXGET_LAST = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_COMPLEXGET_LAST = 2
     * }
     */
    public static int VIPS_OPERATION_COMPLEXGET_LAST() {
        return VIPS_OPERATION_COMPLEXGET_LAST;
    }
    private static final int VIPS_EXTEND_BLACK = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_EXTEND_BLACK = 0
     * }
     */
    public static int VIPS_EXTEND_BLACK() {
        return VIPS_EXTEND_BLACK;
    }
    private static final int VIPS_EXTEND_COPY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_EXTEND_COPY = 1
     * }
     */
    public static int VIPS_EXTEND_COPY() {
        return VIPS_EXTEND_COPY;
    }
    private static final int VIPS_EXTEND_REPEAT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_EXTEND_REPEAT = 2
     * }
     */
    public static int VIPS_EXTEND_REPEAT() {
        return VIPS_EXTEND_REPEAT;
    }
    private static final int VIPS_EXTEND_MIRROR = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_EXTEND_MIRROR = 3
     * }
     */
    public static int VIPS_EXTEND_MIRROR() {
        return VIPS_EXTEND_MIRROR;
    }
    private static final int VIPS_EXTEND_WHITE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_EXTEND_WHITE = 4
     * }
     */
    public static int VIPS_EXTEND_WHITE() {
        return VIPS_EXTEND_WHITE;
    }
    private static final int VIPS_EXTEND_BACKGROUND = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_EXTEND_BACKGROUND = 5
     * }
     */
    public static int VIPS_EXTEND_BACKGROUND() {
        return VIPS_EXTEND_BACKGROUND;
    }
    private static final int VIPS_EXTEND_LAST = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_EXTEND_LAST = 6
     * }
     */
    public static int VIPS_EXTEND_LAST() {
        return VIPS_EXTEND_LAST;
    }
    private static final int VIPS_COMPASS_DIRECTION_CENTRE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_COMPASS_DIRECTION_CENTRE = 0
     * }
     */
    public static int VIPS_COMPASS_DIRECTION_CENTRE() {
        return VIPS_COMPASS_DIRECTION_CENTRE;
    }
    private static final int VIPS_COMPASS_DIRECTION_NORTH = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_COMPASS_DIRECTION_NORTH = 1
     * }
     */
    public static int VIPS_COMPASS_DIRECTION_NORTH() {
        return VIPS_COMPASS_DIRECTION_NORTH;
    }
    private static final int VIPS_COMPASS_DIRECTION_EAST = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_COMPASS_DIRECTION_EAST = 2
     * }
     */
    public static int VIPS_COMPASS_DIRECTION_EAST() {
        return VIPS_COMPASS_DIRECTION_EAST;
    }
    private static final int VIPS_COMPASS_DIRECTION_SOUTH = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_COMPASS_DIRECTION_SOUTH = 3
     * }
     */
    public static int VIPS_COMPASS_DIRECTION_SOUTH() {
        return VIPS_COMPASS_DIRECTION_SOUTH;
    }
    private static final int VIPS_COMPASS_DIRECTION_WEST = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_COMPASS_DIRECTION_WEST = 4
     * }
     */
    public static int VIPS_COMPASS_DIRECTION_WEST() {
        return VIPS_COMPASS_DIRECTION_WEST;
    }
    private static final int VIPS_COMPASS_DIRECTION_NORTH_EAST = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_COMPASS_DIRECTION_NORTH_EAST = 5
     * }
     */
    public static int VIPS_COMPASS_DIRECTION_NORTH_EAST() {
        return VIPS_COMPASS_DIRECTION_NORTH_EAST;
    }
    private static final int VIPS_COMPASS_DIRECTION_SOUTH_EAST = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_COMPASS_DIRECTION_SOUTH_EAST = 6
     * }
     */
    public static int VIPS_COMPASS_DIRECTION_SOUTH_EAST() {
        return VIPS_COMPASS_DIRECTION_SOUTH_EAST;
    }
    private static final int VIPS_COMPASS_DIRECTION_SOUTH_WEST = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_COMPASS_DIRECTION_SOUTH_WEST = 7
     * }
     */
    public static int VIPS_COMPASS_DIRECTION_SOUTH_WEST() {
        return VIPS_COMPASS_DIRECTION_SOUTH_WEST;
    }
    private static final int VIPS_COMPASS_DIRECTION_NORTH_WEST = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_COMPASS_DIRECTION_NORTH_WEST = 8
     * }
     */
    public static int VIPS_COMPASS_DIRECTION_NORTH_WEST() {
        return VIPS_COMPASS_DIRECTION_NORTH_WEST;
    }
    private static final int VIPS_COMPASS_DIRECTION_LAST = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_COMPASS_DIRECTION_LAST = 9
     * }
     */
    public static int VIPS_COMPASS_DIRECTION_LAST() {
        return VIPS_COMPASS_DIRECTION_LAST;
    }
    private static final int VIPS_DIRECTION_HORIZONTAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_DIRECTION_HORIZONTAL = 0
     * }
     */
    public static int VIPS_DIRECTION_HORIZONTAL() {
        return VIPS_DIRECTION_HORIZONTAL;
    }
    private static final int VIPS_DIRECTION_VERTICAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_DIRECTION_VERTICAL = 1
     * }
     */
    public static int VIPS_DIRECTION_VERTICAL() {
        return VIPS_DIRECTION_VERTICAL;
    }
    private static final int VIPS_DIRECTION_LAST = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_DIRECTION_LAST = 2
     * }
     */
    public static int VIPS_DIRECTION_LAST() {
        return VIPS_DIRECTION_LAST;
    }
    private static final int VIPS_ALIGN_LOW = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ALIGN_LOW = 0
     * }
     */
    public static int VIPS_ALIGN_LOW() {
        return VIPS_ALIGN_LOW;
    }
    private static final int VIPS_ALIGN_CENTRE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ALIGN_CENTRE = 1
     * }
     */
    public static int VIPS_ALIGN_CENTRE() {
        return VIPS_ALIGN_CENTRE;
    }
    private static final int VIPS_ALIGN_HIGH = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ALIGN_HIGH = 2
     * }
     */
    public static int VIPS_ALIGN_HIGH() {
        return VIPS_ALIGN_HIGH;
    }
    private static final int VIPS_ALIGN_LAST = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ALIGN_LAST = 3
     * }
     */
    public static int VIPS_ALIGN_LAST() {
        return VIPS_ALIGN_LAST;
    }
    private static final int VIPS_ANGLE_D0 = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ANGLE_D0 = 0
     * }
     */
    public static int VIPS_ANGLE_D0() {
        return VIPS_ANGLE_D0;
    }
    private static final int VIPS_ANGLE_D90 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ANGLE_D90 = 1
     * }
     */
    public static int VIPS_ANGLE_D90() {
        return VIPS_ANGLE_D90;
    }
    private static final int VIPS_ANGLE_D180 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ANGLE_D180 = 2
     * }
     */
    public static int VIPS_ANGLE_D180() {
        return VIPS_ANGLE_D180;
    }
    private static final int VIPS_ANGLE_D270 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ANGLE_D270 = 3
     * }
     */
    public static int VIPS_ANGLE_D270() {
        return VIPS_ANGLE_D270;
    }
    private static final int VIPS_ANGLE_LAST = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ANGLE_LAST = 4
     * }
     */
    public static int VIPS_ANGLE_LAST() {
        return VIPS_ANGLE_LAST;
    }
    private static final int VIPS_ANGLE45_D0 = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ANGLE45_D0 = 0
     * }
     */
    public static int VIPS_ANGLE45_D0() {
        return VIPS_ANGLE45_D0;
    }
    private static final int VIPS_ANGLE45_D45 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ANGLE45_D45 = 1
     * }
     */
    public static int VIPS_ANGLE45_D45() {
        return VIPS_ANGLE45_D45;
    }
    private static final int VIPS_ANGLE45_D90 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ANGLE45_D90 = 2
     * }
     */
    public static int VIPS_ANGLE45_D90() {
        return VIPS_ANGLE45_D90;
    }
    private static final int VIPS_ANGLE45_D135 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ANGLE45_D135 = 3
     * }
     */
    public static int VIPS_ANGLE45_D135() {
        return VIPS_ANGLE45_D135;
    }
    private static final int VIPS_ANGLE45_D180 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ANGLE45_D180 = 4
     * }
     */
    public static int VIPS_ANGLE45_D180() {
        return VIPS_ANGLE45_D180;
    }
    private static final int VIPS_ANGLE45_D225 = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ANGLE45_D225 = 5
     * }
     */
    public static int VIPS_ANGLE45_D225() {
        return VIPS_ANGLE45_D225;
    }
    private static final int VIPS_ANGLE45_D270 = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ANGLE45_D270 = 6
     * }
     */
    public static int VIPS_ANGLE45_D270() {
        return VIPS_ANGLE45_D270;
    }
    private static final int VIPS_ANGLE45_D315 = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ANGLE45_D315 = 7
     * }
     */
    public static int VIPS_ANGLE45_D315() {
        return VIPS_ANGLE45_D315;
    }
    private static final int VIPS_ANGLE45_LAST = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ANGLE45_LAST = 8
     * }
     */
    public static int VIPS_ANGLE45_LAST() {
        return VIPS_ANGLE45_LAST;
    }
    private static final int VIPS_INTERESTING_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERESTING_NONE = 0
     * }
     */
    public static int VIPS_INTERESTING_NONE() {
        return VIPS_INTERESTING_NONE;
    }
    private static final int VIPS_INTERESTING_CENTRE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERESTING_CENTRE = 1
     * }
     */
    public static int VIPS_INTERESTING_CENTRE() {
        return VIPS_INTERESTING_CENTRE;
    }
    private static final int VIPS_INTERESTING_ENTROPY = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERESTING_ENTROPY = 2
     * }
     */
    public static int VIPS_INTERESTING_ENTROPY() {
        return VIPS_INTERESTING_ENTROPY;
    }
    private static final int VIPS_INTERESTING_ATTENTION = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERESTING_ATTENTION = 3
     * }
     */
    public static int VIPS_INTERESTING_ATTENTION() {
        return VIPS_INTERESTING_ATTENTION;
    }
    private static final int VIPS_INTERESTING_LOW = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERESTING_LOW = 4
     * }
     */
    public static int VIPS_INTERESTING_LOW() {
        return VIPS_INTERESTING_LOW;
    }
    private static final int VIPS_INTERESTING_HIGH = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERESTING_HIGH = 5
     * }
     */
    public static int VIPS_INTERESTING_HIGH() {
        return VIPS_INTERESTING_HIGH;
    }
    private static final int VIPS_INTERESTING_ALL = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERESTING_ALL = 6
     * }
     */
    public static int VIPS_INTERESTING_ALL() {
        return VIPS_INTERESTING_ALL;
    }
    private static final int VIPS_INTERESTING_LAST = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERESTING_LAST = 7
     * }
     */
    public static int VIPS_INTERESTING_LAST() {
        return VIPS_INTERESTING_LAST;
    }
    private static final int VIPS_BLEND_MODE_CLEAR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_CLEAR = 0
     * }
     */
    public static int VIPS_BLEND_MODE_CLEAR() {
        return VIPS_BLEND_MODE_CLEAR;
    }
    private static final int VIPS_BLEND_MODE_SOURCE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_SOURCE = 1
     * }
     */
    public static int VIPS_BLEND_MODE_SOURCE() {
        return VIPS_BLEND_MODE_SOURCE;
    }
    private static final int VIPS_BLEND_MODE_OVER = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_OVER = 2
     * }
     */
    public static int VIPS_BLEND_MODE_OVER() {
        return VIPS_BLEND_MODE_OVER;
    }
    private static final int VIPS_BLEND_MODE_IN = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_IN = 3
     * }
     */
    public static int VIPS_BLEND_MODE_IN() {
        return VIPS_BLEND_MODE_IN;
    }
    private static final int VIPS_BLEND_MODE_OUT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_OUT = 4
     * }
     */
    public static int VIPS_BLEND_MODE_OUT() {
        return VIPS_BLEND_MODE_OUT;
    }
    private static final int VIPS_BLEND_MODE_ATOP = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_ATOP = 5
     * }
     */
    public static int VIPS_BLEND_MODE_ATOP() {
        return VIPS_BLEND_MODE_ATOP;
    }
    private static final int VIPS_BLEND_MODE_DEST = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_DEST = 6
     * }
     */
    public static int VIPS_BLEND_MODE_DEST() {
        return VIPS_BLEND_MODE_DEST;
    }
    private static final int VIPS_BLEND_MODE_DEST_OVER = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_DEST_OVER = 7
     * }
     */
    public static int VIPS_BLEND_MODE_DEST_OVER() {
        return VIPS_BLEND_MODE_DEST_OVER;
    }
    private static final int VIPS_BLEND_MODE_DEST_IN = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_DEST_IN = 8
     * }
     */
    public static int VIPS_BLEND_MODE_DEST_IN() {
        return VIPS_BLEND_MODE_DEST_IN;
    }
    private static final int VIPS_BLEND_MODE_DEST_OUT = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_DEST_OUT = 9
     * }
     */
    public static int VIPS_BLEND_MODE_DEST_OUT() {
        return VIPS_BLEND_MODE_DEST_OUT;
    }
    private static final int VIPS_BLEND_MODE_DEST_ATOP = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_DEST_ATOP = 10
     * }
     */
    public static int VIPS_BLEND_MODE_DEST_ATOP() {
        return VIPS_BLEND_MODE_DEST_ATOP;
    }
    private static final int VIPS_BLEND_MODE_XOR = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_XOR = 11
     * }
     */
    public static int VIPS_BLEND_MODE_XOR() {
        return VIPS_BLEND_MODE_XOR;
    }
    private static final int VIPS_BLEND_MODE_ADD = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_ADD = 12
     * }
     */
    public static int VIPS_BLEND_MODE_ADD() {
        return VIPS_BLEND_MODE_ADD;
    }
    private static final int VIPS_BLEND_MODE_SATURATE = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_SATURATE = 13
     * }
     */
    public static int VIPS_BLEND_MODE_SATURATE() {
        return VIPS_BLEND_MODE_SATURATE;
    }
    private static final int VIPS_BLEND_MODE_MULTIPLY = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_MULTIPLY = 14
     * }
     */
    public static int VIPS_BLEND_MODE_MULTIPLY() {
        return VIPS_BLEND_MODE_MULTIPLY;
    }
    private static final int VIPS_BLEND_MODE_SCREEN = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_SCREEN = 15
     * }
     */
    public static int VIPS_BLEND_MODE_SCREEN() {
        return VIPS_BLEND_MODE_SCREEN;
    }
    private static final int VIPS_BLEND_MODE_OVERLAY = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_OVERLAY = 16
     * }
     */
    public static int VIPS_BLEND_MODE_OVERLAY() {
        return VIPS_BLEND_MODE_OVERLAY;
    }
    private static final int VIPS_BLEND_MODE_DARKEN = (int)17L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_DARKEN = 17
     * }
     */
    public static int VIPS_BLEND_MODE_DARKEN() {
        return VIPS_BLEND_MODE_DARKEN;
    }
    private static final int VIPS_BLEND_MODE_LIGHTEN = (int)18L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_LIGHTEN = 18
     * }
     */
    public static int VIPS_BLEND_MODE_LIGHTEN() {
        return VIPS_BLEND_MODE_LIGHTEN;
    }
    private static final int VIPS_BLEND_MODE_COLOUR_DODGE = (int)19L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_COLOUR_DODGE = 19
     * }
     */
    public static int VIPS_BLEND_MODE_COLOUR_DODGE() {
        return VIPS_BLEND_MODE_COLOUR_DODGE;
    }
    private static final int VIPS_BLEND_MODE_COLOUR_BURN = (int)20L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_COLOUR_BURN = 20
     * }
     */
    public static int VIPS_BLEND_MODE_COLOUR_BURN() {
        return VIPS_BLEND_MODE_COLOUR_BURN;
    }
    private static final int VIPS_BLEND_MODE_HARD_LIGHT = (int)21L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_HARD_LIGHT = 21
     * }
     */
    public static int VIPS_BLEND_MODE_HARD_LIGHT() {
        return VIPS_BLEND_MODE_HARD_LIGHT;
    }
    private static final int VIPS_BLEND_MODE_SOFT_LIGHT = (int)22L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_SOFT_LIGHT = 22
     * }
     */
    public static int VIPS_BLEND_MODE_SOFT_LIGHT() {
        return VIPS_BLEND_MODE_SOFT_LIGHT;
    }
    private static final int VIPS_BLEND_MODE_DIFFERENCE = (int)23L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_DIFFERENCE = 23
     * }
     */
    public static int VIPS_BLEND_MODE_DIFFERENCE() {
        return VIPS_BLEND_MODE_DIFFERENCE;
    }
    private static final int VIPS_BLEND_MODE_EXCLUSION = (int)24L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_EXCLUSION = 24
     * }
     */
    public static int VIPS_BLEND_MODE_EXCLUSION() {
        return VIPS_BLEND_MODE_EXCLUSION;
    }
    private static final int VIPS_BLEND_MODE_LAST = (int)25L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_LAST = 25
     * }
     */
    public static int VIPS_BLEND_MODE_LAST() {
        return VIPS_BLEND_MODE_LAST;
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_cache(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_cache {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                VipsRaw.C_INT,
                VipsRaw.C_POINTER,
                VipsRaw.C_POINTER
            );
        private static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_cache");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_cache(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_cache(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_cache makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_cache(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_cache", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_arrayjoin(VipsImage **in, VipsImage **out, int n, ...)
     * }
     */
    public static class vips_arrayjoin {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                VipsRaw.C_INT,
                VipsRaw.C_POINTER,
                VipsRaw.C_POINTER,
                VipsRaw.C_INT
            );
        private static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_arrayjoin");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_arrayjoin(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_arrayjoin(VipsImage **in, VipsImage **out, int n, ...)
         * }
         */
        public static vips_arrayjoin makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_arrayjoin(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, int n, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_arrayjoin", in, out, n, x3);
                }
                return (int)spreader.invokeExact(in, out, n, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }
    private static final int VIPS_COMBINE_MAX = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_COMBINE_MAX = 0
     * }
     */
    public static int VIPS_COMBINE_MAX() {
        return VIPS_COMBINE_MAX;
    }
    private static final int VIPS_COMBINE_SUM = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_COMBINE_SUM = 1
     * }
     */
    public static int VIPS_COMBINE_SUM() {
        return VIPS_COMBINE_SUM;
    }
    private static final int VIPS_COMBINE_MIN = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_COMBINE_MIN = 2
     * }
     */
    public static int VIPS_COMBINE_MIN() {
        return VIPS_COMBINE_MIN;
    }
    private static final int VIPS_COMBINE_LAST = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_COMBINE_LAST = 3
     * }
     */
    public static int VIPS_COMBINE_LAST() {
        return VIPS_COMBINE_LAST;
    }
    private static final int VIPS_OPERATION_MORPHOLOGY_ERODE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_MORPHOLOGY_ERODE = 0
     * }
     */
    public static int VIPS_OPERATION_MORPHOLOGY_ERODE() {
        return VIPS_OPERATION_MORPHOLOGY_ERODE;
    }
    private static final int VIPS_OPERATION_MORPHOLOGY_DILATE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_MORPHOLOGY_DILATE = 1
     * }
     */
    public static int VIPS_OPERATION_MORPHOLOGY_DILATE() {
        return VIPS_OPERATION_MORPHOLOGY_DILATE;
    }
    private static final int VIPS_OPERATION_MORPHOLOGY_LAST = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_MORPHOLOGY_LAST = 2
     * }
     */
    public static int VIPS_OPERATION_MORPHOLOGY_LAST() {
        return VIPS_OPERATION_MORPHOLOGY_LAST;
    }
    private static final int VIPS_KERNEL_NEAREST = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_KERNEL_NEAREST = 0
     * }
     */
    public static int VIPS_KERNEL_NEAREST() {
        return VIPS_KERNEL_NEAREST;
    }
    private static final int VIPS_KERNEL_LINEAR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_KERNEL_LINEAR = 1
     * }
     */
    public static int VIPS_KERNEL_LINEAR() {
        return VIPS_KERNEL_LINEAR;
    }
    private static final int VIPS_KERNEL_CUBIC = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_KERNEL_CUBIC = 2
     * }
     */
    public static int VIPS_KERNEL_CUBIC() {
        return VIPS_KERNEL_CUBIC;
    }
    private static final int VIPS_KERNEL_MITCHELL = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_KERNEL_MITCHELL = 3
     * }
     */
    public static int VIPS_KERNEL_MITCHELL() {
        return VIPS_KERNEL_MITCHELL;
    }
    private static final int VIPS_KERNEL_LANCZOS2 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_KERNEL_LANCZOS2 = 4
     * }
     */
    public static int VIPS_KERNEL_LANCZOS2() {
        return VIPS_KERNEL_LANCZOS2;
    }
    private static final int VIPS_KERNEL_LANCZOS3 = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_KERNEL_LANCZOS3 = 5
     * }
     */
    public static int VIPS_KERNEL_LANCZOS3() {
        return VIPS_KERNEL_LANCZOS3;
    }
    private static final int VIPS_KERNEL_LAST = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_KERNEL_LAST = 6
     * }
     */
    public static int VIPS_KERNEL_LAST() {
        return VIPS_KERNEL_LAST;
    }
    private static final int VIPS_SIZE_BOTH = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_SIZE_BOTH = 0
     * }
     */
    public static int VIPS_SIZE_BOTH() {
        return VIPS_SIZE_BOTH;
    }
    private static final int VIPS_SIZE_UP = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_SIZE_UP = 1
     * }
     */
    public static int VIPS_SIZE_UP() {
        return VIPS_SIZE_UP;
    }
    private static final int VIPS_SIZE_DOWN = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_SIZE_DOWN = 2
     * }
     */
    public static int VIPS_SIZE_DOWN() {
        return VIPS_SIZE_DOWN;
    }
    private static final int VIPS_SIZE_FORCE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_SIZE_FORCE = 3
     * }
     */
    public static int VIPS_SIZE_FORCE() {
        return VIPS_SIZE_FORCE;
    }
    private static final int VIPS_SIZE_LAST = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_SIZE_LAST = 4
     * }
     */
    public static int VIPS_SIZE_LAST() {
        return VIPS_SIZE_LAST;
    }
    private static final int VIPS_INTENT_PERCEPTUAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTENT_PERCEPTUAL = 0
     * }
     */
    public static int VIPS_INTENT_PERCEPTUAL() {
        return VIPS_INTENT_PERCEPTUAL;
    }
    private static final int VIPS_INTENT_RELATIVE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTENT_RELATIVE = 1
     * }
     */
    public static int VIPS_INTENT_RELATIVE() {
        return VIPS_INTENT_RELATIVE;
    }
    private static final int VIPS_INTENT_SATURATION = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTENT_SATURATION = 2
     * }
     */
    public static int VIPS_INTENT_SATURATION() {
        return VIPS_INTENT_SATURATION;
    }
    private static final int VIPS_INTENT_ABSOLUTE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTENT_ABSOLUTE = 3
     * }
     */
    public static int VIPS_INTENT_ABSOLUTE() {
        return VIPS_INTENT_ABSOLUTE;
    }
    private static final int VIPS_INTENT_LAST = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTENT_LAST = 4
     * }
     */
    public static int VIPS_INTENT_LAST() {
        return VIPS_INTENT_LAST;
    }
    private static final int VIPS_PCS_LAB = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_PCS_LAB = 0
     * }
     */
    public static int VIPS_PCS_LAB() {
        return VIPS_PCS_LAB;
    }
    private static final int VIPS_PCS_XYZ = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_PCS_XYZ = 1
     * }
     */
    public static int VIPS_PCS_XYZ() {
        return VIPS_PCS_XYZ;
    }
    private static final int VIPS_PCS_LAST = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_PCS_LAST = 2
     * }
     */
    public static int VIPS_PCS_LAST() {
        return VIPS_PCS_LAST;
    }
    private static final int VIPS_COMBINE_MODE_SET = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_COMBINE_MODE_SET = 0
     * }
     */
    public static int VIPS_COMBINE_MODE_SET() {
        return VIPS_COMBINE_MODE_SET;
    }
    private static final int VIPS_COMBINE_MODE_ADD = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_COMBINE_MODE_ADD = 1
     * }
     */
    public static int VIPS_COMBINE_MODE_ADD() {
        return VIPS_COMBINE_MODE_ADD;
    }
    private static final int VIPS_COMBINE_MODE_LAST = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_COMBINE_MODE_LAST = 2
     * }
     */
    public static int VIPS_COMBINE_MODE_LAST() {
        return VIPS_COMBINE_MODE_LAST;
    }
    private static final int VIPS_TEXT_WRAP_WORD = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_TEXT_WRAP_WORD = 0
     * }
     */
    public static int VIPS_TEXT_WRAP_WORD() {
        return VIPS_TEXT_WRAP_WORD;
    }
    private static final int VIPS_TEXT_WRAP_CHAR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_TEXT_WRAP_CHAR = 1
     * }
     */
    public static int VIPS_TEXT_WRAP_CHAR() {
        return VIPS_TEXT_WRAP_CHAR;
    }
    private static final int VIPS_TEXT_WRAP_WORD_CHAR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_TEXT_WRAP_WORD_CHAR = 2
     * }
     */
    public static int VIPS_TEXT_WRAP_WORD_CHAR() {
        return VIPS_TEXT_WRAP_WORD_CHAR;
    }
    private static final int VIPS_TEXT_WRAP_NONE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_TEXT_WRAP_NONE = 3
     * }
     */
    public static int VIPS_TEXT_WRAP_NONE() {
        return VIPS_TEXT_WRAP_NONE;
    }
    private static final int VIPS_TEXT_WRAP_LAST = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_TEXT_WRAP_LAST = 4
     * }
     */
    public static int VIPS_TEXT_WRAP_LAST() {
        return VIPS_TEXT_WRAP_LAST;
    }

    private static class vips_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_init");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_init(const char *argv0)
     * }
     */
    public static FunctionDescriptor vips_init$descriptor() {
        return vips_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_init(const char *argv0)
     * }
     */
    public static MethodHandle vips_init$handle() {
        return vips_init.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_init(const char *argv0)
     * }
     */
    public static MemorySegment vips_init$address() {
        return vips_init.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_init(const char *argv0)
     * }
     */
    public static int vips_init(MemorySegment argv0) {
        var mh$ = vips_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_init", argv0);
            }
            return (int)mh$.invokeExact(argv0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_shutdown {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_shutdown");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_shutdown()
     * }
     */
    public static FunctionDescriptor vips_shutdown$descriptor() {
        return vips_shutdown.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_shutdown()
     * }
     */
    public static MethodHandle vips_shutdown$handle() {
        return vips_shutdown.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_shutdown()
     * }
     */
    public static MemorySegment vips_shutdown$address() {
        return vips_shutdown.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_shutdown()
     * }
     */
    public static void vips_shutdown() {
        var mh$ = vips_shutdown.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_shutdown");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_leak_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_leak_set");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_leak_set(gboolean leak)
     * }
     */
    public static FunctionDescriptor vips_leak_set$descriptor() {
        return vips_leak_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_leak_set(gboolean leak)
     * }
     */
    public static MethodHandle vips_leak_set$handle() {
        return vips_leak_set.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_leak_set(gboolean leak)
     * }
     */
    public static MemorySegment vips_leak_set$address() {
        return vips_leak_set.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_leak_set(gboolean leak)
     * }
     */
    public static void vips_leak_set(int leak) {
        var mh$ = vips_leak_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_leak_set", leak);
            }
            mh$.invokeExact(leak);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_block_untrusted_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_block_untrusted_set");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_block_untrusted_set(gboolean state)
     * }
     */
    public static FunctionDescriptor vips_block_untrusted_set$descriptor() {
        return vips_block_untrusted_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_block_untrusted_set(gboolean state)
     * }
     */
    public static MethodHandle vips_block_untrusted_set$handle() {
        return vips_block_untrusted_set.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_block_untrusted_set(gboolean state)
     * }
     */
    public static MemorySegment vips_block_untrusted_set$address() {
        return vips_block_untrusted_set.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_block_untrusted_set(gboolean state)
     * }
     */
    public static void vips_block_untrusted_set(int state) {
        var mh$ = vips_block_untrusted_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_block_untrusted_set", state);
            }
            mh$.invokeExact(state);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_version_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_POINTER    );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_version_string");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *vips_version_string()
     * }
     */
    public static FunctionDescriptor vips_version_string$descriptor() {
        return vips_version_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *vips_version_string()
     * }
     */
    public static MethodHandle vips_version_string$handle() {
        return vips_version_string.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *vips_version_string()
     * }
     */
    public static MemorySegment vips_version_string$address() {
        return vips_version_string.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *vips_version_string()
     * }
     */
    public static MemorySegment vips_version_string() {
        var mh$ = vips_version_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_version_string");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_version {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_INT
        );

        public static final MemorySegment ADDR = VipsRaw.findOrThrow("vips_version");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_version(int flag)
     * }
     */
    public static FunctionDescriptor vips_version$descriptor() {
        return vips_version.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_version(int flag)
     * }
     */
    public static MethodHandle vips_version$handle() {
        return vips_version.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_version(int flag)
     * }
     */
    public static MemorySegment vips_version$address() {
        return vips_version.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_version(int flag)
     * }
     */
    public static int vips_version(int flag) {
        var mh$ = vips_version.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_version", flag);
            }
            return (int)mh$.invokeExact(flag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int G_TYPE_FUNDAMENTAL_SHIFT = (int)2L;
    /**
     * {@snippet lang=c :
     * #define G_TYPE_FUNDAMENTAL_SHIFT 2
     * }
     */
    public static int G_TYPE_FUNDAMENTAL_SHIFT() {
        return G_TYPE_FUNDAMENTAL_SHIFT;
    }
    private static final int G_TYPE_FUNDAMENTAL_MAX = (int)1020L;
    /**
     * {@snippet lang=c :
     * #define G_TYPE_FUNDAMENTAL_MAX 1020
     * }
     */
    public static int G_TYPE_FUNDAMENTAL_MAX() {
        return G_TYPE_FUNDAMENTAL_MAX;
    }
    private static final long G_TYPE_INVALID = 0L;
    /**
     * {@snippet lang=c :
     * #define G_TYPE_INVALID 0
     * }
     */
    public static long G_TYPE_INVALID() {
        return G_TYPE_INVALID;
    }
    private static final long G_TYPE_NONE = 4L;
    /**
     * {@snippet lang=c :
     * #define G_TYPE_NONE 4
     * }
     */
    public static long G_TYPE_NONE() {
        return G_TYPE_NONE;
    }
    private static final long G_TYPE_INTERFACE = 8L;
    /**
     * {@snippet lang=c :
     * #define G_TYPE_INTERFACE 8
     * }
     */
    public static long G_TYPE_INTERFACE() {
        return G_TYPE_INTERFACE;
    }
    private static final long G_TYPE_CHAR = 12L;
    /**
     * {@snippet lang=c :
     * #define G_TYPE_CHAR 12
     * }
     */
    public static long G_TYPE_CHAR() {
        return G_TYPE_CHAR;
    }
    private static final long G_TYPE_UCHAR = 16L;
    /**
     * {@snippet lang=c :
     * #define G_TYPE_UCHAR 16
     * }
     */
    public static long G_TYPE_UCHAR() {
        return G_TYPE_UCHAR;
    }
    private static final long G_TYPE_BOOLEAN = 20L;
    /**
     * {@snippet lang=c :
     * #define G_TYPE_BOOLEAN 20
     * }
     */
    public static long G_TYPE_BOOLEAN() {
        return G_TYPE_BOOLEAN;
    }
    private static final long G_TYPE_INT = 24L;
    /**
     * {@snippet lang=c :
     * #define G_TYPE_INT 24
     * }
     */
    public static long G_TYPE_INT() {
        return G_TYPE_INT;
    }
    private static final long G_TYPE_UINT = 28L;
    /**
     * {@snippet lang=c :
     * #define G_TYPE_UINT 28
     * }
     */
    public static long G_TYPE_UINT() {
        return G_TYPE_UINT;
    }
    private static final long G_TYPE_LONG = 32L;
    /**
     * {@snippet lang=c :
     * #define G_TYPE_LONG 32
     * }
     */
    public static long G_TYPE_LONG() {
        return G_TYPE_LONG;
    }
    private static final long G_TYPE_ULONG = 36L;
    /**
     * {@snippet lang=c :
     * #define G_TYPE_ULONG 36
     * }
     */
    public static long G_TYPE_ULONG() {
        return G_TYPE_ULONG;
    }
    private static final long G_TYPE_INT64 = 40L;
    /**
     * {@snippet lang=c :
     * #define G_TYPE_INT64 40
     * }
     */
    public static long G_TYPE_INT64() {
        return G_TYPE_INT64;
    }
    private static final long G_TYPE_UINT64 = 44L;
    /**
     * {@snippet lang=c :
     * #define G_TYPE_UINT64 44
     * }
     */
    public static long G_TYPE_UINT64() {
        return G_TYPE_UINT64;
    }
    private static final long G_TYPE_ENUM = 48L;
    /**
     * {@snippet lang=c :
     * #define G_TYPE_ENUM 48
     * }
     */
    public static long G_TYPE_ENUM() {
        return G_TYPE_ENUM;
    }
    private static final long G_TYPE_FLAGS = 52L;
    /**
     * {@snippet lang=c :
     * #define G_TYPE_FLAGS 52
     * }
     */
    public static long G_TYPE_FLAGS() {
        return G_TYPE_FLAGS;
    }
    private static final long G_TYPE_FLOAT = 56L;
    /**
     * {@snippet lang=c :
     * #define G_TYPE_FLOAT 56
     * }
     */
    public static long G_TYPE_FLOAT() {
        return G_TYPE_FLOAT;
    }
    private static final long G_TYPE_DOUBLE = 60L;
    /**
     * {@snippet lang=c :
     * #define G_TYPE_DOUBLE 60
     * }
     */
    public static long G_TYPE_DOUBLE() {
        return G_TYPE_DOUBLE;
    }
    private static final long G_TYPE_STRING = 64L;
    /**
     * {@snippet lang=c :
     * #define G_TYPE_STRING 64
     * }
     */
    public static long G_TYPE_STRING() {
        return G_TYPE_STRING;
    }
    private static final long G_TYPE_POINTER = 68L;
    /**
     * {@snippet lang=c :
     * #define G_TYPE_POINTER 68
     * }
     */
    public static long G_TYPE_POINTER() {
        return G_TYPE_POINTER;
    }
    private static final long G_TYPE_BOXED = 72L;
    /**
     * {@snippet lang=c :
     * #define G_TYPE_BOXED 72
     * }
     */
    public static long G_TYPE_BOXED() {
        return G_TYPE_BOXED;
    }
    private static final long G_TYPE_PARAM = 76L;
    /**
     * {@snippet lang=c :
     * #define G_TYPE_PARAM 76
     * }
     */
    public static long G_TYPE_PARAM() {
        return G_TYPE_PARAM;
    }
    private static final long G_TYPE_OBJECT = 80L;
    /**
     * {@snippet lang=c :
     * #define G_TYPE_OBJECT 80
     * }
     */
    public static long G_TYPE_OBJECT() {
        return G_TYPE_OBJECT;
    }
    private static final long G_TYPE_VARIANT = 84L;
    /**
     * {@snippet lang=c :
     * #define G_TYPE_VARIANT 84
     * }
     */
    public static long G_TYPE_VARIANT() {
        return G_TYPE_VARIANT;
    }
    private static final int G_TYPE_RESERVED_GLIB_FIRST = (int)22L;
    /**
     * {@snippet lang=c :
     * #define G_TYPE_RESERVED_GLIB_FIRST 22
     * }
     */
    public static int G_TYPE_RESERVED_GLIB_FIRST() {
        return G_TYPE_RESERVED_GLIB_FIRST;
    }
    private static final int G_TYPE_RESERVED_GLIB_LAST = (int)31L;
    /**
     * {@snippet lang=c :
     * #define G_TYPE_RESERVED_GLIB_LAST 31
     * }
     */
    public static int G_TYPE_RESERVED_GLIB_LAST() {
        return G_TYPE_RESERVED_GLIB_LAST;
    }
    private static final int G_TYPE_RESERVED_BSE_FIRST = (int)32L;
    /**
     * {@snippet lang=c :
     * #define G_TYPE_RESERVED_BSE_FIRST 32
     * }
     */
    public static int G_TYPE_RESERVED_BSE_FIRST() {
        return G_TYPE_RESERVED_BSE_FIRST;
    }
    private static final int G_TYPE_RESERVED_BSE_LAST = (int)48L;
    /**
     * {@snippet lang=c :
     * #define G_TYPE_RESERVED_BSE_LAST 48
     * }
     */
    public static int G_TYPE_RESERVED_BSE_LAST() {
        return G_TYPE_RESERVED_BSE_LAST;
    }
    private static final int G_TYPE_RESERVED_USER_FIRST = (int)49L;
    /**
     * {@snippet lang=c :
     * #define G_TYPE_RESERVED_USER_FIRST 49
     * }
     */
    public static int G_TYPE_RESERVED_USER_FIRST() {
        return G_TYPE_RESERVED_USER_FIRST;
    }
    private static final long G_TYPE_FLAG_RESERVED_ID_BIT = 1L;
    /**
     * {@snippet lang=c :
     * #define G_TYPE_FLAG_RESERVED_ID_BIT 1
     * }
     */
    public static long G_TYPE_FLAG_RESERVED_ID_BIT() {
        return G_TYPE_FLAG_RESERVED_ID_BIT;
    }
    private static final int G_VALUE_NOCOPY_CONTENTS = (int)134217728L;
    /**
     * {@snippet lang=c :
     * #define G_VALUE_NOCOPY_CONTENTS 134217728
     * }
     */
    public static int G_VALUE_NOCOPY_CONTENTS() {
        return G_VALUE_NOCOPY_CONTENTS;
    }
    private static final int G_VALUE_INTERNED_STRING = (int)268435456L;
    /**
     * {@snippet lang=c :
     * #define G_VALUE_INTERNED_STRING 268435456
     * }
     */
    public static int G_VALUE_INTERNED_STRING() {
        return G_VALUE_INTERNED_STRING;
    }
    /**
     * {@snippet lang=c :
     * #define G_FILE_ATTRIBUTE_ETAG_VALUE "etag::value"
     * }
     */
    public static MemorySegment G_FILE_ATTRIBUTE_ETAG_VALUE() {
        class Holder {
            static final MemorySegment G_FILE_ATTRIBUTE_ETAG_VALUE
                = VipsRaw.LIBRARY_ARENA.allocateFrom("etag::value");
        }
        return Holder.G_FILE_ATTRIBUTE_ETAG_VALUE;
    }
    private static final double VIPS_PI = 3.141592653589793d;
    /**
     * {@snippet lang=c :
     * #define VIPS_PI 3.141592653589793
     * }
     */
    public static double VIPS_PI() {
        return VIPS_PI;
    }
    private static final int VIPS_PATH_MAX = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define VIPS_PATH_MAX 4096
     * }
     */
    public static int VIPS_PATH_MAX() {
        return VIPS_PATH_MAX;
    }
    private static final int VIPS_ARGUMENT_REQUIRED_INPUT = (int)19L;
    /**
     * {@snippet lang=c :
     * #define VIPS_ARGUMENT_REQUIRED_INPUT 19
     * }
     */
    public static int VIPS_ARGUMENT_REQUIRED_INPUT() {
        return VIPS_ARGUMENT_REQUIRED_INPUT;
    }
    private static final int VIPS_ARGUMENT_OPTIONAL_INPUT = (int)18L;
    /**
     * {@snippet lang=c :
     * #define VIPS_ARGUMENT_OPTIONAL_INPUT 18
     * }
     */
    public static int VIPS_ARGUMENT_OPTIONAL_INPUT() {
        return VIPS_ARGUMENT_OPTIONAL_INPUT;
    }
    private static final int VIPS_ARGUMENT_REQUIRED_OUTPUT = (int)35L;
    /**
     * {@snippet lang=c :
     * #define VIPS_ARGUMENT_REQUIRED_OUTPUT 35
     * }
     */
    public static int VIPS_ARGUMENT_REQUIRED_OUTPUT() {
        return VIPS_ARGUMENT_REQUIRED_OUTPUT;
    }
    private static final int VIPS_ARGUMENT_OPTIONAL_OUTPUT = (int)34L;
    /**
     * {@snippet lang=c :
     * #define VIPS_ARGUMENT_OPTIONAL_OUTPUT 34
     * }
     */
    public static int VIPS_ARGUMENT_OPTIONAL_OUTPUT() {
        return VIPS_ARGUMENT_OPTIONAL_OUTPUT;
    }
    private static final int VIPS_TARGET_BUFFER_SIZE = (int)8500L;
    /**
     * {@snippet lang=c :
     * #define VIPS_TARGET_BUFFER_SIZE 8500
     * }
     */
    public static int VIPS_TARGET_BUFFER_SIZE() {
        return VIPS_TARGET_BUFFER_SIZE;
    }
    private static final int VIPS_TARGET_CUSTOM_BUFFER_SIZE = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define VIPS_TARGET_CUSTOM_BUFFER_SIZE 4096
     * }
     */
    public static int VIPS_TARGET_CUSTOM_BUFFER_SIZE() {
        return VIPS_TARGET_CUSTOM_BUFFER_SIZE;
    }
    private static final int VIPS_SBUF_BUFFER_SIZE = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define VIPS_SBUF_BUFFER_SIZE 4096
     * }
     */
    public static int VIPS_SBUF_BUFFER_SIZE() {
        return VIPS_SBUF_BUFFER_SIZE;
    }
    /**
     * {@snippet lang=c :
     * #define VIPS_VERSION "8.15.3"
     * }
     */
    public static MemorySegment VIPS_VERSION() {
        class Holder {
            static final MemorySegment VIPS_VERSION
                = VipsRaw.LIBRARY_ARENA.allocateFrom("8.15.3");
        }
        return Holder.VIPS_VERSION;
    }
    /**
     * {@snippet lang=c :
     * #define VIPS_VERSION_STRING "8.15.3"
     * }
     */
    public static MemorySegment VIPS_VERSION_STRING() {
        class Holder {
            static final MemorySegment VIPS_VERSION_STRING
                = VipsRaw.LIBRARY_ARENA.allocateFrom("8.15.3");
        }
        return Holder.VIPS_VERSION_STRING;
    }
    private static final int VIPS_MAJOR_VERSION = (int)8L;
    /**
     * {@snippet lang=c :
     * #define VIPS_MAJOR_VERSION 8
     * }
     */
    public static int VIPS_MAJOR_VERSION() {
        return VIPS_MAJOR_VERSION;
    }
    private static final int VIPS_MINOR_VERSION = (int)15L;
    /**
     * {@snippet lang=c :
     * #define VIPS_MINOR_VERSION 15
     * }
     */
    public static int VIPS_MINOR_VERSION() {
        return VIPS_MINOR_VERSION;
    }
    private static final int VIPS_MICRO_VERSION = (int)3L;
    /**
     * {@snippet lang=c :
     * #define VIPS_MICRO_VERSION 3
     * }
     */
    public static int VIPS_MICRO_VERSION() {
        return VIPS_MICRO_VERSION;
    }
    private static final int VIPS_LIBRARY_CURRENT = (int)59L;
    /**
     * {@snippet lang=c :
     * #define VIPS_LIBRARY_CURRENT 59
     * }
     */
    public static int VIPS_LIBRARY_CURRENT() {
        return VIPS_LIBRARY_CURRENT;
    }
    private static final int VIPS_LIBRARY_REVISION = (int)3L;
    /**
     * {@snippet lang=c :
     * #define VIPS_LIBRARY_REVISION 3
     * }
     */
    public static int VIPS_LIBRARY_REVISION() {
        return VIPS_LIBRARY_REVISION;
    }
    private static final int VIPS_LIBRARY_AGE = (int)17L;
    /**
     * {@snippet lang=c :
     * #define VIPS_LIBRARY_AGE 17
     * }
     */
    public static int VIPS_LIBRARY_AGE() {
        return VIPS_LIBRARY_AGE;
    }
    /**
     * {@snippet lang=c :
     * #define VIPS_CONFIG "enable debug: false
     * enable deprecated: true
     * enable modules: true
     * enable cplusplus: true
     * enable RAD load/save: true
     * enable Analyze7 load/save: true
     * enable PPM load/save: true
     * enable GIF load: true
     * use fftw for FFTs: true
     * SIMD support with highway: true
     * accelerate loops with ORC: false
     * ICC profile support with lcms: true
     * zlib: true
     * text rendering with pangocairo: true
     * font file support with fontconfig: true
     * EXIF metadata support with libexif: true
     * JPEG load/save with libjpeg: true
     * JXL load/save with libjxl: true (dynamic module: true)
     * JPEG2000 load/save with OpenJPEG: true
     * PNG load/save with libspng: true
     * PNG load/save with libpng: false
     * selected quantisation package: imagequant
     * TIFF load/save with libtiff: true
     * image pyramid save with libarchive: true
     * HEIC/AVIF load/save with libheif: true (dynamic module: true)
     * WebP load/save with libwebp: true
     * PDF load with PDFium: false
     * PDF load with poppler-glib: true (dynamic module: true)
     * SVG load with librsvg: true
     * EXR load with OpenEXR: true
     * OpenSlide load: true (dynamic module: true)
     * Matlab load with libmatio: true
     * NIfTI load/save with niftiio: false
     * FITS load/save with cfitsio: true
     * GIF save with cgif: true
     * selected Magick package: MagickCore (dynamic module: true)
     * Magick API version: magick7
     * Magick load: true
     * Magick save: true"
     * }
     */
    public static MemorySegment VIPS_CONFIG() {
        class Holder {
            static final MemorySegment VIPS_CONFIG
                = VipsRaw.LIBRARY_ARENA.allocateFrom("enable debug: false\nenable deprecated: true\nenable modules: true\nenable cplusplus: true\nenable RAD load/save: true\nenable Analyze7 load/save: true\nenable PPM load/save: true\nenable GIF load: true\nuse fftw for FFTs: true\nSIMD support with highway: true\naccelerate loops with ORC: false\nICC profile support with lcms: true\nzlib: true\ntext rendering with pangocairo: true\nfont file support with fontconfig: true\nEXIF metadata support with libexif: true\nJPEG load/save with libjpeg: true\nJXL load/save with libjxl: true (dynamic module: true)\nJPEG2000 load/save with OpenJPEG: true\nPNG load/save with libspng: true\nPNG load/save with libpng: false\nselected quantisation package: imagequant\nTIFF load/save with libtiff: true\nimage pyramid save with libarchive: true\nHEIC/AVIF load/save with libheif: true (dynamic module: true)\nWebP load/save with libwebp: true\nPDF load with PDFium: false\nPDF load with poppler-glib: true (dynamic module: true)\nSVG load with librsvg: true\nEXR load with OpenEXR: true\nOpenSlide load: true (dynamic module: true)\nMatlab load with libmatio: true\nNIfTI load/save with niftiio: false\nFITS load/save with cfitsio: true\nGIF save with cgif: true\nselected Magick package: MagickCore (dynamic module: true)\nMagick API version: magick7\nMagick load: true\nMagick save: true");
        }
        return Holder.VIPS_CONFIG;
    }
    private static final int VIPS_SPARE = (int)8L;
    /**
     * {@snippet lang=c :
     * #define VIPS_SPARE 8
     * }
     */
    public static int VIPS_SPARE() {
        return VIPS_SPARE;
    }
    private static final int VIPS__WINDOW_MARGIN_PIXELS = (int)128L;
    /**
     * {@snippet lang=c :
     * #define VIPS__WINDOW_MARGIN_PIXELS 128
     * }
     */
    public static int VIPS__WINDOW_MARGIN_PIXELS() {
        return VIPS__WINDOW_MARGIN_PIXELS;
    }
    private static final int VIPS__WINDOW_MARGIN_BYTES = (int)10485760L;
    /**
     * {@snippet lang=c :
     * #define VIPS__WINDOW_MARGIN_BYTES 10485760
     * }
     */
    public static int VIPS__WINDOW_MARGIN_BYTES() {
        return VIPS__WINDOW_MARGIN_BYTES;
    }
    private static final int VIPS_SIZEOF_HEADER = (int)64L;
    /**
     * {@snippet lang=c :
     * #define VIPS_SIZEOF_HEADER 64
     * }
     */
    public static int VIPS_SIZEOF_HEADER() {
        return VIPS_SIZEOF_HEADER;
    }
    private static final int VIPS__TILE_WIDTH = (int)128L;
    /**
     * {@snippet lang=c :
     * #define VIPS__TILE_WIDTH 128
     * }
     */
    public static int VIPS__TILE_WIDTH() {
        return VIPS__TILE_WIDTH;
    }
    private static final int VIPS__TILE_HEIGHT = (int)128L;
    /**
     * {@snippet lang=c :
     * #define VIPS__TILE_HEIGHT 128
     * }
     */
    public static int VIPS__TILE_HEIGHT() {
        return VIPS__TILE_HEIGHT;
    }
    private static final int VIPS__THINSTRIP_HEIGHT = (int)1L;
    /**
     * {@snippet lang=c :
     * #define VIPS__THINSTRIP_HEIGHT 1
     * }
     */
    public static int VIPS__THINSTRIP_HEIGHT() {
        return VIPS__THINSTRIP_HEIGHT;
    }
    private static final int VIPS__FATSTRIP_HEIGHT = (int)16L;
    /**
     * {@snippet lang=c :
     * #define VIPS__FATSTRIP_HEIGHT 16
     * }
     */
    public static int VIPS__FATSTRIP_HEIGHT() {
        return VIPS__FATSTRIP_HEIGHT;
    }
    private static final int VIPS_MAGIC_INTEL = (int)3064394248L;
    /**
     * {@snippet lang=c :
     * #define VIPS_MAGIC_INTEL 3064394248
     * }
     */
    public static int VIPS_MAGIC_INTEL() {
        return VIPS_MAGIC_INTEL;
    }
    private static final int VIPS_MAGIC_SPARC = (int)150120118L;
    /**
     * {@snippet lang=c :
     * #define VIPS_MAGIC_SPARC 150120118
     * }
     */
    public static int VIPS_MAGIC_SPARC() {
        return VIPS_MAGIC_SPARC;
    }
    private static final int VIPS_MAX_COORD = (int)10000000L;
    /**
     * {@snippet lang=c :
     * #define VIPS_MAX_COORD 10000000
     * }
     */
    public static int VIPS_MAX_COORD() {
        return VIPS_MAX_COORD;
    }
    private static final int VIPS_TRANSFORM_SHIFT = (int)6L;
    /**
     * {@snippet lang=c :
     * #define VIPS_TRANSFORM_SHIFT 6
     * }
     */
    public static int VIPS_TRANSFORM_SHIFT() {
        return VIPS_TRANSFORM_SHIFT;
    }
    private static final int VIPS_TRANSFORM_SCALE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define VIPS_TRANSFORM_SCALE 64
     * }
     */
    public static int VIPS_TRANSFORM_SCALE() {
        return VIPS_TRANSFORM_SCALE;
    }
    private static final int VIPS_INTERPOLATE_SHIFT = (int)12L;
    /**
     * {@snippet lang=c :
     * #define VIPS_INTERPOLATE_SHIFT 12
     * }
     */
    public static int VIPS_INTERPOLATE_SHIFT() {
        return VIPS_INTERPOLATE_SHIFT;
    }
    private static final int VIPS_INTERPOLATE_SCALE = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define VIPS_INTERPOLATE_SCALE 4096
     * }
     */
    public static int VIPS_INTERPOLATE_SCALE() {
        return VIPS_INTERPOLATE_SCALE;
    }
    /**
     * {@snippet lang=c :
     * #define VIPS_META_EXIF_NAME "exif-data"
     * }
     */
    public static MemorySegment VIPS_META_EXIF_NAME() {
        class Holder {
            static final MemorySegment VIPS_META_EXIF_NAME
                = VipsRaw.LIBRARY_ARENA.allocateFrom("exif-data");
        }
        return Holder.VIPS_META_EXIF_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define VIPS_META_XMP_NAME "xmp-data"
     * }
     */
    public static MemorySegment VIPS_META_XMP_NAME() {
        class Holder {
            static final MemorySegment VIPS_META_XMP_NAME
                = VipsRaw.LIBRARY_ARENA.allocateFrom("xmp-data");
        }
        return Holder.VIPS_META_XMP_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define VIPS_META_IPTC_NAME "iptc-data"
     * }
     */
    public static MemorySegment VIPS_META_IPTC_NAME() {
        class Holder {
            static final MemorySegment VIPS_META_IPTC_NAME
                = VipsRaw.LIBRARY_ARENA.allocateFrom("iptc-data");
        }
        return Holder.VIPS_META_IPTC_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define VIPS_META_PHOTOSHOP_NAME "photoshop-data"
     * }
     */
    public static MemorySegment VIPS_META_PHOTOSHOP_NAME() {
        class Holder {
            static final MemorySegment VIPS_META_PHOTOSHOP_NAME
                = VipsRaw.LIBRARY_ARENA.allocateFrom("photoshop-data");
        }
        return Holder.VIPS_META_PHOTOSHOP_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define VIPS_META_ICC_NAME "icc-profile-data"
     * }
     */
    public static MemorySegment VIPS_META_ICC_NAME() {
        class Holder {
            static final MemorySegment VIPS_META_ICC_NAME
                = VipsRaw.LIBRARY_ARENA.allocateFrom("icc-profile-data");
        }
        return Holder.VIPS_META_ICC_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define VIPS_META_IMAGEDESCRIPTION "image-description"
     * }
     */
    public static MemorySegment VIPS_META_IMAGEDESCRIPTION() {
        class Holder {
            static final MemorySegment VIPS_META_IMAGEDESCRIPTION
                = VipsRaw.LIBRARY_ARENA.allocateFrom("image-description");
        }
        return Holder.VIPS_META_IMAGEDESCRIPTION;
    }
    /**
     * {@snippet lang=c :
     * #define VIPS_META_RESOLUTION_UNIT "resolution-unit"
     * }
     */
    public static MemorySegment VIPS_META_RESOLUTION_UNIT() {
        class Holder {
            static final MemorySegment VIPS_META_RESOLUTION_UNIT
                = VipsRaw.LIBRARY_ARENA.allocateFrom("resolution-unit");
        }
        return Holder.VIPS_META_RESOLUTION_UNIT;
    }
    /**
     * {@snippet lang=c :
     * #define VIPS_META_BITS_PER_SAMPLE "bits-per-sample"
     * }
     */
    public static MemorySegment VIPS_META_BITS_PER_SAMPLE() {
        class Holder {
            static final MemorySegment VIPS_META_BITS_PER_SAMPLE
                = VipsRaw.LIBRARY_ARENA.allocateFrom("bits-per-sample");
        }
        return Holder.VIPS_META_BITS_PER_SAMPLE;
    }
    /**
     * {@snippet lang=c :
     * #define VIPS_META_LOADER "vips-loader"
     * }
     */
    public static MemorySegment VIPS_META_LOADER() {
        class Holder {
            static final MemorySegment VIPS_META_LOADER
                = VipsRaw.LIBRARY_ARENA.allocateFrom("vips-loader");
        }
        return Holder.VIPS_META_LOADER;
    }
    /**
     * {@snippet lang=c :
     * #define VIPS_META_SEQUENTIAL "vips-sequential"
     * }
     */
    public static MemorySegment VIPS_META_SEQUENTIAL() {
        class Holder {
            static final MemorySegment VIPS_META_SEQUENTIAL
                = VipsRaw.LIBRARY_ARENA.allocateFrom("vips-sequential");
        }
        return Holder.VIPS_META_SEQUENTIAL;
    }
    /**
     * {@snippet lang=c :
     * #define VIPS_META_ORIENTATION "orientation"
     * }
     */
    public static MemorySegment VIPS_META_ORIENTATION() {
        class Holder {
            static final MemorySegment VIPS_META_ORIENTATION
                = VipsRaw.LIBRARY_ARENA.allocateFrom("orientation");
        }
        return Holder.VIPS_META_ORIENTATION;
    }
    /**
     * {@snippet lang=c :
     * #define VIPS_META_PAGE_HEIGHT "page-height"
     * }
     */
    public static MemorySegment VIPS_META_PAGE_HEIGHT() {
        class Holder {
            static final MemorySegment VIPS_META_PAGE_HEIGHT
                = VipsRaw.LIBRARY_ARENA.allocateFrom("page-height");
        }
        return Holder.VIPS_META_PAGE_HEIGHT;
    }
    /**
     * {@snippet lang=c :
     * #define VIPS_META_N_PAGES "n-pages"
     * }
     */
    public static MemorySegment VIPS_META_N_PAGES() {
        class Holder {
            static final MemorySegment VIPS_META_N_PAGES
                = VipsRaw.LIBRARY_ARENA.allocateFrom("n-pages");
        }
        return Holder.VIPS_META_N_PAGES;
    }
    /**
     * {@snippet lang=c :
     * #define VIPS_META_N_SUBIFDS "n-subifds"
     * }
     */
    public static MemorySegment VIPS_META_N_SUBIFDS() {
        class Holder {
            static final MemorySegment VIPS_META_N_SUBIFDS
                = VipsRaw.LIBRARY_ARENA.allocateFrom("n-subifds");
        }
        return Holder.VIPS_META_N_SUBIFDS;
    }
    /**
     * {@snippet lang=c :
     * #define VIPS_META_CONCURRENCY "concurrency"
     * }
     */
    public static MemorySegment VIPS_META_CONCURRENCY() {
        class Holder {
            static final MemorySegment VIPS_META_CONCURRENCY
                = VipsRaw.LIBRARY_ARENA.allocateFrom("concurrency");
        }
        return Holder.VIPS_META_CONCURRENCY;
    }
    private static final double VIPS_D93_X0 = 89.74d;
    /**
     * {@snippet lang=c :
     * #define VIPS_D93_X0 89.74
     * }
     */
    public static double VIPS_D93_X0() {
        return VIPS_D93_X0;
    }
    private static final double VIPS_D93_Y0 = 100.0d;
    /**
     * {@snippet lang=c :
     * #define VIPS_D93_Y0 100.0
     * }
     */
    public static double VIPS_D93_Y0() {
        return VIPS_D93_Y0;
    }
    private static final double VIPS_D93_Z0 = 130.77d;
    /**
     * {@snippet lang=c :
     * #define VIPS_D93_Z0 130.77
     * }
     */
    public static double VIPS_D93_Z0() {
        return VIPS_D93_Z0;
    }
    private static final double VIPS_D75_X0 = 94.9682d;
    /**
     * {@snippet lang=c :
     * #define VIPS_D75_X0 94.9682
     * }
     */
    public static double VIPS_D75_X0() {
        return VIPS_D75_X0;
    }
    private static final double VIPS_D75_Y0 = 100.0d;
    /**
     * {@snippet lang=c :
     * #define VIPS_D75_Y0 100.0
     * }
     */
    public static double VIPS_D75_Y0() {
        return VIPS_D75_Y0;
    }
    private static final double VIPS_D75_Z0 = 122.571d;
    /**
     * {@snippet lang=c :
     * #define VIPS_D75_Z0 122.571
     * }
     */
    public static double VIPS_D75_Z0() {
        return VIPS_D75_Z0;
    }
    private static final double VIPS_D65_X0 = 95.047d;
    /**
     * {@snippet lang=c :
     * #define VIPS_D65_X0 95.047
     * }
     */
    public static double VIPS_D65_X0() {
        return VIPS_D65_X0;
    }
    private static final double VIPS_D65_Y0 = 100.0d;
    /**
     * {@snippet lang=c :
     * #define VIPS_D65_Y0 100.0
     * }
     */
    public static double VIPS_D65_Y0() {
        return VIPS_D65_Y0;
    }
    private static final double VIPS_D65_Z0 = 108.8827d;
    /**
     * {@snippet lang=c :
     * #define VIPS_D65_Z0 108.8827
     * }
     */
    public static double VIPS_D65_Z0() {
        return VIPS_D65_Z0;
    }
    private static final double VIPS_D55_X0 = 95.6831d;
    /**
     * {@snippet lang=c :
     * #define VIPS_D55_X0 95.6831
     * }
     */
    public static double VIPS_D55_X0() {
        return VIPS_D55_X0;
    }
    private static final double VIPS_D55_Y0 = 100.0d;
    /**
     * {@snippet lang=c :
     * #define VIPS_D55_Y0 100.0
     * }
     */
    public static double VIPS_D55_Y0() {
        return VIPS_D55_Y0;
    }
    private static final double VIPS_D55_Z0 = 92.0871d;
    /**
     * {@snippet lang=c :
     * #define VIPS_D55_Z0 92.0871
     * }
     */
    public static double VIPS_D55_Z0() {
        return VIPS_D55_Z0;
    }
    private static final double VIPS_D50_X0 = 96.425d;
    /**
     * {@snippet lang=c :
     * #define VIPS_D50_X0 96.425
     * }
     */
    public static double VIPS_D50_X0() {
        return VIPS_D50_X0;
    }
    private static final double VIPS_D50_Y0 = 100.0d;
    /**
     * {@snippet lang=c :
     * #define VIPS_D50_Y0 100.0
     * }
     */
    public static double VIPS_D50_Y0() {
        return VIPS_D50_Y0;
    }
    private static final double VIPS_D50_Z0 = 82.468d;
    /**
     * {@snippet lang=c :
     * #define VIPS_D50_Z0 82.468
     * }
     */
    public static double VIPS_D50_Z0() {
        return VIPS_D50_Z0;
    }
    private static final double VIPS_A_X0 = 109.8503d;
    /**
     * {@snippet lang=c :
     * #define VIPS_A_X0 109.8503
     * }
     */
    public static double VIPS_A_X0() {
        return VIPS_A_X0;
    }
    private static final double VIPS_A_Y0 = 100.0d;
    /**
     * {@snippet lang=c :
     * #define VIPS_A_Y0 100.0
     * }
     */
    public static double VIPS_A_Y0() {
        return VIPS_A_Y0;
    }
    private static final double VIPS_A_Z0 = 35.5849d;
    /**
     * {@snippet lang=c :
     * #define VIPS_A_Z0 35.5849
     * }
     */
    public static double VIPS_A_Z0() {
        return VIPS_A_Z0;
    }
    private static final double VIPS_B_X0 = 99.072d;
    /**
     * {@snippet lang=c :
     * #define VIPS_B_X0 99.072
     * }
     */
    public static double VIPS_B_X0() {
        return VIPS_B_X0;
    }
    private static final double VIPS_B_Y0 = 100.0d;
    /**
     * {@snippet lang=c :
     * #define VIPS_B_Y0 100.0
     * }
     */
    public static double VIPS_B_Y0() {
        return VIPS_B_Y0;
    }
    private static final double VIPS_B_Z0 = 85.223d;
    /**
     * {@snippet lang=c :
     * #define VIPS_B_Z0 85.223
     * }
     */
    public static double VIPS_B_Z0() {
        return VIPS_B_Z0;
    }
    private static final double VIPS_C_X0 = 98.07d;
    /**
     * {@snippet lang=c :
     * #define VIPS_C_X0 98.07
     * }
     */
    public static double VIPS_C_X0() {
        return VIPS_C_X0;
    }
    private static final double VIPS_C_Y0 = 100.0d;
    /**
     * {@snippet lang=c :
     * #define VIPS_C_Y0 100.0
     * }
     */
    public static double VIPS_C_Y0() {
        return VIPS_C_Y0;
    }
    private static final double VIPS_C_Z0 = 118.23d;
    /**
     * {@snippet lang=c :
     * #define VIPS_C_Z0 118.23
     * }
     */
    public static double VIPS_C_Z0() {
        return VIPS_C_Z0;
    }
    private static final double VIPS_E_X0 = 100.0d;
    /**
     * {@snippet lang=c :
     * #define VIPS_E_X0 100.0
     * }
     */
    public static double VIPS_E_X0() {
        return VIPS_E_X0;
    }
    private static final double VIPS_E_Y0 = 100.0d;
    /**
     * {@snippet lang=c :
     * #define VIPS_E_Y0 100.0
     * }
     */
    public static double VIPS_E_Y0() {
        return VIPS_E_Y0;
    }
    private static final double VIPS_E_Z0 = 100.0d;
    /**
     * {@snippet lang=c :
     * #define VIPS_E_Z0 100.0
     * }
     */
    public static double VIPS_E_Z0() {
        return VIPS_E_Z0;
    }
    private static final double VIPS_D3250_X0 = 105.659d;
    /**
     * {@snippet lang=c :
     * #define VIPS_D3250_X0 105.659
     * }
     */
    public static double VIPS_D3250_X0() {
        return VIPS_D3250_X0;
    }
    private static final double VIPS_D3250_Y0 = 100.0d;
    /**
     * {@snippet lang=c :
     * #define VIPS_D3250_Y0 100.0
     * }
     */
    public static double VIPS_D3250_Y0() {
        return VIPS_D3250_Y0;
    }
    private static final double VIPS_D3250_Z0 = 45.8501d;
    /**
     * {@snippet lang=c :
     * #define VIPS_D3250_Z0 45.8501
     * }
     */
    public static double VIPS_D3250_Z0() {
        return VIPS_D3250_Z0;
    }
}

