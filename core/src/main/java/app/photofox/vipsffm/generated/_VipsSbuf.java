// Generated by jextract

package app.photofox.vipsffm.generated;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _VipsSbuf {
 *     VipsObject parent_object;
 *     VipsSource *source;
 *     unsigned char input_buffer[4097];
 *     int chars_in_buffer;
 *     int read_point;
 *     unsigned char line[4097];
 * }
 * }
 */
public class _VipsSbuf {

    _VipsSbuf() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _VipsObject.layout().withName("parent_object"),
        vips_h.C_POINTER.withName("source"),
        MemoryLayout.sequenceLayout(4097, vips_h.C_CHAR).withName("input_buffer"),
        MemoryLayout.paddingLayout(3),
        vips_h.C_INT.withName("chars_in_buffer"),
        vips_h.C_INT.withName("read_point"),
        MemoryLayout.sequenceLayout(4097, vips_h.C_CHAR).withName("line"),
        MemoryLayout.paddingLayout(3)
    ).withName("_VipsSbuf");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout parent_object$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("parent_object"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VipsObject parent_object
     * }
     */
    public static final GroupLayout parent_object$layout() {
        return parent_object$LAYOUT;
    }

    private static final long parent_object$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VipsObject parent_object
     * }
     */
    public static final long parent_object$offset() {
        return parent_object$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VipsObject parent_object
     * }
     */
    public static MemorySegment parent_object(MemorySegment struct) {
        return struct.asSlice(parent_object$OFFSET, parent_object$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VipsObject parent_object
     * }
     */
    public static void parent_object(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, parent_object$OFFSET, parent_object$LAYOUT.byteSize());
    }

    private static final AddressLayout source$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("source"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VipsSource *source
     * }
     */
    public static final AddressLayout source$layout() {
        return source$LAYOUT;
    }

    private static final long source$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VipsSource *source
     * }
     */
    public static final long source$offset() {
        return source$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VipsSource *source
     * }
     */
    public static MemorySegment source(MemorySegment struct) {
        return struct.get(source$LAYOUT, source$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VipsSource *source
     * }
     */
    public static void source(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(source$LAYOUT, source$OFFSET, fieldValue);
    }

    private static final SequenceLayout input_buffer$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("input_buffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned char input_buffer[4097]
     * }
     */
    public static final SequenceLayout input_buffer$layout() {
        return input_buffer$LAYOUT;
    }

    private static final long input_buffer$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned char input_buffer[4097]
     * }
     */
    public static final long input_buffer$offset() {
        return input_buffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char input_buffer[4097]
     * }
     */
    public static MemorySegment input_buffer(MemorySegment struct) {
        return struct.asSlice(input_buffer$OFFSET, input_buffer$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char input_buffer[4097]
     * }
     */
    public static void input_buffer(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, input_buffer$OFFSET, input_buffer$LAYOUT.byteSize());
    }

    private static long[] input_buffer$DIMS = { 4097 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * unsigned char input_buffer[4097]
     * }
     */
    public static long[] input_buffer$dimensions() {
        return input_buffer$DIMS;
    }
    private static final VarHandle input_buffer$ELEM_HANDLE = input_buffer$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * unsigned char input_buffer[4097]
     * }
     */
    public static byte input_buffer(MemorySegment struct, long index0) {
        return (byte)input_buffer$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * unsigned char input_buffer[4097]
     * }
     */
    public static void input_buffer(MemorySegment struct, long index0, byte fieldValue) {
        input_buffer$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt chars_in_buffer$LAYOUT = (OfInt)$LAYOUT.select(groupElement("chars_in_buffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int chars_in_buffer
     * }
     */
    public static final OfInt chars_in_buffer$layout() {
        return chars_in_buffer$LAYOUT;
    }

    private static final long chars_in_buffer$OFFSET = 4188;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int chars_in_buffer
     * }
     */
    public static final long chars_in_buffer$offset() {
        return chars_in_buffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int chars_in_buffer
     * }
     */
    public static int chars_in_buffer(MemorySegment struct) {
        return struct.get(chars_in_buffer$LAYOUT, chars_in_buffer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int chars_in_buffer
     * }
     */
    public static void chars_in_buffer(MemorySegment struct, int fieldValue) {
        struct.set(chars_in_buffer$LAYOUT, chars_in_buffer$OFFSET, fieldValue);
    }

    private static final OfInt read_point$LAYOUT = (OfInt)$LAYOUT.select(groupElement("read_point"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int read_point
     * }
     */
    public static final OfInt read_point$layout() {
        return read_point$LAYOUT;
    }

    private static final long read_point$OFFSET = 4192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int read_point
     * }
     */
    public static final long read_point$offset() {
        return read_point$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int read_point
     * }
     */
    public static int read_point(MemorySegment struct) {
        return struct.get(read_point$LAYOUT, read_point$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int read_point
     * }
     */
    public static void read_point(MemorySegment struct, int fieldValue) {
        struct.set(read_point$LAYOUT, read_point$OFFSET, fieldValue);
    }

    private static final SequenceLayout line$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("line"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned char line[4097]
     * }
     */
    public static final SequenceLayout line$layout() {
        return line$LAYOUT;
    }

    private static final long line$OFFSET = 4196;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned char line[4097]
     * }
     */
    public static final long line$offset() {
        return line$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char line[4097]
     * }
     */
    public static MemorySegment line(MemorySegment struct) {
        return struct.asSlice(line$OFFSET, line$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char line[4097]
     * }
     */
    public static void line(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, line$OFFSET, line$LAYOUT.byteSize());
    }

    private static long[] line$DIMS = { 4097 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * unsigned char line[4097]
     * }
     */
    public static long[] line$dimensions() {
        return line$DIMS;
    }
    private static final VarHandle line$ELEM_HANDLE = line$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * unsigned char line[4097]
     * }
     */
    public static byte line(MemorySegment struct, long index0) {
        return (byte)line$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * unsigned char line[4097]
     * }
     */
    public static void line(MemorySegment struct, long index0, byte fieldValue) {
        line$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

