// Generated by jextract

package app.photofox.vipsffm.generated;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _VipsForeignLoadClass {
 *     VipsForeignClass parent_class;
 *     gboolean (*is_a)(const char *);
 *     gboolean (*is_a_buffer)(const void *, size_t);
 *     gboolean (*is_a_source)(VipsSource *);
 *     VipsForeignFlags (*get_flags_filename)(const char *);
 *     VipsForeignFlags (*get_flags)(VipsForeignLoad *);
 *     int (*header)(VipsForeignLoad *);
 *     int (*load)(VipsForeignLoad *);
 * }
 * }
 */
public class _VipsForeignLoadClass {

    _VipsForeignLoadClass() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _VipsForeignClass.layout().withName("parent_class"),
        vips_h.C_POINTER.withName("is_a"),
        vips_h.C_POINTER.withName("is_a_buffer"),
        vips_h.C_POINTER.withName("is_a_source"),
        vips_h.C_POINTER.withName("get_flags_filename"),
        vips_h.C_POINTER.withName("get_flags"),
        vips_h.C_POINTER.withName("header"),
        vips_h.C_POINTER.withName("load")
    ).withName("_VipsForeignLoadClass");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout parent_class$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("parent_class"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VipsForeignClass parent_class
     * }
     */
    public static final GroupLayout parent_class$layout() {
        return parent_class$LAYOUT;
    }

    private static final long parent_class$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VipsForeignClass parent_class
     * }
     */
    public static final long parent_class$offset() {
        return parent_class$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VipsForeignClass parent_class
     * }
     */
    public static MemorySegment parent_class(MemorySegment struct) {
        return struct.asSlice(parent_class$OFFSET, parent_class$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VipsForeignClass parent_class
     * }
     */
    public static void parent_class(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, parent_class$OFFSET, parent_class$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * gboolean (*is_a)(const char *)
     * }
     */
    public static class is_a {

        is_a() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = vips_h.upcallHandle(is_a.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(is_a.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout is_a$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("is_a"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean (*is_a)(const char *)
     * }
     */
    public static final AddressLayout is_a$layout() {
        return is_a$LAYOUT;
    }

    private static final long is_a$OFFSET = 376;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean (*is_a)(const char *)
     * }
     */
    public static final long is_a$offset() {
        return is_a$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean (*is_a)(const char *)
     * }
     */
    public static MemorySegment is_a(MemorySegment struct) {
        return struct.get(is_a$LAYOUT, is_a$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean (*is_a)(const char *)
     * }
     */
    public static void is_a(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(is_a$LAYOUT, is_a$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gboolean (*is_a_buffer)(const void *, size_t)
     * }
     */
    public static class is_a_buffer {

        is_a_buffer() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, long _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = vips_h.upcallHandle(is_a_buffer.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(is_a_buffer.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout is_a_buffer$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("is_a_buffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean (*is_a_buffer)(const void *, size_t)
     * }
     */
    public static final AddressLayout is_a_buffer$layout() {
        return is_a_buffer$LAYOUT;
    }

    private static final long is_a_buffer$OFFSET = 384;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean (*is_a_buffer)(const void *, size_t)
     * }
     */
    public static final long is_a_buffer$offset() {
        return is_a_buffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean (*is_a_buffer)(const void *, size_t)
     * }
     */
    public static MemorySegment is_a_buffer(MemorySegment struct) {
        return struct.get(is_a_buffer$LAYOUT, is_a_buffer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean (*is_a_buffer)(const void *, size_t)
     * }
     */
    public static void is_a_buffer(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(is_a_buffer$LAYOUT, is_a_buffer$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gboolean (*is_a_source)(VipsSource *)
     * }
     */
    public static class is_a_source {

        is_a_source() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = vips_h.upcallHandle(is_a_source.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(is_a_source.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout is_a_source$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("is_a_source"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean (*is_a_source)(VipsSource *)
     * }
     */
    public static final AddressLayout is_a_source$layout() {
        return is_a_source$LAYOUT;
    }

    private static final long is_a_source$OFFSET = 392;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean (*is_a_source)(VipsSource *)
     * }
     */
    public static final long is_a_source$offset() {
        return is_a_source$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean (*is_a_source)(VipsSource *)
     * }
     */
    public static MemorySegment is_a_source(MemorySegment struct) {
        return struct.get(is_a_source$LAYOUT, is_a_source$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean (*is_a_source)(VipsSource *)
     * }
     */
    public static void is_a_source(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(is_a_source$LAYOUT, is_a_source$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * VipsForeignFlags (*get_flags_filename)(const char *)
     * }
     */
    public static class get_flags_filename {

        get_flags_filename() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = vips_h.upcallHandle(get_flags_filename.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_flags_filename.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_flags_filename$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_flags_filename"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VipsForeignFlags (*get_flags_filename)(const char *)
     * }
     */
    public static final AddressLayout get_flags_filename$layout() {
        return get_flags_filename$LAYOUT;
    }

    private static final long get_flags_filename$OFFSET = 400;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VipsForeignFlags (*get_flags_filename)(const char *)
     * }
     */
    public static final long get_flags_filename$offset() {
        return get_flags_filename$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VipsForeignFlags (*get_flags_filename)(const char *)
     * }
     */
    public static MemorySegment get_flags_filename(MemorySegment struct) {
        return struct.get(get_flags_filename$LAYOUT, get_flags_filename$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VipsForeignFlags (*get_flags_filename)(const char *)
     * }
     */
    public static void get_flags_filename(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_flags_filename$LAYOUT, get_flags_filename$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * VipsForeignFlags (*get_flags)(VipsForeignLoad *)
     * }
     */
    public static class get_flags {

        get_flags() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = vips_h.upcallHandle(get_flags.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_flags.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_flags$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VipsForeignFlags (*get_flags)(VipsForeignLoad *)
     * }
     */
    public static final AddressLayout get_flags$layout() {
        return get_flags$LAYOUT;
    }

    private static final long get_flags$OFFSET = 408;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VipsForeignFlags (*get_flags)(VipsForeignLoad *)
     * }
     */
    public static final long get_flags$offset() {
        return get_flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VipsForeignFlags (*get_flags)(VipsForeignLoad *)
     * }
     */
    public static MemorySegment get_flags(MemorySegment struct) {
        return struct.get(get_flags$LAYOUT, get_flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VipsForeignFlags (*get_flags)(VipsForeignLoad *)
     * }
     */
    public static void get_flags(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_flags$LAYOUT, get_flags$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*header)(VipsForeignLoad *)
     * }
     */
    public static class header {

        header() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = vips_h.upcallHandle(header.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(header.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout header$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("header"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*header)(VipsForeignLoad *)
     * }
     */
    public static final AddressLayout header$layout() {
        return header$LAYOUT;
    }

    private static final long header$OFFSET = 416;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*header)(VipsForeignLoad *)
     * }
     */
    public static final long header$offset() {
        return header$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*header)(VipsForeignLoad *)
     * }
     */
    public static MemorySegment header(MemorySegment struct) {
        return struct.get(header$LAYOUT, header$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*header)(VipsForeignLoad *)
     * }
     */
    public static void header(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(header$LAYOUT, header$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*load)(VipsForeignLoad *)
     * }
     */
    public static class load {

        load() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = vips_h.upcallHandle(load.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(load.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout load$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("load"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*load)(VipsForeignLoad *)
     * }
     */
    public static final AddressLayout load$layout() {
        return load$LAYOUT;
    }

    private static final long load$OFFSET = 424;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*load)(VipsForeignLoad *)
     * }
     */
    public static final long load$offset() {
        return load$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*load)(VipsForeignLoad *)
     * }
     */
    public static MemorySegment load(MemorySegment struct) {
        return struct.get(load$LAYOUT, load$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*load)(VipsForeignLoad *)
     * }
     */
    public static void load(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(load$LAYOUT, load$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

