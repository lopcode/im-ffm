// Generated by jextract

package app.photofox.vipsffm.generated;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _VipsImage {
 *     VipsObject parent_instance;
 *     int Xsize;
 *     int Ysize;
 *     int Bands;
 *     VipsBandFormat BandFmt;
 *     VipsCoding Coding;
 *     VipsInterpretation Type;
 *     double Xres;
 *     double Yres;
 *     int Xoffset;
 *     int Yoffset;
 *     int Length;
 *     short Compression;
 *     short Level;
 *     int Bbits;
 *     VipsProgress *time;
 *     char *Hist;
 *     char *filename;
 *     VipsPel *data;
 *     int kill;
 *     float Xres_float;
 *     float Yres_float;
 *     char *mode;
 *     VipsImageType dtype;
 *     int fd;
 *     void *baseaddr;
 *     size_t length;
 *     guint32 magic;
 *     VipsStartFn start_fn;
 *     VipsGenerateFn generate_fn;
 *     VipsStopFn stop_fn;
 *     void *client1;
 *     void *client2;
 *     GMutex *sslock;
 *     GSList *regions;
 *     VipsDemandStyle dhint;
 *     GHashTable *meta;
 *     GSList *meta_traverse;
 *     gint64 sizeof_header;
 *     GSList *windows;
 *     GSList *upstream;
 *     GSList *downstream;
 *     int serial;
 *     GSList *history_list;
 *     VipsImage *progress_signal;
 *     gint64 file_length;
 *     gboolean hint_set;
 *     gboolean delete_on_close;
 *     char *delete_on_close_filename;
 * }
 * }
 */
public class _VipsImage {

    _VipsImage() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _VipsObject.layout().withName("parent_instance"),
        VipsRaw.C_INT.withName("Xsize"),
        VipsRaw.C_INT.withName("Ysize"),
        VipsRaw.C_INT.withName("Bands"),
        VipsRaw.C_INT.withName("BandFmt"),
        VipsRaw.C_INT.withName("Coding"),
        VipsRaw.C_INT.withName("Type"),
        VipsRaw.C_DOUBLE.withName("Xres"),
        VipsRaw.C_DOUBLE.withName("Yres"),
        VipsRaw.C_INT.withName("Xoffset"),
        VipsRaw.C_INT.withName("Yoffset"),
        VipsRaw.C_INT.withName("Length"),
        VipsRaw.C_SHORT.withName("Compression"),
        VipsRaw.C_SHORT.withName("Level"),
        VipsRaw.C_INT.withName("Bbits"),
        MemoryLayout.paddingLayout(4),
        VipsRaw.C_POINTER.withName("time"),
        VipsRaw.C_POINTER.withName("Hist"),
        VipsRaw.C_POINTER.withName("filename"),
        VipsRaw.C_POINTER.withName("data"),
        VipsRaw.C_INT.withName("kill"),
        VipsRaw.C_FLOAT.withName("Xres_float"),
        VipsRaw.C_FLOAT.withName("Yres_float"),
        MemoryLayout.paddingLayout(4),
        VipsRaw.C_POINTER.withName("mode"),
        VipsRaw.C_INT.withName("dtype"),
        VipsRaw.C_INT.withName("fd"),
        VipsRaw.C_POINTER.withName("baseaddr"),
        VipsRaw.C_LONG.withName("length"),
        VipsRaw.C_INT.withName("magic"),
        MemoryLayout.paddingLayout(4),
        VipsRaw.C_POINTER.withName("start_fn"),
        VipsRaw.C_POINTER.withName("generate_fn"),
        VipsRaw.C_POINTER.withName("stop_fn"),
        VipsRaw.C_POINTER.withName("client1"),
        VipsRaw.C_POINTER.withName("client2"),
        VipsRaw.C_POINTER.withName("sslock"),
        VipsRaw.C_POINTER.withName("regions"),
        VipsRaw.C_INT.withName("dhint"),
        MemoryLayout.paddingLayout(4),
        VipsRaw.C_POINTER.withName("meta"),
        VipsRaw.C_POINTER.withName("meta_traverse"),
        VipsRaw.C_LONG_LONG.withName("sizeof_header"),
        VipsRaw.C_POINTER.withName("windows"),
        VipsRaw.C_POINTER.withName("upstream"),
        VipsRaw.C_POINTER.withName("downstream"),
        VipsRaw.C_INT.withName("serial"),
        MemoryLayout.paddingLayout(4),
        VipsRaw.C_POINTER.withName("history_list"),
        VipsRaw.C_POINTER.withName("progress_signal"),
        VipsRaw.C_LONG_LONG.withName("file_length"),
        VipsRaw.C_INT.withName("hint_set"),
        VipsRaw.C_INT.withName("delete_on_close"),
        VipsRaw.C_POINTER.withName("delete_on_close_filename")
    ).withName("_VipsImage");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout parent_instance$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("parent_instance"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VipsObject parent_instance
     * }
     */
    public static final GroupLayout parent_instance$layout() {
        return parent_instance$LAYOUT;
    }

    private static final long parent_instance$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VipsObject parent_instance
     * }
     */
    public static final long parent_instance$offset() {
        return parent_instance$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VipsObject parent_instance
     * }
     */
    public static MemorySegment parent_instance(MemorySegment struct) {
        return struct.asSlice(parent_instance$OFFSET, parent_instance$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VipsObject parent_instance
     * }
     */
    public static void parent_instance(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, parent_instance$OFFSET, parent_instance$LAYOUT.byteSize());
    }

    private static final OfInt Xsize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Xsize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int Xsize
     * }
     */
    public static final OfInt Xsize$layout() {
        return Xsize$LAYOUT;
    }

    private static final long Xsize$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int Xsize
     * }
     */
    public static final long Xsize$offset() {
        return Xsize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int Xsize
     * }
     */
    public static int Xsize(MemorySegment struct) {
        return struct.get(Xsize$LAYOUT, Xsize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int Xsize
     * }
     */
    public static void Xsize(MemorySegment struct, int fieldValue) {
        struct.set(Xsize$LAYOUT, Xsize$OFFSET, fieldValue);
    }

    private static final OfInt Ysize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Ysize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int Ysize
     * }
     */
    public static final OfInt Ysize$layout() {
        return Ysize$LAYOUT;
    }

    private static final long Ysize$OFFSET = 84;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int Ysize
     * }
     */
    public static final long Ysize$offset() {
        return Ysize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int Ysize
     * }
     */
    public static int Ysize(MemorySegment struct) {
        return struct.get(Ysize$LAYOUT, Ysize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int Ysize
     * }
     */
    public static void Ysize(MemorySegment struct, int fieldValue) {
        struct.set(Ysize$LAYOUT, Ysize$OFFSET, fieldValue);
    }

    private static final OfInt Bands$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Bands"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int Bands
     * }
     */
    public static final OfInt Bands$layout() {
        return Bands$LAYOUT;
    }

    private static final long Bands$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int Bands
     * }
     */
    public static final long Bands$offset() {
        return Bands$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int Bands
     * }
     */
    public static int Bands(MemorySegment struct) {
        return struct.get(Bands$LAYOUT, Bands$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int Bands
     * }
     */
    public static void Bands(MemorySegment struct, int fieldValue) {
        struct.set(Bands$LAYOUT, Bands$OFFSET, fieldValue);
    }

    private static final OfInt BandFmt$LAYOUT = (OfInt)$LAYOUT.select(groupElement("BandFmt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VipsBandFormat BandFmt
     * }
     */
    public static final OfInt BandFmt$layout() {
        return BandFmt$LAYOUT;
    }

    private static final long BandFmt$OFFSET = 92;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VipsBandFormat BandFmt
     * }
     */
    public static final long BandFmt$offset() {
        return BandFmt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VipsBandFormat BandFmt
     * }
     */
    public static int BandFmt(MemorySegment struct) {
        return struct.get(BandFmt$LAYOUT, BandFmt$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VipsBandFormat BandFmt
     * }
     */
    public static void BandFmt(MemorySegment struct, int fieldValue) {
        struct.set(BandFmt$LAYOUT, BandFmt$OFFSET, fieldValue);
    }

    private static final OfInt Coding$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Coding"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VipsCoding Coding
     * }
     */
    public static final OfInt Coding$layout() {
        return Coding$LAYOUT;
    }

    private static final long Coding$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VipsCoding Coding
     * }
     */
    public static final long Coding$offset() {
        return Coding$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VipsCoding Coding
     * }
     */
    public static int Coding(MemorySegment struct) {
        return struct.get(Coding$LAYOUT, Coding$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VipsCoding Coding
     * }
     */
    public static void Coding(MemorySegment struct, int fieldValue) {
        struct.set(Coding$LAYOUT, Coding$OFFSET, fieldValue);
    }

    private static final OfInt Type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VipsInterpretation Type
     * }
     */
    public static final OfInt Type$layout() {
        return Type$LAYOUT;
    }

    private static final long Type$OFFSET = 100;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VipsInterpretation Type
     * }
     */
    public static final long Type$offset() {
        return Type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VipsInterpretation Type
     * }
     */
    public static int Type(MemorySegment struct) {
        return struct.get(Type$LAYOUT, Type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VipsInterpretation Type
     * }
     */
    public static void Type(MemorySegment struct, int fieldValue) {
        struct.set(Type$LAYOUT, Type$OFFSET, fieldValue);
    }

    private static final OfDouble Xres$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("Xres"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double Xres
     * }
     */
    public static final OfDouble Xres$layout() {
        return Xres$LAYOUT;
    }

    private static final long Xres$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double Xres
     * }
     */
    public static final long Xres$offset() {
        return Xres$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double Xres
     * }
     */
    public static double Xres(MemorySegment struct) {
        return struct.get(Xres$LAYOUT, Xres$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double Xres
     * }
     */
    public static void Xres(MemorySegment struct, double fieldValue) {
        struct.set(Xres$LAYOUT, Xres$OFFSET, fieldValue);
    }

    private static final OfDouble Yres$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("Yres"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double Yres
     * }
     */
    public static final OfDouble Yres$layout() {
        return Yres$LAYOUT;
    }

    private static final long Yres$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double Yres
     * }
     */
    public static final long Yres$offset() {
        return Yres$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double Yres
     * }
     */
    public static double Yres(MemorySegment struct) {
        return struct.get(Yres$LAYOUT, Yres$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double Yres
     * }
     */
    public static void Yres(MemorySegment struct, double fieldValue) {
        struct.set(Yres$LAYOUT, Yres$OFFSET, fieldValue);
    }

    private static final OfInt Xoffset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Xoffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int Xoffset
     * }
     */
    public static final OfInt Xoffset$layout() {
        return Xoffset$LAYOUT;
    }

    private static final long Xoffset$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int Xoffset
     * }
     */
    public static final long Xoffset$offset() {
        return Xoffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int Xoffset
     * }
     */
    public static int Xoffset(MemorySegment struct) {
        return struct.get(Xoffset$LAYOUT, Xoffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int Xoffset
     * }
     */
    public static void Xoffset(MemorySegment struct, int fieldValue) {
        struct.set(Xoffset$LAYOUT, Xoffset$OFFSET, fieldValue);
    }

    private static final OfInt Yoffset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Yoffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int Yoffset
     * }
     */
    public static final OfInt Yoffset$layout() {
        return Yoffset$LAYOUT;
    }

    private static final long Yoffset$OFFSET = 124;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int Yoffset
     * }
     */
    public static final long Yoffset$offset() {
        return Yoffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int Yoffset
     * }
     */
    public static int Yoffset(MemorySegment struct) {
        return struct.get(Yoffset$LAYOUT, Yoffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int Yoffset
     * }
     */
    public static void Yoffset(MemorySegment struct, int fieldValue) {
        struct.set(Yoffset$LAYOUT, Yoffset$OFFSET, fieldValue);
    }

    private static final OfInt Length$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Length"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int Length
     * }
     */
    public static final OfInt Length$layout() {
        return Length$LAYOUT;
    }

    private static final long Length$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int Length
     * }
     */
    public static final long Length$offset() {
        return Length$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int Length
     * }
     */
    public static int Length(MemorySegment struct) {
        return struct.get(Length$LAYOUT, Length$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int Length
     * }
     */
    public static void Length(MemorySegment struct, int fieldValue) {
        struct.set(Length$LAYOUT, Length$OFFSET, fieldValue);
    }

    private static final OfShort Compression$LAYOUT = (OfShort)$LAYOUT.select(groupElement("Compression"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * short Compression
     * }
     */
    public static final OfShort Compression$layout() {
        return Compression$LAYOUT;
    }

    private static final long Compression$OFFSET = 132;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * short Compression
     * }
     */
    public static final long Compression$offset() {
        return Compression$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * short Compression
     * }
     */
    public static short Compression(MemorySegment struct) {
        return struct.get(Compression$LAYOUT, Compression$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * short Compression
     * }
     */
    public static void Compression(MemorySegment struct, short fieldValue) {
        struct.set(Compression$LAYOUT, Compression$OFFSET, fieldValue);
    }

    private static final OfShort Level$LAYOUT = (OfShort)$LAYOUT.select(groupElement("Level"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * short Level
     * }
     */
    public static final OfShort Level$layout() {
        return Level$LAYOUT;
    }

    private static final long Level$OFFSET = 134;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * short Level
     * }
     */
    public static final long Level$offset() {
        return Level$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * short Level
     * }
     */
    public static short Level(MemorySegment struct) {
        return struct.get(Level$LAYOUT, Level$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * short Level
     * }
     */
    public static void Level(MemorySegment struct, short fieldValue) {
        struct.set(Level$LAYOUT, Level$OFFSET, fieldValue);
    }

    private static final OfInt Bbits$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Bbits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int Bbits
     * }
     */
    public static final OfInt Bbits$layout() {
        return Bbits$LAYOUT;
    }

    private static final long Bbits$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int Bbits
     * }
     */
    public static final long Bbits$offset() {
        return Bbits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int Bbits
     * }
     */
    public static int Bbits(MemorySegment struct) {
        return struct.get(Bbits$LAYOUT, Bbits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int Bbits
     * }
     */
    public static void Bbits(MemorySegment struct, int fieldValue) {
        struct.set(Bbits$LAYOUT, Bbits$OFFSET, fieldValue);
    }

    private static final AddressLayout time$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("time"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VipsProgress *time
     * }
     */
    public static final AddressLayout time$layout() {
        return time$LAYOUT;
    }

    private static final long time$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VipsProgress *time
     * }
     */
    public static final long time$offset() {
        return time$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VipsProgress *time
     * }
     */
    public static MemorySegment time(MemorySegment struct) {
        return struct.get(time$LAYOUT, time$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VipsProgress *time
     * }
     */
    public static void time(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(time$LAYOUT, time$OFFSET, fieldValue);
    }

    private static final AddressLayout Hist$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Hist"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *Hist
     * }
     */
    public static final AddressLayout Hist$layout() {
        return Hist$LAYOUT;
    }

    private static final long Hist$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *Hist
     * }
     */
    public static final long Hist$offset() {
        return Hist$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *Hist
     * }
     */
    public static MemorySegment Hist(MemorySegment struct) {
        return struct.get(Hist$LAYOUT, Hist$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *Hist
     * }
     */
    public static void Hist(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Hist$LAYOUT, Hist$OFFSET, fieldValue);
    }

    private static final AddressLayout filename$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("filename"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *filename
     * }
     */
    public static final AddressLayout filename$layout() {
        return filename$LAYOUT;
    }

    private static final long filename$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *filename
     * }
     */
    public static final long filename$offset() {
        return filename$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *filename
     * }
     */
    public static MemorySegment filename(MemorySegment struct) {
        return struct.get(filename$LAYOUT, filename$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *filename
     * }
     */
    public static void filename(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(filename$LAYOUT, filename$OFFSET, fieldValue);
    }

    private static final AddressLayout data$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VipsPel *data
     * }
     */
    public static final AddressLayout data$layout() {
        return data$LAYOUT;
    }

    private static final long data$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VipsPel *data
     * }
     */
    public static final long data$offset() {
        return data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VipsPel *data
     * }
     */
    public static MemorySegment data(MemorySegment struct) {
        return struct.get(data$LAYOUT, data$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VipsPel *data
     * }
     */
    public static void data(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(data$LAYOUT, data$OFFSET, fieldValue);
    }

    private static final OfInt kill$LAYOUT = (OfInt)$LAYOUT.select(groupElement("kill"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int kill
     * }
     */
    public static final OfInt kill$layout() {
        return kill$LAYOUT;
    }

    private static final long kill$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int kill
     * }
     */
    public static final long kill$offset() {
        return kill$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int kill
     * }
     */
    public static int kill(MemorySegment struct) {
        return struct.get(kill$LAYOUT, kill$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int kill
     * }
     */
    public static void kill(MemorySegment struct, int fieldValue) {
        struct.set(kill$LAYOUT, kill$OFFSET, fieldValue);
    }

    private static final OfFloat Xres_float$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("Xres_float"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float Xres_float
     * }
     */
    public static final OfFloat Xres_float$layout() {
        return Xres_float$LAYOUT;
    }

    private static final long Xres_float$OFFSET = 180;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float Xres_float
     * }
     */
    public static final long Xres_float$offset() {
        return Xres_float$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float Xres_float
     * }
     */
    public static float Xres_float(MemorySegment struct) {
        return struct.get(Xres_float$LAYOUT, Xres_float$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float Xres_float
     * }
     */
    public static void Xres_float(MemorySegment struct, float fieldValue) {
        struct.set(Xres_float$LAYOUT, Xres_float$OFFSET, fieldValue);
    }

    private static final OfFloat Yres_float$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("Yres_float"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float Yres_float
     * }
     */
    public static final OfFloat Yres_float$layout() {
        return Yres_float$LAYOUT;
    }

    private static final long Yres_float$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float Yres_float
     * }
     */
    public static final long Yres_float$offset() {
        return Yres_float$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float Yres_float
     * }
     */
    public static float Yres_float(MemorySegment struct) {
        return struct.get(Yres_float$LAYOUT, Yres_float$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float Yres_float
     * }
     */
    public static void Yres_float(MemorySegment struct, float fieldValue) {
        struct.set(Yres_float$LAYOUT, Yres_float$OFFSET, fieldValue);
    }

    private static final AddressLayout mode$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("mode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *mode
     * }
     */
    public static final AddressLayout mode$layout() {
        return mode$LAYOUT;
    }

    private static final long mode$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *mode
     * }
     */
    public static final long mode$offset() {
        return mode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *mode
     * }
     */
    public static MemorySegment mode(MemorySegment struct) {
        return struct.get(mode$LAYOUT, mode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *mode
     * }
     */
    public static void mode(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(mode$LAYOUT, mode$OFFSET, fieldValue);
    }

    private static final OfInt dtype$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dtype"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VipsImageType dtype
     * }
     */
    public static final OfInt dtype$layout() {
        return dtype$LAYOUT;
    }

    private static final long dtype$OFFSET = 200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VipsImageType dtype
     * }
     */
    public static final long dtype$offset() {
        return dtype$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VipsImageType dtype
     * }
     */
    public static int dtype(MemorySegment struct) {
        return struct.get(dtype$LAYOUT, dtype$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VipsImageType dtype
     * }
     */
    public static void dtype(MemorySegment struct, int fieldValue) {
        struct.set(dtype$LAYOUT, dtype$OFFSET, fieldValue);
    }

    private static final OfInt fd$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fd"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int fd
     * }
     */
    public static final OfInt fd$layout() {
        return fd$LAYOUT;
    }

    private static final long fd$OFFSET = 204;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int fd
     * }
     */
    public static final long fd$offset() {
        return fd$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int fd
     * }
     */
    public static int fd(MemorySegment struct) {
        return struct.get(fd$LAYOUT, fd$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int fd
     * }
     */
    public static void fd(MemorySegment struct, int fieldValue) {
        struct.set(fd$LAYOUT, fd$OFFSET, fieldValue);
    }

    private static final AddressLayout baseaddr$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("baseaddr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *baseaddr
     * }
     */
    public static final AddressLayout baseaddr$layout() {
        return baseaddr$LAYOUT;
    }

    private static final long baseaddr$OFFSET = 208;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *baseaddr
     * }
     */
    public static final long baseaddr$offset() {
        return baseaddr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *baseaddr
     * }
     */
    public static MemorySegment baseaddr(MemorySegment struct) {
        return struct.get(baseaddr$LAYOUT, baseaddr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *baseaddr
     * }
     */
    public static void baseaddr(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(baseaddr$LAYOUT, baseaddr$OFFSET, fieldValue);
    }

    private static final OfLong length$LAYOUT = (OfLong)$LAYOUT.select(groupElement("length"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t length
     * }
     */
    public static final OfLong length$layout() {
        return length$LAYOUT;
    }

    private static final long length$OFFSET = 216;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t length
     * }
     */
    public static final long length$offset() {
        return length$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t length
     * }
     */
    public static long length(MemorySegment struct) {
        return struct.get(length$LAYOUT, length$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t length
     * }
     */
    public static void length(MemorySegment struct, long fieldValue) {
        struct.set(length$LAYOUT, length$OFFSET, fieldValue);
    }

    private static final OfInt magic$LAYOUT = (OfInt)$LAYOUT.select(groupElement("magic"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * guint32 magic
     * }
     */
    public static final OfInt magic$layout() {
        return magic$LAYOUT;
    }

    private static final long magic$OFFSET = 224;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * guint32 magic
     * }
     */
    public static final long magic$offset() {
        return magic$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * guint32 magic
     * }
     */
    public static int magic(MemorySegment struct) {
        return struct.get(magic$LAYOUT, magic$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * guint32 magic
     * }
     */
    public static void magic(MemorySegment struct, int fieldValue) {
        struct.set(magic$LAYOUT, magic$OFFSET, fieldValue);
    }

    private static final AddressLayout start_fn$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("start_fn"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VipsStartFn start_fn
     * }
     */
    public static final AddressLayout start_fn$layout() {
        return start_fn$LAYOUT;
    }

    private static final long start_fn$OFFSET = 232;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VipsStartFn start_fn
     * }
     */
    public static final long start_fn$offset() {
        return start_fn$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VipsStartFn start_fn
     * }
     */
    public static MemorySegment start_fn(MemorySegment struct) {
        return struct.get(start_fn$LAYOUT, start_fn$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VipsStartFn start_fn
     * }
     */
    public static void start_fn(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(start_fn$LAYOUT, start_fn$OFFSET, fieldValue);
    }

    private static final AddressLayout generate_fn$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("generate_fn"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VipsGenerateFn generate_fn
     * }
     */
    public static final AddressLayout generate_fn$layout() {
        return generate_fn$LAYOUT;
    }

    private static final long generate_fn$OFFSET = 240;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VipsGenerateFn generate_fn
     * }
     */
    public static final long generate_fn$offset() {
        return generate_fn$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VipsGenerateFn generate_fn
     * }
     */
    public static MemorySegment generate_fn(MemorySegment struct) {
        return struct.get(generate_fn$LAYOUT, generate_fn$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VipsGenerateFn generate_fn
     * }
     */
    public static void generate_fn(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(generate_fn$LAYOUT, generate_fn$OFFSET, fieldValue);
    }

    private static final AddressLayout stop_fn$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("stop_fn"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VipsStopFn stop_fn
     * }
     */
    public static final AddressLayout stop_fn$layout() {
        return stop_fn$LAYOUT;
    }

    private static final long stop_fn$OFFSET = 248;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VipsStopFn stop_fn
     * }
     */
    public static final long stop_fn$offset() {
        return stop_fn$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VipsStopFn stop_fn
     * }
     */
    public static MemorySegment stop_fn(MemorySegment struct) {
        return struct.get(stop_fn$LAYOUT, stop_fn$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VipsStopFn stop_fn
     * }
     */
    public static void stop_fn(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(stop_fn$LAYOUT, stop_fn$OFFSET, fieldValue);
    }

    private static final AddressLayout client1$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("client1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *client1
     * }
     */
    public static final AddressLayout client1$layout() {
        return client1$LAYOUT;
    }

    private static final long client1$OFFSET = 256;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *client1
     * }
     */
    public static final long client1$offset() {
        return client1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *client1
     * }
     */
    public static MemorySegment client1(MemorySegment struct) {
        return struct.get(client1$LAYOUT, client1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *client1
     * }
     */
    public static void client1(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(client1$LAYOUT, client1$OFFSET, fieldValue);
    }

    private static final AddressLayout client2$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("client2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *client2
     * }
     */
    public static final AddressLayout client2$layout() {
        return client2$LAYOUT;
    }

    private static final long client2$OFFSET = 264;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *client2
     * }
     */
    public static final long client2$offset() {
        return client2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *client2
     * }
     */
    public static MemorySegment client2(MemorySegment struct) {
        return struct.get(client2$LAYOUT, client2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *client2
     * }
     */
    public static void client2(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(client2$LAYOUT, client2$OFFSET, fieldValue);
    }

    private static final AddressLayout sslock$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("sslock"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GMutex *sslock
     * }
     */
    public static final AddressLayout sslock$layout() {
        return sslock$LAYOUT;
    }

    private static final long sslock$OFFSET = 272;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GMutex *sslock
     * }
     */
    public static final long sslock$offset() {
        return sslock$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GMutex *sslock
     * }
     */
    public static MemorySegment sslock(MemorySegment struct) {
        return struct.get(sslock$LAYOUT, sslock$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GMutex *sslock
     * }
     */
    public static void sslock(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(sslock$LAYOUT, sslock$OFFSET, fieldValue);
    }

    private static final AddressLayout regions$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("regions"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GSList *regions
     * }
     */
    public static final AddressLayout regions$layout() {
        return regions$LAYOUT;
    }

    private static final long regions$OFFSET = 280;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GSList *regions
     * }
     */
    public static final long regions$offset() {
        return regions$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GSList *regions
     * }
     */
    public static MemorySegment regions(MemorySegment struct) {
        return struct.get(regions$LAYOUT, regions$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GSList *regions
     * }
     */
    public static void regions(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(regions$LAYOUT, regions$OFFSET, fieldValue);
    }

    private static final OfInt dhint$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dhint"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VipsDemandStyle dhint
     * }
     */
    public static final OfInt dhint$layout() {
        return dhint$LAYOUT;
    }

    private static final long dhint$OFFSET = 288;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VipsDemandStyle dhint
     * }
     */
    public static final long dhint$offset() {
        return dhint$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VipsDemandStyle dhint
     * }
     */
    public static int dhint(MemorySegment struct) {
        return struct.get(dhint$LAYOUT, dhint$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VipsDemandStyle dhint
     * }
     */
    public static void dhint(MemorySegment struct, int fieldValue) {
        struct.set(dhint$LAYOUT, dhint$OFFSET, fieldValue);
    }

    private static final AddressLayout meta$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("meta"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GHashTable *meta
     * }
     */
    public static final AddressLayout meta$layout() {
        return meta$LAYOUT;
    }

    private static final long meta$OFFSET = 296;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GHashTable *meta
     * }
     */
    public static final long meta$offset() {
        return meta$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GHashTable *meta
     * }
     */
    public static MemorySegment meta(MemorySegment struct) {
        return struct.get(meta$LAYOUT, meta$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GHashTable *meta
     * }
     */
    public static void meta(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(meta$LAYOUT, meta$OFFSET, fieldValue);
    }

    private static final AddressLayout meta_traverse$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("meta_traverse"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GSList *meta_traverse
     * }
     */
    public static final AddressLayout meta_traverse$layout() {
        return meta_traverse$LAYOUT;
    }

    private static final long meta_traverse$OFFSET = 304;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GSList *meta_traverse
     * }
     */
    public static final long meta_traverse$offset() {
        return meta_traverse$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GSList *meta_traverse
     * }
     */
    public static MemorySegment meta_traverse(MemorySegment struct) {
        return struct.get(meta_traverse$LAYOUT, meta_traverse$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GSList *meta_traverse
     * }
     */
    public static void meta_traverse(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(meta_traverse$LAYOUT, meta_traverse$OFFSET, fieldValue);
    }

    private static final OfLong sizeof_header$LAYOUT = (OfLong)$LAYOUT.select(groupElement("sizeof_header"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gint64 sizeof_header
     * }
     */
    public static final OfLong sizeof_header$layout() {
        return sizeof_header$LAYOUT;
    }

    private static final long sizeof_header$OFFSET = 312;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gint64 sizeof_header
     * }
     */
    public static final long sizeof_header$offset() {
        return sizeof_header$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gint64 sizeof_header
     * }
     */
    public static long sizeof_header(MemorySegment struct) {
        return struct.get(sizeof_header$LAYOUT, sizeof_header$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gint64 sizeof_header
     * }
     */
    public static void sizeof_header(MemorySegment struct, long fieldValue) {
        struct.set(sizeof_header$LAYOUT, sizeof_header$OFFSET, fieldValue);
    }

    private static final AddressLayout windows$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("windows"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GSList *windows
     * }
     */
    public static final AddressLayout windows$layout() {
        return windows$LAYOUT;
    }

    private static final long windows$OFFSET = 320;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GSList *windows
     * }
     */
    public static final long windows$offset() {
        return windows$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GSList *windows
     * }
     */
    public static MemorySegment windows(MemorySegment struct) {
        return struct.get(windows$LAYOUT, windows$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GSList *windows
     * }
     */
    public static void windows(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(windows$LAYOUT, windows$OFFSET, fieldValue);
    }

    private static final AddressLayout upstream$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("upstream"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GSList *upstream
     * }
     */
    public static final AddressLayout upstream$layout() {
        return upstream$LAYOUT;
    }

    private static final long upstream$OFFSET = 328;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GSList *upstream
     * }
     */
    public static final long upstream$offset() {
        return upstream$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GSList *upstream
     * }
     */
    public static MemorySegment upstream(MemorySegment struct) {
        return struct.get(upstream$LAYOUT, upstream$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GSList *upstream
     * }
     */
    public static void upstream(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(upstream$LAYOUT, upstream$OFFSET, fieldValue);
    }

    private static final AddressLayout downstream$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("downstream"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GSList *downstream
     * }
     */
    public static final AddressLayout downstream$layout() {
        return downstream$LAYOUT;
    }

    private static final long downstream$OFFSET = 336;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GSList *downstream
     * }
     */
    public static final long downstream$offset() {
        return downstream$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GSList *downstream
     * }
     */
    public static MemorySegment downstream(MemorySegment struct) {
        return struct.get(downstream$LAYOUT, downstream$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GSList *downstream
     * }
     */
    public static void downstream(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(downstream$LAYOUT, downstream$OFFSET, fieldValue);
    }

    private static final OfInt serial$LAYOUT = (OfInt)$LAYOUT.select(groupElement("serial"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int serial
     * }
     */
    public static final OfInt serial$layout() {
        return serial$LAYOUT;
    }

    private static final long serial$OFFSET = 344;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int serial
     * }
     */
    public static final long serial$offset() {
        return serial$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int serial
     * }
     */
    public static int serial(MemorySegment struct) {
        return struct.get(serial$LAYOUT, serial$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int serial
     * }
     */
    public static void serial(MemorySegment struct, int fieldValue) {
        struct.set(serial$LAYOUT, serial$OFFSET, fieldValue);
    }

    private static final AddressLayout history_list$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("history_list"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GSList *history_list
     * }
     */
    public static final AddressLayout history_list$layout() {
        return history_list$LAYOUT;
    }

    private static final long history_list$OFFSET = 352;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GSList *history_list
     * }
     */
    public static final long history_list$offset() {
        return history_list$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GSList *history_list
     * }
     */
    public static MemorySegment history_list(MemorySegment struct) {
        return struct.get(history_list$LAYOUT, history_list$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GSList *history_list
     * }
     */
    public static void history_list(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(history_list$LAYOUT, history_list$OFFSET, fieldValue);
    }

    private static final AddressLayout progress_signal$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("progress_signal"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VipsImage *progress_signal
     * }
     */
    public static final AddressLayout progress_signal$layout() {
        return progress_signal$LAYOUT;
    }

    private static final long progress_signal$OFFSET = 360;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VipsImage *progress_signal
     * }
     */
    public static final long progress_signal$offset() {
        return progress_signal$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VipsImage *progress_signal
     * }
     */
    public static MemorySegment progress_signal(MemorySegment struct) {
        return struct.get(progress_signal$LAYOUT, progress_signal$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VipsImage *progress_signal
     * }
     */
    public static void progress_signal(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(progress_signal$LAYOUT, progress_signal$OFFSET, fieldValue);
    }

    private static final OfLong file_length$LAYOUT = (OfLong)$LAYOUT.select(groupElement("file_length"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gint64 file_length
     * }
     */
    public static final OfLong file_length$layout() {
        return file_length$LAYOUT;
    }

    private static final long file_length$OFFSET = 368;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gint64 file_length
     * }
     */
    public static final long file_length$offset() {
        return file_length$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gint64 file_length
     * }
     */
    public static long file_length(MemorySegment struct) {
        return struct.get(file_length$LAYOUT, file_length$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gint64 file_length
     * }
     */
    public static void file_length(MemorySegment struct, long fieldValue) {
        struct.set(file_length$LAYOUT, file_length$OFFSET, fieldValue);
    }

    private static final OfInt hint_set$LAYOUT = (OfInt)$LAYOUT.select(groupElement("hint_set"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean hint_set
     * }
     */
    public static final OfInt hint_set$layout() {
        return hint_set$LAYOUT;
    }

    private static final long hint_set$OFFSET = 376;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean hint_set
     * }
     */
    public static final long hint_set$offset() {
        return hint_set$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean hint_set
     * }
     */
    public static int hint_set(MemorySegment struct) {
        return struct.get(hint_set$LAYOUT, hint_set$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean hint_set
     * }
     */
    public static void hint_set(MemorySegment struct, int fieldValue) {
        struct.set(hint_set$LAYOUT, hint_set$OFFSET, fieldValue);
    }

    private static final OfInt delete_on_close$LAYOUT = (OfInt)$LAYOUT.select(groupElement("delete_on_close"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean delete_on_close
     * }
     */
    public static final OfInt delete_on_close$layout() {
        return delete_on_close$LAYOUT;
    }

    private static final long delete_on_close$OFFSET = 380;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean delete_on_close
     * }
     */
    public static final long delete_on_close$offset() {
        return delete_on_close$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean delete_on_close
     * }
     */
    public static int delete_on_close(MemorySegment struct) {
        return struct.get(delete_on_close$LAYOUT, delete_on_close$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean delete_on_close
     * }
     */
    public static void delete_on_close(MemorySegment struct, int fieldValue) {
        struct.set(delete_on_close$LAYOUT, delete_on_close$OFFSET, fieldValue);
    }

    private static final AddressLayout delete_on_close_filename$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("delete_on_close_filename"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *delete_on_close_filename
     * }
     */
    public static final AddressLayout delete_on_close_filename$layout() {
        return delete_on_close_filename$LAYOUT;
    }

    private static final long delete_on_close_filename$OFFSET = 384;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *delete_on_close_filename
     * }
     */
    public static final long delete_on_close_filename$offset() {
        return delete_on_close_filename$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *delete_on_close_filename
     * }
     */
    public static MemorySegment delete_on_close_filename(MemorySegment struct) {
        return struct.get(delete_on_close_filename$LAYOUT, delete_on_close_filename$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *delete_on_close_filename
     * }
     */
    public static void delete_on_close_filename(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(delete_on_close_filename$LAYOUT, delete_on_close_filename$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

