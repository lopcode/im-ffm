// Generated by jextract

package app.photofox.vipsffm.generated;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _VipsOperationClass {
 *     VipsObjectClass parent_class;
 *     void (*usage)(struct _VipsOperationClass *, VipsBuf *);
 *     VipsOperationFlags (*get_flags)(VipsOperation *);
 *     VipsOperationFlags flags;
 *     void (*invalidate)(VipsOperation *);
 * }
 * }
 */
public class _VipsOperationClass {

    _VipsOperationClass() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _VipsObjectClass.layout().withName("parent_class"),
        VipsRaw.C_POINTER.withName("usage"),
        VipsRaw.C_POINTER.withName("get_flags"),
        VipsRaw.C_INT.withName("flags"),
        MemoryLayout.paddingLayout(4),
        VipsRaw.C_POINTER.withName("invalidate")
    ).withName("_VipsOperationClass");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout parent_class$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("parent_class"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VipsObjectClass parent_class
     * }
     */
    public static final GroupLayout parent_class$layout() {
        return parent_class$LAYOUT;
    }

    private static final long parent_class$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VipsObjectClass parent_class
     * }
     */
    public static final long parent_class$offset() {
        return parent_class$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VipsObjectClass parent_class
     * }
     */
    public static MemorySegment parent_class(MemorySegment struct) {
        return struct.asSlice(parent_class$OFFSET, parent_class$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VipsObjectClass parent_class
     * }
     */
    public static void parent_class(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, parent_class$OFFSET, parent_class$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * void (*usage)(struct _VipsOperationClass *, VipsBuf *)
     * }
     */
    public static class usage {

        usage() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER,
            VipsRaw.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = VipsRaw.upcallHandle(usage.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(usage.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout usage$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("usage"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*usage)(struct _VipsOperationClass *, VipsBuf *)
     * }
     */
    public static final AddressLayout usage$layout() {
        return usage$LAYOUT;
    }

    private static final long usage$OFFSET = 328;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*usage)(struct _VipsOperationClass *, VipsBuf *)
     * }
     */
    public static final long usage$offset() {
        return usage$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*usage)(struct _VipsOperationClass *, VipsBuf *)
     * }
     */
    public static MemorySegment usage(MemorySegment struct) {
        return struct.get(usage$LAYOUT, usage$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*usage)(struct _VipsOperationClass *, VipsBuf *)
     * }
     */
    public static void usage(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(usage$LAYOUT, usage$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * VipsOperationFlags (*get_flags)(VipsOperation *)
     * }
     */
    public static class get_flags {

        get_flags() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            VipsRaw.C_INT,
            VipsRaw.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = VipsRaw.upcallHandle(get_flags.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_flags.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_flags$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VipsOperationFlags (*get_flags)(VipsOperation *)
     * }
     */
    public static final AddressLayout get_flags$layout() {
        return get_flags$LAYOUT;
    }

    private static final long get_flags$OFFSET = 336;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VipsOperationFlags (*get_flags)(VipsOperation *)
     * }
     */
    public static final long get_flags$offset() {
        return get_flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VipsOperationFlags (*get_flags)(VipsOperation *)
     * }
     */
    public static MemorySegment get_flags(MemorySegment struct) {
        return struct.get(get_flags$LAYOUT, get_flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VipsOperationFlags (*get_flags)(VipsOperation *)
     * }
     */
    public static void get_flags(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_flags$LAYOUT, get_flags$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VipsOperationFlags flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 344;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VipsOperationFlags flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VipsOperationFlags flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VipsOperationFlags flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*invalidate)(VipsOperation *)
     * }
     */
    public static class invalidate {

        invalidate() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            VipsRaw.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = VipsRaw.upcallHandle(invalidate.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(invalidate.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout invalidate$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("invalidate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*invalidate)(VipsOperation *)
     * }
     */
    public static final AddressLayout invalidate$layout() {
        return invalidate$LAYOUT;
    }

    private static final long invalidate$OFFSET = 352;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*invalidate)(VipsOperation *)
     * }
     */
    public static final long invalidate$offset() {
        return invalidate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*invalidate)(VipsOperation *)
     * }
     */
    public static MemorySegment invalidate(MemorySegment struct) {
        return struct.get(invalidate$LAYOUT, invalidate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*invalidate)(VipsOperation *)
     * }
     */
    public static void invalidate(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(invalidate$LAYOUT, invalidate$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

