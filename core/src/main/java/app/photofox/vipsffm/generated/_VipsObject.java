// Generated by jextract

package app.photofox.vipsffm.generated;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _VipsObject {
 *     GObject parent_instance;
 *     gboolean constructed;
 *     gboolean static_object;
 *     VipsArgumentTable *argument_table;
 *     char *nickname;
 *     char *description;
 *     gboolean preclose;
 *     gboolean close;
 *     gboolean postclose;
 *     size_t local_memory;
 * }
 * }
 */
public class _VipsObject {

    _VipsObject() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _GObject.layout().withName("parent_instance"),
        vips_h.C_INT.withName("constructed"),
        vips_h.C_INT.withName("static_object"),
        vips_h.C_POINTER.withName("argument_table"),
        vips_h.C_POINTER.withName("nickname"),
        vips_h.C_POINTER.withName("description"),
        vips_h.C_INT.withName("preclose"),
        vips_h.C_INT.withName("close"),
        vips_h.C_INT.withName("postclose"),
        MemoryLayout.paddingLayout(4),
        vips_h.C_LONG.withName("local_memory")
    ).withName("_VipsObject");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout parent_instance$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("parent_instance"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GObject parent_instance
     * }
     */
    public static final GroupLayout parent_instance$layout() {
        return parent_instance$LAYOUT;
    }

    private static final long parent_instance$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GObject parent_instance
     * }
     */
    public static final long parent_instance$offset() {
        return parent_instance$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GObject parent_instance
     * }
     */
    public static MemorySegment parent_instance(MemorySegment struct) {
        return struct.asSlice(parent_instance$OFFSET, parent_instance$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GObject parent_instance
     * }
     */
    public static void parent_instance(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, parent_instance$OFFSET, parent_instance$LAYOUT.byteSize());
    }

    private static final OfInt constructed$LAYOUT = (OfInt)$LAYOUT.select(groupElement("constructed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean constructed
     * }
     */
    public static final OfInt constructed$layout() {
        return constructed$LAYOUT;
    }

    private static final long constructed$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean constructed
     * }
     */
    public static final long constructed$offset() {
        return constructed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean constructed
     * }
     */
    public static int constructed(MemorySegment struct) {
        return struct.get(constructed$LAYOUT, constructed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean constructed
     * }
     */
    public static void constructed(MemorySegment struct, int fieldValue) {
        struct.set(constructed$LAYOUT, constructed$OFFSET, fieldValue);
    }

    private static final OfInt static_object$LAYOUT = (OfInt)$LAYOUT.select(groupElement("static_object"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean static_object
     * }
     */
    public static final OfInt static_object$layout() {
        return static_object$LAYOUT;
    }

    private static final long static_object$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean static_object
     * }
     */
    public static final long static_object$offset() {
        return static_object$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean static_object
     * }
     */
    public static int static_object(MemorySegment struct) {
        return struct.get(static_object$LAYOUT, static_object$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean static_object
     * }
     */
    public static void static_object(MemorySegment struct, int fieldValue) {
        struct.set(static_object$LAYOUT, static_object$OFFSET, fieldValue);
    }

    private static final AddressLayout argument_table$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("argument_table"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VipsArgumentTable *argument_table
     * }
     */
    public static final AddressLayout argument_table$layout() {
        return argument_table$LAYOUT;
    }

    private static final long argument_table$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VipsArgumentTable *argument_table
     * }
     */
    public static final long argument_table$offset() {
        return argument_table$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VipsArgumentTable *argument_table
     * }
     */
    public static MemorySegment argument_table(MemorySegment struct) {
        return struct.get(argument_table$LAYOUT, argument_table$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VipsArgumentTable *argument_table
     * }
     */
    public static void argument_table(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(argument_table$LAYOUT, argument_table$OFFSET, fieldValue);
    }

    private static final AddressLayout nickname$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nickname"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *nickname
     * }
     */
    public static final AddressLayout nickname$layout() {
        return nickname$LAYOUT;
    }

    private static final long nickname$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *nickname
     * }
     */
    public static final long nickname$offset() {
        return nickname$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *nickname
     * }
     */
    public static MemorySegment nickname(MemorySegment struct) {
        return struct.get(nickname$LAYOUT, nickname$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *nickname
     * }
     */
    public static void nickname(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nickname$LAYOUT, nickname$OFFSET, fieldValue);
    }

    private static final AddressLayout description$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("description"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *description
     * }
     */
    public static final AddressLayout description$layout() {
        return description$LAYOUT;
    }

    private static final long description$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *description
     * }
     */
    public static final long description$offset() {
        return description$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *description
     * }
     */
    public static MemorySegment description(MemorySegment struct) {
        return struct.get(description$LAYOUT, description$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *description
     * }
     */
    public static void description(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(description$LAYOUT, description$OFFSET, fieldValue);
    }

    private static final OfInt preclose$LAYOUT = (OfInt)$LAYOUT.select(groupElement("preclose"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean preclose
     * }
     */
    public static final OfInt preclose$layout() {
        return preclose$LAYOUT;
    }

    private static final long preclose$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean preclose
     * }
     */
    public static final long preclose$offset() {
        return preclose$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean preclose
     * }
     */
    public static int preclose(MemorySegment struct) {
        return struct.get(preclose$LAYOUT, preclose$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean preclose
     * }
     */
    public static void preclose(MemorySegment struct, int fieldValue) {
        struct.set(preclose$LAYOUT, preclose$OFFSET, fieldValue);
    }

    private static final OfInt close$LAYOUT = (OfInt)$LAYOUT.select(groupElement("close"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean close
     * }
     */
    public static final OfInt close$layout() {
        return close$LAYOUT;
    }

    private static final long close$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean close
     * }
     */
    public static final long close$offset() {
        return close$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean close
     * }
     */
    public static int close(MemorySegment struct) {
        return struct.get(close$LAYOUT, close$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean close
     * }
     */
    public static void close(MemorySegment struct, int fieldValue) {
        struct.set(close$LAYOUT, close$OFFSET, fieldValue);
    }

    private static final OfInt postclose$LAYOUT = (OfInt)$LAYOUT.select(groupElement("postclose"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean postclose
     * }
     */
    public static final OfInt postclose$layout() {
        return postclose$LAYOUT;
    }

    private static final long postclose$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean postclose
     * }
     */
    public static final long postclose$offset() {
        return postclose$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean postclose
     * }
     */
    public static int postclose(MemorySegment struct) {
        return struct.get(postclose$LAYOUT, postclose$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean postclose
     * }
     */
    public static void postclose(MemorySegment struct, int fieldValue) {
        struct.set(postclose$LAYOUT, postclose$OFFSET, fieldValue);
    }

    private static final OfLong local_memory$LAYOUT = (OfLong)$LAYOUT.select(groupElement("local_memory"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t local_memory
     * }
     */
    public static final OfLong local_memory$layout() {
        return local_memory$LAYOUT;
    }

    private static final long local_memory$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t local_memory
     * }
     */
    public static final long local_memory$offset() {
        return local_memory$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t local_memory
     * }
     */
    public static long local_memory(MemorySegment struct) {
        return struct.get(local_memory$LAYOUT, local_memory$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t local_memory
     * }
     */
    public static void local_memory(MemorySegment struct, long fieldValue) {
        struct.set(local_memory$LAYOUT, local_memory$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

