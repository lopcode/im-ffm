// Generated by jextract

package app.photofox.vipsffm.generated;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _VipsSourceGInputStream {
 *     VipsSource parent_instance;
 *     GInputStream *stream;
 *     GSeekable *seekable;
 *     GFileInfo *info;
 * }
 * }
 */
public class _VipsSourceGInputStream {

    _VipsSourceGInputStream() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _VipsSource.layout().withName("parent_instance"),
        VipsRaw.C_POINTER.withName("stream"),
        VipsRaw.C_POINTER.withName("seekable"),
        VipsRaw.C_POINTER.withName("info")
    ).withName("_VipsSourceGInputStream");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout parent_instance$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("parent_instance"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VipsSource parent_instance
     * }
     */
    public static final GroupLayout parent_instance$layout() {
        return parent_instance$LAYOUT;
    }

    private static final long parent_instance$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VipsSource parent_instance
     * }
     */
    public static final long parent_instance$offset() {
        return parent_instance$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VipsSource parent_instance
     * }
     */
    public static MemorySegment parent_instance(MemorySegment struct) {
        return struct.asSlice(parent_instance$OFFSET, parent_instance$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VipsSource parent_instance
     * }
     */
    public static void parent_instance(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, parent_instance$OFFSET, parent_instance$LAYOUT.byteSize());
    }

    private static final AddressLayout stream$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("stream"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GInputStream *stream
     * }
     */
    public static final AddressLayout stream$layout() {
        return stream$LAYOUT;
    }

    private static final long stream$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GInputStream *stream
     * }
     */
    public static final long stream$offset() {
        return stream$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GInputStream *stream
     * }
     */
    public static MemorySegment stream(MemorySegment struct) {
        return struct.get(stream$LAYOUT, stream$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GInputStream *stream
     * }
     */
    public static void stream(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(stream$LAYOUT, stream$OFFSET, fieldValue);
    }

    private static final AddressLayout seekable$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("seekable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GSeekable *seekable
     * }
     */
    public static final AddressLayout seekable$layout() {
        return seekable$LAYOUT;
    }

    private static final long seekable$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GSeekable *seekable
     * }
     */
    public static final long seekable$offset() {
        return seekable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GSeekable *seekable
     * }
     */
    public static MemorySegment seekable(MemorySegment struct) {
        return struct.get(seekable$LAYOUT, seekable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GSeekable *seekable
     * }
     */
    public static void seekable(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(seekable$LAYOUT, seekable$OFFSET, fieldValue);
    }

    private static final AddressLayout info$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("info"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GFileInfo *info
     * }
     */
    public static final AddressLayout info$layout() {
        return info$LAYOUT;
    }

    private static final long info$OFFSET = 200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GFileInfo *info
     * }
     */
    public static final long info$offset() {
        return info$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GFileInfo *info
     * }
     */
    public static MemorySegment info(MemorySegment struct) {
        return struct.get(info$LAYOUT, info$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GFileInfo *info
     * }
     */
    public static void info(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(info$LAYOUT, info$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

