// Generated by jextract

package app.photofox.vipsffm.generated;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class vips_h extends vips_h_1 {

    vips_h() {
        // Should not be called directly
    }
    private static final int VIPS_OPERATION_COMPLEXGET_LAST = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_COMPLEXGET_LAST = 2
     * }
     */
    public static int VIPS_OPERATION_COMPLEXGET_LAST() {
        return VIPS_OPERATION_COMPLEXGET_LAST;
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_add(VipsImage *left, VipsImage *right, VipsImage **out, ...)
     * }
     */
    public static class vips_add {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_add");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_add(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_add(VipsImage *left, VipsImage *right, VipsImage **out, ...)
         * }
         */
        public static vips_add makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_add(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment left, MemorySegment right, MemorySegment out, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_add", left, right, out, x3);
                }
                return (int)spreader.invokeExact(left, right, out, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_sum(VipsImage **in, VipsImage **out, int n, ...)
     * }
     */
    public static class vips_sum {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_sum");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_sum(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_sum(VipsImage **in, VipsImage **out, int n, ...)
         * }
         */
        public static vips_sum makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_sum(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, int n, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_sum", in, out, n, x3);
                }
                return (int)spreader.invokeExact(in, out, n, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_subtract(VipsImage *in1, VipsImage *in2, VipsImage **out, ...)
     * }
     */
    public static class vips_subtract {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_subtract");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_subtract(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_subtract(VipsImage *in1, VipsImage *in2, VipsImage **out, ...)
         * }
         */
        public static vips_subtract makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_subtract(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in1, MemorySegment in2, MemorySegment out, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_subtract", in1, in2, out, x3);
                }
                return (int)spreader.invokeExact(in1, in2, out, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_multiply(VipsImage *left, VipsImage *right, VipsImage **out, ...)
     * }
     */
    public static class vips_multiply {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_multiply");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_multiply(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_multiply(VipsImage *left, VipsImage *right, VipsImage **out, ...)
         * }
         */
        public static vips_multiply makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_multiply(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment left, MemorySegment right, MemorySegment out, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_multiply", left, right, out, x3);
                }
                return (int)spreader.invokeExact(left, right, out, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_divide(VipsImage *left, VipsImage *right, VipsImage **out, ...)
     * }
     */
    public static class vips_divide {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_divide");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_divide(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_divide(VipsImage *left, VipsImage *right, VipsImage **out, ...)
         * }
         */
        public static vips_divide makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_divide(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment left, MemorySegment right, MemorySegment out, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_divide", left, right, out, x3);
                }
                return (int)spreader.invokeExact(left, right, out, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_linear(VipsImage *in, VipsImage **out, const double *a, const double *b, int n, ...)
     * }
     */
    public static class vips_linear {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_linear");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_linear(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_linear(VipsImage *in, VipsImage **out, const double *a, const double *b, int n, ...)
         * }
         */
        public static vips_linear makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_linear(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, MemorySegment a, MemorySegment b, int n, Object... x5) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_linear", in, out, a, b, n, x5);
                }
                return (int)spreader.invokeExact(in, out, a, b, n, x5);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_linear1(VipsImage *in, VipsImage **out, double a, double b, ...)
     * }
     */
    public static class vips_linear1 {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_DOUBLE,
                vips_h.C_DOUBLE
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_linear1");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_linear1(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_linear1(VipsImage *in, VipsImage **out, double a, double b, ...)
         * }
         */
        public static vips_linear1 makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_linear1(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, double a, double b, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_linear1", in, out, a, b, x4);
                }
                return (int)spreader.invokeExact(in, out, a, b, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_remainder(VipsImage *left, VipsImage *right, VipsImage **out, ...)
     * }
     */
    public static class vips_remainder {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_remainder");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_remainder(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_remainder(VipsImage *left, VipsImage *right, VipsImage **out, ...)
         * }
         */
        public static vips_remainder makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_remainder(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment left, MemorySegment right, MemorySegment out, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_remainder", left, right, out, x3);
                }
                return (int)spreader.invokeExact(left, right, out, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_remainder_const(VipsImage *in, VipsImage **out, const double *c, int n, ...)
     * }
     */
    public static class vips_remainder_const {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_remainder_const");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_remainder_const(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_remainder_const(VipsImage *in, VipsImage **out, const double *c, int n, ...)
         * }
         */
        public static vips_remainder_const makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_remainder_const(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, MemorySegment c, int n, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_remainder_const", in, out, c, n, x4);
                }
                return (int)spreader.invokeExact(in, out, c, n, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_remainder_const1(VipsImage *in, VipsImage **out, double c, ...)
     * }
     */
    public static class vips_remainder_const1 {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_DOUBLE
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_remainder_const1");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_remainder_const1(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_remainder_const1(VipsImage *in, VipsImage **out, double c, ...)
         * }
         */
        public static vips_remainder_const1 makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_remainder_const1(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, double c, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_remainder_const1", in, out, c, x3);
                }
                return (int)spreader.invokeExact(in, out, c, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_invert(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_invert {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_invert");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_invert(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_invert(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_invert makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_invert(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_invert", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_abs(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_abs {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_abs");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_abs(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_abs(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_abs makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_abs(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_abs", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_sign(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_sign {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_sign");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_sign(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_sign(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_sign makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_sign(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_sign", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_round(VipsImage *in, VipsImage **out, VipsOperationRound round, ...)
     * }
     */
    public static class vips_round {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_round");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_round(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_round(VipsImage *in, VipsImage **out, VipsOperationRound round, ...)
         * }
         */
        public static vips_round makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_round(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, int round, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_round", in, out, round, x3);
                }
                return (int)spreader.invokeExact(in, out, round, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_floor(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_floor {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_floor");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_floor(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_floor(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_floor makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_floor(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_floor", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_ceil(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_ceil {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_ceil");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_ceil(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_ceil(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_ceil makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_ceil(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_ceil", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_rint(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_rint {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_rint");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_rint(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_rint(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_rint makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_rint(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_rint", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_math(VipsImage *in, VipsImage **out, VipsOperationMath math, ...)
     * }
     */
    public static class vips_math {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_math");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_math(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_math(VipsImage *in, VipsImage **out, VipsOperationMath math, ...)
         * }
         */
        public static vips_math makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_math(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, int math, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_math", in, out, math, x3);
                }
                return (int)spreader.invokeExact(in, out, math, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_sin(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_sin {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_sin");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_sin(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_sin(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_sin makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_sin(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_sin", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_cos(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_cos {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_cos");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_cos(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_cos(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_cos makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_cos(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_cos", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_tan(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_tan {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_tan");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_tan(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_tan(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_tan makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_tan(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_tan", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_asin(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_asin {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_asin");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_asin(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_asin(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_asin makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_asin(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_asin", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_acos(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_acos {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_acos");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_acos(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_acos(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_acos makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_acos(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_acos", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_atan(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_atan {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_atan");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_atan(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_atan(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_atan makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_atan(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_atan", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_exp(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_exp {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_exp");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_exp(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_exp(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_exp makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_exp(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_exp", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_exp10(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_exp10 {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_exp10");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_exp10(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_exp10(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_exp10 makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_exp10(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_exp10", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_log(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_log {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_log");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_log(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_log(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_log makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_log(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_log", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_log10(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_log10 {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_log10");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_log10(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_log10(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_log10 makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_log10(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_log10", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_sinh(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_sinh {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_sinh");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_sinh(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_sinh(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_sinh makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_sinh(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_sinh", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_cosh(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_cosh {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_cosh");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_cosh(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_cosh(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_cosh makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_cosh(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_cosh", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_tanh(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_tanh {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_tanh");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_tanh(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_tanh(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_tanh makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_tanh(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_tanh", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_asinh(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_asinh {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_asinh");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_asinh(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_asinh(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_asinh makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_asinh(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_asinh", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_acosh(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_acosh {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_acosh");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_acosh(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_acosh(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_acosh makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_acosh(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_acosh", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_atanh(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_atanh {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_atanh");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_atanh(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_atanh(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_atanh makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_atanh(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_atanh", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_complex(VipsImage *in, VipsImage **out, VipsOperationComplex cmplx, ...)
     * }
     */
    public static class vips_complex {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_complex");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_complex(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_complex(VipsImage *in, VipsImage **out, VipsOperationComplex cmplx, ...)
         * }
         */
        public static vips_complex makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_complex(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, int cmplx, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_complex", in, out, cmplx, x3);
                }
                return (int)spreader.invokeExact(in, out, cmplx, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_polar(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_polar {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_polar");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_polar(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_polar(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_polar makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_polar(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_polar", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_rect(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_rect {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_rect");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_rect(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_rect(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_rect makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_rect(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_rect", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_conj(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_conj {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_conj");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_conj(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_conj(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_conj makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_conj(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_conj", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_complex2(VipsImage *left, VipsImage *right, VipsImage **out, VipsOperationComplex2 cmplx, ...)
     * }
     */
    public static class vips_complex2 {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_complex2");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_complex2(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_complex2(VipsImage *left, VipsImage *right, VipsImage **out, VipsOperationComplex2 cmplx, ...)
         * }
         */
        public static vips_complex2 makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_complex2(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment left, MemorySegment right, MemorySegment out, int cmplx, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_complex2", left, right, out, cmplx, x4);
                }
                return (int)spreader.invokeExact(left, right, out, cmplx, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_cross_phase(VipsImage *left, VipsImage *right, VipsImage **out, ...)
     * }
     */
    public static class vips_cross_phase {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_cross_phase");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_cross_phase(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_cross_phase(VipsImage *left, VipsImage *right, VipsImage **out, ...)
         * }
         */
        public static vips_cross_phase makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_cross_phase(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment left, MemorySegment right, MemorySegment out, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_cross_phase", left, right, out, x3);
                }
                return (int)spreader.invokeExact(left, right, out, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_complexget(VipsImage *in, VipsImage **out, VipsOperationComplexget get, ...)
     * }
     */
    public static class vips_complexget {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_complexget");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_complexget(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_complexget(VipsImage *in, VipsImage **out, VipsOperationComplexget get, ...)
         * }
         */
        public static vips_complexget makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_complexget(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, int get, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_complexget", in, out, get, x3);
                }
                return (int)spreader.invokeExact(in, out, get, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_real(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_real {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_real");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_real(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_real(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_real makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_real(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_real", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_imag(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_imag {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_imag");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_imag(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_imag(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_imag makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_imag(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_imag", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_complexform(VipsImage *left, VipsImage *right, VipsImage **out, ...)
     * }
     */
    public static class vips_complexform {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_complexform");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_complexform(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_complexform(VipsImage *left, VipsImage *right, VipsImage **out, ...)
         * }
         */
        public static vips_complexform makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_complexform(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment left, MemorySegment right, MemorySegment out, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_complexform", left, right, out, x3);
                }
                return (int)spreader.invokeExact(left, right, out, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_relational(VipsImage *left, VipsImage *right, VipsImage **out, VipsOperationRelational relational, ...)
     * }
     */
    public static class vips_relational {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_relational");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_relational(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_relational(VipsImage *left, VipsImage *right, VipsImage **out, VipsOperationRelational relational, ...)
         * }
         */
        public static vips_relational makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_relational(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment left, MemorySegment right, MemorySegment out, int relational, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_relational", left, right, out, relational, x4);
                }
                return (int)spreader.invokeExact(left, right, out, relational, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_equal(VipsImage *left, VipsImage *right, VipsImage **out, ...)
     * }
     */
    public static class vips_equal {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_equal");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_equal(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_equal(VipsImage *left, VipsImage *right, VipsImage **out, ...)
         * }
         */
        public static vips_equal makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_equal(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment left, MemorySegment right, MemorySegment out, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_equal", left, right, out, x3);
                }
                return (int)spreader.invokeExact(left, right, out, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_notequal(VipsImage *left, VipsImage *right, VipsImage **out, ...)
     * }
     */
    public static class vips_notequal {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_notequal");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_notequal(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_notequal(VipsImage *left, VipsImage *right, VipsImage **out, ...)
         * }
         */
        public static vips_notequal makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_notequal(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment left, MemorySegment right, MemorySegment out, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_notequal", left, right, out, x3);
                }
                return (int)spreader.invokeExact(left, right, out, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_less(VipsImage *left, VipsImage *right, VipsImage **out, ...)
     * }
     */
    public static class vips_less {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_less");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_less(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_less(VipsImage *left, VipsImage *right, VipsImage **out, ...)
         * }
         */
        public static vips_less makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_less(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment left, MemorySegment right, MemorySegment out, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_less", left, right, out, x3);
                }
                return (int)spreader.invokeExact(left, right, out, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_lesseq(VipsImage *left, VipsImage *right, VipsImage **out, ...)
     * }
     */
    public static class vips_lesseq {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_lesseq");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_lesseq(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_lesseq(VipsImage *left, VipsImage *right, VipsImage **out, ...)
         * }
         */
        public static vips_lesseq makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_lesseq(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment left, MemorySegment right, MemorySegment out, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_lesseq", left, right, out, x3);
                }
                return (int)spreader.invokeExact(left, right, out, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_more(VipsImage *left, VipsImage *right, VipsImage **out, ...)
     * }
     */
    public static class vips_more {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_more");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_more(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_more(VipsImage *left, VipsImage *right, VipsImage **out, ...)
         * }
         */
        public static vips_more makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_more(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment left, MemorySegment right, MemorySegment out, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_more", left, right, out, x3);
                }
                return (int)spreader.invokeExact(left, right, out, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_moreeq(VipsImage *left, VipsImage *right, VipsImage **out, ...)
     * }
     */
    public static class vips_moreeq {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_moreeq");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_moreeq(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_moreeq(VipsImage *left, VipsImage *right, VipsImage **out, ...)
         * }
         */
        public static vips_moreeq makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_moreeq(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment left, MemorySegment right, MemorySegment out, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_moreeq", left, right, out, x3);
                }
                return (int)spreader.invokeExact(left, right, out, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_relational_const(VipsImage *in, VipsImage **out, VipsOperationRelational relational, const double *c, int n, ...)
     * }
     */
    public static class vips_relational_const {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_relational_const");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_relational_const(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_relational_const(VipsImage *in, VipsImage **out, VipsOperationRelational relational, const double *c, int n, ...)
         * }
         */
        public static vips_relational_const makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_relational_const(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, int relational, MemorySegment c, int n, Object... x5) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_relational_const", in, out, relational, c, n, x5);
                }
                return (int)spreader.invokeExact(in, out, relational, c, n, x5);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_equal_const(VipsImage *in, VipsImage **out, const double *c, int n, ...)
     * }
     */
    public static class vips_equal_const {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_equal_const");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_equal_const(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_equal_const(VipsImage *in, VipsImage **out, const double *c, int n, ...)
         * }
         */
        public static vips_equal_const makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_equal_const(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, MemorySegment c, int n, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_equal_const", in, out, c, n, x4);
                }
                return (int)spreader.invokeExact(in, out, c, n, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_notequal_const(VipsImage *in, VipsImage **out, const double *c, int n, ...)
     * }
     */
    public static class vips_notequal_const {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_notequal_const");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_notequal_const(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_notequal_const(VipsImage *in, VipsImage **out, const double *c, int n, ...)
         * }
         */
        public static vips_notequal_const makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_notequal_const(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, MemorySegment c, int n, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_notequal_const", in, out, c, n, x4);
                }
                return (int)spreader.invokeExact(in, out, c, n, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_less_const(VipsImage *in, VipsImage **out, const double *c, int n, ...)
     * }
     */
    public static class vips_less_const {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_less_const");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_less_const(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_less_const(VipsImage *in, VipsImage **out, const double *c, int n, ...)
         * }
         */
        public static vips_less_const makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_less_const(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, MemorySegment c, int n, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_less_const", in, out, c, n, x4);
                }
                return (int)spreader.invokeExact(in, out, c, n, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_lesseq_const(VipsImage *in, VipsImage **out, const double *c, int n, ...)
     * }
     */
    public static class vips_lesseq_const {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_lesseq_const");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_lesseq_const(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_lesseq_const(VipsImage *in, VipsImage **out, const double *c, int n, ...)
         * }
         */
        public static vips_lesseq_const makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_lesseq_const(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, MemorySegment c, int n, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_lesseq_const", in, out, c, n, x4);
                }
                return (int)spreader.invokeExact(in, out, c, n, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_more_const(VipsImage *in, VipsImage **out, const double *c, int n, ...)
     * }
     */
    public static class vips_more_const {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_more_const");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_more_const(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_more_const(VipsImage *in, VipsImage **out, const double *c, int n, ...)
         * }
         */
        public static vips_more_const makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_more_const(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, MemorySegment c, int n, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_more_const", in, out, c, n, x4);
                }
                return (int)spreader.invokeExact(in, out, c, n, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_moreeq_const(VipsImage *in, VipsImage **out, const double *c, int n, ...)
     * }
     */
    public static class vips_moreeq_const {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_moreeq_const");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_moreeq_const(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_moreeq_const(VipsImage *in, VipsImage **out, const double *c, int n, ...)
         * }
         */
        public static vips_moreeq_const makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_moreeq_const(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, MemorySegment c, int n, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_moreeq_const", in, out, c, n, x4);
                }
                return (int)spreader.invokeExact(in, out, c, n, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_relational_const1(VipsImage *in, VipsImage **out, VipsOperationRelational relational, double c, ...)
     * }
     */
    public static class vips_relational_const1 {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_DOUBLE
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_relational_const1");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_relational_const1(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_relational_const1(VipsImage *in, VipsImage **out, VipsOperationRelational relational, double c, ...)
         * }
         */
        public static vips_relational_const1 makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_relational_const1(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, int relational, double c, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_relational_const1", in, out, relational, c, x4);
                }
                return (int)spreader.invokeExact(in, out, relational, c, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_equal_const1(VipsImage *in, VipsImage **out, double c, ...)
     * }
     */
    public static class vips_equal_const1 {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_DOUBLE
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_equal_const1");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_equal_const1(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_equal_const1(VipsImage *in, VipsImage **out, double c, ...)
         * }
         */
        public static vips_equal_const1 makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_equal_const1(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, double c, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_equal_const1", in, out, c, x3);
                }
                return (int)spreader.invokeExact(in, out, c, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_notequal_const1(VipsImage *in, VipsImage **out, double c, ...)
     * }
     */
    public static class vips_notequal_const1 {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_DOUBLE
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_notequal_const1");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_notequal_const1(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_notequal_const1(VipsImage *in, VipsImage **out, double c, ...)
         * }
         */
        public static vips_notequal_const1 makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_notequal_const1(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, double c, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_notequal_const1", in, out, c, x3);
                }
                return (int)spreader.invokeExact(in, out, c, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_less_const1(VipsImage *in, VipsImage **out, double c, ...)
     * }
     */
    public static class vips_less_const1 {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_DOUBLE
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_less_const1");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_less_const1(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_less_const1(VipsImage *in, VipsImage **out, double c, ...)
         * }
         */
        public static vips_less_const1 makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_less_const1(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, double c, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_less_const1", in, out, c, x3);
                }
                return (int)spreader.invokeExact(in, out, c, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_lesseq_const1(VipsImage *in, VipsImage **out, double c, ...)
     * }
     */
    public static class vips_lesseq_const1 {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_DOUBLE
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_lesseq_const1");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_lesseq_const1(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_lesseq_const1(VipsImage *in, VipsImage **out, double c, ...)
         * }
         */
        public static vips_lesseq_const1 makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_lesseq_const1(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, double c, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_lesseq_const1", in, out, c, x3);
                }
                return (int)spreader.invokeExact(in, out, c, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_more_const1(VipsImage *in, VipsImage **out, double c, ...)
     * }
     */
    public static class vips_more_const1 {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_DOUBLE
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_more_const1");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_more_const1(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_more_const1(VipsImage *in, VipsImage **out, double c, ...)
         * }
         */
        public static vips_more_const1 makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_more_const1(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, double c, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_more_const1", in, out, c, x3);
                }
                return (int)spreader.invokeExact(in, out, c, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_moreeq_const1(VipsImage *in, VipsImage **out, double c, ...)
     * }
     */
    public static class vips_moreeq_const1 {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_DOUBLE
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_moreeq_const1");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_moreeq_const1(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_moreeq_const1(VipsImage *in, VipsImage **out, double c, ...)
         * }
         */
        public static vips_moreeq_const1 makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_moreeq_const1(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, double c, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_moreeq_const1", in, out, c, x3);
                }
                return (int)spreader.invokeExact(in, out, c, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_boolean(VipsImage *left, VipsImage *right, VipsImage **out, VipsOperationBoolean boolean, ...)
     * }
     */
    public static class vips_boolean {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_boolean");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_boolean(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_boolean(VipsImage *left, VipsImage *right, VipsImage **out, VipsOperationBoolean boolean, ...)
         * }
         */
        public static vips_boolean makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_boolean(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment left, MemorySegment right, MemorySegment out, int boolean_, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_boolean", left, right, out, boolean_, x4);
                }
                return (int)spreader.invokeExact(left, right, out, boolean_, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_andimage(VipsImage *left, VipsImage *right, VipsImage **out, ...)
     * }
     */
    public static class vips_andimage {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_andimage");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_andimage(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_andimage(VipsImage *left, VipsImage *right, VipsImage **out, ...)
         * }
         */
        public static vips_andimage makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_andimage(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment left, MemorySegment right, MemorySegment out, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_andimage", left, right, out, x3);
                }
                return (int)spreader.invokeExact(left, right, out, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_orimage(VipsImage *left, VipsImage *right, VipsImage **out, ...)
     * }
     */
    public static class vips_orimage {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_orimage");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_orimage(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_orimage(VipsImage *left, VipsImage *right, VipsImage **out, ...)
         * }
         */
        public static vips_orimage makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_orimage(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment left, MemorySegment right, MemorySegment out, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_orimage", left, right, out, x3);
                }
                return (int)spreader.invokeExact(left, right, out, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_eorimage(VipsImage *left, VipsImage *right, VipsImage **out, ...)
     * }
     */
    public static class vips_eorimage {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_eorimage");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_eorimage(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_eorimage(VipsImage *left, VipsImage *right, VipsImage **out, ...)
         * }
         */
        public static vips_eorimage makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_eorimage(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment left, MemorySegment right, MemorySegment out, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_eorimage", left, right, out, x3);
                }
                return (int)spreader.invokeExact(left, right, out, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_lshift(VipsImage *left, VipsImage *right, VipsImage **out, ...)
     * }
     */
    public static class vips_lshift {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_lshift");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_lshift(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_lshift(VipsImage *left, VipsImage *right, VipsImage **out, ...)
         * }
         */
        public static vips_lshift makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_lshift(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment left, MemorySegment right, MemorySegment out, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_lshift", left, right, out, x3);
                }
                return (int)spreader.invokeExact(left, right, out, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_rshift(VipsImage *left, VipsImage *right, VipsImage **out, ...)
     * }
     */
    public static class vips_rshift {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_rshift");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_rshift(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_rshift(VipsImage *left, VipsImage *right, VipsImage **out, ...)
         * }
         */
        public static vips_rshift makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_rshift(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment left, MemorySegment right, MemorySegment out, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_rshift", left, right, out, x3);
                }
                return (int)spreader.invokeExact(left, right, out, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_boolean_const(VipsImage *in, VipsImage **out, VipsOperationBoolean boolean, const double *c, int n, ...)
     * }
     */
    public static class vips_boolean_const {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_boolean_const");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_boolean_const(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_boolean_const(VipsImage *in, VipsImage **out, VipsOperationBoolean boolean, const double *c, int n, ...)
         * }
         */
        public static vips_boolean_const makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_boolean_const(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, int boolean_, MemorySegment c, int n, Object... x5) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_boolean_const", in, out, boolean_, c, n, x5);
                }
                return (int)spreader.invokeExact(in, out, boolean_, c, n, x5);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_andimage_const(VipsImage *in, VipsImage **out, const double *c, int n, ...)
     * }
     */
    public static class vips_andimage_const {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_andimage_const");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_andimage_const(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_andimage_const(VipsImage *in, VipsImage **out, const double *c, int n, ...)
         * }
         */
        public static vips_andimage_const makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_andimage_const(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, MemorySegment c, int n, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_andimage_const", in, out, c, n, x4);
                }
                return (int)spreader.invokeExact(in, out, c, n, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_orimage_const(VipsImage *in, VipsImage **out, const double *c, int n, ...)
     * }
     */
    public static class vips_orimage_const {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_orimage_const");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_orimage_const(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_orimage_const(VipsImage *in, VipsImage **out, const double *c, int n, ...)
         * }
         */
        public static vips_orimage_const makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_orimage_const(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, MemorySegment c, int n, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_orimage_const", in, out, c, n, x4);
                }
                return (int)spreader.invokeExact(in, out, c, n, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_eorimage_const(VipsImage *in, VipsImage **out, const double *c, int n, ...)
     * }
     */
    public static class vips_eorimage_const {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_eorimage_const");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_eorimage_const(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_eorimage_const(VipsImage *in, VipsImage **out, const double *c, int n, ...)
         * }
         */
        public static vips_eorimage_const makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_eorimage_const(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, MemorySegment c, int n, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_eorimage_const", in, out, c, n, x4);
                }
                return (int)spreader.invokeExact(in, out, c, n, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_lshift_const(VipsImage *in, VipsImage **out, const double *c, int n, ...)
     * }
     */
    public static class vips_lshift_const {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_lshift_const");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_lshift_const(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_lshift_const(VipsImage *in, VipsImage **out, const double *c, int n, ...)
         * }
         */
        public static vips_lshift_const makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_lshift_const(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, MemorySegment c, int n, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_lshift_const", in, out, c, n, x4);
                }
                return (int)spreader.invokeExact(in, out, c, n, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_rshift_const(VipsImage *in, VipsImage **out, const double *c, int n, ...)
     * }
     */
    public static class vips_rshift_const {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_rshift_const");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_rshift_const(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_rshift_const(VipsImage *in, VipsImage **out, const double *c, int n, ...)
         * }
         */
        public static vips_rshift_const makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_rshift_const(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, MemorySegment c, int n, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_rshift_const", in, out, c, n, x4);
                }
                return (int)spreader.invokeExact(in, out, c, n, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_boolean_const1(VipsImage *in, VipsImage **out, VipsOperationBoolean boolean, double c, ...)
     * }
     */
    public static class vips_boolean_const1 {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_DOUBLE
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_boolean_const1");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_boolean_const1(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_boolean_const1(VipsImage *in, VipsImage **out, VipsOperationBoolean boolean, double c, ...)
         * }
         */
        public static vips_boolean_const1 makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_boolean_const1(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, int boolean_, double c, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_boolean_const1", in, out, boolean_, c, x4);
                }
                return (int)spreader.invokeExact(in, out, boolean_, c, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_andimage_const1(VipsImage *in, VipsImage **out, double c, ...)
     * }
     */
    public static class vips_andimage_const1 {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_DOUBLE
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_andimage_const1");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_andimage_const1(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_andimage_const1(VipsImage *in, VipsImage **out, double c, ...)
         * }
         */
        public static vips_andimage_const1 makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_andimage_const1(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, double c, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_andimage_const1", in, out, c, x3);
                }
                return (int)spreader.invokeExact(in, out, c, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_orimage_const1(VipsImage *in, VipsImage **out, double c, ...)
     * }
     */
    public static class vips_orimage_const1 {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_DOUBLE
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_orimage_const1");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_orimage_const1(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_orimage_const1(VipsImage *in, VipsImage **out, double c, ...)
         * }
         */
        public static vips_orimage_const1 makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_orimage_const1(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, double c, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_orimage_const1", in, out, c, x3);
                }
                return (int)spreader.invokeExact(in, out, c, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_eorimage_const1(VipsImage *in, VipsImage **out, double c, ...)
     * }
     */
    public static class vips_eorimage_const1 {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_DOUBLE
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_eorimage_const1");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_eorimage_const1(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_eorimage_const1(VipsImage *in, VipsImage **out, double c, ...)
         * }
         */
        public static vips_eorimage_const1 makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_eorimage_const1(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, double c, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_eorimage_const1", in, out, c, x3);
                }
                return (int)spreader.invokeExact(in, out, c, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_lshift_const1(VipsImage *in, VipsImage **out, double c, ...)
     * }
     */
    public static class vips_lshift_const1 {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_DOUBLE
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_lshift_const1");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_lshift_const1(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_lshift_const1(VipsImage *in, VipsImage **out, double c, ...)
         * }
         */
        public static vips_lshift_const1 makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_lshift_const1(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, double c, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_lshift_const1", in, out, c, x3);
                }
                return (int)spreader.invokeExact(in, out, c, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_rshift_const1(VipsImage *in, VipsImage **out, double c, ...)
     * }
     */
    public static class vips_rshift_const1 {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_DOUBLE
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_rshift_const1");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_rshift_const1(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_rshift_const1(VipsImage *in, VipsImage **out, double c, ...)
         * }
         */
        public static vips_rshift_const1 makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_rshift_const1(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, double c, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_rshift_const1", in, out, c, x3);
                }
                return (int)spreader.invokeExact(in, out, c, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_math2(VipsImage *left, VipsImage *right, VipsImage **out, VipsOperationMath2 math2, ...)
     * }
     */
    public static class vips_math2 {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_math2");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_math2(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_math2(VipsImage *left, VipsImage *right, VipsImage **out, VipsOperationMath2 math2, ...)
         * }
         */
        public static vips_math2 makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_math2(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment left, MemorySegment right, MemorySegment out, int math2, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_math2", left, right, out, math2, x4);
                }
                return (int)spreader.invokeExact(left, right, out, math2, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_pow(VipsImage *left, VipsImage *right, VipsImage **out, ...)
     * }
     */
    public static class vips_pow {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_pow");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_pow(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_pow(VipsImage *left, VipsImage *right, VipsImage **out, ...)
         * }
         */
        public static vips_pow makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_pow(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment left, MemorySegment right, MemorySegment out, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_pow", left, right, out, x3);
                }
                return (int)spreader.invokeExact(left, right, out, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_wop(VipsImage *left, VipsImage *right, VipsImage **out, ...)
     * }
     */
    public static class vips_wop {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_wop");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_wop(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_wop(VipsImage *left, VipsImage *right, VipsImage **out, ...)
         * }
         */
        public static vips_wop makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_wop(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment left, MemorySegment right, MemorySegment out, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_wop", left, right, out, x3);
                }
                return (int)spreader.invokeExact(left, right, out, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_atan2(VipsImage *left, VipsImage *right, VipsImage **out, ...)
     * }
     */
    public static class vips_atan2 {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_atan2");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_atan2(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_atan2(VipsImage *left, VipsImage *right, VipsImage **out, ...)
         * }
         */
        public static vips_atan2 makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_atan2(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment left, MemorySegment right, MemorySegment out, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_atan2", left, right, out, x3);
                }
                return (int)spreader.invokeExact(left, right, out, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_math2_const(VipsImage *in, VipsImage **out, VipsOperationMath2 math2, const double *c, int n, ...)
     * }
     */
    public static class vips_math2_const {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_math2_const");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_math2_const(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_math2_const(VipsImage *in, VipsImage **out, VipsOperationMath2 math2, const double *c, int n, ...)
         * }
         */
        public static vips_math2_const makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_math2_const(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, int math2, MemorySegment c, int n, Object... x5) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_math2_const", in, out, math2, c, n, x5);
                }
                return (int)spreader.invokeExact(in, out, math2, c, n, x5);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_pow_const(VipsImage *in, VipsImage **out, const double *c, int n, ...)
     * }
     */
    public static class vips_pow_const {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_pow_const");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_pow_const(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_pow_const(VipsImage *in, VipsImage **out, const double *c, int n, ...)
         * }
         */
        public static vips_pow_const makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_pow_const(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, MemorySegment c, int n, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_pow_const", in, out, c, n, x4);
                }
                return (int)spreader.invokeExact(in, out, c, n, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_wop_const(VipsImage *in, VipsImage **out, const double *c, int n, ...)
     * }
     */
    public static class vips_wop_const {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_wop_const");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_wop_const(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_wop_const(VipsImage *in, VipsImage **out, const double *c, int n, ...)
         * }
         */
        public static vips_wop_const makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_wop_const(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, MemorySegment c, int n, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_wop_const", in, out, c, n, x4);
                }
                return (int)spreader.invokeExact(in, out, c, n, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_atan2_const(VipsImage *in, VipsImage **out, const double *c, int n, ...)
     * }
     */
    public static class vips_atan2_const {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_atan2_const");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_atan2_const(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_atan2_const(VipsImage *in, VipsImage **out, const double *c, int n, ...)
         * }
         */
        public static vips_atan2_const makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_atan2_const(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, MemorySegment c, int n, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_atan2_const", in, out, c, n, x4);
                }
                return (int)spreader.invokeExact(in, out, c, n, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_math2_const1(VipsImage *in, VipsImage **out, VipsOperationMath2 math2, double c, ...)
     * }
     */
    public static class vips_math2_const1 {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_DOUBLE
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_math2_const1");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_math2_const1(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_math2_const1(VipsImage *in, VipsImage **out, VipsOperationMath2 math2, double c, ...)
         * }
         */
        public static vips_math2_const1 makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_math2_const1(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, int math2, double c, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_math2_const1", in, out, math2, c, x4);
                }
                return (int)spreader.invokeExact(in, out, math2, c, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_pow_const1(VipsImage *in, VipsImage **out, double c, ...)
     * }
     */
    public static class vips_pow_const1 {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_DOUBLE
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_pow_const1");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_pow_const1(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_pow_const1(VipsImage *in, VipsImage **out, double c, ...)
         * }
         */
        public static vips_pow_const1 makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_pow_const1(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, double c, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_pow_const1", in, out, c, x3);
                }
                return (int)spreader.invokeExact(in, out, c, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_wop_const1(VipsImage *in, VipsImage **out, double c, ...)
     * }
     */
    public static class vips_wop_const1 {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_DOUBLE
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_wop_const1");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_wop_const1(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_wop_const1(VipsImage *in, VipsImage **out, double c, ...)
         * }
         */
        public static vips_wop_const1 makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_wop_const1(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, double c, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_wop_const1", in, out, c, x3);
                }
                return (int)spreader.invokeExact(in, out, c, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_atan2_const1(VipsImage *in, VipsImage **out, double c, ...)
     * }
     */
    public static class vips_atan2_const1 {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_DOUBLE
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_atan2_const1");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_atan2_const1(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_atan2_const1(VipsImage *in, VipsImage **out, double c, ...)
         * }
         */
        public static vips_atan2_const1 makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_atan2_const1(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, double c, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_atan2_const1", in, out, c, x3);
                }
                return (int)spreader.invokeExact(in, out, c, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_avg(VipsImage *in, double *out, ...)
     * }
     */
    public static class vips_avg {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_avg");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_avg(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_avg(VipsImage *in, double *out, ...)
         * }
         */
        public static vips_avg makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_avg(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_avg", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_deviate(VipsImage *in, double *out, ...)
     * }
     */
    public static class vips_deviate {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_deviate");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_deviate(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_deviate(VipsImage *in, double *out, ...)
         * }
         */
        public static vips_deviate makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_deviate(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_deviate", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_min(VipsImage *in, double *out, ...)
     * }
     */
    public static class vips_min {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_min");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_min(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_min(VipsImage *in, double *out, ...)
         * }
         */
        public static vips_min makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_min(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_min", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_max(VipsImage *in, double *out, ...)
     * }
     */
    public static class vips_max {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_max");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_max(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_max(VipsImage *in, double *out, ...)
         * }
         */
        public static vips_max makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_max(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_max", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_stats(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_stats {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_stats");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_stats(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_stats(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_stats makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_stats(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_stats", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_measure(VipsImage *in, VipsImage **out, int h, int v, ...)
     * }
     */
    public static class vips_measure {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_measure");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_measure(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_measure(VipsImage *in, VipsImage **out, int h, int v, ...)
         * }
         */
        public static vips_measure makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_measure(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, int h, int v, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_measure", in, out, h, v, x4);
                }
                return (int)spreader.invokeExact(in, out, h, v, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_find_trim(VipsImage *in, int *left, int *top, int *width, int *height, ...)
     * }
     */
    public static class vips_find_trim {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_find_trim");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_find_trim(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_find_trim(VipsImage *in, int *left, int *top, int *width, int *height, ...)
         * }
         */
        public static vips_find_trim makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_find_trim(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment left, MemorySegment top, MemorySegment width, MemorySegment height, Object... x5) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_find_trim", in, left, top, width, height, x5);
                }
                return (int)spreader.invokeExact(in, left, top, width, height, x5);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_getpoint(VipsImage *in, double **vector, int *n, int x, int y, ...)
     * }
     */
    public static class vips_getpoint {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_getpoint");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_getpoint(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_getpoint(VipsImage *in, double **vector, int *n, int x, int y, ...)
         * }
         */
        public static vips_getpoint makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_getpoint(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment vector, MemorySegment n, int x, int y, Object... x5) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_getpoint", in, vector, n, x, y, x5);
                }
                return (int)spreader.invokeExact(in, vector, n, x, y, x5);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_hist_find(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_hist_find {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_hist_find");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_hist_find(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_hist_find(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_hist_find makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_hist_find(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_hist_find", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_hist_find_ndim(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_hist_find_ndim {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_hist_find_ndim");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_hist_find_ndim(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_hist_find_ndim(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_hist_find_ndim makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_hist_find_ndim(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_hist_find_ndim", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_hist_find_indexed(VipsImage *in, VipsImage *index, VipsImage **out, ...)
     * }
     */
    public static class vips_hist_find_indexed {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_hist_find_indexed");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_hist_find_indexed(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_hist_find_indexed(VipsImage *in, VipsImage *index, VipsImage **out, ...)
         * }
         */
        public static vips_hist_find_indexed makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_hist_find_indexed(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment index, MemorySegment out, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_hist_find_indexed", in, index, out, x3);
                }
                return (int)spreader.invokeExact(in, index, out, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_hough_line(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_hough_line {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_hough_line");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_hough_line(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_hough_line(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_hough_line makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_hough_line(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_hough_line", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_hough_circle(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_hough_circle {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_hough_circle");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_hough_circle(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_hough_circle(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_hough_circle makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_hough_circle(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_hough_circle", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_project(VipsImage *in, VipsImage **columns, VipsImage **rows, ...)
     * }
     */
    public static class vips_project {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_project");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_project(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_project(VipsImage *in, VipsImage **columns, VipsImage **rows, ...)
         * }
         */
        public static vips_project makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_project(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment columns, MemorySegment rows, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_project", in, columns, rows, x3);
                }
                return (int)spreader.invokeExact(in, columns, rows, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_profile(VipsImage *in, VipsImage **columns, VipsImage **rows, ...)
     * }
     */
    public static class vips_profile {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_profile");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_profile(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_profile(VipsImage *in, VipsImage **columns, VipsImage **rows, ...)
         * }
         */
        public static vips_profile makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_profile(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment columns, MemorySegment rows, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_profile", in, columns, rows, x3);
                }
                return (int)spreader.invokeExact(in, columns, rows, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }
    private static final int VIPS_EXTEND_BLACK = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_EXTEND_BLACK = 0
     * }
     */
    public static int VIPS_EXTEND_BLACK() {
        return VIPS_EXTEND_BLACK;
    }
    private static final int VIPS_EXTEND_COPY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_EXTEND_COPY = 1
     * }
     */
    public static int VIPS_EXTEND_COPY() {
        return VIPS_EXTEND_COPY;
    }
    private static final int VIPS_EXTEND_REPEAT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_EXTEND_REPEAT = 2
     * }
     */
    public static int VIPS_EXTEND_REPEAT() {
        return VIPS_EXTEND_REPEAT;
    }
    private static final int VIPS_EXTEND_MIRROR = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_EXTEND_MIRROR = 3
     * }
     */
    public static int VIPS_EXTEND_MIRROR() {
        return VIPS_EXTEND_MIRROR;
    }
    private static final int VIPS_EXTEND_WHITE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_EXTEND_WHITE = 4
     * }
     */
    public static int VIPS_EXTEND_WHITE() {
        return VIPS_EXTEND_WHITE;
    }
    private static final int VIPS_EXTEND_BACKGROUND = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_EXTEND_BACKGROUND = 5
     * }
     */
    public static int VIPS_EXTEND_BACKGROUND() {
        return VIPS_EXTEND_BACKGROUND;
    }
    private static final int VIPS_EXTEND_LAST = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_EXTEND_LAST = 6
     * }
     */
    public static int VIPS_EXTEND_LAST() {
        return VIPS_EXTEND_LAST;
    }
    private static final int VIPS_COMPASS_DIRECTION_CENTRE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_COMPASS_DIRECTION_CENTRE = 0
     * }
     */
    public static int VIPS_COMPASS_DIRECTION_CENTRE() {
        return VIPS_COMPASS_DIRECTION_CENTRE;
    }
    private static final int VIPS_COMPASS_DIRECTION_NORTH = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_COMPASS_DIRECTION_NORTH = 1
     * }
     */
    public static int VIPS_COMPASS_DIRECTION_NORTH() {
        return VIPS_COMPASS_DIRECTION_NORTH;
    }
    private static final int VIPS_COMPASS_DIRECTION_EAST = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_COMPASS_DIRECTION_EAST = 2
     * }
     */
    public static int VIPS_COMPASS_DIRECTION_EAST() {
        return VIPS_COMPASS_DIRECTION_EAST;
    }
    private static final int VIPS_COMPASS_DIRECTION_SOUTH = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_COMPASS_DIRECTION_SOUTH = 3
     * }
     */
    public static int VIPS_COMPASS_DIRECTION_SOUTH() {
        return VIPS_COMPASS_DIRECTION_SOUTH;
    }
    private static final int VIPS_COMPASS_DIRECTION_WEST = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_COMPASS_DIRECTION_WEST = 4
     * }
     */
    public static int VIPS_COMPASS_DIRECTION_WEST() {
        return VIPS_COMPASS_DIRECTION_WEST;
    }
    private static final int VIPS_COMPASS_DIRECTION_NORTH_EAST = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_COMPASS_DIRECTION_NORTH_EAST = 5
     * }
     */
    public static int VIPS_COMPASS_DIRECTION_NORTH_EAST() {
        return VIPS_COMPASS_DIRECTION_NORTH_EAST;
    }
    private static final int VIPS_COMPASS_DIRECTION_SOUTH_EAST = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_COMPASS_DIRECTION_SOUTH_EAST = 6
     * }
     */
    public static int VIPS_COMPASS_DIRECTION_SOUTH_EAST() {
        return VIPS_COMPASS_DIRECTION_SOUTH_EAST;
    }
    private static final int VIPS_COMPASS_DIRECTION_SOUTH_WEST = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_COMPASS_DIRECTION_SOUTH_WEST = 7
     * }
     */
    public static int VIPS_COMPASS_DIRECTION_SOUTH_WEST() {
        return VIPS_COMPASS_DIRECTION_SOUTH_WEST;
    }
    private static final int VIPS_COMPASS_DIRECTION_NORTH_WEST = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_COMPASS_DIRECTION_NORTH_WEST = 8
     * }
     */
    public static int VIPS_COMPASS_DIRECTION_NORTH_WEST() {
        return VIPS_COMPASS_DIRECTION_NORTH_WEST;
    }
    private static final int VIPS_COMPASS_DIRECTION_LAST = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_COMPASS_DIRECTION_LAST = 9
     * }
     */
    public static int VIPS_COMPASS_DIRECTION_LAST() {
        return VIPS_COMPASS_DIRECTION_LAST;
    }
    private static final int VIPS_DIRECTION_HORIZONTAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_DIRECTION_HORIZONTAL = 0
     * }
     */
    public static int VIPS_DIRECTION_HORIZONTAL() {
        return VIPS_DIRECTION_HORIZONTAL;
    }
    private static final int VIPS_DIRECTION_VERTICAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_DIRECTION_VERTICAL = 1
     * }
     */
    public static int VIPS_DIRECTION_VERTICAL() {
        return VIPS_DIRECTION_VERTICAL;
    }
    private static final int VIPS_DIRECTION_LAST = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_DIRECTION_LAST = 2
     * }
     */
    public static int VIPS_DIRECTION_LAST() {
        return VIPS_DIRECTION_LAST;
    }
    private static final int VIPS_ALIGN_LOW = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ALIGN_LOW = 0
     * }
     */
    public static int VIPS_ALIGN_LOW() {
        return VIPS_ALIGN_LOW;
    }
    private static final int VIPS_ALIGN_CENTRE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ALIGN_CENTRE = 1
     * }
     */
    public static int VIPS_ALIGN_CENTRE() {
        return VIPS_ALIGN_CENTRE;
    }
    private static final int VIPS_ALIGN_HIGH = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ALIGN_HIGH = 2
     * }
     */
    public static int VIPS_ALIGN_HIGH() {
        return VIPS_ALIGN_HIGH;
    }
    private static final int VIPS_ALIGN_LAST = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ALIGN_LAST = 3
     * }
     */
    public static int VIPS_ALIGN_LAST() {
        return VIPS_ALIGN_LAST;
    }
    private static final int VIPS_ANGLE_D0 = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ANGLE_D0 = 0
     * }
     */
    public static int VIPS_ANGLE_D0() {
        return VIPS_ANGLE_D0;
    }
    private static final int VIPS_ANGLE_D90 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ANGLE_D90 = 1
     * }
     */
    public static int VIPS_ANGLE_D90() {
        return VIPS_ANGLE_D90;
    }
    private static final int VIPS_ANGLE_D180 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ANGLE_D180 = 2
     * }
     */
    public static int VIPS_ANGLE_D180() {
        return VIPS_ANGLE_D180;
    }
    private static final int VIPS_ANGLE_D270 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ANGLE_D270 = 3
     * }
     */
    public static int VIPS_ANGLE_D270() {
        return VIPS_ANGLE_D270;
    }
    private static final int VIPS_ANGLE_LAST = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ANGLE_LAST = 4
     * }
     */
    public static int VIPS_ANGLE_LAST() {
        return VIPS_ANGLE_LAST;
    }
    private static final int VIPS_ANGLE45_D0 = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ANGLE45_D0 = 0
     * }
     */
    public static int VIPS_ANGLE45_D0() {
        return VIPS_ANGLE45_D0;
    }
    private static final int VIPS_ANGLE45_D45 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ANGLE45_D45 = 1
     * }
     */
    public static int VIPS_ANGLE45_D45() {
        return VIPS_ANGLE45_D45;
    }
    private static final int VIPS_ANGLE45_D90 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ANGLE45_D90 = 2
     * }
     */
    public static int VIPS_ANGLE45_D90() {
        return VIPS_ANGLE45_D90;
    }
    private static final int VIPS_ANGLE45_D135 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ANGLE45_D135 = 3
     * }
     */
    public static int VIPS_ANGLE45_D135() {
        return VIPS_ANGLE45_D135;
    }
    private static final int VIPS_ANGLE45_D180 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ANGLE45_D180 = 4
     * }
     */
    public static int VIPS_ANGLE45_D180() {
        return VIPS_ANGLE45_D180;
    }
    private static final int VIPS_ANGLE45_D225 = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ANGLE45_D225 = 5
     * }
     */
    public static int VIPS_ANGLE45_D225() {
        return VIPS_ANGLE45_D225;
    }
    private static final int VIPS_ANGLE45_D270 = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ANGLE45_D270 = 6
     * }
     */
    public static int VIPS_ANGLE45_D270() {
        return VIPS_ANGLE45_D270;
    }
    private static final int VIPS_ANGLE45_D315 = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ANGLE45_D315 = 7
     * }
     */
    public static int VIPS_ANGLE45_D315() {
        return VIPS_ANGLE45_D315;
    }
    private static final int VIPS_ANGLE45_LAST = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ANGLE45_LAST = 8
     * }
     */
    public static int VIPS_ANGLE45_LAST() {
        return VIPS_ANGLE45_LAST;
    }
    private static final int VIPS_INTERESTING_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERESTING_NONE = 0
     * }
     */
    public static int VIPS_INTERESTING_NONE() {
        return VIPS_INTERESTING_NONE;
    }
    private static final int VIPS_INTERESTING_CENTRE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERESTING_CENTRE = 1
     * }
     */
    public static int VIPS_INTERESTING_CENTRE() {
        return VIPS_INTERESTING_CENTRE;
    }
    private static final int VIPS_INTERESTING_ENTROPY = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERESTING_ENTROPY = 2
     * }
     */
    public static int VIPS_INTERESTING_ENTROPY() {
        return VIPS_INTERESTING_ENTROPY;
    }
    private static final int VIPS_INTERESTING_ATTENTION = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERESTING_ATTENTION = 3
     * }
     */
    public static int VIPS_INTERESTING_ATTENTION() {
        return VIPS_INTERESTING_ATTENTION;
    }
    private static final int VIPS_INTERESTING_LOW = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERESTING_LOW = 4
     * }
     */
    public static int VIPS_INTERESTING_LOW() {
        return VIPS_INTERESTING_LOW;
    }
    private static final int VIPS_INTERESTING_HIGH = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERESTING_HIGH = 5
     * }
     */
    public static int VIPS_INTERESTING_HIGH() {
        return VIPS_INTERESTING_HIGH;
    }
    private static final int VIPS_INTERESTING_ALL = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERESTING_ALL = 6
     * }
     */
    public static int VIPS_INTERESTING_ALL() {
        return VIPS_INTERESTING_ALL;
    }
    private static final int VIPS_INTERESTING_LAST = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERESTING_LAST = 7
     * }
     */
    public static int VIPS_INTERESTING_LAST() {
        return VIPS_INTERESTING_LAST;
    }
    private static final int VIPS_BLEND_MODE_CLEAR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_CLEAR = 0
     * }
     */
    public static int VIPS_BLEND_MODE_CLEAR() {
        return VIPS_BLEND_MODE_CLEAR;
    }
    private static final int VIPS_BLEND_MODE_SOURCE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_SOURCE = 1
     * }
     */
    public static int VIPS_BLEND_MODE_SOURCE() {
        return VIPS_BLEND_MODE_SOURCE;
    }
    private static final int VIPS_BLEND_MODE_OVER = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_OVER = 2
     * }
     */
    public static int VIPS_BLEND_MODE_OVER() {
        return VIPS_BLEND_MODE_OVER;
    }
    private static final int VIPS_BLEND_MODE_IN = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_IN = 3
     * }
     */
    public static int VIPS_BLEND_MODE_IN() {
        return VIPS_BLEND_MODE_IN;
    }
    private static final int VIPS_BLEND_MODE_OUT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_OUT = 4
     * }
     */
    public static int VIPS_BLEND_MODE_OUT() {
        return VIPS_BLEND_MODE_OUT;
    }
    private static final int VIPS_BLEND_MODE_ATOP = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_ATOP = 5
     * }
     */
    public static int VIPS_BLEND_MODE_ATOP() {
        return VIPS_BLEND_MODE_ATOP;
    }
    private static final int VIPS_BLEND_MODE_DEST = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_DEST = 6
     * }
     */
    public static int VIPS_BLEND_MODE_DEST() {
        return VIPS_BLEND_MODE_DEST;
    }
    private static final int VIPS_BLEND_MODE_DEST_OVER = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_DEST_OVER = 7
     * }
     */
    public static int VIPS_BLEND_MODE_DEST_OVER() {
        return VIPS_BLEND_MODE_DEST_OVER;
    }
    private static final int VIPS_BLEND_MODE_DEST_IN = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_DEST_IN = 8
     * }
     */
    public static int VIPS_BLEND_MODE_DEST_IN() {
        return VIPS_BLEND_MODE_DEST_IN;
    }
    private static final int VIPS_BLEND_MODE_DEST_OUT = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_DEST_OUT = 9
     * }
     */
    public static int VIPS_BLEND_MODE_DEST_OUT() {
        return VIPS_BLEND_MODE_DEST_OUT;
    }
    private static final int VIPS_BLEND_MODE_DEST_ATOP = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_DEST_ATOP = 10
     * }
     */
    public static int VIPS_BLEND_MODE_DEST_ATOP() {
        return VIPS_BLEND_MODE_DEST_ATOP;
    }
    private static final int VIPS_BLEND_MODE_XOR = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_XOR = 11
     * }
     */
    public static int VIPS_BLEND_MODE_XOR() {
        return VIPS_BLEND_MODE_XOR;
    }
    private static final int VIPS_BLEND_MODE_ADD = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_ADD = 12
     * }
     */
    public static int VIPS_BLEND_MODE_ADD() {
        return VIPS_BLEND_MODE_ADD;
    }
    private static final int VIPS_BLEND_MODE_SATURATE = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_SATURATE = 13
     * }
     */
    public static int VIPS_BLEND_MODE_SATURATE() {
        return VIPS_BLEND_MODE_SATURATE;
    }
    private static final int VIPS_BLEND_MODE_MULTIPLY = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_MULTIPLY = 14
     * }
     */
    public static int VIPS_BLEND_MODE_MULTIPLY() {
        return VIPS_BLEND_MODE_MULTIPLY;
    }
    private static final int VIPS_BLEND_MODE_SCREEN = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_SCREEN = 15
     * }
     */
    public static int VIPS_BLEND_MODE_SCREEN() {
        return VIPS_BLEND_MODE_SCREEN;
    }
    private static final int VIPS_BLEND_MODE_OVERLAY = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_OVERLAY = 16
     * }
     */
    public static int VIPS_BLEND_MODE_OVERLAY() {
        return VIPS_BLEND_MODE_OVERLAY;
    }
    private static final int VIPS_BLEND_MODE_DARKEN = (int)17L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_DARKEN = 17
     * }
     */
    public static int VIPS_BLEND_MODE_DARKEN() {
        return VIPS_BLEND_MODE_DARKEN;
    }
    private static final int VIPS_BLEND_MODE_LIGHTEN = (int)18L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_LIGHTEN = 18
     * }
     */
    public static int VIPS_BLEND_MODE_LIGHTEN() {
        return VIPS_BLEND_MODE_LIGHTEN;
    }
    private static final int VIPS_BLEND_MODE_COLOUR_DODGE = (int)19L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_COLOUR_DODGE = 19
     * }
     */
    public static int VIPS_BLEND_MODE_COLOUR_DODGE() {
        return VIPS_BLEND_MODE_COLOUR_DODGE;
    }
    private static final int VIPS_BLEND_MODE_COLOUR_BURN = (int)20L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_COLOUR_BURN = 20
     * }
     */
    public static int VIPS_BLEND_MODE_COLOUR_BURN() {
        return VIPS_BLEND_MODE_COLOUR_BURN;
    }
    private static final int VIPS_BLEND_MODE_HARD_LIGHT = (int)21L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_HARD_LIGHT = 21
     * }
     */
    public static int VIPS_BLEND_MODE_HARD_LIGHT() {
        return VIPS_BLEND_MODE_HARD_LIGHT;
    }
    private static final int VIPS_BLEND_MODE_SOFT_LIGHT = (int)22L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_SOFT_LIGHT = 22
     * }
     */
    public static int VIPS_BLEND_MODE_SOFT_LIGHT() {
        return VIPS_BLEND_MODE_SOFT_LIGHT;
    }
    private static final int VIPS_BLEND_MODE_DIFFERENCE = (int)23L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_DIFFERENCE = 23
     * }
     */
    public static int VIPS_BLEND_MODE_DIFFERENCE() {
        return VIPS_BLEND_MODE_DIFFERENCE;
    }
    private static final int VIPS_BLEND_MODE_EXCLUSION = (int)24L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_EXCLUSION = 24
     * }
     */
    public static int VIPS_BLEND_MODE_EXCLUSION() {
        return VIPS_BLEND_MODE_EXCLUSION;
    }
    private static final int VIPS_BLEND_MODE_LAST = (int)25L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_BLEND_MODE_LAST = 25
     * }
     */
    public static int VIPS_BLEND_MODE_LAST() {
        return VIPS_BLEND_MODE_LAST;
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_copy(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_copy {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_copy");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_copy(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_copy(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_copy makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_copy(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_copy", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_tilecache(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_tilecache {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_tilecache");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_tilecache(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_tilecache(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_tilecache makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_tilecache(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_tilecache", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_linecache(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_linecache {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_linecache");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_linecache(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_linecache(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_linecache makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_linecache(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_linecache", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_sequential(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_sequential {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_sequential");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_sequential(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_sequential(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_sequential makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_sequential(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_sequential", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_cache(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_cache {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_cache");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_cache(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_cache(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_cache makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_cache(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_cache", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_copy_file(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_copy_file {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_copy_file");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_copy_file(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_copy_file(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_copy_file makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_copy_file(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_copy_file", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_embed(VipsImage *in, VipsImage **out, int x, int y, int width, int height, ...)
     * }
     */
    public static class vips_embed {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_embed");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_embed(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_embed(VipsImage *in, VipsImage **out, int x, int y, int width, int height, ...)
         * }
         */
        public static vips_embed makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_embed(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, int x, int y, int width, int height, Object... x6) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_embed", in, out, x, y, width, height, x6);
                }
                return (int)spreader.invokeExact(in, out, x, y, width, height, x6);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_gravity(VipsImage *in, VipsImage **out, VipsCompassDirection direction, int width, int height, ...)
     * }
     */
    public static class vips_gravity {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_gravity");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_gravity(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_gravity(VipsImage *in, VipsImage **out, VipsCompassDirection direction, int width, int height, ...)
         * }
         */
        public static vips_gravity makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_gravity(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, int direction, int width, int height, Object... x5) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_gravity", in, out, direction, width, height, x5);
                }
                return (int)spreader.invokeExact(in, out, direction, width, height, x5);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_flip(VipsImage *in, VipsImage **out, VipsDirection direction, ...)
     * }
     */
    public static class vips_flip {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_flip");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_flip(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_flip(VipsImage *in, VipsImage **out, VipsDirection direction, ...)
         * }
         */
        public static vips_flip makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_flip(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, int direction, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_flip", in, out, direction, x3);
                }
                return (int)spreader.invokeExact(in, out, direction, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_insert(VipsImage *main, VipsImage *sub, VipsImage **out, int x, int y, ...)
     * }
     */
    public static class vips_insert {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_insert");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_insert(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_insert(VipsImage *main, VipsImage *sub, VipsImage **out, int x, int y, ...)
         * }
         */
        public static vips_insert makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_insert(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment main, MemorySegment sub, MemorySegment out, int x, int y, Object... x5) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_insert", main, sub, out, x, y, x5);
                }
                return (int)spreader.invokeExact(main, sub, out, x, y, x5);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_join(VipsImage *in1, VipsImage *in2, VipsImage **out, VipsDirection direction, ...)
     * }
     */
    public static class vips_join {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_join");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_join(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_join(VipsImage *in1, VipsImage *in2, VipsImage **out, VipsDirection direction, ...)
         * }
         */
        public static vips_join makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_join(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in1, MemorySegment in2, MemorySegment out, int direction, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_join", in1, in2, out, direction, x4);
                }
                return (int)spreader.invokeExact(in1, in2, out, direction, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_arrayjoin(VipsImage **in, VipsImage **out, int n, ...)
     * }
     */
    public static class vips_arrayjoin {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_arrayjoin");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_arrayjoin(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_arrayjoin(VipsImage **in, VipsImage **out, int n, ...)
         * }
         */
        public static vips_arrayjoin makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_arrayjoin(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, int n, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_arrayjoin", in, out, n, x3);
                }
                return (int)spreader.invokeExact(in, out, n, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_extract_area(VipsImage *in, VipsImage **out, int left, int top, int width, int height, ...)
     * }
     */
    public static class vips_extract_area {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_extract_area");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_extract_area(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_extract_area(VipsImage *in, VipsImage **out, int left, int top, int width, int height, ...)
         * }
         */
        public static vips_extract_area makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_extract_area(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, int left, int top, int width, int height, Object... x6) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_extract_area", in, out, left, top, width, height, x6);
                }
                return (int)spreader.invokeExact(in, out, left, top, width, height, x6);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_crop(VipsImage *in, VipsImage **out, int left, int top, int width, int height, ...)
     * }
     */
    public static class vips_crop {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_crop");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_crop(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_crop(VipsImage *in, VipsImage **out, int left, int top, int width, int height, ...)
         * }
         */
        public static vips_crop makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_crop(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, int left, int top, int width, int height, Object... x6) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_crop", in, out, left, top, width, height, x6);
                }
                return (int)spreader.invokeExact(in, out, left, top, width, height, x6);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_smartcrop(VipsImage *in, VipsImage **out, int width, int height, ...)
     * }
     */
    public static class vips_smartcrop {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_smartcrop");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_smartcrop(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_smartcrop(VipsImage *in, VipsImage **out, int width, int height, ...)
         * }
         */
        public static vips_smartcrop makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_smartcrop(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, int width, int height, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_smartcrop", in, out, width, height, x4);
                }
                return (int)spreader.invokeExact(in, out, width, height, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_extract_band(VipsImage *in, VipsImage **out, int band, ...)
     * }
     */
    public static class vips_extract_band {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_extract_band");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_extract_band(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_extract_band(VipsImage *in, VipsImage **out, int band, ...)
         * }
         */
        public static vips_extract_band makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_extract_band(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, int band, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_extract_band", in, out, band, x3);
                }
                return (int)spreader.invokeExact(in, out, band, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_replicate(VipsImage *in, VipsImage **out, int across, int down, ...)
     * }
     */
    public static class vips_replicate {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_replicate");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_replicate(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_replicate(VipsImage *in, VipsImage **out, int across, int down, ...)
         * }
         */
        public static vips_replicate makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_replicate(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, int across, int down, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_replicate", in, out, across, down, x4);
                }
                return (int)spreader.invokeExact(in, out, across, down, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_grid(VipsImage *in, VipsImage **out, int tile_height, int across, int down, ...)
     * }
     */
    public static class vips_grid {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_grid");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_grid(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_grid(VipsImage *in, VipsImage **out, int tile_height, int across, int down, ...)
         * }
         */
        public static vips_grid makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_grid(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, int tile_height, int across, int down, Object... x5) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_grid", in, out, tile_height, across, down, x5);
                }
                return (int)spreader.invokeExact(in, out, tile_height, across, down, x5);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_transpose3d(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_transpose3d {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_transpose3d");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_transpose3d(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_transpose3d(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_transpose3d makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_transpose3d(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_transpose3d", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_wrap(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_wrap {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_wrap");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_wrap(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_wrap(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_wrap makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_wrap(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_wrap", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_rot(VipsImage *in, VipsImage **out, VipsAngle angle, ...)
     * }
     */
    public static class vips_rot {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_rot");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_rot(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_rot(VipsImage *in, VipsImage **out, VipsAngle angle, ...)
         * }
         */
        public static vips_rot makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_rot(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, int angle, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_rot", in, out, angle, x3);
                }
                return (int)spreader.invokeExact(in, out, angle, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_rot90(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_rot90 {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_rot90");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_rot90(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_rot90(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_rot90 makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_rot90(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_rot90", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_rot180(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_rot180 {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_rot180");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_rot180(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_rot180(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_rot180 makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_rot180(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_rot180", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_rot270(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_rot270 {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_rot270");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_rot270(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_rot270(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_rot270 makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_rot270(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_rot270", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_rot45(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_rot45 {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_rot45");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_rot45(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_rot45(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_rot45 makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_rot45(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_rot45", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class vips_autorot_remove_angle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_autorot_remove_angle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_autorot_remove_angle(VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_autorot_remove_angle$descriptor() {
        return vips_autorot_remove_angle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_autorot_remove_angle(VipsImage *image)
     * }
     */
    public static MethodHandle vips_autorot_remove_angle$handle() {
        return vips_autorot_remove_angle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_autorot_remove_angle(VipsImage *image)
     * }
     */
    public static MemorySegment vips_autorot_remove_angle$address() {
        return vips_autorot_remove_angle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_autorot_remove_angle(VipsImage *image)
     * }
     */
    public static void vips_autorot_remove_angle(MemorySegment image) {
        var mh$ = vips_autorot_remove_angle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_autorot_remove_angle", image);
            }
            mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_autorot(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_autorot {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_autorot");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_autorot(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_autorot(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_autorot makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_autorot(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_autorot", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_zoom(VipsImage *in, VipsImage **out, int xfac, int yfac, ...)
     * }
     */
    public static class vips_zoom {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_zoom");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_zoom(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_zoom(VipsImage *in, VipsImage **out, int xfac, int yfac, ...)
         * }
         */
        public static vips_zoom makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_zoom(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, int xfac, int yfac, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_zoom", in, out, xfac, yfac, x4);
                }
                return (int)spreader.invokeExact(in, out, xfac, yfac, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_subsample(VipsImage *in, VipsImage **out, int xfac, int yfac, ...)
     * }
     */
    public static class vips_subsample {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_subsample");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_subsample(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_subsample(VipsImage *in, VipsImage **out, int xfac, int yfac, ...)
         * }
         */
        public static vips_subsample makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_subsample(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, int xfac, int yfac, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_subsample", in, out, xfac, yfac, x4);
                }
                return (int)spreader.invokeExact(in, out, xfac, yfac, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_cast(VipsImage *in, VipsImage **out, VipsBandFormat format, ...)
     * }
     */
    public static class vips_cast {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_cast");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_cast(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_cast(VipsImage *in, VipsImage **out, VipsBandFormat format, ...)
         * }
         */
        public static vips_cast makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_cast(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, int format, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_cast", in, out, format, x3);
                }
                return (int)spreader.invokeExact(in, out, format, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_cast_uchar(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_cast_uchar {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_cast_uchar");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_cast_uchar(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_cast_uchar(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_cast_uchar makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_cast_uchar(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_cast_uchar", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_cast_char(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_cast_char {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_cast_char");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_cast_char(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_cast_char(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_cast_char makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_cast_char(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_cast_char", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_cast_ushort(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_cast_ushort {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_cast_ushort");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_cast_ushort(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_cast_ushort(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_cast_ushort makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_cast_ushort(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_cast_ushort", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_cast_short(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_cast_short {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_cast_short");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_cast_short(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_cast_short(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_cast_short makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_cast_short(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_cast_short", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_cast_uint(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_cast_uint {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_cast_uint");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_cast_uint(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_cast_uint(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_cast_uint makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_cast_uint(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_cast_uint", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_cast_int(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_cast_int {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_cast_int");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_cast_int(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_cast_int(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_cast_int makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_cast_int(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_cast_int", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_cast_float(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_cast_float {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_cast_float");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_cast_float(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_cast_float(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_cast_float makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_cast_float(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_cast_float", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_cast_double(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_cast_double {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_cast_double");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_cast_double(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_cast_double(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_cast_double makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_cast_double(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_cast_double", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_cast_complex(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_cast_complex {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_cast_complex");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_cast_complex(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_cast_complex(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_cast_complex makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_cast_complex(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_cast_complex", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_cast_dpcomplex(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_cast_dpcomplex {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_cast_dpcomplex");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_cast_dpcomplex(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_cast_dpcomplex(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_cast_dpcomplex makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_cast_dpcomplex(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_cast_dpcomplex", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_scale(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_scale {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_scale");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_scale(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_scale(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_scale makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_scale(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_scale", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_msb(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_msb {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_msb");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_msb(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_msb(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_msb makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_msb(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_msb", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_byteswap(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_byteswap {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_byteswap");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_byteswap(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_byteswap(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_byteswap makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_byteswap(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_byteswap", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_bandjoin(VipsImage **in, VipsImage **out, int n, ...)
     * }
     */
    public static class vips_bandjoin {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_bandjoin");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_bandjoin(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_bandjoin(VipsImage **in, VipsImage **out, int n, ...)
         * }
         */
        public static vips_bandjoin makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_bandjoin(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, int n, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_bandjoin", in, out, n, x3);
                }
                return (int)spreader.invokeExact(in, out, n, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_bandjoin2(VipsImage *in1, VipsImage *in2, VipsImage **out, ...)
     * }
     */
    public static class vips_bandjoin2 {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_bandjoin2");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_bandjoin2(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_bandjoin2(VipsImage *in1, VipsImage *in2, VipsImage **out, ...)
         * }
         */
        public static vips_bandjoin2 makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_bandjoin2(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in1, MemorySegment in2, MemorySegment out, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_bandjoin2", in1, in2, out, x3);
                }
                return (int)spreader.invokeExact(in1, in2, out, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_bandjoin_const(VipsImage *in, VipsImage **out, double *c, int n, ...)
     * }
     */
    public static class vips_bandjoin_const {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_bandjoin_const");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_bandjoin_const(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_bandjoin_const(VipsImage *in, VipsImage **out, double *c, int n, ...)
         * }
         */
        public static vips_bandjoin_const makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_bandjoin_const(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, MemorySegment c, int n, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_bandjoin_const", in, out, c, n, x4);
                }
                return (int)spreader.invokeExact(in, out, c, n, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_bandjoin_const1(VipsImage *in, VipsImage **out, double c, ...)
     * }
     */
    public static class vips_bandjoin_const1 {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_DOUBLE
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_bandjoin_const1");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_bandjoin_const1(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_bandjoin_const1(VipsImage *in, VipsImage **out, double c, ...)
         * }
         */
        public static vips_bandjoin_const1 makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_bandjoin_const1(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, double c, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_bandjoin_const1", in, out, c, x3);
                }
                return (int)spreader.invokeExact(in, out, c, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_bandrank(VipsImage **in, VipsImage **out, int n, ...)
     * }
     */
    public static class vips_bandrank {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_bandrank");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_bandrank(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_bandrank(VipsImage **in, VipsImage **out, int n, ...)
         * }
         */
        public static vips_bandrank makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_bandrank(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, int n, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_bandrank", in, out, n, x3);
                }
                return (int)spreader.invokeExact(in, out, n, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_bandfold(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_bandfold {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_bandfold");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_bandfold(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_bandfold(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_bandfold makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_bandfold(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_bandfold", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_bandunfold(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_bandunfold {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_bandunfold");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_bandunfold(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_bandunfold(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_bandunfold makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_bandunfold(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_bandunfold", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_bandbool(VipsImage *in, VipsImage **out, VipsOperationBoolean boolean, ...)
     * }
     */
    public static class vips_bandbool {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_bandbool");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_bandbool(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_bandbool(VipsImage *in, VipsImage **out, VipsOperationBoolean boolean, ...)
         * }
         */
        public static vips_bandbool makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_bandbool(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, int boolean_, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_bandbool", in, out, boolean_, x3);
                }
                return (int)spreader.invokeExact(in, out, boolean_, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_bandand(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_bandand {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_bandand");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_bandand(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_bandand(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_bandand makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_bandand(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_bandand", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_bandor(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_bandor {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_bandor");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_bandor(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_bandor(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_bandor makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_bandor(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_bandor", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_bandeor(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_bandeor {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_bandeor");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_bandeor(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_bandeor(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_bandeor makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_bandeor(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_bandeor", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_bandmean(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_bandmean {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_bandmean");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_bandmean(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_bandmean(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_bandmean makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_bandmean(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_bandmean", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_recomb(VipsImage *in, VipsImage **out, VipsImage *m, ...)
     * }
     */
    public static class vips_recomb {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_recomb");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_recomb(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_recomb(VipsImage *in, VipsImage **out, VipsImage *m, ...)
         * }
         */
        public static vips_recomb makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_recomb(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, MemorySegment m, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_recomb", in, out, m, x3);
                }
                return (int)spreader.invokeExact(in, out, m, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_ifthenelse(VipsImage *cond, VipsImage *in1, VipsImage *in2, VipsImage **out, ...)
     * }
     */
    public static class vips_ifthenelse {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_ifthenelse");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_ifthenelse(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_ifthenelse(VipsImage *cond, VipsImage *in1, VipsImage *in2, VipsImage **out, ...)
         * }
         */
        public static vips_ifthenelse makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_ifthenelse(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment cond, MemorySegment in1, MemorySegment in2, MemorySegment out, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_ifthenelse", cond, in1, in2, out, x4);
                }
                return (int)spreader.invokeExact(cond, in1, in2, out, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_switch(VipsImage **tests, VipsImage **out, int n, ...)
     * }
     */
    public static class vips_switch {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_switch");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_switch(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_switch(VipsImage **tests, VipsImage **out, int n, ...)
         * }
         */
        public static vips_switch makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_switch(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment tests, MemorySegment out, int n, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_switch", tests, out, n, x3);
                }
                return (int)spreader.invokeExact(tests, out, n, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_flatten(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_flatten {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_flatten");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_flatten(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_flatten(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_flatten makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_flatten(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_flatten", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_addalpha(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_addalpha {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_addalpha");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_addalpha(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_addalpha(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_addalpha makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_addalpha(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_addalpha", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_premultiply(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_premultiply {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_premultiply");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_premultiply(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_premultiply(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_premultiply makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_premultiply(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_premultiply", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_unpremultiply(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_unpremultiply {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_unpremultiply");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_unpremultiply(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_unpremultiply(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_unpremultiply makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_unpremultiply(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_unpremultiply", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_composite(VipsImage **in, VipsImage **out, int n, int *mode, ...)
     * }
     */
    public static class vips_composite {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_composite");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_composite(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_composite(VipsImage **in, VipsImage **out, int n, int *mode, ...)
         * }
         */
        public static vips_composite makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_composite(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, int n, MemorySegment mode, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_composite", in, out, n, mode, x4);
                }
                return (int)spreader.invokeExact(in, out, n, mode, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_composite2(VipsImage *base, VipsImage *overlay, VipsImage **out, VipsBlendMode mode, ...)
     * }
     */
    public static class vips_composite2 {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_composite2");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_composite2(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_composite2(VipsImage *base, VipsImage *overlay, VipsImage **out, VipsBlendMode mode, ...)
         * }
         */
        public static vips_composite2 makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_composite2(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment base, MemorySegment overlay, MemorySegment out, int mode, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_composite2", base, overlay, out, mode, x4);
                }
                return (int)spreader.invokeExact(base, overlay, out, mode, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_falsecolour(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_falsecolour {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_falsecolour");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_falsecolour(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_falsecolour(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_falsecolour makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_falsecolour(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_falsecolour", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_gamma(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_gamma {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_gamma");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_gamma(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_gamma(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_gamma makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_gamma(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_gamma", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }
    private static final int VIPS_COMBINE_MAX = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_COMBINE_MAX = 0
     * }
     */
    public static int VIPS_COMBINE_MAX() {
        return VIPS_COMBINE_MAX;
    }
    private static final int VIPS_COMBINE_SUM = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_COMBINE_SUM = 1
     * }
     */
    public static int VIPS_COMBINE_SUM() {
        return VIPS_COMBINE_SUM;
    }
    private static final int VIPS_COMBINE_MIN = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_COMBINE_MIN = 2
     * }
     */
    public static int VIPS_COMBINE_MIN() {
        return VIPS_COMBINE_MIN;
    }
    private static final int VIPS_COMBINE_LAST = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_COMBINE_LAST = 3
     * }
     */
    public static int VIPS_COMBINE_LAST() {
        return VIPS_COMBINE_LAST;
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_conv(VipsImage *in, VipsImage **out, VipsImage *mask, ...)
     * }
     */
    public static class vips_conv {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_conv");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_conv(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_conv(VipsImage *in, VipsImage **out, VipsImage *mask, ...)
         * }
         */
        public static vips_conv makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_conv(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, MemorySegment mask, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_conv", in, out, mask, x3);
                }
                return (int)spreader.invokeExact(in, out, mask, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_convf(VipsImage *in, VipsImage **out, VipsImage *mask, ...)
     * }
     */
    public static class vips_convf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_convf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_convf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_convf(VipsImage *in, VipsImage **out, VipsImage *mask, ...)
         * }
         */
        public static vips_convf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_convf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, MemorySegment mask, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_convf", in, out, mask, x3);
                }
                return (int)spreader.invokeExact(in, out, mask, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_convi(VipsImage *in, VipsImage **out, VipsImage *mask, ...)
     * }
     */
    public static class vips_convi {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_convi");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_convi(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_convi(VipsImage *in, VipsImage **out, VipsImage *mask, ...)
         * }
         */
        public static vips_convi makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_convi(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, MemorySegment mask, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_convi", in, out, mask, x3);
                }
                return (int)spreader.invokeExact(in, out, mask, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_conva(VipsImage *in, VipsImage **out, VipsImage *mask, ...)
     * }
     */
    public static class vips_conva {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_conva");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_conva(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_conva(VipsImage *in, VipsImage **out, VipsImage *mask, ...)
         * }
         */
        public static vips_conva makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_conva(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, MemorySegment mask, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_conva", in, out, mask, x3);
                }
                return (int)spreader.invokeExact(in, out, mask, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_convsep(VipsImage *in, VipsImage **out, VipsImage *mask, ...)
     * }
     */
    public static class vips_convsep {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_convsep");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_convsep(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_convsep(VipsImage *in, VipsImage **out, VipsImage *mask, ...)
         * }
         */
        public static vips_convsep makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_convsep(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, MemorySegment mask, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_convsep", in, out, mask, x3);
                }
                return (int)spreader.invokeExact(in, out, mask, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_convasep(VipsImage *in, VipsImage **out, VipsImage *mask, ...)
     * }
     */
    public static class vips_convasep {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_convasep");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_convasep(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_convasep(VipsImage *in, VipsImage **out, VipsImage *mask, ...)
         * }
         */
        public static vips_convasep makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_convasep(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, MemorySegment mask, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_convasep", in, out, mask, x3);
                }
                return (int)spreader.invokeExact(in, out, mask, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_compass(VipsImage *in, VipsImage **out, VipsImage *mask, ...)
     * }
     */
    public static class vips_compass {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_compass");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_compass(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_compass(VipsImage *in, VipsImage **out, VipsImage *mask, ...)
         * }
         */
        public static vips_compass makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_compass(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, MemorySegment mask, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_compass", in, out, mask, x3);
                }
                return (int)spreader.invokeExact(in, out, mask, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_gaussblur(VipsImage *in, VipsImage **out, double sigma, ...)
     * }
     */
    public static class vips_gaussblur {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_DOUBLE
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_gaussblur");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_gaussblur(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_gaussblur(VipsImage *in, VipsImage **out, double sigma, ...)
         * }
         */
        public static vips_gaussblur makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_gaussblur(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, double sigma, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_gaussblur", in, out, sigma, x3);
                }
                return (int)spreader.invokeExact(in, out, sigma, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_sharpen(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_sharpen {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_sharpen");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_sharpen(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_sharpen(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_sharpen makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_sharpen(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_sharpen", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_spcor(VipsImage *in, VipsImage *ref, VipsImage **out, ...)
     * }
     */
    public static class vips_spcor {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_spcor");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_spcor(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_spcor(VipsImage *in, VipsImage *ref, VipsImage **out, ...)
         * }
         */
        public static vips_spcor makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_spcor(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment ref, MemorySegment out, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_spcor", in, ref, out, x3);
                }
                return (int)spreader.invokeExact(in, ref, out, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_fastcor(VipsImage *in, VipsImage *ref, VipsImage **out, ...)
     * }
     */
    public static class vips_fastcor {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_fastcor");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_fastcor(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_fastcor(VipsImage *in, VipsImage *ref, VipsImage **out, ...)
         * }
         */
        public static vips_fastcor makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_fastcor(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment ref, MemorySegment out, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_fastcor", in, ref, out, x3);
                }
                return (int)spreader.invokeExact(in, ref, out, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_sobel(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_sobel {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_sobel");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_sobel(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_sobel(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_sobel makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_sobel(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_sobel", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_scharr(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_scharr {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_scharr");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_scharr(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_scharr(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_scharr makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_scharr(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_scharr", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_prewitt(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_prewitt {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_prewitt");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_prewitt(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_prewitt(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_prewitt makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_prewitt(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_prewitt", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_canny(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_canny {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_canny");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_canny(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_canny(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_canny makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_canny(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_canny", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }
    private static final int VIPS_OPERATION_MORPHOLOGY_ERODE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_MORPHOLOGY_ERODE = 0
     * }
     */
    public static int VIPS_OPERATION_MORPHOLOGY_ERODE() {
        return VIPS_OPERATION_MORPHOLOGY_ERODE;
    }
    private static final int VIPS_OPERATION_MORPHOLOGY_DILATE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_MORPHOLOGY_DILATE = 1
     * }
     */
    public static int VIPS_OPERATION_MORPHOLOGY_DILATE() {
        return VIPS_OPERATION_MORPHOLOGY_DILATE;
    }
    private static final int VIPS_OPERATION_MORPHOLOGY_LAST = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_MORPHOLOGY_LAST = 2
     * }
     */
    public static int VIPS_OPERATION_MORPHOLOGY_LAST() {
        return VIPS_OPERATION_MORPHOLOGY_LAST;
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_morph(VipsImage *in, VipsImage **out, VipsImage *mask, VipsOperationMorphology morph, ...)
     * }
     */
    public static class vips_morph {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_morph");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_morph(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_morph(VipsImage *in, VipsImage **out, VipsImage *mask, VipsOperationMorphology morph, ...)
         * }
         */
        public static vips_morph makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_morph(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, MemorySegment mask, int morph, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_morph", in, out, mask, morph, x4);
                }
                return (int)spreader.invokeExact(in, out, mask, morph, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_rank(VipsImage *in, VipsImage **out, int width, int height, int index, ...)
     * }
     */
    public static class vips_rank {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_rank");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_rank(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_rank(VipsImage *in, VipsImage **out, int width, int height, int index, ...)
         * }
         */
        public static vips_rank makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_rank(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, int width, int height, int index, Object... x5) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_rank", in, out, width, height, index, x5);
                }
                return (int)spreader.invokeExact(in, out, width, height, index, x5);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_median(VipsImage *in, VipsImage **out, int size, ...)
     * }
     */
    public static class vips_median {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_median");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_median(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_median(VipsImage *in, VipsImage **out, int size, ...)
         * }
         */
        public static vips_median makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_median(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, int size, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_median", in, out, size, x3);
                }
                return (int)spreader.invokeExact(in, out, size, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_countlines(VipsImage *in, double *nolines, VipsDirection direction, ...)
     * }
     */
    public static class vips_countlines {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_countlines");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_countlines(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_countlines(VipsImage *in, double *nolines, VipsDirection direction, ...)
         * }
         */
        public static vips_countlines makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_countlines(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment nolines, int direction, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_countlines", in, nolines, direction, x3);
                }
                return (int)spreader.invokeExact(in, nolines, direction, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_labelregions(VipsImage *in, VipsImage **mask, ...)
     * }
     */
    public static class vips_labelregions {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_labelregions");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_labelregions(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_labelregions(VipsImage *in, VipsImage **mask, ...)
         * }
         */
        public static vips_labelregions makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_labelregions(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment mask, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_labelregions", in, mask, x2);
                }
                return (int)spreader.invokeExact(in, mask, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_fill_nearest(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_fill_nearest {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_fill_nearest");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_fill_nearest(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_fill_nearest(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_fill_nearest makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_fill_nearest(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_fill_nearest", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_merge(VipsImage *ref, VipsImage *sec, VipsImage **out, VipsDirection direction, int dx, int dy, ...)
     * }
     */
    public static class vips_merge {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_merge");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_merge(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_merge(VipsImage *ref, VipsImage *sec, VipsImage **out, VipsDirection direction, int dx, int dy, ...)
         * }
         */
        public static vips_merge makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_merge(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment ref, MemorySegment sec, MemorySegment out, int direction, int dx, int dy, Object... x6) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_merge", ref, sec, out, direction, dx, dy, x6);
                }
                return (int)spreader.invokeExact(ref, sec, out, direction, dx, dy, x6);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_mosaic(VipsImage *ref, VipsImage *sec, VipsImage **out, VipsDirection direction, int xref, int yref, int xsec, int ysec, ...)
     * }
     */
    public static class vips_mosaic {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_mosaic");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_mosaic(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_mosaic(VipsImage *ref, VipsImage *sec, VipsImage **out, VipsDirection direction, int xref, int yref, int xsec, int ysec, ...)
         * }
         */
        public static vips_mosaic makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_mosaic(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment ref, MemorySegment sec, MemorySegment out, int direction, int xref, int yref, int xsec, int ysec, Object... x8) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_mosaic", ref, sec, out, direction, xref, yref, xsec, ysec, x8);
                }
                return (int)spreader.invokeExact(ref, sec, out, direction, xref, yref, xsec, ysec, x8);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_mosaic1(VipsImage *ref, VipsImage *sec, VipsImage **out, VipsDirection direction, int xr1, int yr1, int xs1, int ys1, int xr2, int yr2, int xs2, int ys2, ...)
     * }
     */
    public static class vips_mosaic1 {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_mosaic1");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_mosaic1(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_mosaic1(VipsImage *ref, VipsImage *sec, VipsImage **out, VipsDirection direction, int xr1, int yr1, int xs1, int ys1, int xr2, int yr2, int xs2, int ys2, ...)
         * }
         */
        public static vips_mosaic1 makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_mosaic1(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment ref, MemorySegment sec, MemorySegment out, int direction, int xr1, int yr1, int xs1, int ys1, int xr2, int yr2, int xs2, int ys2, Object... x12) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_mosaic1", ref, sec, out, direction, xr1, yr1, xs1, ys1, xr2, yr2, xs2, ys2, x12);
                }
                return (int)spreader.invokeExact(ref, sec, out, direction, xr1, yr1, xs1, ys1, xr2, yr2, xs2, ys2, x12);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_match(VipsImage *ref, VipsImage *sec, VipsImage **out, int xr1, int yr1, int xs1, int ys1, int xr2, int yr2, int xs2, int ys2, ...)
     * }
     */
    public static class vips_match {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_match");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_match(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_match(VipsImage *ref, VipsImage *sec, VipsImage **out, int xr1, int yr1, int xs1, int ys1, int xr2, int yr2, int xs2, int ys2, ...)
         * }
         */
        public static vips_match makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_match(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment ref, MemorySegment sec, MemorySegment out, int xr1, int yr1, int xs1, int ys1, int xr2, int yr2, int xs2, int ys2, Object... x11) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_match", ref, sec, out, xr1, yr1, xs1, ys1, xr2, yr2, xs2, ys2, x11);
                }
                return (int)spreader.invokeExact(ref, sec, out, xr1, yr1, xs1, ys1, xr2, yr2, xs2, ys2, x11);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_globalbalance(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_globalbalance {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_globalbalance");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_globalbalance(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_globalbalance(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_globalbalance makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_globalbalance(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_globalbalance", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_remosaic(VipsImage *in, VipsImage **out, const char *old_str, const char *new_str, ...)
     * }
     */
    public static class vips_remosaic {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_remosaic");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_remosaic(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_remosaic(VipsImage *in, VipsImage **out, const char *old_str, const char *new_str, ...)
         * }
         */
        public static vips_remosaic makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_remosaic(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, MemorySegment old_str, MemorySegment new_str, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_remosaic", in, out, old_str, new_str, x4);
                }
                return (int)spreader.invokeExact(in, out, old_str, new_str, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_matrixinvert(VipsImage *m, VipsImage **out, ...)
     * }
     */
    public static class vips_matrixinvert {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_matrixinvert");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_matrixinvert(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_matrixinvert(VipsImage *m, VipsImage **out, ...)
         * }
         */
        public static vips_matrixinvert makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_matrixinvert(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment m, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_matrixinvert", m, out, x2);
                }
                return (int)spreader.invokeExact(m, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_maplut(VipsImage *in, VipsImage **out, VipsImage *lut, ...)
     * }
     */
    public static class vips_maplut {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_maplut");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_maplut(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_maplut(VipsImage *in, VipsImage **out, VipsImage *lut, ...)
         * }
         */
        public static vips_maplut makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_maplut(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, MemorySegment lut, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_maplut", in, out, lut, x3);
                }
                return (int)spreader.invokeExact(in, out, lut, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_percent(VipsImage *in, double percent, int *threshold, ...)
     * }
     */
    public static class vips_percent {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_DOUBLE,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_percent");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_percent(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_percent(VipsImage *in, double percent, int *threshold, ...)
         * }
         */
        public static vips_percent makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_percent(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, double percent, MemorySegment threshold, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_percent", in, percent, threshold, x3);
                }
                return (int)spreader.invokeExact(in, percent, threshold, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_stdif(VipsImage *in, VipsImage **out, int width, int height, ...)
     * }
     */
    public static class vips_stdif {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_stdif");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_stdif(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_stdif(VipsImage *in, VipsImage **out, int width, int height, ...)
         * }
         */
        public static vips_stdif makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_stdif(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, int width, int height, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_stdif", in, out, width, height, x4);
                }
                return (int)spreader.invokeExact(in, out, width, height, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_hist_cum(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_hist_cum {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_hist_cum");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_hist_cum(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_hist_cum(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_hist_cum makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_hist_cum(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_hist_cum", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_hist_norm(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_hist_norm {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_hist_norm");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_hist_norm(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_hist_norm(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_hist_norm makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_hist_norm(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_hist_norm", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_hist_equal(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_hist_equal {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_hist_equal");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_hist_equal(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_hist_equal(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_hist_equal makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_hist_equal(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_hist_equal", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_hist_plot(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_hist_plot {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_hist_plot");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_hist_plot(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_hist_plot(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_hist_plot makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_hist_plot(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_hist_plot", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_hist_match(VipsImage *in, VipsImage *ref, VipsImage **out, ...)
     * }
     */
    public static class vips_hist_match {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_hist_match");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_hist_match(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_hist_match(VipsImage *in, VipsImage *ref, VipsImage **out, ...)
         * }
         */
        public static vips_hist_match makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_hist_match(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment ref, MemorySegment out, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_hist_match", in, ref, out, x3);
                }
                return (int)spreader.invokeExact(in, ref, out, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_hist_local(VipsImage *in, VipsImage **out, int width, int height, ...)
     * }
     */
    public static class vips_hist_local {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_hist_local");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_hist_local(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_hist_local(VipsImage *in, VipsImage **out, int width, int height, ...)
         * }
         */
        public static vips_hist_local makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_hist_local(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, int width, int height, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_hist_local", in, out, width, height, x4);
                }
                return (int)spreader.invokeExact(in, out, width, height, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_hist_ismonotonic(VipsImage *in, gboolean *out, ...)
     * }
     */
    public static class vips_hist_ismonotonic {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_hist_ismonotonic");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_hist_ismonotonic(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_hist_ismonotonic(VipsImage *in, gboolean *out, ...)
         * }
         */
        public static vips_hist_ismonotonic makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_hist_ismonotonic(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_hist_ismonotonic", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_hist_entropy(VipsImage *in, double *out, ...)
     * }
     */
    public static class vips_hist_entropy {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_hist_entropy");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_hist_entropy(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_hist_entropy(VipsImage *in, double *out, ...)
         * }
         */
        public static vips_hist_entropy makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_hist_entropy(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_hist_entropy", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_case(VipsImage *index, VipsImage **cases, VipsImage **out, int n, ...)
     * }
     */
    public static class vips_case {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_case");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_case(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_case(VipsImage *index, VipsImage **cases, VipsImage **out, int n, ...)
         * }
         */
        public static vips_case makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_case(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment index, MemorySegment cases, MemorySegment out, int n, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_case", index, cases, out, n, x4);
                }
                return (int)spreader.invokeExact(index, cases, out, n, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_fwfft(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_fwfft {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_fwfft");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_fwfft(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_fwfft(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_fwfft makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_fwfft(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_fwfft", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_invfft(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_invfft {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_invfft");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_invfft(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_invfft(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_invfft makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_invfft(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_invfft", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_freqmult(VipsImage *in, VipsImage *mask, VipsImage **out, ...)
     * }
     */
    public static class vips_freqmult {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_freqmult");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_freqmult(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_freqmult(VipsImage *in, VipsImage *mask, VipsImage **out, ...)
         * }
         */
        public static vips_freqmult makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_freqmult(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment mask, MemorySegment out, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_freqmult", in, mask, out, x3);
                }
                return (int)spreader.invokeExact(in, mask, out, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_spectrum(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_spectrum {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_spectrum");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_spectrum(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_spectrum(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_spectrum makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_spectrum(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_spectrum", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_phasecor(VipsImage *in1, VipsImage *in2, VipsImage **out, ...)
     * }
     */
    public static class vips_phasecor {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_phasecor");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_phasecor(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_phasecor(VipsImage *in1, VipsImage *in2, VipsImage **out, ...)
         * }
         */
        public static vips_phasecor makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_phasecor(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in1, MemorySegment in2, MemorySegment out, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_phasecor", in1, in2, out, x3);
                }
                return (int)spreader.invokeExact(in1, in2, out, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }
    private static final int VIPS_KERNEL_NEAREST = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_KERNEL_NEAREST = 0
     * }
     */
    public static int VIPS_KERNEL_NEAREST() {
        return VIPS_KERNEL_NEAREST;
    }
    private static final int VIPS_KERNEL_LINEAR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_KERNEL_LINEAR = 1
     * }
     */
    public static int VIPS_KERNEL_LINEAR() {
        return VIPS_KERNEL_LINEAR;
    }
    private static final int VIPS_KERNEL_CUBIC = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_KERNEL_CUBIC = 2
     * }
     */
    public static int VIPS_KERNEL_CUBIC() {
        return VIPS_KERNEL_CUBIC;
    }
    private static final int VIPS_KERNEL_MITCHELL = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_KERNEL_MITCHELL = 3
     * }
     */
    public static int VIPS_KERNEL_MITCHELL() {
        return VIPS_KERNEL_MITCHELL;
    }
    private static final int VIPS_KERNEL_LANCZOS2 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_KERNEL_LANCZOS2 = 4
     * }
     */
    public static int VIPS_KERNEL_LANCZOS2() {
        return VIPS_KERNEL_LANCZOS2;
    }
    private static final int VIPS_KERNEL_LANCZOS3 = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_KERNEL_LANCZOS3 = 5
     * }
     */
    public static int VIPS_KERNEL_LANCZOS3() {
        return VIPS_KERNEL_LANCZOS3;
    }
    private static final int VIPS_KERNEL_LAST = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_KERNEL_LAST = 6
     * }
     */
    public static int VIPS_KERNEL_LAST() {
        return VIPS_KERNEL_LAST;
    }
    private static final int VIPS_SIZE_BOTH = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_SIZE_BOTH = 0
     * }
     */
    public static int VIPS_SIZE_BOTH() {
        return VIPS_SIZE_BOTH;
    }
    private static final int VIPS_SIZE_UP = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_SIZE_UP = 1
     * }
     */
    public static int VIPS_SIZE_UP() {
        return VIPS_SIZE_UP;
    }
    private static final int VIPS_SIZE_DOWN = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_SIZE_DOWN = 2
     * }
     */
    public static int VIPS_SIZE_DOWN() {
        return VIPS_SIZE_DOWN;
    }
    private static final int VIPS_SIZE_FORCE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_SIZE_FORCE = 3
     * }
     */
    public static int VIPS_SIZE_FORCE() {
        return VIPS_SIZE_FORCE;
    }
    private static final int VIPS_SIZE_LAST = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_SIZE_LAST = 4
     * }
     */
    public static int VIPS_SIZE_LAST() {
        return VIPS_SIZE_LAST;
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_shrink(VipsImage *in, VipsImage **out, double hshrink, double vshrink, ...)
     * }
     */
    public static class vips_shrink {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_DOUBLE,
                vips_h.C_DOUBLE
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_shrink");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_shrink(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_shrink(VipsImage *in, VipsImage **out, double hshrink, double vshrink, ...)
         * }
         */
        public static vips_shrink makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_shrink(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, double hshrink, double vshrink, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_shrink", in, out, hshrink, vshrink, x4);
                }
                return (int)spreader.invokeExact(in, out, hshrink, vshrink, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_shrinkh(VipsImage *in, VipsImage **out, int hshrink, ...)
     * }
     */
    public static class vips_shrinkh {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_shrinkh");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_shrinkh(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_shrinkh(VipsImage *in, VipsImage **out, int hshrink, ...)
         * }
         */
        public static vips_shrinkh makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_shrinkh(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, int hshrink, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_shrinkh", in, out, hshrink, x3);
                }
                return (int)spreader.invokeExact(in, out, hshrink, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_shrinkv(VipsImage *in, VipsImage **out, int vshrink, ...)
     * }
     */
    public static class vips_shrinkv {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_shrinkv");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_shrinkv(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_shrinkv(VipsImage *in, VipsImage **out, int vshrink, ...)
         * }
         */
        public static vips_shrinkv makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_shrinkv(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, int vshrink, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_shrinkv", in, out, vshrink, x3);
                }
                return (int)spreader.invokeExact(in, out, vshrink, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_reduce(VipsImage *in, VipsImage **out, double hshrink, double vshrink, ...)
     * }
     */
    public static class vips_reduce {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_DOUBLE,
                vips_h.C_DOUBLE
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_reduce");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_reduce(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_reduce(VipsImage *in, VipsImage **out, double hshrink, double vshrink, ...)
         * }
         */
        public static vips_reduce makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_reduce(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, double hshrink, double vshrink, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_reduce", in, out, hshrink, vshrink, x4);
                }
                return (int)spreader.invokeExact(in, out, hshrink, vshrink, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_reduceh(VipsImage *in, VipsImage **out, double hshrink, ...)
     * }
     */
    public static class vips_reduceh {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_DOUBLE
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_reduceh");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_reduceh(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_reduceh(VipsImage *in, VipsImage **out, double hshrink, ...)
         * }
         */
        public static vips_reduceh makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_reduceh(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, double hshrink, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_reduceh", in, out, hshrink, x3);
                }
                return (int)spreader.invokeExact(in, out, hshrink, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_reducev(VipsImage *in, VipsImage **out, double vshrink, ...)
     * }
     */
    public static class vips_reducev {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_DOUBLE
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_reducev");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_reducev(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_reducev(VipsImage *in, VipsImage **out, double vshrink, ...)
         * }
         */
        public static vips_reducev makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_reducev(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, double vshrink, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_reducev", in, out, vshrink, x3);
                }
                return (int)spreader.invokeExact(in, out, vshrink, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_thumbnail(const char *filename, VipsImage **out, int width, ...)
     * }
     */
    public static class vips_thumbnail {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_thumbnail");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_thumbnail(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_thumbnail(const char *filename, VipsImage **out, int width, ...)
         * }
         */
        public static vips_thumbnail makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_thumbnail(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment filename, MemorySegment out, int width, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_thumbnail", filename, out, width, x3);
                }
                return (int)spreader.invokeExact(filename, out, width, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_thumbnail_buffer(void *buf, size_t len, VipsImage **out, int width, ...)
     * }
     */
    public static class vips_thumbnail_buffer {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_LONG,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_thumbnail_buffer");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_thumbnail_buffer(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_thumbnail_buffer(void *buf, size_t len, VipsImage **out, int width, ...)
         * }
         */
        public static vips_thumbnail_buffer makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_thumbnail_buffer(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment buf, long len, MemorySegment out, int width, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_thumbnail_buffer", buf, len, out, width, x4);
                }
                return (int)spreader.invokeExact(buf, len, out, width, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_thumbnail_image(VipsImage *in, VipsImage **out, int width, ...)
     * }
     */
    public static class vips_thumbnail_image {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_thumbnail_image");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_thumbnail_image(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_thumbnail_image(VipsImage *in, VipsImage **out, int width, ...)
         * }
         */
        public static vips_thumbnail_image makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_thumbnail_image(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, int width, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_thumbnail_image", in, out, width, x3);
                }
                return (int)spreader.invokeExact(in, out, width, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_thumbnail_source(VipsSource *source, VipsImage **out, int width, ...)
     * }
     */
    public static class vips_thumbnail_source {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_thumbnail_source");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_thumbnail_source(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_thumbnail_source(VipsSource *source, VipsImage **out, int width, ...)
         * }
         */
        public static vips_thumbnail_source makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_thumbnail_source(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment source, MemorySegment out, int width, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_thumbnail_source", source, out, width, x3);
                }
                return (int)spreader.invokeExact(source, out, width, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_similarity(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_similarity {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_similarity");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_similarity(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_similarity(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_similarity makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_similarity(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_similarity", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_rotate(VipsImage *in, VipsImage **out, double angle, ...)
     * }
     */
    public static class vips_rotate {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_DOUBLE
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_rotate");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_rotate(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_rotate(VipsImage *in, VipsImage **out, double angle, ...)
         * }
         */
        public static vips_rotate makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_rotate(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, double angle, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_rotate", in, out, angle, x3);
                }
                return (int)spreader.invokeExact(in, out, angle, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_affine(VipsImage *in, VipsImage **out, double a, double b, double c, double d, ...)
     * }
     */
    public static class vips_affine {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_DOUBLE,
                vips_h.C_DOUBLE,
                vips_h.C_DOUBLE,
                vips_h.C_DOUBLE
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_affine");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_affine(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_affine(VipsImage *in, VipsImage **out, double a, double b, double c, double d, ...)
         * }
         */
        public static vips_affine makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_affine(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, double a, double b, double c, double d, Object... x6) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_affine", in, out, a, b, c, d, x6);
                }
                return (int)spreader.invokeExact(in, out, a, b, c, d, x6);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_resize(VipsImage *in, VipsImage **out, double scale, ...)
     * }
     */
    public static class vips_resize {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_DOUBLE
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_resize");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_resize(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_resize(VipsImage *in, VipsImage **out, double scale, ...)
         * }
         */
        public static vips_resize makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_resize(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, double scale, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_resize", in, out, scale, x3);
                }
                return (int)spreader.invokeExact(in, out, scale, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_mapim(VipsImage *in, VipsImage **out, VipsImage *index, ...)
     * }
     */
    public static class vips_mapim {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_mapim");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_mapim(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_mapim(VipsImage *in, VipsImage **out, VipsImage *index, ...)
         * }
         */
        public static vips_mapim makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_mapim(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, MemorySegment index, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_mapim", in, out, index, x3);
                }
                return (int)spreader.invokeExact(in, out, index, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_quadratic(VipsImage *in, VipsImage **out, VipsImage *coeff, ...)
     * }
     */
    public static class vips_quadratic {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_quadratic");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_quadratic(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_quadratic(VipsImage *in, VipsImage **out, VipsImage *coeff, ...)
         * }
         */
        public static vips_quadratic makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_quadratic(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, MemorySegment coeff, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_quadratic", in, out, coeff, x3);
                }
                return (int)spreader.invokeExact(in, out, coeff, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }
    private static final int VIPS_INTENT_PERCEPTUAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTENT_PERCEPTUAL = 0
     * }
     */
    public static int VIPS_INTENT_PERCEPTUAL() {
        return VIPS_INTENT_PERCEPTUAL;
    }
    private static final int VIPS_INTENT_RELATIVE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTENT_RELATIVE = 1
     * }
     */
    public static int VIPS_INTENT_RELATIVE() {
        return VIPS_INTENT_RELATIVE;
    }
    private static final int VIPS_INTENT_SATURATION = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTENT_SATURATION = 2
     * }
     */
    public static int VIPS_INTENT_SATURATION() {
        return VIPS_INTENT_SATURATION;
    }
    private static final int VIPS_INTENT_ABSOLUTE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTENT_ABSOLUTE = 3
     * }
     */
    public static int VIPS_INTENT_ABSOLUTE() {
        return VIPS_INTENT_ABSOLUTE;
    }
    private static final int VIPS_INTENT_LAST = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTENT_LAST = 4
     * }
     */
    public static int VIPS_INTENT_LAST() {
        return VIPS_INTENT_LAST;
    }
    private static final int VIPS_PCS_LAB = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_PCS_LAB = 0
     * }
     */
    public static int VIPS_PCS_LAB() {
        return VIPS_PCS_LAB;
    }
    private static final int VIPS_PCS_XYZ = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_PCS_XYZ = 1
     * }
     */
    public static int VIPS_PCS_XYZ() {
        return VIPS_PCS_XYZ;
    }
    private static final int VIPS_PCS_LAST = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_PCS_LAST = 2
     * }
     */
    public static int VIPS_PCS_LAST() {
        return VIPS_PCS_LAST;
    }

    private static class vips_colourspace_issupported {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_colourspace_issupported");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_colourspace_issupported(const VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_colourspace_issupported$descriptor() {
        return vips_colourspace_issupported.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_colourspace_issupported(const VipsImage *image)
     * }
     */
    public static MethodHandle vips_colourspace_issupported$handle() {
        return vips_colourspace_issupported.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_colourspace_issupported(const VipsImage *image)
     * }
     */
    public static MemorySegment vips_colourspace_issupported$address() {
        return vips_colourspace_issupported.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_colourspace_issupported(const VipsImage *image)
     * }
     */
    public static int vips_colourspace_issupported(MemorySegment image) {
        var mh$ = vips_colourspace_issupported.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_colourspace_issupported", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_colourspace(VipsImage *in, VipsImage **out, VipsInterpretation space, ...)
     * }
     */
    public static class vips_colourspace {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_colourspace");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_colourspace(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_colourspace(VipsImage *in, VipsImage **out, VipsInterpretation space, ...)
         * }
         */
        public static vips_colourspace makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_colourspace(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, int space, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_colourspace", in, out, space, x3);
                }
                return (int)spreader.invokeExact(in, out, space, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_LabQ2sRGB(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_LabQ2sRGB {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_LabQ2sRGB");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_LabQ2sRGB(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_LabQ2sRGB(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_LabQ2sRGB makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_LabQ2sRGB(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_LabQ2sRGB", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_rad2float(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_rad2float {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_rad2float");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_rad2float(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_rad2float(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_rad2float makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_rad2float(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_rad2float", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_float2rad(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_float2rad {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_float2rad");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_float2rad(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_float2rad(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_float2rad makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_float2rad(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_float2rad", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_LabS2LabQ(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_LabS2LabQ {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_LabS2LabQ");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_LabS2LabQ(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_LabS2LabQ(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_LabS2LabQ makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_LabS2LabQ(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_LabS2LabQ", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_LabQ2LabS(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_LabQ2LabS {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_LabQ2LabS");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_LabQ2LabS(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_LabQ2LabS(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_LabQ2LabS makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_LabQ2LabS(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_LabQ2LabS", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_LabQ2Lab(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_LabQ2Lab {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_LabQ2Lab");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_LabQ2Lab(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_LabQ2Lab(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_LabQ2Lab makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_LabQ2Lab(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_LabQ2Lab", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_Lab2LabQ(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_Lab2LabQ {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_Lab2LabQ");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_Lab2LabQ(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_Lab2LabQ(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_Lab2LabQ makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_Lab2LabQ(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_Lab2LabQ", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_LCh2Lab(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_LCh2Lab {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_LCh2Lab");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_LCh2Lab(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_LCh2Lab(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_LCh2Lab makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_LCh2Lab(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_LCh2Lab", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_Lab2LCh(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_Lab2LCh {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_Lab2LCh");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_Lab2LCh(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_Lab2LCh(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_Lab2LCh makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_Lab2LCh(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_Lab2LCh", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_Yxy2Lab(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_Yxy2Lab {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_Yxy2Lab");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_Yxy2Lab(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_Yxy2Lab(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_Yxy2Lab makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_Yxy2Lab(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_Yxy2Lab", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_CMC2XYZ(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_CMC2XYZ {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_CMC2XYZ");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_CMC2XYZ(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_CMC2XYZ(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_CMC2XYZ makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_CMC2XYZ(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_CMC2XYZ", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_Lab2XYZ(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_Lab2XYZ {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_Lab2XYZ");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_Lab2XYZ(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_Lab2XYZ(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_Lab2XYZ makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_Lab2XYZ(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_Lab2XYZ", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_XYZ2Lab(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_XYZ2Lab {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_XYZ2Lab");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_XYZ2Lab(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_XYZ2Lab(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_XYZ2Lab makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_XYZ2Lab(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_XYZ2Lab", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_XYZ2scRGB(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_XYZ2scRGB {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_XYZ2scRGB");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_XYZ2scRGB(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_XYZ2scRGB(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_XYZ2scRGB makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_XYZ2scRGB(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_XYZ2scRGB", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_scRGB2sRGB(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_scRGB2sRGB {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_scRGB2sRGB");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_scRGB2sRGB(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_scRGB2sRGB(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_scRGB2sRGB makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_scRGB2sRGB(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_scRGB2sRGB", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_scRGB2BW(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_scRGB2BW {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_scRGB2BW");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_scRGB2BW(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_scRGB2BW(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_scRGB2BW makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_scRGB2BW(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_scRGB2BW", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_sRGB2scRGB(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_sRGB2scRGB {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_sRGB2scRGB");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_sRGB2scRGB(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_sRGB2scRGB(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_sRGB2scRGB makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_sRGB2scRGB(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_sRGB2scRGB", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_scRGB2XYZ(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_scRGB2XYZ {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_scRGB2XYZ");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_scRGB2XYZ(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_scRGB2XYZ(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_scRGB2XYZ makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_scRGB2XYZ(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_scRGB2XYZ", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_HSV2sRGB(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_HSV2sRGB {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_HSV2sRGB");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_HSV2sRGB(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_HSV2sRGB(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_HSV2sRGB makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_HSV2sRGB(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_HSV2sRGB", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_sRGB2HSV(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_sRGB2HSV {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_sRGB2HSV");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_sRGB2HSV(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_sRGB2HSV(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_sRGB2HSV makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_sRGB2HSV(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_sRGB2HSV", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_LCh2CMC(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_LCh2CMC {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_LCh2CMC");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_LCh2CMC(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_LCh2CMC(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_LCh2CMC makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_LCh2CMC(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_LCh2CMC", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_CMC2LCh(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_CMC2LCh {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_CMC2LCh");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_CMC2LCh(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_CMC2LCh(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_CMC2LCh makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_CMC2LCh(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_CMC2LCh", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_XYZ2Yxy(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_XYZ2Yxy {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_XYZ2Yxy");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_XYZ2Yxy(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_XYZ2Yxy(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_XYZ2Yxy makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_XYZ2Yxy(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_XYZ2Yxy", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_Yxy2XYZ(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_Yxy2XYZ {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_Yxy2XYZ");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_Yxy2XYZ(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_Yxy2XYZ(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_Yxy2XYZ makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_Yxy2XYZ(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_Yxy2XYZ", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_LabS2Lab(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_LabS2Lab {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_LabS2Lab");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_LabS2Lab(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_LabS2Lab(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_LabS2Lab makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_LabS2Lab(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_LabS2Lab", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_Lab2LabS(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_Lab2LabS {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_Lab2LabS");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_Lab2LabS(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_Lab2LabS(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_Lab2LabS makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_Lab2LabS(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_Lab2LabS", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_CMYK2XYZ(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_CMYK2XYZ {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_CMYK2XYZ");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_CMYK2XYZ(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_CMYK2XYZ(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_CMYK2XYZ makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_CMYK2XYZ(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_CMYK2XYZ", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_XYZ2CMYK(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_XYZ2CMYK {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_XYZ2CMYK");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_XYZ2CMYK(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_XYZ2CMYK(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_XYZ2CMYK makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_XYZ2CMYK(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_XYZ2CMYK", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_profile_load(const char *name, VipsBlob **profile, ...)
     * }
     */
    public static class vips_profile_load {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_profile_load");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_profile_load(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_profile_load(const char *name, VipsBlob **profile, ...)
         * }
         */
        public static vips_profile_load makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_profile_load(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment name, MemorySegment profile, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_profile_load", name, profile, x2);
                }
                return (int)spreader.invokeExact(name, profile, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class vips_icc_present {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_icc_present");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_icc_present()
     * }
     */
    public static FunctionDescriptor vips_icc_present$descriptor() {
        return vips_icc_present.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_icc_present()
     * }
     */
    public static MethodHandle vips_icc_present$handle() {
        return vips_icc_present.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_icc_present()
     * }
     */
    public static MemorySegment vips_icc_present$address() {
        return vips_icc_present.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_icc_present()
     * }
     */
    public static int vips_icc_present() {
        var mh$ = vips_icc_present.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_icc_present");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_icc_transform(VipsImage *in, VipsImage **out, const char *output_profile, ...)
     * }
     */
    public static class vips_icc_transform {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_icc_transform");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_icc_transform(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_icc_transform(VipsImage *in, VipsImage **out, const char *output_profile, ...)
         * }
         */
        public static vips_icc_transform makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_icc_transform(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, MemorySegment output_profile, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_icc_transform", in, out, output_profile, x3);
                }
                return (int)spreader.invokeExact(in, out, output_profile, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_icc_import(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_icc_import {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_icc_import");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_icc_import(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_icc_import(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_icc_import makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_icc_import(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_icc_import", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_icc_export(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_icc_export {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_icc_export");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_icc_export(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_icc_export(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_icc_export makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_icc_export(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_icc_export", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class vips_icc_ac2rc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_icc_ac2rc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_icc_ac2rc(VipsImage *in, VipsImage **out, const char *profile_filename)
     * }
     */
    public static FunctionDescriptor vips_icc_ac2rc$descriptor() {
        return vips_icc_ac2rc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_icc_ac2rc(VipsImage *in, VipsImage **out, const char *profile_filename)
     * }
     */
    public static MethodHandle vips_icc_ac2rc$handle() {
        return vips_icc_ac2rc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_icc_ac2rc(VipsImage *in, VipsImage **out, const char *profile_filename)
     * }
     */
    public static MemorySegment vips_icc_ac2rc$address() {
        return vips_icc_ac2rc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_icc_ac2rc(VipsImage *in, VipsImage **out, const char *profile_filename)
     * }
     */
    public static int vips_icc_ac2rc(MemorySegment in, MemorySegment out, MemorySegment profile_filename) {
        var mh$ = vips_icc_ac2rc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_icc_ac2rc", in, out, profile_filename);
            }
            return (int)mh$.invokeExact(in, out, profile_filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_icc_is_compatible_profile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_LONG
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_icc_is_compatible_profile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_icc_is_compatible_profile(VipsImage *image, const void *data, size_t data_length)
     * }
     */
    public static FunctionDescriptor vips_icc_is_compatible_profile$descriptor() {
        return vips_icc_is_compatible_profile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_icc_is_compatible_profile(VipsImage *image, const void *data, size_t data_length)
     * }
     */
    public static MethodHandle vips_icc_is_compatible_profile$handle() {
        return vips_icc_is_compatible_profile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_icc_is_compatible_profile(VipsImage *image, const void *data, size_t data_length)
     * }
     */
    public static MemorySegment vips_icc_is_compatible_profile$address() {
        return vips_icc_is_compatible_profile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_icc_is_compatible_profile(VipsImage *image, const void *data, size_t data_length)
     * }
     */
    public static int vips_icc_is_compatible_profile(MemorySegment image, MemorySegment data, long data_length) {
        var mh$ = vips_icc_is_compatible_profile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_icc_is_compatible_profile", image, data, data_length);
            }
            return (int)mh$.invokeExact(image, data, data_length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_dE76(VipsImage *left, VipsImage *right, VipsImage **out, ...)
     * }
     */
    public static class vips_dE76 {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_dE76");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_dE76(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_dE76(VipsImage *left, VipsImage *right, VipsImage **out, ...)
         * }
         */
        public static vips_dE76 makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_dE76(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment left, MemorySegment right, MemorySegment out, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_dE76", left, right, out, x3);
                }
                return (int)spreader.invokeExact(left, right, out, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_dE00(VipsImage *left, VipsImage *right, VipsImage **out, ...)
     * }
     */
    public static class vips_dE00 {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_dE00");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_dE00(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_dE00(VipsImage *left, VipsImage *right, VipsImage **out, ...)
         * }
         */
        public static vips_dE00 makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_dE00(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment left, MemorySegment right, MemorySegment out, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_dE00", left, right, out, x3);
                }
                return (int)spreader.invokeExact(left, right, out, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_dECMC(VipsImage *left, VipsImage *right, VipsImage **out, ...)
     * }
     */
    public static class vips_dECMC {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_dECMC");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_dECMC(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_dECMC(VipsImage *left, VipsImage *right, VipsImage **out, ...)
         * }
         */
        public static vips_dECMC makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_dECMC(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment left, MemorySegment right, MemorySegment out, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_dECMC", left, right, out, x3);
                }
                return (int)spreader.invokeExact(left, right, out, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class vips_col_Lab2XYZ {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_FLOAT,
            vips_h.C_FLOAT,
            vips_h.C_FLOAT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_col_Lab2XYZ");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_col_Lab2XYZ(float L, float a, float b, float *X, float *Y, float *Z)
     * }
     */
    public static FunctionDescriptor vips_col_Lab2XYZ$descriptor() {
        return vips_col_Lab2XYZ.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_col_Lab2XYZ(float L, float a, float b, float *X, float *Y, float *Z)
     * }
     */
    public static MethodHandle vips_col_Lab2XYZ$handle() {
        return vips_col_Lab2XYZ.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_col_Lab2XYZ(float L, float a, float b, float *X, float *Y, float *Z)
     * }
     */
    public static MemorySegment vips_col_Lab2XYZ$address() {
        return vips_col_Lab2XYZ.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_col_Lab2XYZ(float L, float a, float b, float *X, float *Y, float *Z)
     * }
     */
    public static void vips_col_Lab2XYZ(float L, float a, float b, MemorySegment X, MemorySegment Y, MemorySegment Z) {
        var mh$ = vips_col_Lab2XYZ.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_col_Lab2XYZ", L, a, b, X, Y, Z);
            }
            mh$.invokeExact(L, a, b, X, Y, Z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_col_XYZ2Lab {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_FLOAT,
            vips_h.C_FLOAT,
            vips_h.C_FLOAT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_col_XYZ2Lab");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_col_XYZ2Lab(float X, float Y, float Z, float *L, float *a, float *b)
     * }
     */
    public static FunctionDescriptor vips_col_XYZ2Lab$descriptor() {
        return vips_col_XYZ2Lab.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_col_XYZ2Lab(float X, float Y, float Z, float *L, float *a, float *b)
     * }
     */
    public static MethodHandle vips_col_XYZ2Lab$handle() {
        return vips_col_XYZ2Lab.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_col_XYZ2Lab(float X, float Y, float Z, float *L, float *a, float *b)
     * }
     */
    public static MemorySegment vips_col_XYZ2Lab$address() {
        return vips_col_XYZ2Lab.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_col_XYZ2Lab(float X, float Y, float Z, float *L, float *a, float *b)
     * }
     */
    public static void vips_col_XYZ2Lab(float X, float Y, float Z, MemorySegment L, MemorySegment a, MemorySegment b) {
        var mh$ = vips_col_XYZ2Lab.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_col_XYZ2Lab", X, Y, Z, L, a, b);
            }
            mh$.invokeExact(X, Y, Z, L, a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_col_ab2h {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_DOUBLE,
            vips_h.C_DOUBLE,
            vips_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_col_ab2h");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double vips_col_ab2h(double a, double b)
     * }
     */
    public static FunctionDescriptor vips_col_ab2h$descriptor() {
        return vips_col_ab2h.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double vips_col_ab2h(double a, double b)
     * }
     */
    public static MethodHandle vips_col_ab2h$handle() {
        return vips_col_ab2h.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double vips_col_ab2h(double a, double b)
     * }
     */
    public static MemorySegment vips_col_ab2h$address() {
        return vips_col_ab2h.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double vips_col_ab2h(double a, double b)
     * }
     */
    public static double vips_col_ab2h(double a, double b) {
        var mh$ = vips_col_ab2h.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_col_ab2h", a, b);
            }
            return (double)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_col_ab2Ch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_FLOAT,
            vips_h.C_FLOAT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_col_ab2Ch");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_col_ab2Ch(float a, float b, float *C, float *h)
     * }
     */
    public static FunctionDescriptor vips_col_ab2Ch$descriptor() {
        return vips_col_ab2Ch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_col_ab2Ch(float a, float b, float *C, float *h)
     * }
     */
    public static MethodHandle vips_col_ab2Ch$handle() {
        return vips_col_ab2Ch.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_col_ab2Ch(float a, float b, float *C, float *h)
     * }
     */
    public static MemorySegment vips_col_ab2Ch$address() {
        return vips_col_ab2Ch.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_col_ab2Ch(float a, float b, float *C, float *h)
     * }
     */
    public static void vips_col_ab2Ch(float a, float b, MemorySegment C, MemorySegment h) {
        var mh$ = vips_col_ab2Ch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_col_ab2Ch", a, b, C, h);
            }
            mh$.invokeExact(a, b, C, h);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_col_Ch2ab {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_FLOAT,
            vips_h.C_FLOAT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_col_Ch2ab");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_col_Ch2ab(float C, float h, float *a, float *b)
     * }
     */
    public static FunctionDescriptor vips_col_Ch2ab$descriptor() {
        return vips_col_Ch2ab.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_col_Ch2ab(float C, float h, float *a, float *b)
     * }
     */
    public static MethodHandle vips_col_Ch2ab$handle() {
        return vips_col_Ch2ab.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_col_Ch2ab(float C, float h, float *a, float *b)
     * }
     */
    public static MemorySegment vips_col_Ch2ab$address() {
        return vips_col_Ch2ab.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_col_Ch2ab(float C, float h, float *a, float *b)
     * }
     */
    public static void vips_col_Ch2ab(float C, float h, MemorySegment a, MemorySegment b) {
        var mh$ = vips_col_Ch2ab.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_col_Ch2ab", C, h, a, b);
            }
            mh$.invokeExact(C, h, a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_col_L2Lcmc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_FLOAT,
            vips_h.C_FLOAT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_col_L2Lcmc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float vips_col_L2Lcmc(float L)
     * }
     */
    public static FunctionDescriptor vips_col_L2Lcmc$descriptor() {
        return vips_col_L2Lcmc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float vips_col_L2Lcmc(float L)
     * }
     */
    public static MethodHandle vips_col_L2Lcmc$handle() {
        return vips_col_L2Lcmc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float vips_col_L2Lcmc(float L)
     * }
     */
    public static MemorySegment vips_col_L2Lcmc$address() {
        return vips_col_L2Lcmc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float vips_col_L2Lcmc(float L)
     * }
     */
    public static float vips_col_L2Lcmc(float L) {
        var mh$ = vips_col_L2Lcmc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_col_L2Lcmc", L);
            }
            return (float)mh$.invokeExact(L);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_col_C2Ccmc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_FLOAT,
            vips_h.C_FLOAT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_col_C2Ccmc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float vips_col_C2Ccmc(float C)
     * }
     */
    public static FunctionDescriptor vips_col_C2Ccmc$descriptor() {
        return vips_col_C2Ccmc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float vips_col_C2Ccmc(float C)
     * }
     */
    public static MethodHandle vips_col_C2Ccmc$handle() {
        return vips_col_C2Ccmc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float vips_col_C2Ccmc(float C)
     * }
     */
    public static MemorySegment vips_col_C2Ccmc$address() {
        return vips_col_C2Ccmc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float vips_col_C2Ccmc(float C)
     * }
     */
    public static float vips_col_C2Ccmc(float C) {
        var mh$ = vips_col_C2Ccmc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_col_C2Ccmc", C);
            }
            return (float)mh$.invokeExact(C);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_col_Ch2hcmc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_FLOAT,
            vips_h.C_FLOAT,
            vips_h.C_FLOAT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_col_Ch2hcmc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float vips_col_Ch2hcmc(float C, float h)
     * }
     */
    public static FunctionDescriptor vips_col_Ch2hcmc$descriptor() {
        return vips_col_Ch2hcmc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float vips_col_Ch2hcmc(float C, float h)
     * }
     */
    public static MethodHandle vips_col_Ch2hcmc$handle() {
        return vips_col_Ch2hcmc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float vips_col_Ch2hcmc(float C, float h)
     * }
     */
    public static MemorySegment vips_col_Ch2hcmc$address() {
        return vips_col_Ch2hcmc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float vips_col_Ch2hcmc(float C, float h)
     * }
     */
    public static float vips_col_Ch2hcmc(float C, float h) {
        var mh$ = vips_col_Ch2hcmc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_col_Ch2hcmc", C, h);
            }
            return (float)mh$.invokeExact(C, h);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_col_make_tables_CMC {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_col_make_tables_CMC");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_col_make_tables_CMC()
     * }
     */
    public static FunctionDescriptor vips_col_make_tables_CMC$descriptor() {
        return vips_col_make_tables_CMC.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_col_make_tables_CMC()
     * }
     */
    public static MethodHandle vips_col_make_tables_CMC$handle() {
        return vips_col_make_tables_CMC.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_col_make_tables_CMC()
     * }
     */
    public static MemorySegment vips_col_make_tables_CMC$address() {
        return vips_col_make_tables_CMC.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_col_make_tables_CMC()
     * }
     */
    public static void vips_col_make_tables_CMC() {
        var mh$ = vips_col_make_tables_CMC.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_col_make_tables_CMC");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_col_Lcmc2L {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_FLOAT,
            vips_h.C_FLOAT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_col_Lcmc2L");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float vips_col_Lcmc2L(float Lcmc)
     * }
     */
    public static FunctionDescriptor vips_col_Lcmc2L$descriptor() {
        return vips_col_Lcmc2L.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float vips_col_Lcmc2L(float Lcmc)
     * }
     */
    public static MethodHandle vips_col_Lcmc2L$handle() {
        return vips_col_Lcmc2L.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float vips_col_Lcmc2L(float Lcmc)
     * }
     */
    public static MemorySegment vips_col_Lcmc2L$address() {
        return vips_col_Lcmc2L.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float vips_col_Lcmc2L(float Lcmc)
     * }
     */
    public static float vips_col_Lcmc2L(float Lcmc) {
        var mh$ = vips_col_Lcmc2L.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_col_Lcmc2L", Lcmc);
            }
            return (float)mh$.invokeExact(Lcmc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_col_Ccmc2C {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_FLOAT,
            vips_h.C_FLOAT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_col_Ccmc2C");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float vips_col_Ccmc2C(float Ccmc)
     * }
     */
    public static FunctionDescriptor vips_col_Ccmc2C$descriptor() {
        return vips_col_Ccmc2C.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float vips_col_Ccmc2C(float Ccmc)
     * }
     */
    public static MethodHandle vips_col_Ccmc2C$handle() {
        return vips_col_Ccmc2C.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float vips_col_Ccmc2C(float Ccmc)
     * }
     */
    public static MemorySegment vips_col_Ccmc2C$address() {
        return vips_col_Ccmc2C.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float vips_col_Ccmc2C(float Ccmc)
     * }
     */
    public static float vips_col_Ccmc2C(float Ccmc) {
        var mh$ = vips_col_Ccmc2C.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_col_Ccmc2C", Ccmc);
            }
            return (float)mh$.invokeExact(Ccmc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_col_Chcmc2h {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_FLOAT,
            vips_h.C_FLOAT,
            vips_h.C_FLOAT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_col_Chcmc2h");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float vips_col_Chcmc2h(float C, float hcmc)
     * }
     */
    public static FunctionDescriptor vips_col_Chcmc2h$descriptor() {
        return vips_col_Chcmc2h.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float vips_col_Chcmc2h(float C, float hcmc)
     * }
     */
    public static MethodHandle vips_col_Chcmc2h$handle() {
        return vips_col_Chcmc2h.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float vips_col_Chcmc2h(float C, float hcmc)
     * }
     */
    public static MemorySegment vips_col_Chcmc2h$address() {
        return vips_col_Chcmc2h.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float vips_col_Chcmc2h(float C, float hcmc)
     * }
     */
    public static float vips_col_Chcmc2h(float C, float hcmc) {
        var mh$ = vips_col_Chcmc2h.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_col_Chcmc2h", C, hcmc);
            }
            return (float)mh$.invokeExact(C, hcmc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_col_sRGB2scRGB_8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_INT,
            vips_h.C_INT,
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_col_sRGB2scRGB_8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_col_sRGB2scRGB_8(int r, int g, int b, float *R, float *G, float *B)
     * }
     */
    public static FunctionDescriptor vips_col_sRGB2scRGB_8$descriptor() {
        return vips_col_sRGB2scRGB_8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_col_sRGB2scRGB_8(int r, int g, int b, float *R, float *G, float *B)
     * }
     */
    public static MethodHandle vips_col_sRGB2scRGB_8$handle() {
        return vips_col_sRGB2scRGB_8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_col_sRGB2scRGB_8(int r, int g, int b, float *R, float *G, float *B)
     * }
     */
    public static MemorySegment vips_col_sRGB2scRGB_8$address() {
        return vips_col_sRGB2scRGB_8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_col_sRGB2scRGB_8(int r, int g, int b, float *R, float *G, float *B)
     * }
     */
    public static int vips_col_sRGB2scRGB_8(int r, int g, int b, MemorySegment R, MemorySegment G, MemorySegment B) {
        var mh$ = vips_col_sRGB2scRGB_8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_col_sRGB2scRGB_8", r, g, b, R, G, B);
            }
            return (int)mh$.invokeExact(r, g, b, R, G, B);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_col_sRGB2scRGB_16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_INT,
            vips_h.C_INT,
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_col_sRGB2scRGB_16");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_col_sRGB2scRGB_16(int r, int g, int b, float *R, float *G, float *B)
     * }
     */
    public static FunctionDescriptor vips_col_sRGB2scRGB_16$descriptor() {
        return vips_col_sRGB2scRGB_16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_col_sRGB2scRGB_16(int r, int g, int b, float *R, float *G, float *B)
     * }
     */
    public static MethodHandle vips_col_sRGB2scRGB_16$handle() {
        return vips_col_sRGB2scRGB_16.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_col_sRGB2scRGB_16(int r, int g, int b, float *R, float *G, float *B)
     * }
     */
    public static MemorySegment vips_col_sRGB2scRGB_16$address() {
        return vips_col_sRGB2scRGB_16.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_col_sRGB2scRGB_16(int r, int g, int b, float *R, float *G, float *B)
     * }
     */
    public static int vips_col_sRGB2scRGB_16(int r, int g, int b, MemorySegment R, MemorySegment G, MemorySegment B) {
        var mh$ = vips_col_sRGB2scRGB_16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_col_sRGB2scRGB_16", r, g, b, R, G, B);
            }
            return (int)mh$.invokeExact(r, g, b, R, G, B);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_col_sRGB2scRGB_8_noclip {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_INT,
            vips_h.C_INT,
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_col_sRGB2scRGB_8_noclip");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_col_sRGB2scRGB_8_noclip(int r, int g, int b, float *R, float *G, float *B)
     * }
     */
    public static FunctionDescriptor vips_col_sRGB2scRGB_8_noclip$descriptor() {
        return vips_col_sRGB2scRGB_8_noclip.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_col_sRGB2scRGB_8_noclip(int r, int g, int b, float *R, float *G, float *B)
     * }
     */
    public static MethodHandle vips_col_sRGB2scRGB_8_noclip$handle() {
        return vips_col_sRGB2scRGB_8_noclip.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_col_sRGB2scRGB_8_noclip(int r, int g, int b, float *R, float *G, float *B)
     * }
     */
    public static MemorySegment vips_col_sRGB2scRGB_8_noclip$address() {
        return vips_col_sRGB2scRGB_8_noclip.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_col_sRGB2scRGB_8_noclip(int r, int g, int b, float *R, float *G, float *B)
     * }
     */
    public static int vips_col_sRGB2scRGB_8_noclip(int r, int g, int b, MemorySegment R, MemorySegment G, MemorySegment B) {
        var mh$ = vips_col_sRGB2scRGB_8_noclip.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_col_sRGB2scRGB_8_noclip", r, g, b, R, G, B);
            }
            return (int)mh$.invokeExact(r, g, b, R, G, B);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_col_sRGB2scRGB_16_noclip {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_INT,
            vips_h.C_INT,
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_col_sRGB2scRGB_16_noclip");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_col_sRGB2scRGB_16_noclip(int r, int g, int b, float *R, float *G, float *B)
     * }
     */
    public static FunctionDescriptor vips_col_sRGB2scRGB_16_noclip$descriptor() {
        return vips_col_sRGB2scRGB_16_noclip.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_col_sRGB2scRGB_16_noclip(int r, int g, int b, float *R, float *G, float *B)
     * }
     */
    public static MethodHandle vips_col_sRGB2scRGB_16_noclip$handle() {
        return vips_col_sRGB2scRGB_16_noclip.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_col_sRGB2scRGB_16_noclip(int r, int g, int b, float *R, float *G, float *B)
     * }
     */
    public static MemorySegment vips_col_sRGB2scRGB_16_noclip$address() {
        return vips_col_sRGB2scRGB_16_noclip.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_col_sRGB2scRGB_16_noclip(int r, int g, int b, float *R, float *G, float *B)
     * }
     */
    public static int vips_col_sRGB2scRGB_16_noclip(int r, int g, int b, MemorySegment R, MemorySegment G, MemorySegment B) {
        var mh$ = vips_col_sRGB2scRGB_16_noclip.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_col_sRGB2scRGB_16_noclip", r, g, b, R, G, B);
            }
            return (int)mh$.invokeExact(r, g, b, R, G, B);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_col_scRGB2XYZ {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_FLOAT,
            vips_h.C_FLOAT,
            vips_h.C_FLOAT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_col_scRGB2XYZ");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_col_scRGB2XYZ(float R, float G, float B, float *X, float *Y, float *Z)
     * }
     */
    public static FunctionDescriptor vips_col_scRGB2XYZ$descriptor() {
        return vips_col_scRGB2XYZ.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_col_scRGB2XYZ(float R, float G, float B, float *X, float *Y, float *Z)
     * }
     */
    public static MethodHandle vips_col_scRGB2XYZ$handle() {
        return vips_col_scRGB2XYZ.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_col_scRGB2XYZ(float R, float G, float B, float *X, float *Y, float *Z)
     * }
     */
    public static MemorySegment vips_col_scRGB2XYZ$address() {
        return vips_col_scRGB2XYZ.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_col_scRGB2XYZ(float R, float G, float B, float *X, float *Y, float *Z)
     * }
     */
    public static int vips_col_scRGB2XYZ(float R, float G, float B, MemorySegment X, MemorySegment Y, MemorySegment Z) {
        var mh$ = vips_col_scRGB2XYZ.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_col_scRGB2XYZ", R, G, B, X, Y, Z);
            }
            return (int)mh$.invokeExact(R, G, B, X, Y, Z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_col_XYZ2scRGB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_FLOAT,
            vips_h.C_FLOAT,
            vips_h.C_FLOAT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_col_XYZ2scRGB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_col_XYZ2scRGB(float X, float Y, float Z, float *R, float *G, float *B)
     * }
     */
    public static FunctionDescriptor vips_col_XYZ2scRGB$descriptor() {
        return vips_col_XYZ2scRGB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_col_XYZ2scRGB(float X, float Y, float Z, float *R, float *G, float *B)
     * }
     */
    public static MethodHandle vips_col_XYZ2scRGB$handle() {
        return vips_col_XYZ2scRGB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_col_XYZ2scRGB(float X, float Y, float Z, float *R, float *G, float *B)
     * }
     */
    public static MemorySegment vips_col_XYZ2scRGB$address() {
        return vips_col_XYZ2scRGB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_col_XYZ2scRGB(float X, float Y, float Z, float *R, float *G, float *B)
     * }
     */
    public static int vips_col_XYZ2scRGB(float X, float Y, float Z, MemorySegment R, MemorySegment G, MemorySegment B) {
        var mh$ = vips_col_XYZ2scRGB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_col_XYZ2scRGB", X, Y, Z, R, G, B);
            }
            return (int)mh$.invokeExact(X, Y, Z, R, G, B);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_col_scRGB2sRGB_8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_FLOAT,
            vips_h.C_FLOAT,
            vips_h.C_FLOAT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_col_scRGB2sRGB_8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_col_scRGB2sRGB_8(float R, float G, float B, int *r, int *g, int *b, int *og)
     * }
     */
    public static FunctionDescriptor vips_col_scRGB2sRGB_8$descriptor() {
        return vips_col_scRGB2sRGB_8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_col_scRGB2sRGB_8(float R, float G, float B, int *r, int *g, int *b, int *og)
     * }
     */
    public static MethodHandle vips_col_scRGB2sRGB_8$handle() {
        return vips_col_scRGB2sRGB_8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_col_scRGB2sRGB_8(float R, float G, float B, int *r, int *g, int *b, int *og)
     * }
     */
    public static MemorySegment vips_col_scRGB2sRGB_8$address() {
        return vips_col_scRGB2sRGB_8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_col_scRGB2sRGB_8(float R, float G, float B, int *r, int *g, int *b, int *og)
     * }
     */
    public static int vips_col_scRGB2sRGB_8(float R, float G, float B, MemorySegment r, MemorySegment g, MemorySegment b, MemorySegment og) {
        var mh$ = vips_col_scRGB2sRGB_8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_col_scRGB2sRGB_8", R, G, B, r, g, b, og);
            }
            return (int)mh$.invokeExact(R, G, B, r, g, b, og);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_col_scRGB2sRGB_16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_FLOAT,
            vips_h.C_FLOAT,
            vips_h.C_FLOAT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_col_scRGB2sRGB_16");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_col_scRGB2sRGB_16(float R, float G, float B, int *r, int *g, int *b, int *og)
     * }
     */
    public static FunctionDescriptor vips_col_scRGB2sRGB_16$descriptor() {
        return vips_col_scRGB2sRGB_16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_col_scRGB2sRGB_16(float R, float G, float B, int *r, int *g, int *b, int *og)
     * }
     */
    public static MethodHandle vips_col_scRGB2sRGB_16$handle() {
        return vips_col_scRGB2sRGB_16.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_col_scRGB2sRGB_16(float R, float G, float B, int *r, int *g, int *b, int *og)
     * }
     */
    public static MemorySegment vips_col_scRGB2sRGB_16$address() {
        return vips_col_scRGB2sRGB_16.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_col_scRGB2sRGB_16(float R, float G, float B, int *r, int *g, int *b, int *og)
     * }
     */
    public static int vips_col_scRGB2sRGB_16(float R, float G, float B, MemorySegment r, MemorySegment g, MemorySegment b, MemorySegment og) {
        var mh$ = vips_col_scRGB2sRGB_16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_col_scRGB2sRGB_16", R, G, B, r, g, b, og);
            }
            return (int)mh$.invokeExact(R, G, B, r, g, b, og);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_col_scRGB2BW_16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_FLOAT,
            vips_h.C_FLOAT,
            vips_h.C_FLOAT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_col_scRGB2BW_16");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_col_scRGB2BW_16(float R, float G, float B, int *g, int *og)
     * }
     */
    public static FunctionDescriptor vips_col_scRGB2BW_16$descriptor() {
        return vips_col_scRGB2BW_16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_col_scRGB2BW_16(float R, float G, float B, int *g, int *og)
     * }
     */
    public static MethodHandle vips_col_scRGB2BW_16$handle() {
        return vips_col_scRGB2BW_16.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_col_scRGB2BW_16(float R, float G, float B, int *g, int *og)
     * }
     */
    public static MemorySegment vips_col_scRGB2BW_16$address() {
        return vips_col_scRGB2BW_16.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_col_scRGB2BW_16(float R, float G, float B, int *g, int *og)
     * }
     */
    public static int vips_col_scRGB2BW_16(float R, float G, float B, MemorySegment g, MemorySegment og) {
        var mh$ = vips_col_scRGB2BW_16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_col_scRGB2BW_16", R, G, B, g, og);
            }
            return (int)mh$.invokeExact(R, G, B, g, og);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_col_scRGB2BW_8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_FLOAT,
            vips_h.C_FLOAT,
            vips_h.C_FLOAT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_col_scRGB2BW_8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_col_scRGB2BW_8(float R, float G, float B, int *g, int *og)
     * }
     */
    public static FunctionDescriptor vips_col_scRGB2BW_8$descriptor() {
        return vips_col_scRGB2BW_8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_col_scRGB2BW_8(float R, float G, float B, int *g, int *og)
     * }
     */
    public static MethodHandle vips_col_scRGB2BW_8$handle() {
        return vips_col_scRGB2BW_8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_col_scRGB2BW_8(float R, float G, float B, int *g, int *og)
     * }
     */
    public static MemorySegment vips_col_scRGB2BW_8$address() {
        return vips_col_scRGB2BW_8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_col_scRGB2BW_8(float R, float G, float B, int *g, int *og)
     * }
     */
    public static int vips_col_scRGB2BW_8(float R, float G, float B, MemorySegment g, MemorySegment og) {
        var mh$ = vips_col_scRGB2BW_8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_col_scRGB2BW_8", R, G, B, g, og);
            }
            return (int)mh$.invokeExact(R, G, B, g, og);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_pythagoras {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_FLOAT,
            vips_h.C_FLOAT,
            vips_h.C_FLOAT,
            vips_h.C_FLOAT,
            vips_h.C_FLOAT,
            vips_h.C_FLOAT,
            vips_h.C_FLOAT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_pythagoras");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float vips_pythagoras(float L1, float a1, float b1, float L2, float a2, float b2)
     * }
     */
    public static FunctionDescriptor vips_pythagoras$descriptor() {
        return vips_pythagoras.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float vips_pythagoras(float L1, float a1, float b1, float L2, float a2, float b2)
     * }
     */
    public static MethodHandle vips_pythagoras$handle() {
        return vips_pythagoras.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float vips_pythagoras(float L1, float a1, float b1, float L2, float a2, float b2)
     * }
     */
    public static MemorySegment vips_pythagoras$address() {
        return vips_pythagoras.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float vips_pythagoras(float L1, float a1, float b1, float L2, float a2, float b2)
     * }
     */
    public static float vips_pythagoras(float L1, float a1, float b1, float L2, float a2, float b2) {
        var mh$ = vips_pythagoras.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_pythagoras", L1, a1, b1, L2, a2, b2);
            }
            return (float)mh$.invokeExact(L1, a1, b1, L2, a2, b2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_col_dE00 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_FLOAT,
            vips_h.C_FLOAT,
            vips_h.C_FLOAT,
            vips_h.C_FLOAT,
            vips_h.C_FLOAT,
            vips_h.C_FLOAT,
            vips_h.C_FLOAT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_col_dE00");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float vips_col_dE00(float L1, float a1, float b1, float L2, float a2, float b2)
     * }
     */
    public static FunctionDescriptor vips_col_dE00$descriptor() {
        return vips_col_dE00.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float vips_col_dE00(float L1, float a1, float b1, float L2, float a2, float b2)
     * }
     */
    public static MethodHandle vips_col_dE00$handle() {
        return vips_col_dE00.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float vips_col_dE00(float L1, float a1, float b1, float L2, float a2, float b2)
     * }
     */
    public static MemorySegment vips_col_dE00$address() {
        return vips_col_dE00.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float vips_col_dE00(float L1, float a1, float b1, float L2, float a2, float b2)
     * }
     */
    public static float vips_col_dE00(float L1, float a1, float b1, float L2, float a2, float b2) {
        var mh$ = vips_col_dE00.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_col_dE00", L1, a1, b1, L2, a2, b2);
            }
            return (float)mh$.invokeExact(L1, a1, b1, L2, a2, b2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VIPS_COMBINE_MODE_SET = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_COMBINE_MODE_SET = 0
     * }
     */
    public static int VIPS_COMBINE_MODE_SET() {
        return VIPS_COMBINE_MODE_SET;
    }
    private static final int VIPS_COMBINE_MODE_ADD = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_COMBINE_MODE_ADD = 1
     * }
     */
    public static int VIPS_COMBINE_MODE_ADD() {
        return VIPS_COMBINE_MODE_ADD;
    }
    private static final int VIPS_COMBINE_MODE_LAST = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_COMBINE_MODE_LAST = 2
     * }
     */
    public static int VIPS_COMBINE_MODE_LAST() {
        return VIPS_COMBINE_MODE_LAST;
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_draw_rect(VipsImage *image, double *ink, int n, int left, int top, int width, int height, ...)
     * }
     */
    public static class vips_draw_rect {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_draw_rect");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_draw_rect(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_draw_rect(VipsImage *image, double *ink, int n, int left, int top, int width, int height, ...)
         * }
         */
        public static vips_draw_rect makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_draw_rect(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment image, MemorySegment ink, int n, int left, int top, int width, int height, Object... x7) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_draw_rect", image, ink, n, left, top, width, height, x7);
                }
                return (int)spreader.invokeExact(image, ink, n, left, top, width, height, x7);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_draw_rect1(VipsImage *image, double ink, int left, int top, int width, int height, ...)
     * }
     */
    public static class vips_draw_rect1 {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_DOUBLE,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_draw_rect1");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_draw_rect1(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_draw_rect1(VipsImage *image, double ink, int left, int top, int width, int height, ...)
         * }
         */
        public static vips_draw_rect1 makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_draw_rect1(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment image, double ink, int left, int top, int width, int height, Object... x6) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_draw_rect1", image, ink, left, top, width, height, x6);
                }
                return (int)spreader.invokeExact(image, ink, left, top, width, height, x6);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_draw_point(VipsImage *image, double *ink, int n, int x, int y, ...)
     * }
     */
    public static class vips_draw_point {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_draw_point");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_draw_point(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_draw_point(VipsImage *image, double *ink, int n, int x, int y, ...)
         * }
         */
        public static vips_draw_point makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_draw_point(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment image, MemorySegment ink, int n, int x, int y, Object... x5) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_draw_point", image, ink, n, x, y, x5);
                }
                return (int)spreader.invokeExact(image, ink, n, x, y, x5);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_draw_point1(VipsImage *image, double ink, int x, int y, ...)
     * }
     */
    public static class vips_draw_point1 {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_DOUBLE,
                vips_h.C_INT,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_draw_point1");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_draw_point1(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_draw_point1(VipsImage *image, double ink, int x, int y, ...)
         * }
         */
        public static vips_draw_point1 makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_draw_point1(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment image, double ink, int x, int y, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_draw_point1", image, ink, x, y, x4);
                }
                return (int)spreader.invokeExact(image, ink, x, y, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_draw_image(VipsImage *image, VipsImage *sub, int x, int y, ...)
     * }
     */
    public static class vips_draw_image {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_draw_image");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_draw_image(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_draw_image(VipsImage *image, VipsImage *sub, int x, int y, ...)
         * }
         */
        public static vips_draw_image makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_draw_image(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment image, MemorySegment sub, int x, int y, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_draw_image", image, sub, x, y, x4);
                }
                return (int)spreader.invokeExact(image, sub, x, y, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_draw_mask(VipsImage *image, double *ink, int n, VipsImage *mask, int x, int y, ...)
     * }
     */
    public static class vips_draw_mask {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_draw_mask");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_draw_mask(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_draw_mask(VipsImage *image, double *ink, int n, VipsImage *mask, int x, int y, ...)
         * }
         */
        public static vips_draw_mask makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_draw_mask(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment image, MemorySegment ink, int n, MemorySegment mask, int x, int y, Object... x6) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_draw_mask", image, ink, n, mask, x, y, x6);
                }
                return (int)spreader.invokeExact(image, ink, n, mask, x, y, x6);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_draw_mask1(VipsImage *image, double ink, VipsImage *mask, int x, int y, ...)
     * }
     */
    public static class vips_draw_mask1 {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_DOUBLE,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_draw_mask1");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_draw_mask1(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_draw_mask1(VipsImage *image, double ink, VipsImage *mask, int x, int y, ...)
         * }
         */
        public static vips_draw_mask1 makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_draw_mask1(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment image, double ink, MemorySegment mask, int x, int y, Object... x5) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_draw_mask1", image, ink, mask, x, y, x5);
                }
                return (int)spreader.invokeExact(image, ink, mask, x, y, x5);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_draw_line(VipsImage *image, double *ink, int n, int x1, int y1, int x2, int y2, ...)
     * }
     */
    public static class vips_draw_line {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_draw_line");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_draw_line(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_draw_line(VipsImage *image, double *ink, int n, int x1, int y1, int x2, int y2, ...)
         * }
         */
        public static vips_draw_line makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_draw_line(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment image, MemorySegment ink, int n, int x1, int y1, int x2, int y2, Object... x7) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_draw_line", image, ink, n, x1, y1, x2, y2, x7);
                }
                return (int)spreader.invokeExact(image, ink, n, x1, y1, x2, y2, x7);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_draw_line1(VipsImage *image, double ink, int x1, int y1, int x2, int y2, ...)
     * }
     */
    public static class vips_draw_line1 {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_DOUBLE,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_draw_line1");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_draw_line1(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_draw_line1(VipsImage *image, double ink, int x1, int y1, int x2, int y2, ...)
         * }
         */
        public static vips_draw_line1 makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_draw_line1(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment image, double ink, int x1, int y1, int x2, int y2, Object... x6) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_draw_line1", image, ink, x1, y1, x2, y2, x6);
                }
                return (int)spreader.invokeExact(image, ink, x1, y1, x2, y2, x6);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_draw_circle(VipsImage *image, double *ink, int n, int cx, int cy, int radius, ...)
     * }
     */
    public static class vips_draw_circle {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_draw_circle");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_draw_circle(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_draw_circle(VipsImage *image, double *ink, int n, int cx, int cy, int radius, ...)
         * }
         */
        public static vips_draw_circle makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_draw_circle(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment image, MemorySegment ink, int n, int cx, int cy, int radius, Object... x6) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_draw_circle", image, ink, n, cx, cy, radius, x6);
                }
                return (int)spreader.invokeExact(image, ink, n, cx, cy, radius, x6);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_draw_circle1(VipsImage *image, double ink, int cx, int cy, int radius, ...)
     * }
     */
    public static class vips_draw_circle1 {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_DOUBLE,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_draw_circle1");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_draw_circle1(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_draw_circle1(VipsImage *image, double ink, int cx, int cy, int radius, ...)
         * }
         */
        public static vips_draw_circle1 makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_draw_circle1(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment image, double ink, int cx, int cy, int radius, Object... x5) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_draw_circle1", image, ink, cx, cy, radius, x5);
                }
                return (int)spreader.invokeExact(image, ink, cx, cy, radius, x5);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_draw_flood(VipsImage *image, double *ink, int n, int x, int y, ...)
     * }
     */
    public static class vips_draw_flood {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_draw_flood");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_draw_flood(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_draw_flood(VipsImage *image, double *ink, int n, int x, int y, ...)
         * }
         */
        public static vips_draw_flood makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_draw_flood(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment image, MemorySegment ink, int n, int x, int y, Object... x5) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_draw_flood", image, ink, n, x, y, x5);
                }
                return (int)spreader.invokeExact(image, ink, n, x, y, x5);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_draw_flood1(VipsImage *image, double ink, int x, int y, ...)
     * }
     */
    public static class vips_draw_flood1 {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_DOUBLE,
                vips_h.C_INT,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_draw_flood1");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_draw_flood1(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_draw_flood1(VipsImage *image, double ink, int x, int y, ...)
         * }
         */
        public static vips_draw_flood1 makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_draw_flood1(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment image, double ink, int x, int y, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_draw_flood1", image, ink, x, y, x4);
                }
                return (int)spreader.invokeExact(image, ink, x, y, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_draw_smudge(VipsImage *image, int left, int top, int width, int height, ...)
     * }
     */
    public static class vips_draw_smudge {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_draw_smudge");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_draw_smudge(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_draw_smudge(VipsImage *image, int left, int top, int width, int height, ...)
         * }
         */
        public static vips_draw_smudge makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_draw_smudge(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment image, int left, int top, int width, int height, Object... x5) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_draw_smudge", image, left, top, width, height, x5);
                }
                return (int)spreader.invokeExact(image, left, top, width, height, x5);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }
    private static final int VIPS_TEXT_WRAP_WORD = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_TEXT_WRAP_WORD = 0
     * }
     */
    public static int VIPS_TEXT_WRAP_WORD() {
        return VIPS_TEXT_WRAP_WORD;
    }
    private static final int VIPS_TEXT_WRAP_CHAR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_TEXT_WRAP_CHAR = 1
     * }
     */
    public static int VIPS_TEXT_WRAP_CHAR() {
        return VIPS_TEXT_WRAP_CHAR;
    }
    private static final int VIPS_TEXT_WRAP_WORD_CHAR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_TEXT_WRAP_WORD_CHAR = 2
     * }
     */
    public static int VIPS_TEXT_WRAP_WORD_CHAR() {
        return VIPS_TEXT_WRAP_WORD_CHAR;
    }
    private static final int VIPS_TEXT_WRAP_NONE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_TEXT_WRAP_NONE = 3
     * }
     */
    public static int VIPS_TEXT_WRAP_NONE() {
        return VIPS_TEXT_WRAP_NONE;
    }
    private static final int VIPS_TEXT_WRAP_LAST = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_TEXT_WRAP_LAST = 4
     * }
     */
    public static int VIPS_TEXT_WRAP_LAST() {
        return VIPS_TEXT_WRAP_LAST;
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_black(VipsImage **out, int width, int height, ...)
     * }
     */
    public static class vips_black {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_black");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_black(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_black(VipsImage **out, int width, int height, ...)
         * }
         */
        public static vips_black makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_black(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment out, int width, int height, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_black", out, width, height, x3);
                }
                return (int)spreader.invokeExact(out, width, height, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_xyz(VipsImage **out, int width, int height, ...)
     * }
     */
    public static class vips_xyz {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_xyz");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_xyz(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_xyz(VipsImage **out, int width, int height, ...)
         * }
         */
        public static vips_xyz makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_xyz(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment out, int width, int height, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_xyz", out, width, height, x3);
                }
                return (int)spreader.invokeExact(out, width, height, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_grey(VipsImage **out, int width, int height, ...)
     * }
     */
    public static class vips_grey {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_grey");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_grey(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_grey(VipsImage **out, int width, int height, ...)
         * }
         */
        public static vips_grey makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_grey(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment out, int width, int height, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_grey", out, width, height, x3);
                }
                return (int)spreader.invokeExact(out, width, height, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_gaussmat(VipsImage **out, double sigma, double min_ampl, ...)
     * }
     */
    public static class vips_gaussmat {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_DOUBLE,
                vips_h.C_DOUBLE
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_gaussmat");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_gaussmat(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_gaussmat(VipsImage **out, double sigma, double min_ampl, ...)
         * }
         */
        public static vips_gaussmat makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_gaussmat(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment out, double sigma, double min_ampl, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_gaussmat", out, sigma, min_ampl, x3);
                }
                return (int)spreader.invokeExact(out, sigma, min_ampl, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_logmat(VipsImage **out, double sigma, double min_ampl, ...)
     * }
     */
    public static class vips_logmat {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_DOUBLE,
                vips_h.C_DOUBLE
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_logmat");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_logmat(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_logmat(VipsImage **out, double sigma, double min_ampl, ...)
         * }
         */
        public static vips_logmat makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_logmat(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment out, double sigma, double min_ampl, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_logmat", out, sigma, min_ampl, x3);
                }
                return (int)spreader.invokeExact(out, sigma, min_ampl, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_text(VipsImage **out, const char *text, ...)
     * }
     */
    public static class vips_text {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_text");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_text(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_text(VipsImage **out, const char *text, ...)
         * }
         */
        public static vips_text makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_text(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment out, MemorySegment text, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_text", out, text, x2);
                }
                return (int)spreader.invokeExact(out, text, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_gaussnoise(VipsImage **out, int width, int height, ...)
     * }
     */
    public static class vips_gaussnoise {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_gaussnoise");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_gaussnoise(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_gaussnoise(VipsImage **out, int width, int height, ...)
         * }
         */
        public static vips_gaussnoise makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_gaussnoise(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment out, int width, int height, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_gaussnoise", out, width, height, x3);
                }
                return (int)spreader.invokeExact(out, width, height, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_eye(VipsImage **out, int width, int height, ...)
     * }
     */
    public static class vips_eye {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_eye");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_eye(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_eye(VipsImage **out, int width, int height, ...)
         * }
         */
        public static vips_eye makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_eye(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment out, int width, int height, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_eye", out, width, height, x3);
                }
                return (int)spreader.invokeExact(out, width, height, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_sines(VipsImage **out, int width, int height, ...)
     * }
     */
    public static class vips_sines {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_sines");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_sines(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_sines(VipsImage **out, int width, int height, ...)
         * }
         */
        public static vips_sines makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_sines(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment out, int width, int height, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_sines", out, width, height, x3);
                }
                return (int)spreader.invokeExact(out, width, height, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_zone(VipsImage **out, int width, int height, ...)
     * }
     */
    public static class vips_zone {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_zone");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_zone(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_zone(VipsImage **out, int width, int height, ...)
         * }
         */
        public static vips_zone makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_zone(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment out, int width, int height, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_zone", out, width, height, x3);
                }
                return (int)spreader.invokeExact(out, width, height, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_identity(VipsImage **out, ...)
     * }
     */
    public static class vips_identity {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_identity");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_identity(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_identity(VipsImage **out, ...)
         * }
         */
        public static vips_identity makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_identity(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment out, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_identity", out, x1);
                }
                return (int)spreader.invokeExact(out, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_buildlut(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_buildlut {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_buildlut");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_buildlut(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_buildlut(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_buildlut makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_buildlut(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_buildlut", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_invertlut(VipsImage *in, VipsImage **out, ...)
     * }
     */
    public static class vips_invertlut {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_invertlut");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_invertlut(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_invertlut(VipsImage *in, VipsImage **out, ...)
         * }
         */
        public static vips_invertlut makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_invertlut(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_invertlut", in, out, x2);
                }
                return (int)spreader.invokeExact(in, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_tonelut(VipsImage **out, ...)
     * }
     */
    public static class vips_tonelut {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_tonelut");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_tonelut(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_tonelut(VipsImage **out, ...)
         * }
         */
        public static vips_tonelut makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_tonelut(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment out, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_tonelut", out, x1);
                }
                return (int)spreader.invokeExact(out, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_mask_ideal(VipsImage **out, int width, int height, double frequency_cutoff, ...)
     * }
     */
    public static class vips_mask_ideal {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_DOUBLE
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_mask_ideal");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_mask_ideal(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_mask_ideal(VipsImage **out, int width, int height, double frequency_cutoff, ...)
         * }
         */
        public static vips_mask_ideal makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_mask_ideal(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment out, int width, int height, double frequency_cutoff, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_mask_ideal", out, width, height, frequency_cutoff, x4);
                }
                return (int)spreader.invokeExact(out, width, height, frequency_cutoff, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_mask_ideal_ring(VipsImage **out, int width, int height, double frequency_cutoff, double ringwidth, ...)
     * }
     */
    public static class vips_mask_ideal_ring {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_DOUBLE,
                vips_h.C_DOUBLE
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_mask_ideal_ring");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_mask_ideal_ring(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_mask_ideal_ring(VipsImage **out, int width, int height, double frequency_cutoff, double ringwidth, ...)
         * }
         */
        public static vips_mask_ideal_ring makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_mask_ideal_ring(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment out, int width, int height, double frequency_cutoff, double ringwidth, Object... x5) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_mask_ideal_ring", out, width, height, frequency_cutoff, ringwidth, x5);
                }
                return (int)spreader.invokeExact(out, width, height, frequency_cutoff, ringwidth, x5);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_mask_ideal_band(VipsImage **out, int width, int height, double frequency_cutoff_x, double frequency_cutoff_y, double radius, ...)
     * }
     */
    public static class vips_mask_ideal_band {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_DOUBLE,
                vips_h.C_DOUBLE,
                vips_h.C_DOUBLE
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_mask_ideal_band");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_mask_ideal_band(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_mask_ideal_band(VipsImage **out, int width, int height, double frequency_cutoff_x, double frequency_cutoff_y, double radius, ...)
         * }
         */
        public static vips_mask_ideal_band makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_mask_ideal_band(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment out, int width, int height, double frequency_cutoff_x, double frequency_cutoff_y, double radius, Object... x6) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_mask_ideal_band", out, width, height, frequency_cutoff_x, frequency_cutoff_y, radius, x6);
                }
                return (int)spreader.invokeExact(out, width, height, frequency_cutoff_x, frequency_cutoff_y, radius, x6);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_mask_butterworth(VipsImage **out, int width, int height, double order, double frequency_cutoff, double amplitude_cutoff, ...)
     * }
     */
    public static class vips_mask_butterworth {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_DOUBLE,
                vips_h.C_DOUBLE,
                vips_h.C_DOUBLE
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_mask_butterworth");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_mask_butterworth(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_mask_butterworth(VipsImage **out, int width, int height, double order, double frequency_cutoff, double amplitude_cutoff, ...)
         * }
         */
        public static vips_mask_butterworth makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_mask_butterworth(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment out, int width, int height, double order, double frequency_cutoff, double amplitude_cutoff, Object... x6) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_mask_butterworth", out, width, height, order, frequency_cutoff, amplitude_cutoff, x6);
                }
                return (int)spreader.invokeExact(out, width, height, order, frequency_cutoff, amplitude_cutoff, x6);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_mask_butterworth_ring(VipsImage **out, int width, int height, double order, double frequency_cutoff, double amplitude_cutoff, double ringwidth, ...)
     * }
     */
    public static class vips_mask_butterworth_ring {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_DOUBLE,
                vips_h.C_DOUBLE,
                vips_h.C_DOUBLE,
                vips_h.C_DOUBLE
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_mask_butterworth_ring");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_mask_butterworth_ring(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_mask_butterworth_ring(VipsImage **out, int width, int height, double order, double frequency_cutoff, double amplitude_cutoff, double ringwidth, ...)
         * }
         */
        public static vips_mask_butterworth_ring makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_mask_butterworth_ring(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment out, int width, int height, double order, double frequency_cutoff, double amplitude_cutoff, double ringwidth, Object... x7) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_mask_butterworth_ring", out, width, height, order, frequency_cutoff, amplitude_cutoff, ringwidth, x7);
                }
                return (int)spreader.invokeExact(out, width, height, order, frequency_cutoff, amplitude_cutoff, ringwidth, x7);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_mask_butterworth_band(VipsImage **out, int width, int height, double order, double frequency_cutoff_x, double frequency_cutoff_y, double radius, double amplitude_cutoff, ...)
     * }
     */
    public static class vips_mask_butterworth_band {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_DOUBLE,
                vips_h.C_DOUBLE,
                vips_h.C_DOUBLE,
                vips_h.C_DOUBLE,
                vips_h.C_DOUBLE
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_mask_butterworth_band");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_mask_butterworth_band(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_mask_butterworth_band(VipsImage **out, int width, int height, double order, double frequency_cutoff_x, double frequency_cutoff_y, double radius, double amplitude_cutoff, ...)
         * }
         */
        public static vips_mask_butterworth_band makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_mask_butterworth_band(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment out, int width, int height, double order, double frequency_cutoff_x, double frequency_cutoff_y, double radius, double amplitude_cutoff, Object... x8) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_mask_butterworth_band", out, width, height, order, frequency_cutoff_x, frequency_cutoff_y, radius, amplitude_cutoff, x8);
                }
                return (int)spreader.invokeExact(out, width, height, order, frequency_cutoff_x, frequency_cutoff_y, radius, amplitude_cutoff, x8);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_mask_gaussian(VipsImage **out, int width, int height, double frequency_cutoff, double amplitude_cutoff, ...)
     * }
     */
    public static class vips_mask_gaussian {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_DOUBLE,
                vips_h.C_DOUBLE
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_mask_gaussian");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_mask_gaussian(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_mask_gaussian(VipsImage **out, int width, int height, double frequency_cutoff, double amplitude_cutoff, ...)
         * }
         */
        public static vips_mask_gaussian makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_mask_gaussian(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment out, int width, int height, double frequency_cutoff, double amplitude_cutoff, Object... x5) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_mask_gaussian", out, width, height, frequency_cutoff, amplitude_cutoff, x5);
                }
                return (int)spreader.invokeExact(out, width, height, frequency_cutoff, amplitude_cutoff, x5);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_mask_gaussian_ring(VipsImage **out, int width, int height, double frequency_cutoff, double amplitude_cutoff, double ringwidth, ...)
     * }
     */
    public static class vips_mask_gaussian_ring {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_DOUBLE,
                vips_h.C_DOUBLE,
                vips_h.C_DOUBLE
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_mask_gaussian_ring");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_mask_gaussian_ring(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_mask_gaussian_ring(VipsImage **out, int width, int height, double frequency_cutoff, double amplitude_cutoff, double ringwidth, ...)
         * }
         */
        public static vips_mask_gaussian_ring makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_mask_gaussian_ring(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment out, int width, int height, double frequency_cutoff, double amplitude_cutoff, double ringwidth, Object... x6) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_mask_gaussian_ring", out, width, height, frequency_cutoff, amplitude_cutoff, ringwidth, x6);
                }
                return (int)spreader.invokeExact(out, width, height, frequency_cutoff, amplitude_cutoff, ringwidth, x6);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_mask_gaussian_band(VipsImage **out, int width, int height, double frequency_cutoff_x, double frequency_cutoff_y, double radius, double amplitude_cutoff, ...)
     * }
     */
    public static class vips_mask_gaussian_band {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_DOUBLE,
                vips_h.C_DOUBLE,
                vips_h.C_DOUBLE,
                vips_h.C_DOUBLE
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_mask_gaussian_band");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_mask_gaussian_band(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_mask_gaussian_band(VipsImage **out, int width, int height, double frequency_cutoff_x, double frequency_cutoff_y, double radius, double amplitude_cutoff, ...)
         * }
         */
        public static vips_mask_gaussian_band makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_mask_gaussian_band(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment out, int width, int height, double frequency_cutoff_x, double frequency_cutoff_y, double radius, double amplitude_cutoff, Object... x7) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_mask_gaussian_band", out, width, height, frequency_cutoff_x, frequency_cutoff_y, radius, amplitude_cutoff, x7);
                }
                return (int)spreader.invokeExact(out, width, height, frequency_cutoff_x, frequency_cutoff_y, radius, amplitude_cutoff, x7);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_mask_fractal(VipsImage **out, int width, int height, double fractal_dimension, ...)
     * }
     */
    public static class vips_mask_fractal {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_DOUBLE
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_mask_fractal");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_mask_fractal(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_mask_fractal(VipsImage **out, int width, int height, double fractal_dimension, ...)
         * }
         */
        public static vips_mask_fractal makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_mask_fractal(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment out, int width, int height, double fractal_dimension, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_mask_fractal", out, width, height, fractal_dimension, x4);
                }
                return (int)spreader.invokeExact(out, width, height, fractal_dimension, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_fractsurf(VipsImage **out, int width, int height, double fractal_dimension, ...)
     * }
     */
    public static class vips_fractsurf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_DOUBLE
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_fractsurf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_fractsurf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_fractsurf(VipsImage **out, int width, int height, double fractal_dimension, ...)
         * }
         */
        public static vips_fractsurf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_fractsurf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment out, int width, int height, double fractal_dimension, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_fractsurf", out, width, height, fractal_dimension, x4);
                }
                return (int)spreader.invokeExact(out, width, height, fractal_dimension, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_worley(VipsImage **out, int width, int height, ...)
     * }
     */
    public static class vips_worley {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_worley");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_worley(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_worley(VipsImage **out, int width, int height, ...)
         * }
         */
        public static vips_worley makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_worley(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment out, int width, int height, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_worley", out, width, height, x3);
                }
                return (int)spreader.invokeExact(out, width, height, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_perlin(VipsImage **out, int width, int height, ...)
     * }
     */
    public static class vips_perlin {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_perlin");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_perlin(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_perlin(VipsImage **out, int width, int height, ...)
         * }
         */
        public static vips_perlin makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_perlin(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment out, int width, int height, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_perlin", out, width, height, x3);
                }
                return (int)spreader.invokeExact(out, width, height, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class vips_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_init");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_init(const char *argv0)
     * }
     */
    public static FunctionDescriptor vips_init$descriptor() {
        return vips_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_init(const char *argv0)
     * }
     */
    public static MethodHandle vips_init$handle() {
        return vips_init.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_init(const char *argv0)
     * }
     */
    public static MemorySegment vips_init$address() {
        return vips_init.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_init(const char *argv0)
     * }
     */
    public static int vips_init(MemorySegment argv0) {
        var mh$ = vips_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_init", argv0);
            }
            return (int)mh$.invokeExact(argv0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_get_argv0 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_get_argv0");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *vips_get_argv0()
     * }
     */
    public static FunctionDescriptor vips_get_argv0$descriptor() {
        return vips_get_argv0.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *vips_get_argv0()
     * }
     */
    public static MethodHandle vips_get_argv0$handle() {
        return vips_get_argv0.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *vips_get_argv0()
     * }
     */
    public static MemorySegment vips_get_argv0$address() {
        return vips_get_argv0.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *vips_get_argv0()
     * }
     */
    public static MemorySegment vips_get_argv0() {
        var mh$ = vips_get_argv0.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_get_argv0");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_get_prgname {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_get_prgname");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *vips_get_prgname()
     * }
     */
    public static FunctionDescriptor vips_get_prgname$descriptor() {
        return vips_get_prgname.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *vips_get_prgname()
     * }
     */
    public static MethodHandle vips_get_prgname$handle() {
        return vips_get_prgname.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *vips_get_prgname()
     * }
     */
    public static MemorySegment vips_get_prgname$address() {
        return vips_get_prgname.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *vips_get_prgname()
     * }
     */
    public static MemorySegment vips_get_prgname() {
        var mh$ = vips_get_prgname.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_get_prgname");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_shutdown {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_shutdown");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_shutdown()
     * }
     */
    public static FunctionDescriptor vips_shutdown$descriptor() {
        return vips_shutdown.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_shutdown()
     * }
     */
    public static MethodHandle vips_shutdown$handle() {
        return vips_shutdown.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_shutdown()
     * }
     */
    public static MemorySegment vips_shutdown$address() {
        return vips_shutdown.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_shutdown()
     * }
     */
    public static void vips_shutdown() {
        var mh$ = vips_shutdown.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_shutdown");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_thread_shutdown {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_thread_shutdown");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_thread_shutdown()
     * }
     */
    public static FunctionDescriptor vips_thread_shutdown$descriptor() {
        return vips_thread_shutdown.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_thread_shutdown()
     * }
     */
    public static MethodHandle vips_thread_shutdown$handle() {
        return vips_thread_shutdown.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_thread_shutdown()
     * }
     */
    public static MemorySegment vips_thread_shutdown$address() {
        return vips_thread_shutdown.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_thread_shutdown()
     * }
     */
    public static void vips_thread_shutdown() {
        var mh$ = vips_thread_shutdown.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_thread_shutdown");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_add_option_entries {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_add_option_entries");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_add_option_entries(GOptionGroup *option_group)
     * }
     */
    public static FunctionDescriptor vips_add_option_entries$descriptor() {
        return vips_add_option_entries.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_add_option_entries(GOptionGroup *option_group)
     * }
     */
    public static MethodHandle vips_add_option_entries$handle() {
        return vips_add_option_entries.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_add_option_entries(GOptionGroup *option_group)
     * }
     */
    public static MemorySegment vips_add_option_entries$address() {
        return vips_add_option_entries.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_add_option_entries(GOptionGroup *option_group)
     * }
     */
    public static void vips_add_option_entries(MemorySegment option_group) {
        var mh$ = vips_add_option_entries.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_add_option_entries", option_group);
            }
            mh$.invokeExact(option_group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_leak_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_leak_set");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_leak_set(gboolean leak)
     * }
     */
    public static FunctionDescriptor vips_leak_set$descriptor() {
        return vips_leak_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_leak_set(gboolean leak)
     * }
     */
    public static MethodHandle vips_leak_set$handle() {
        return vips_leak_set.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_leak_set(gboolean leak)
     * }
     */
    public static MemorySegment vips_leak_set$address() {
        return vips_leak_set.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_leak_set(gboolean leak)
     * }
     */
    public static void vips_leak_set(int leak) {
        var mh$ = vips_leak_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_leak_set", leak);
            }
            mh$.invokeExact(leak);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_block_untrusted_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_block_untrusted_set");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_block_untrusted_set(gboolean state)
     * }
     */
    public static FunctionDescriptor vips_block_untrusted_set$descriptor() {
        return vips_block_untrusted_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_block_untrusted_set(gboolean state)
     * }
     */
    public static MethodHandle vips_block_untrusted_set$handle() {
        return vips_block_untrusted_set.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_block_untrusted_set(gboolean state)
     * }
     */
    public static MemorySegment vips_block_untrusted_set$address() {
        return vips_block_untrusted_set.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_block_untrusted_set(gboolean state)
     * }
     */
    public static void vips_block_untrusted_set(int state) {
        var mh$ = vips_block_untrusted_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_block_untrusted_set", state);
            }
            mh$.invokeExact(state);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_version_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_version_string");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *vips_version_string()
     * }
     */
    public static FunctionDescriptor vips_version_string$descriptor() {
        return vips_version_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *vips_version_string()
     * }
     */
    public static MethodHandle vips_version_string$handle() {
        return vips_version_string.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *vips_version_string()
     * }
     */
    public static MemorySegment vips_version_string$address() {
        return vips_version_string.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *vips_version_string()
     * }
     */
    public static MemorySegment vips_version_string() {
        var mh$ = vips_version_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_version_string");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_version {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_version");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_version(int flag)
     * }
     */
    public static FunctionDescriptor vips_version$descriptor() {
        return vips_version.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_version(int flag)
     * }
     */
    public static MethodHandle vips_version$handle() {
        return vips_version.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_version(int flag)
     * }
     */
    public static MemorySegment vips_version$address() {
        return vips_version.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_version(int flag)
     * }
     */
    public static int vips_version(int flag) {
        var mh$ = vips_version.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_version", flag);
            }
            return (int)mh$.invokeExact(flag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_guess_prefix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_guess_prefix");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *vips_guess_prefix(const char *argv0, const char *env_name)
     * }
     */
    public static FunctionDescriptor vips_guess_prefix$descriptor() {
        return vips_guess_prefix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *vips_guess_prefix(const char *argv0, const char *env_name)
     * }
     */
    public static MethodHandle vips_guess_prefix$handle() {
        return vips_guess_prefix.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *vips_guess_prefix(const char *argv0, const char *env_name)
     * }
     */
    public static MemorySegment vips_guess_prefix$address() {
        return vips_guess_prefix.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *vips_guess_prefix(const char *argv0, const char *env_name)
     * }
     */
    public static MemorySegment vips_guess_prefix(MemorySegment argv0, MemorySegment env_name) {
        var mh$ = vips_guess_prefix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_guess_prefix", argv0, env_name);
            }
            return (MemorySegment)mh$.invokeExact(argv0, env_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_guess_libdir {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_guess_libdir");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *vips_guess_libdir(const char *argv0, const char *env_name)
     * }
     */
    public static FunctionDescriptor vips_guess_libdir$descriptor() {
        return vips_guess_libdir.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *vips_guess_libdir(const char *argv0, const char *env_name)
     * }
     */
    public static MethodHandle vips_guess_libdir$handle() {
        return vips_guess_libdir.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *vips_guess_libdir(const char *argv0, const char *env_name)
     * }
     */
    public static MemorySegment vips_guess_libdir$address() {
        return vips_guess_libdir.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *vips_guess_libdir(const char *argv0, const char *env_name)
     * }
     */
    public static MemorySegment vips_guess_libdir(MemorySegment argv0, MemorySegment env_name) {
        var mh$ = vips_guess_libdir.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_guess_libdir", argv0, env_name);
            }
            return (MemorySegment)mh$.invokeExact(argv0, env_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final double VIPS_PI = 3.141592653589793d;
    /**
     * {@snippet lang=c :
     * #define VIPS_PI 3.141592653589793
     * }
     */
    public static double VIPS_PI() {
        return VIPS_PI;
    }
    private static final int VIPS_PATH_MAX = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define VIPS_PATH_MAX 4096
     * }
     */
    public static int VIPS_PATH_MAX() {
        return VIPS_PATH_MAX;
    }
    private static final int VIPS_ARGUMENT_REQUIRED_INPUT = (int)19L;
    /**
     * {@snippet lang=c :
     * #define VIPS_ARGUMENT_REQUIRED_INPUT 19
     * }
     */
    public static int VIPS_ARGUMENT_REQUIRED_INPUT() {
        return VIPS_ARGUMENT_REQUIRED_INPUT;
    }
    private static final int VIPS_ARGUMENT_OPTIONAL_INPUT = (int)18L;
    /**
     * {@snippet lang=c :
     * #define VIPS_ARGUMENT_OPTIONAL_INPUT 18
     * }
     */
    public static int VIPS_ARGUMENT_OPTIONAL_INPUT() {
        return VIPS_ARGUMENT_OPTIONAL_INPUT;
    }
    private static final int VIPS_ARGUMENT_REQUIRED_OUTPUT = (int)35L;
    /**
     * {@snippet lang=c :
     * #define VIPS_ARGUMENT_REQUIRED_OUTPUT 35
     * }
     */
    public static int VIPS_ARGUMENT_REQUIRED_OUTPUT() {
        return VIPS_ARGUMENT_REQUIRED_OUTPUT;
    }
    private static final int VIPS_ARGUMENT_OPTIONAL_OUTPUT = (int)34L;
    /**
     * {@snippet lang=c :
     * #define VIPS_ARGUMENT_OPTIONAL_OUTPUT 34
     * }
     */
    public static int VIPS_ARGUMENT_OPTIONAL_OUTPUT() {
        return VIPS_ARGUMENT_OPTIONAL_OUTPUT;
    }
    private static final int VIPS_TARGET_BUFFER_SIZE = (int)8500L;
    /**
     * {@snippet lang=c :
     * #define VIPS_TARGET_BUFFER_SIZE 8500
     * }
     */
    public static int VIPS_TARGET_BUFFER_SIZE() {
        return VIPS_TARGET_BUFFER_SIZE;
    }
    private static final int VIPS_TARGET_CUSTOM_BUFFER_SIZE = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define VIPS_TARGET_CUSTOM_BUFFER_SIZE 4096
     * }
     */
    public static int VIPS_TARGET_CUSTOM_BUFFER_SIZE() {
        return VIPS_TARGET_CUSTOM_BUFFER_SIZE;
    }
    private static final int VIPS_SBUF_BUFFER_SIZE = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define VIPS_SBUF_BUFFER_SIZE 4096
     * }
     */
    public static int VIPS_SBUF_BUFFER_SIZE() {
        return VIPS_SBUF_BUFFER_SIZE;
    }
    /**
     * {@snippet lang=c :
     * #define VIPS_VERSION "8.15.2"
     * }
     */
    public static MemorySegment VIPS_VERSION() {
        class Holder {
            static final MemorySegment VIPS_VERSION
                = vips_h.LIBRARY_ARENA.allocateFrom("8.15.2");
        }
        return Holder.VIPS_VERSION;
    }
    /**
     * {@snippet lang=c :
     * #define VIPS_VERSION_STRING "8.15.2"
     * }
     */
    public static MemorySegment VIPS_VERSION_STRING() {
        class Holder {
            static final MemorySegment VIPS_VERSION_STRING
                = vips_h.LIBRARY_ARENA.allocateFrom("8.15.2");
        }
        return Holder.VIPS_VERSION_STRING;
    }
    private static final int VIPS_MAJOR_VERSION = (int)8L;
    /**
     * {@snippet lang=c :
     * #define VIPS_MAJOR_VERSION 8
     * }
     */
    public static int VIPS_MAJOR_VERSION() {
        return VIPS_MAJOR_VERSION;
    }
    private static final int VIPS_MINOR_VERSION = (int)15L;
    /**
     * {@snippet lang=c :
     * #define VIPS_MINOR_VERSION 15
     * }
     */
    public static int VIPS_MINOR_VERSION() {
        return VIPS_MINOR_VERSION;
    }
    private static final int VIPS_MICRO_VERSION = (int)2L;
    /**
     * {@snippet lang=c :
     * #define VIPS_MICRO_VERSION 2
     * }
     */
    public static int VIPS_MICRO_VERSION() {
        return VIPS_MICRO_VERSION;
    }
    private static final int VIPS_LIBRARY_CURRENT = (int)59L;
    /**
     * {@snippet lang=c :
     * #define VIPS_LIBRARY_CURRENT 59
     * }
     */
    public static int VIPS_LIBRARY_CURRENT() {
        return VIPS_LIBRARY_CURRENT;
    }
    private static final int VIPS_LIBRARY_REVISION = (int)2L;
    /**
     * {@snippet lang=c :
     * #define VIPS_LIBRARY_REVISION 2
     * }
     */
    public static int VIPS_LIBRARY_REVISION() {
        return VIPS_LIBRARY_REVISION;
    }
    private static final int VIPS_LIBRARY_AGE = (int)17L;
    /**
     * {@snippet lang=c :
     * #define VIPS_LIBRARY_AGE 17
     * }
     */
    public static int VIPS_LIBRARY_AGE() {
        return VIPS_LIBRARY_AGE;
    }
    /**
     * {@snippet lang=c :
     * #define VIPS_CONFIG "enable debug: false
     * enable deprecated: true
     * enable modules: true
     * enable cplusplus: true
     * enable RAD load/save: true
     * enable Analyze7 load/save: true
     * enable PPM load/save: true
     * enable GIF load: true
     * use fftw for FFTs: true
     * SIMD support with highway: true
     * accelerate loops with ORC: false
     * ICC profile support with lcms: true
     * zlib: true
     * text rendering with pangocairo: true
     * font file support with fontconfig: true
     * EXIF metadata support with libexif: true
     * JPEG load/save with libjpeg: true
     * JXL load/save with libjxl: true (dynamic module: true)
     * JPEG2000 load/save with OpenJPEG: true
     * PNG load/save with libspng: true
     * PNG load/save with libpng: false
     * selected quantisation package: imagequant
     * TIFF load/save with libtiff: true
     * image pyramid save with libarchive: true
     * HEIC/AVIF load/save with libheif: true (dynamic module: true)
     * WebP load/save with libwebp: true
     * PDF load with PDFium: false
     * PDF load with poppler-glib: true (dynamic module: true)
     * SVG load with librsvg: true
     * EXR load with OpenEXR: true
     * OpenSlide load: true (dynamic module: true)
     * Matlab load with libmatio: true
     * NIfTI load/save with niftiio: false
     * FITS load/save with cfitsio: true
     * GIF save with cgif: true
     * selected Magick package: MagickCore (dynamic module: true)
     * Magick API version: magick7
     * Magick load: true
     * Magick save: true"
     * }
     */
    public static MemorySegment VIPS_CONFIG() {
        class Holder {
            static final MemorySegment VIPS_CONFIG
                = vips_h.LIBRARY_ARENA.allocateFrom("enable debug: false\nenable deprecated: true\nenable modules: true\nenable cplusplus: true\nenable RAD load/save: true\nenable Analyze7 load/save: true\nenable PPM load/save: true\nenable GIF load: true\nuse fftw for FFTs: true\nSIMD support with highway: true\naccelerate loops with ORC: false\nICC profile support with lcms: true\nzlib: true\ntext rendering with pangocairo: true\nfont file support with fontconfig: true\nEXIF metadata support with libexif: true\nJPEG load/save with libjpeg: true\nJXL load/save with libjxl: true (dynamic module: true)\nJPEG2000 load/save with OpenJPEG: true\nPNG load/save with libspng: true\nPNG load/save with libpng: false\nselected quantisation package: imagequant\nTIFF load/save with libtiff: true\nimage pyramid save with libarchive: true\nHEIC/AVIF load/save with libheif: true (dynamic module: true)\nWebP load/save with libwebp: true\nPDF load with PDFium: false\nPDF load with poppler-glib: true (dynamic module: true)\nSVG load with librsvg: true\nEXR load with OpenEXR: true\nOpenSlide load: true (dynamic module: true)\nMatlab load with libmatio: true\nNIfTI load/save with niftiio: false\nFITS load/save with cfitsio: true\nGIF save with cgif: true\nselected Magick package: MagickCore (dynamic module: true)\nMagick API version: magick7\nMagick load: true\nMagick save: true");
        }
        return Holder.VIPS_CONFIG;
    }
    private static final int VIPS_SPARE = (int)8L;
    /**
     * {@snippet lang=c :
     * #define VIPS_SPARE 8
     * }
     */
    public static int VIPS_SPARE() {
        return VIPS_SPARE;
    }
    private static final int VIPS__WINDOW_MARGIN_PIXELS = (int)128L;
    /**
     * {@snippet lang=c :
     * #define VIPS__WINDOW_MARGIN_PIXELS 128
     * }
     */
    public static int VIPS__WINDOW_MARGIN_PIXELS() {
        return VIPS__WINDOW_MARGIN_PIXELS;
    }
    private static final int VIPS__WINDOW_MARGIN_BYTES = (int)10485760L;
    /**
     * {@snippet lang=c :
     * #define VIPS__WINDOW_MARGIN_BYTES 10485760
     * }
     */
    public static int VIPS__WINDOW_MARGIN_BYTES() {
        return VIPS__WINDOW_MARGIN_BYTES;
    }
    private static final int VIPS_SIZEOF_HEADER = (int)64L;
    /**
     * {@snippet lang=c :
     * #define VIPS_SIZEOF_HEADER 64
     * }
     */
    public static int VIPS_SIZEOF_HEADER() {
        return VIPS_SIZEOF_HEADER;
    }
    private static final int VIPS__TILE_WIDTH = (int)128L;
    /**
     * {@snippet lang=c :
     * #define VIPS__TILE_WIDTH 128
     * }
     */
    public static int VIPS__TILE_WIDTH() {
        return VIPS__TILE_WIDTH;
    }
    private static final int VIPS__TILE_HEIGHT = (int)128L;
    /**
     * {@snippet lang=c :
     * #define VIPS__TILE_HEIGHT 128
     * }
     */
    public static int VIPS__TILE_HEIGHT() {
        return VIPS__TILE_HEIGHT;
    }
    private static final int VIPS__THINSTRIP_HEIGHT = (int)1L;
    /**
     * {@snippet lang=c :
     * #define VIPS__THINSTRIP_HEIGHT 1
     * }
     */
    public static int VIPS__THINSTRIP_HEIGHT() {
        return VIPS__THINSTRIP_HEIGHT;
    }
    private static final int VIPS__FATSTRIP_HEIGHT = (int)16L;
    /**
     * {@snippet lang=c :
     * #define VIPS__FATSTRIP_HEIGHT 16
     * }
     */
    public static int VIPS__FATSTRIP_HEIGHT() {
        return VIPS__FATSTRIP_HEIGHT;
    }
    private static final int VIPS_MAGIC_INTEL = (int)3064394248L;
    /**
     * {@snippet lang=c :
     * #define VIPS_MAGIC_INTEL 3064394248
     * }
     */
    public static int VIPS_MAGIC_INTEL() {
        return VIPS_MAGIC_INTEL;
    }
    private static final int VIPS_MAGIC_SPARC = (int)150120118L;
    /**
     * {@snippet lang=c :
     * #define VIPS_MAGIC_SPARC 150120118
     * }
     */
    public static int VIPS_MAGIC_SPARC() {
        return VIPS_MAGIC_SPARC;
    }
    private static final int VIPS_MAX_COORD = (int)10000000L;
    /**
     * {@snippet lang=c :
     * #define VIPS_MAX_COORD 10000000
     * }
     */
    public static int VIPS_MAX_COORD() {
        return VIPS_MAX_COORD;
    }
    private static final int VIPS_TRANSFORM_SHIFT = (int)6L;
    /**
     * {@snippet lang=c :
     * #define VIPS_TRANSFORM_SHIFT 6
     * }
     */
    public static int VIPS_TRANSFORM_SHIFT() {
        return VIPS_TRANSFORM_SHIFT;
    }
    private static final int VIPS_TRANSFORM_SCALE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define VIPS_TRANSFORM_SCALE 64
     * }
     */
    public static int VIPS_TRANSFORM_SCALE() {
        return VIPS_TRANSFORM_SCALE;
    }
    private static final int VIPS_INTERPOLATE_SHIFT = (int)12L;
    /**
     * {@snippet lang=c :
     * #define VIPS_INTERPOLATE_SHIFT 12
     * }
     */
    public static int VIPS_INTERPOLATE_SHIFT() {
        return VIPS_INTERPOLATE_SHIFT;
    }
    private static final int VIPS_INTERPOLATE_SCALE = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define VIPS_INTERPOLATE_SCALE 4096
     * }
     */
    public static int VIPS_INTERPOLATE_SCALE() {
        return VIPS_INTERPOLATE_SCALE;
    }
    /**
     * {@snippet lang=c :
     * #define VIPS_META_EXIF_NAME "exif-data"
     * }
     */
    public static MemorySegment VIPS_META_EXIF_NAME() {
        class Holder {
            static final MemorySegment VIPS_META_EXIF_NAME
                = vips_h.LIBRARY_ARENA.allocateFrom("exif-data");
        }
        return Holder.VIPS_META_EXIF_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define VIPS_META_XMP_NAME "xmp-data"
     * }
     */
    public static MemorySegment VIPS_META_XMP_NAME() {
        class Holder {
            static final MemorySegment VIPS_META_XMP_NAME
                = vips_h.LIBRARY_ARENA.allocateFrom("xmp-data");
        }
        return Holder.VIPS_META_XMP_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define VIPS_META_IPTC_NAME "iptc-data"
     * }
     */
    public static MemorySegment VIPS_META_IPTC_NAME() {
        class Holder {
            static final MemorySegment VIPS_META_IPTC_NAME
                = vips_h.LIBRARY_ARENA.allocateFrom("iptc-data");
        }
        return Holder.VIPS_META_IPTC_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define VIPS_META_PHOTOSHOP_NAME "photoshop-data"
     * }
     */
    public static MemorySegment VIPS_META_PHOTOSHOP_NAME() {
        class Holder {
            static final MemorySegment VIPS_META_PHOTOSHOP_NAME
                = vips_h.LIBRARY_ARENA.allocateFrom("photoshop-data");
        }
        return Holder.VIPS_META_PHOTOSHOP_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define VIPS_META_ICC_NAME "icc-profile-data"
     * }
     */
    public static MemorySegment VIPS_META_ICC_NAME() {
        class Holder {
            static final MemorySegment VIPS_META_ICC_NAME
                = vips_h.LIBRARY_ARENA.allocateFrom("icc-profile-data");
        }
        return Holder.VIPS_META_ICC_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define VIPS_META_IMAGEDESCRIPTION "image-description"
     * }
     */
    public static MemorySegment VIPS_META_IMAGEDESCRIPTION() {
        class Holder {
            static final MemorySegment VIPS_META_IMAGEDESCRIPTION
                = vips_h.LIBRARY_ARENA.allocateFrom("image-description");
        }
        return Holder.VIPS_META_IMAGEDESCRIPTION;
    }
    /**
     * {@snippet lang=c :
     * #define VIPS_META_RESOLUTION_UNIT "resolution-unit"
     * }
     */
    public static MemorySegment VIPS_META_RESOLUTION_UNIT() {
        class Holder {
            static final MemorySegment VIPS_META_RESOLUTION_UNIT
                = vips_h.LIBRARY_ARENA.allocateFrom("resolution-unit");
        }
        return Holder.VIPS_META_RESOLUTION_UNIT;
    }
    /**
     * {@snippet lang=c :
     * #define VIPS_META_BITS_PER_SAMPLE "bits-per-sample"
     * }
     */
    public static MemorySegment VIPS_META_BITS_PER_SAMPLE() {
        class Holder {
            static final MemorySegment VIPS_META_BITS_PER_SAMPLE
                = vips_h.LIBRARY_ARENA.allocateFrom("bits-per-sample");
        }
        return Holder.VIPS_META_BITS_PER_SAMPLE;
    }
    /**
     * {@snippet lang=c :
     * #define VIPS_META_LOADER "vips-loader"
     * }
     */
    public static MemorySegment VIPS_META_LOADER() {
        class Holder {
            static final MemorySegment VIPS_META_LOADER
                = vips_h.LIBRARY_ARENA.allocateFrom("vips-loader");
        }
        return Holder.VIPS_META_LOADER;
    }
    /**
     * {@snippet lang=c :
     * #define VIPS_META_SEQUENTIAL "vips-sequential"
     * }
     */
    public static MemorySegment VIPS_META_SEQUENTIAL() {
        class Holder {
            static final MemorySegment VIPS_META_SEQUENTIAL
                = vips_h.LIBRARY_ARENA.allocateFrom("vips-sequential");
        }
        return Holder.VIPS_META_SEQUENTIAL;
    }
    /**
     * {@snippet lang=c :
     * #define VIPS_META_ORIENTATION "orientation"
     * }
     */
    public static MemorySegment VIPS_META_ORIENTATION() {
        class Holder {
            static final MemorySegment VIPS_META_ORIENTATION
                = vips_h.LIBRARY_ARENA.allocateFrom("orientation");
        }
        return Holder.VIPS_META_ORIENTATION;
    }
    /**
     * {@snippet lang=c :
     * #define VIPS_META_PAGE_HEIGHT "page-height"
     * }
     */
    public static MemorySegment VIPS_META_PAGE_HEIGHT() {
        class Holder {
            static final MemorySegment VIPS_META_PAGE_HEIGHT
                = vips_h.LIBRARY_ARENA.allocateFrom("page-height");
        }
        return Holder.VIPS_META_PAGE_HEIGHT;
    }
    /**
     * {@snippet lang=c :
     * #define VIPS_META_N_PAGES "n-pages"
     * }
     */
    public static MemorySegment VIPS_META_N_PAGES() {
        class Holder {
            static final MemorySegment VIPS_META_N_PAGES
                = vips_h.LIBRARY_ARENA.allocateFrom("n-pages");
        }
        return Holder.VIPS_META_N_PAGES;
    }
    /**
     * {@snippet lang=c :
     * #define VIPS_META_N_SUBIFDS "n-subifds"
     * }
     */
    public static MemorySegment VIPS_META_N_SUBIFDS() {
        class Holder {
            static final MemorySegment VIPS_META_N_SUBIFDS
                = vips_h.LIBRARY_ARENA.allocateFrom("n-subifds");
        }
        return Holder.VIPS_META_N_SUBIFDS;
    }
    /**
     * {@snippet lang=c :
     * #define VIPS_META_CONCURRENCY "concurrency"
     * }
     */
    public static MemorySegment VIPS_META_CONCURRENCY() {
        class Holder {
            static final MemorySegment VIPS_META_CONCURRENCY
                = vips_h.LIBRARY_ARENA.allocateFrom("concurrency");
        }
        return Holder.VIPS_META_CONCURRENCY;
    }
    private static final double VIPS_D93_X0 = 89.74d;
    /**
     * {@snippet lang=c :
     * #define VIPS_D93_X0 89.74
     * }
     */
    public static double VIPS_D93_X0() {
        return VIPS_D93_X0;
    }
    private static final double VIPS_D93_Y0 = 100.0d;
    /**
     * {@snippet lang=c :
     * #define VIPS_D93_Y0 100.0
     * }
     */
    public static double VIPS_D93_Y0() {
        return VIPS_D93_Y0;
    }
    private static final double VIPS_D93_Z0 = 130.77d;
    /**
     * {@snippet lang=c :
     * #define VIPS_D93_Z0 130.77
     * }
     */
    public static double VIPS_D93_Z0() {
        return VIPS_D93_Z0;
    }
    private static final double VIPS_D75_X0 = 94.9682d;
    /**
     * {@snippet lang=c :
     * #define VIPS_D75_X0 94.9682
     * }
     */
    public static double VIPS_D75_X0() {
        return VIPS_D75_X0;
    }
    private static final double VIPS_D75_Y0 = 100.0d;
    /**
     * {@snippet lang=c :
     * #define VIPS_D75_Y0 100.0
     * }
     */
    public static double VIPS_D75_Y0() {
        return VIPS_D75_Y0;
    }
    private static final double VIPS_D75_Z0 = 122.571d;
    /**
     * {@snippet lang=c :
     * #define VIPS_D75_Z0 122.571
     * }
     */
    public static double VIPS_D75_Z0() {
        return VIPS_D75_Z0;
    }
    private static final double VIPS_D65_X0 = 95.047d;
    /**
     * {@snippet lang=c :
     * #define VIPS_D65_X0 95.047
     * }
     */
    public static double VIPS_D65_X0() {
        return VIPS_D65_X0;
    }
    private static final double VIPS_D65_Y0 = 100.0d;
    /**
     * {@snippet lang=c :
     * #define VIPS_D65_Y0 100.0
     * }
     */
    public static double VIPS_D65_Y0() {
        return VIPS_D65_Y0;
    }
    private static final double VIPS_D65_Z0 = 108.8827d;
    /**
     * {@snippet lang=c :
     * #define VIPS_D65_Z0 108.8827
     * }
     */
    public static double VIPS_D65_Z0() {
        return VIPS_D65_Z0;
    }
    private static final double VIPS_D55_X0 = 95.6831d;
    /**
     * {@snippet lang=c :
     * #define VIPS_D55_X0 95.6831
     * }
     */
    public static double VIPS_D55_X0() {
        return VIPS_D55_X0;
    }
    private static final double VIPS_D55_Y0 = 100.0d;
    /**
     * {@snippet lang=c :
     * #define VIPS_D55_Y0 100.0
     * }
     */
    public static double VIPS_D55_Y0() {
        return VIPS_D55_Y0;
    }
    private static final double VIPS_D55_Z0 = 92.0871d;
    /**
     * {@snippet lang=c :
     * #define VIPS_D55_Z0 92.0871
     * }
     */
    public static double VIPS_D55_Z0() {
        return VIPS_D55_Z0;
    }
    private static final double VIPS_D50_X0 = 96.425d;
    /**
     * {@snippet lang=c :
     * #define VIPS_D50_X0 96.425
     * }
     */
    public static double VIPS_D50_X0() {
        return VIPS_D50_X0;
    }
    private static final double VIPS_D50_Y0 = 100.0d;
    /**
     * {@snippet lang=c :
     * #define VIPS_D50_Y0 100.0
     * }
     */
    public static double VIPS_D50_Y0() {
        return VIPS_D50_Y0;
    }
    private static final double VIPS_D50_Z0 = 82.468d;
    /**
     * {@snippet lang=c :
     * #define VIPS_D50_Z0 82.468
     * }
     */
    public static double VIPS_D50_Z0() {
        return VIPS_D50_Z0;
    }
    private static final double VIPS_A_X0 = 109.8503d;
    /**
     * {@snippet lang=c :
     * #define VIPS_A_X0 109.8503
     * }
     */
    public static double VIPS_A_X0() {
        return VIPS_A_X0;
    }
    private static final double VIPS_A_Y0 = 100.0d;
    /**
     * {@snippet lang=c :
     * #define VIPS_A_Y0 100.0
     * }
     */
    public static double VIPS_A_Y0() {
        return VIPS_A_Y0;
    }
    private static final double VIPS_A_Z0 = 35.5849d;
    /**
     * {@snippet lang=c :
     * #define VIPS_A_Z0 35.5849
     * }
     */
    public static double VIPS_A_Z0() {
        return VIPS_A_Z0;
    }
    private static final double VIPS_B_X0 = 99.072d;
    /**
     * {@snippet lang=c :
     * #define VIPS_B_X0 99.072
     * }
     */
    public static double VIPS_B_X0() {
        return VIPS_B_X0;
    }
    private static final double VIPS_B_Y0 = 100.0d;
    /**
     * {@snippet lang=c :
     * #define VIPS_B_Y0 100.0
     * }
     */
    public static double VIPS_B_Y0() {
        return VIPS_B_Y0;
    }
    private static final double VIPS_B_Z0 = 85.223d;
    /**
     * {@snippet lang=c :
     * #define VIPS_B_Z0 85.223
     * }
     */
    public static double VIPS_B_Z0() {
        return VIPS_B_Z0;
    }
    private static final double VIPS_C_X0 = 98.07d;
    /**
     * {@snippet lang=c :
     * #define VIPS_C_X0 98.07
     * }
     */
    public static double VIPS_C_X0() {
        return VIPS_C_X0;
    }
    private static final double VIPS_C_Y0 = 100.0d;
    /**
     * {@snippet lang=c :
     * #define VIPS_C_Y0 100.0
     * }
     */
    public static double VIPS_C_Y0() {
        return VIPS_C_Y0;
    }
    private static final double VIPS_C_Z0 = 118.23d;
    /**
     * {@snippet lang=c :
     * #define VIPS_C_Z0 118.23
     * }
     */
    public static double VIPS_C_Z0() {
        return VIPS_C_Z0;
    }
    private static final double VIPS_E_X0 = 100.0d;
    /**
     * {@snippet lang=c :
     * #define VIPS_E_X0 100.0
     * }
     */
    public static double VIPS_E_X0() {
        return VIPS_E_X0;
    }
    private static final double VIPS_E_Y0 = 100.0d;
    /**
     * {@snippet lang=c :
     * #define VIPS_E_Y0 100.0
     * }
     */
    public static double VIPS_E_Y0() {
        return VIPS_E_Y0;
    }
    private static final double VIPS_E_Z0 = 100.0d;
    /**
     * {@snippet lang=c :
     * #define VIPS_E_Z0 100.0
     * }
     */
    public static double VIPS_E_Z0() {
        return VIPS_E_Z0;
    }
    private static final double VIPS_D3250_X0 = 105.659d;
    /**
     * {@snippet lang=c :
     * #define VIPS_D3250_X0 105.659
     * }
     */
    public static double VIPS_D3250_X0() {
        return VIPS_D3250_X0;
    }
    private static final double VIPS_D3250_Y0 = 100.0d;
    /**
     * {@snippet lang=c :
     * #define VIPS_D3250_Y0 100.0
     * }
     */
    public static double VIPS_D3250_Y0() {
        return VIPS_D3250_Y0;
    }
    private static final double VIPS_D3250_Z0 = 45.8501d;
    /**
     * {@snippet lang=c :
     * #define VIPS_D3250_Z0 45.8501
     * }
     */
    public static double VIPS_D3250_Z0() {
        return VIPS_D3250_Z0;
    }
}

