// Generated by jextract

package app.photofox.vipsffm.generated;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _VipsBuf {
 *     char *base;
 *     int mx;
 *     int i;
 *     gboolean full;
 *     int lasti;
 *     gboolean dynamic;
 * }
 * }
 */
public class _VipsBuf {

    _VipsBuf() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vips_h.C_POINTER.withName("base"),
        vips_h.C_INT.withName("mx"),
        vips_h.C_INT.withName("i"),
        vips_h.C_INT.withName("full"),
        vips_h.C_INT.withName("lasti"),
        vips_h.C_INT.withName("dynamic"),
        MemoryLayout.paddingLayout(4)
    ).withName("_VipsBuf");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout base$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("base"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *base
     * }
     */
    public static final AddressLayout base$layout() {
        return base$LAYOUT;
    }

    private static final long base$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *base
     * }
     */
    public static final long base$offset() {
        return base$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *base
     * }
     */
    public static MemorySegment base(MemorySegment struct) {
        return struct.get(base$LAYOUT, base$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *base
     * }
     */
    public static void base(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(base$LAYOUT, base$OFFSET, fieldValue);
    }

    private static final OfInt mx$LAYOUT = (OfInt)$LAYOUT.select(groupElement("mx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int mx
     * }
     */
    public static final OfInt mx$layout() {
        return mx$LAYOUT;
    }

    private static final long mx$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int mx
     * }
     */
    public static final long mx$offset() {
        return mx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int mx
     * }
     */
    public static int mx(MemorySegment struct) {
        return struct.get(mx$LAYOUT, mx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int mx
     * }
     */
    public static void mx(MemorySegment struct, int fieldValue) {
        struct.set(mx$LAYOUT, mx$OFFSET, fieldValue);
    }

    private static final OfInt i$LAYOUT = (OfInt)$LAYOUT.select(groupElement("i"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int i
     * }
     */
    public static final OfInt i$layout() {
        return i$LAYOUT;
    }

    private static final long i$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int i
     * }
     */
    public static final long i$offset() {
        return i$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int i
     * }
     */
    public static int i(MemorySegment struct) {
        return struct.get(i$LAYOUT, i$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int i
     * }
     */
    public static void i(MemorySegment struct, int fieldValue) {
        struct.set(i$LAYOUT, i$OFFSET, fieldValue);
    }

    private static final OfInt full$LAYOUT = (OfInt)$LAYOUT.select(groupElement("full"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean full
     * }
     */
    public static final OfInt full$layout() {
        return full$LAYOUT;
    }

    private static final long full$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean full
     * }
     */
    public static final long full$offset() {
        return full$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean full
     * }
     */
    public static int full(MemorySegment struct) {
        return struct.get(full$LAYOUT, full$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean full
     * }
     */
    public static void full(MemorySegment struct, int fieldValue) {
        struct.set(full$LAYOUT, full$OFFSET, fieldValue);
    }

    private static final OfInt lasti$LAYOUT = (OfInt)$LAYOUT.select(groupElement("lasti"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int lasti
     * }
     */
    public static final OfInt lasti$layout() {
        return lasti$LAYOUT;
    }

    private static final long lasti$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int lasti
     * }
     */
    public static final long lasti$offset() {
        return lasti$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int lasti
     * }
     */
    public static int lasti(MemorySegment struct) {
        return struct.get(lasti$LAYOUT, lasti$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int lasti
     * }
     */
    public static void lasti(MemorySegment struct, int fieldValue) {
        struct.set(lasti$LAYOUT, lasti$OFFSET, fieldValue);
    }

    private static final OfInt dynamic$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dynamic"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean dynamic
     * }
     */
    public static final OfInt dynamic$layout() {
        return dynamic$LAYOUT;
    }

    private static final long dynamic$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean dynamic
     * }
     */
    public static final long dynamic$offset() {
        return dynamic$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean dynamic
     * }
     */
    public static int dynamic(MemorySegment struct) {
        return struct.get(dynamic$LAYOUT, dynamic$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean dynamic
     * }
     */
    public static void dynamic(MemorySegment struct, int fieldValue) {
        struct.set(dynamic$LAYOUT, dynamic$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

