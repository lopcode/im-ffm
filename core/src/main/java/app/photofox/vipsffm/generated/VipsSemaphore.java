// Generated by jextract

package app.photofox.vipsffm.generated;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     char *name;
 *     int v;
 *     GMutex *mutex;
 *     GCond *cond;
 * }
 * }
 */
public class VipsSemaphore {

    VipsSemaphore() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vips_h.C_POINTER.withName("name"),
        vips_h.C_INT.withName("v"),
        MemoryLayout.paddingLayout(4),
        vips_h.C_POINTER.withName("mutex"),
        vips_h.C_POINTER.withName("cond")
    ).withName("$anon$50:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *name
     * }
     */
    public static final AddressLayout name$layout() {
        return name$LAYOUT;
    }

    private static final long name$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *name
     * }
     */
    public static final long name$offset() {
        return name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *name
     * }
     */
    public static MemorySegment name(MemorySegment struct) {
        return struct.get(name$LAYOUT, name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *name
     * }
     */
    public static void name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(name$LAYOUT, name$OFFSET, fieldValue);
    }

    private static final OfInt v$LAYOUT = (OfInt)$LAYOUT.select(groupElement("v"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int v
     * }
     */
    public static final OfInt v$layout() {
        return v$LAYOUT;
    }

    private static final long v$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int v
     * }
     */
    public static final long v$offset() {
        return v$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int v
     * }
     */
    public static int v(MemorySegment struct) {
        return struct.get(v$LAYOUT, v$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int v
     * }
     */
    public static void v(MemorySegment struct, int fieldValue) {
        struct.set(v$LAYOUT, v$OFFSET, fieldValue);
    }

    private static final AddressLayout mutex$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("mutex"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GMutex *mutex
     * }
     */
    public static final AddressLayout mutex$layout() {
        return mutex$LAYOUT;
    }

    private static final long mutex$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GMutex *mutex
     * }
     */
    public static final long mutex$offset() {
        return mutex$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GMutex *mutex
     * }
     */
    public static MemorySegment mutex(MemorySegment struct) {
        return struct.get(mutex$LAYOUT, mutex$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GMutex *mutex
     * }
     */
    public static void mutex(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(mutex$LAYOUT, mutex$OFFSET, fieldValue);
    }

    private static final AddressLayout cond$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("cond"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GCond *cond
     * }
     */
    public static final AddressLayout cond$layout() {
        return cond$LAYOUT;
    }

    private static final long cond$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GCond *cond
     * }
     */
    public static final long cond$offset() {
        return cond$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GCond *cond
     * }
     */
    public static MemorySegment cond(MemorySegment struct) {
        return struct.get(cond$LAYOUT, cond$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GCond *cond
     * }
     */
    public static void cond(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(cond$LAYOUT, cond$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

