// Generated by jextract

package app.photofox.vipsffm.generated;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _VipsProgress {
 *     VipsImage *im;
 *     int run;
 *     int eta;
 *     gint64 tpels;
 *     gint64 npels;
 *     int percent;
 *     GTimer *start;
 * }
 * }
 */
public class _VipsProgress {

    _VipsProgress() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vips_h.C_POINTER.withName("im"),
        vips_h.C_INT.withName("run"),
        vips_h.C_INT.withName("eta"),
        vips_h.C_LONG_LONG.withName("tpels"),
        vips_h.C_LONG_LONG.withName("npels"),
        vips_h.C_INT.withName("percent"),
        MemoryLayout.paddingLayout(4),
        vips_h.C_POINTER.withName("start")
    ).withName("_VipsProgress");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout im$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("im"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VipsImage *im
     * }
     */
    public static final AddressLayout im$layout() {
        return im$LAYOUT;
    }

    private static final long im$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VipsImage *im
     * }
     */
    public static final long im$offset() {
        return im$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VipsImage *im
     * }
     */
    public static MemorySegment im(MemorySegment struct) {
        return struct.get(im$LAYOUT, im$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VipsImage *im
     * }
     */
    public static void im(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(im$LAYOUT, im$OFFSET, fieldValue);
    }

    private static final OfInt run$LAYOUT = (OfInt)$LAYOUT.select(groupElement("run"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int run
     * }
     */
    public static final OfInt run$layout() {
        return run$LAYOUT;
    }

    private static final long run$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int run
     * }
     */
    public static final long run$offset() {
        return run$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int run
     * }
     */
    public static int run(MemorySegment struct) {
        return struct.get(run$LAYOUT, run$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int run
     * }
     */
    public static void run(MemorySegment struct, int fieldValue) {
        struct.set(run$LAYOUT, run$OFFSET, fieldValue);
    }

    private static final OfInt eta$LAYOUT = (OfInt)$LAYOUT.select(groupElement("eta"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int eta
     * }
     */
    public static final OfInt eta$layout() {
        return eta$LAYOUT;
    }

    private static final long eta$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int eta
     * }
     */
    public static final long eta$offset() {
        return eta$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int eta
     * }
     */
    public static int eta(MemorySegment struct) {
        return struct.get(eta$LAYOUT, eta$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int eta
     * }
     */
    public static void eta(MemorySegment struct, int fieldValue) {
        struct.set(eta$LAYOUT, eta$OFFSET, fieldValue);
    }

    private static final OfLong tpels$LAYOUT = (OfLong)$LAYOUT.select(groupElement("tpels"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gint64 tpels
     * }
     */
    public static final OfLong tpels$layout() {
        return tpels$LAYOUT;
    }

    private static final long tpels$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gint64 tpels
     * }
     */
    public static final long tpels$offset() {
        return tpels$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gint64 tpels
     * }
     */
    public static long tpels(MemorySegment struct) {
        return struct.get(tpels$LAYOUT, tpels$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gint64 tpels
     * }
     */
    public static void tpels(MemorySegment struct, long fieldValue) {
        struct.set(tpels$LAYOUT, tpels$OFFSET, fieldValue);
    }

    private static final OfLong npels$LAYOUT = (OfLong)$LAYOUT.select(groupElement("npels"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gint64 npels
     * }
     */
    public static final OfLong npels$layout() {
        return npels$LAYOUT;
    }

    private static final long npels$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gint64 npels
     * }
     */
    public static final long npels$offset() {
        return npels$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gint64 npels
     * }
     */
    public static long npels(MemorySegment struct) {
        return struct.get(npels$LAYOUT, npels$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gint64 npels
     * }
     */
    public static void npels(MemorySegment struct, long fieldValue) {
        struct.set(npels$LAYOUT, npels$OFFSET, fieldValue);
    }

    private static final OfInt percent$LAYOUT = (OfInt)$LAYOUT.select(groupElement("percent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int percent
     * }
     */
    public static final OfInt percent$layout() {
        return percent$LAYOUT;
    }

    private static final long percent$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int percent
     * }
     */
    public static final long percent$offset() {
        return percent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int percent
     * }
     */
    public static int percent(MemorySegment struct) {
        return struct.get(percent$LAYOUT, percent$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int percent
     * }
     */
    public static void percent(MemorySegment struct, int fieldValue) {
        struct.set(percent$LAYOUT, percent$OFFSET, fieldValue);
    }

    private static final AddressLayout start$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("start"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GTimer *start
     * }
     */
    public static final AddressLayout start$layout() {
        return start$LAYOUT;
    }

    private static final long start$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GTimer *start
     * }
     */
    public static final long start$offset() {
        return start$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GTimer *start
     * }
     */
    public static MemorySegment start(MemorySegment struct) {
        return struct.get(start$LAYOUT, start$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GTimer *start
     * }
     */
    public static void start(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(start$LAYOUT, start$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

