// Generated by jextract

package app.photofox.vipsffm.generated;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _VipsThreadState {
 *     VipsObject parent_object;
 *     VipsImage *im;
 *     VipsRegion *reg;
 *     VipsRect pos;
 *     int x;
 *     int y;
 *     gboolean stop;
 *     void *a;
 *     gboolean stall;
 * }
 * }
 */
public class _VipsThreadState {

    _VipsThreadState() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _VipsObject.layout().withName("parent_object"),
        vips_h.C_POINTER.withName("im"),
        vips_h.C_POINTER.withName("reg"),
        _VipsRect.layout().withName("pos"),
        vips_h.C_INT.withName("x"),
        vips_h.C_INT.withName("y"),
        vips_h.C_INT.withName("stop"),
        MemoryLayout.paddingLayout(4),
        vips_h.C_POINTER.withName("a"),
        vips_h.C_INT.withName("stall"),
        MemoryLayout.paddingLayout(4)
    ).withName("_VipsThreadState");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout parent_object$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("parent_object"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VipsObject parent_object
     * }
     */
    public static final GroupLayout parent_object$layout() {
        return parent_object$LAYOUT;
    }

    private static final long parent_object$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VipsObject parent_object
     * }
     */
    public static final long parent_object$offset() {
        return parent_object$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VipsObject parent_object
     * }
     */
    public static MemorySegment parent_object(MemorySegment struct) {
        return struct.asSlice(parent_object$OFFSET, parent_object$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VipsObject parent_object
     * }
     */
    public static void parent_object(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, parent_object$OFFSET, parent_object$LAYOUT.byteSize());
    }

    private static final AddressLayout im$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("im"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VipsImage *im
     * }
     */
    public static final AddressLayout im$layout() {
        return im$LAYOUT;
    }

    private static final long im$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VipsImage *im
     * }
     */
    public static final long im$offset() {
        return im$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VipsImage *im
     * }
     */
    public static MemorySegment im(MemorySegment struct) {
        return struct.get(im$LAYOUT, im$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VipsImage *im
     * }
     */
    public static void im(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(im$LAYOUT, im$OFFSET, fieldValue);
    }

    private static final AddressLayout reg$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("reg"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VipsRegion *reg
     * }
     */
    public static final AddressLayout reg$layout() {
        return reg$LAYOUT;
    }

    private static final long reg$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VipsRegion *reg
     * }
     */
    public static final long reg$offset() {
        return reg$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VipsRegion *reg
     * }
     */
    public static MemorySegment reg(MemorySegment struct) {
        return struct.get(reg$LAYOUT, reg$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VipsRegion *reg
     * }
     */
    public static void reg(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(reg$LAYOUT, reg$OFFSET, fieldValue);
    }

    private static final GroupLayout pos$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("pos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VipsRect pos
     * }
     */
    public static final GroupLayout pos$layout() {
        return pos$LAYOUT;
    }

    private static final long pos$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VipsRect pos
     * }
     */
    public static final long pos$offset() {
        return pos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VipsRect pos
     * }
     */
    public static MemorySegment pos(MemorySegment struct) {
        return struct.asSlice(pos$OFFSET, pos$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VipsRect pos
     * }
     */
    public static void pos(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, pos$OFFSET, pos$LAYOUT.byteSize());
    }

    private static final OfInt x$LAYOUT = (OfInt)$LAYOUT.select(groupElement("x"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int x
     * }
     */
    public static final OfInt x$layout() {
        return x$LAYOUT;
    }

    private static final long x$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int x
     * }
     */
    public static final long x$offset() {
        return x$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int x
     * }
     */
    public static int x(MemorySegment struct) {
        return struct.get(x$LAYOUT, x$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int x
     * }
     */
    public static void x(MemorySegment struct, int fieldValue) {
        struct.set(x$LAYOUT, x$OFFSET, fieldValue);
    }

    private static final OfInt y$LAYOUT = (OfInt)$LAYOUT.select(groupElement("y"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int y
     * }
     */
    public static final OfInt y$layout() {
        return y$LAYOUT;
    }

    private static final long y$OFFSET = 116;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int y
     * }
     */
    public static final long y$offset() {
        return y$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int y
     * }
     */
    public static int y(MemorySegment struct) {
        return struct.get(y$LAYOUT, y$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int y
     * }
     */
    public static void y(MemorySegment struct, int fieldValue) {
        struct.set(y$LAYOUT, y$OFFSET, fieldValue);
    }

    private static final OfInt stop$LAYOUT = (OfInt)$LAYOUT.select(groupElement("stop"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean stop
     * }
     */
    public static final OfInt stop$layout() {
        return stop$LAYOUT;
    }

    private static final long stop$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean stop
     * }
     */
    public static final long stop$offset() {
        return stop$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean stop
     * }
     */
    public static int stop(MemorySegment struct) {
        return struct.get(stop$LAYOUT, stop$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean stop
     * }
     */
    public static void stop(MemorySegment struct, int fieldValue) {
        struct.set(stop$LAYOUT, stop$OFFSET, fieldValue);
    }

    private static final AddressLayout a$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("a"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *a
     * }
     */
    public static final AddressLayout a$layout() {
        return a$LAYOUT;
    }

    private static final long a$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *a
     * }
     */
    public static final long a$offset() {
        return a$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *a
     * }
     */
    public static MemorySegment a(MemorySegment struct) {
        return struct.get(a$LAYOUT, a$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *a
     * }
     */
    public static void a(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(a$LAYOUT, a$OFFSET, fieldValue);
    }

    private static final OfInt stall$LAYOUT = (OfInt)$LAYOUT.select(groupElement("stall"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean stall
     * }
     */
    public static final OfInt stall$layout() {
        return stall$LAYOUT;
    }

    private static final long stall$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean stall
     * }
     */
    public static final long stall$offset() {
        return stall$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean stall
     * }
     */
    public static int stall(MemorySegment struct) {
        return struct.get(stall$LAYOUT, stall$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean stall
     * }
     */
    public static void stall(MemorySegment struct, int fieldValue) {
        struct.set(stall$LAYOUT, stall$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

