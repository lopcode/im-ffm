// Generated by jextract

package app.photofox.vipsffm.generated;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _VipsForeignSaveClass {
 *     VipsForeignClass parent_class;
 *     VipsSaveable saveable;
 *     VipsBandFormat *format_table;
 *     gboolean coding[7];
 * }
 * }
 */
public class _VipsForeignSaveClass {

    _VipsForeignSaveClass() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _VipsForeignClass.layout().withName("parent_class"),
        VipsRaw.C_INT.withName("saveable"),
        MemoryLayout.paddingLayout(4),
        VipsRaw.C_POINTER.withName("format_table"),
        MemoryLayout.sequenceLayout(7, VipsRaw.C_INT).withName("coding"),
        MemoryLayout.paddingLayout(4)
    ).withName("_VipsForeignSaveClass");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout parent_class$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("parent_class"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VipsForeignClass parent_class
     * }
     */
    public static final GroupLayout parent_class$layout() {
        return parent_class$LAYOUT;
    }

    private static final long parent_class$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VipsForeignClass parent_class
     * }
     */
    public static final long parent_class$offset() {
        return parent_class$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VipsForeignClass parent_class
     * }
     */
    public static MemorySegment parent_class(MemorySegment struct) {
        return struct.asSlice(parent_class$OFFSET, parent_class$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VipsForeignClass parent_class
     * }
     */
    public static void parent_class(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, parent_class$OFFSET, parent_class$LAYOUT.byteSize());
    }

    private static final OfInt saveable$LAYOUT = (OfInt)$LAYOUT.select(groupElement("saveable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VipsSaveable saveable
     * }
     */
    public static final OfInt saveable$layout() {
        return saveable$LAYOUT;
    }

    private static final long saveable$OFFSET = 376;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VipsSaveable saveable
     * }
     */
    public static final long saveable$offset() {
        return saveable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VipsSaveable saveable
     * }
     */
    public static int saveable(MemorySegment struct) {
        return struct.get(saveable$LAYOUT, saveable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VipsSaveable saveable
     * }
     */
    public static void saveable(MemorySegment struct, int fieldValue) {
        struct.set(saveable$LAYOUT, saveable$OFFSET, fieldValue);
    }

    private static final AddressLayout format_table$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("format_table"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VipsBandFormat *format_table
     * }
     */
    public static final AddressLayout format_table$layout() {
        return format_table$LAYOUT;
    }

    private static final long format_table$OFFSET = 384;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VipsBandFormat *format_table
     * }
     */
    public static final long format_table$offset() {
        return format_table$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VipsBandFormat *format_table
     * }
     */
    public static MemorySegment format_table(MemorySegment struct) {
        return struct.get(format_table$LAYOUT, format_table$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VipsBandFormat *format_table
     * }
     */
    public static void format_table(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(format_table$LAYOUT, format_table$OFFSET, fieldValue);
    }

    private static final SequenceLayout coding$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("coding"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean coding[7]
     * }
     */
    public static final SequenceLayout coding$layout() {
        return coding$LAYOUT;
    }

    private static final long coding$OFFSET = 392;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean coding[7]
     * }
     */
    public static final long coding$offset() {
        return coding$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean coding[7]
     * }
     */
    public static MemorySegment coding(MemorySegment struct) {
        return struct.asSlice(coding$OFFSET, coding$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean coding[7]
     * }
     */
    public static void coding(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, coding$OFFSET, coding$LAYOUT.byteSize());
    }

    private static long[] coding$DIMS = { 7 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * gboolean coding[7]
     * }
     */
    public static long[] coding$dimensions() {
        return coding$DIMS;
    }
    private static final VarHandle coding$ELEM_HANDLE = coding$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * gboolean coding[7]
     * }
     */
    public static int coding(MemorySegment struct, long index0) {
        return (int)coding$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * gboolean coding[7]
     * }
     */
    public static void coding(MemorySegment struct, long index0, int fieldValue) {
        coding$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

