// Generated by jextract

package app.photofox.vipsffm.generated;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _VipsArgumentInstance {
 *     VipsArgument parent;
 *     VipsArgumentClass *argument_class;
 *     VipsObject *object;
 *     gboolean assigned;
 *     gulong close_id;
 *     gulong invalidate_id;
 * }
 * }
 */
public class _VipsArgumentInstance {

    _VipsArgumentInstance() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _VipsArgument.layout().withName("parent"),
        VipsRaw.C_POINTER.withName("argument_class"),
        VipsRaw.C_POINTER.withName("object"),
        VipsRaw.C_INT.withName("assigned"),
        MemoryLayout.paddingLayout(4),
        VipsRaw.C_LONG.withName("close_id"),
        VipsRaw.C_LONG.withName("invalidate_id")
    ).withName("_VipsArgumentInstance");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout parent$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("parent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VipsArgument parent
     * }
     */
    public static final GroupLayout parent$layout() {
        return parent$LAYOUT;
    }

    private static final long parent$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VipsArgument parent
     * }
     */
    public static final long parent$offset() {
        return parent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VipsArgument parent
     * }
     */
    public static MemorySegment parent(MemorySegment struct) {
        return struct.asSlice(parent$OFFSET, parent$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VipsArgument parent
     * }
     */
    public static void parent(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, parent$OFFSET, parent$LAYOUT.byteSize());
    }

    private static final AddressLayout argument_class$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("argument_class"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VipsArgumentClass *argument_class
     * }
     */
    public static final AddressLayout argument_class$layout() {
        return argument_class$LAYOUT;
    }

    private static final long argument_class$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VipsArgumentClass *argument_class
     * }
     */
    public static final long argument_class$offset() {
        return argument_class$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VipsArgumentClass *argument_class
     * }
     */
    public static MemorySegment argument_class(MemorySegment struct) {
        return struct.get(argument_class$LAYOUT, argument_class$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VipsArgumentClass *argument_class
     * }
     */
    public static void argument_class(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(argument_class$LAYOUT, argument_class$OFFSET, fieldValue);
    }

    private static final AddressLayout object$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("object"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VipsObject *object
     * }
     */
    public static final AddressLayout object$layout() {
        return object$LAYOUT;
    }

    private static final long object$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VipsObject *object
     * }
     */
    public static final long object$offset() {
        return object$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VipsObject *object
     * }
     */
    public static MemorySegment object(MemorySegment struct) {
        return struct.get(object$LAYOUT, object$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VipsObject *object
     * }
     */
    public static void object(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(object$LAYOUT, object$OFFSET, fieldValue);
    }

    private static final OfInt assigned$LAYOUT = (OfInt)$LAYOUT.select(groupElement("assigned"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean assigned
     * }
     */
    public static final OfInt assigned$layout() {
        return assigned$LAYOUT;
    }

    private static final long assigned$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean assigned
     * }
     */
    public static final long assigned$offset() {
        return assigned$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean assigned
     * }
     */
    public static int assigned(MemorySegment struct) {
        return struct.get(assigned$LAYOUT, assigned$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean assigned
     * }
     */
    public static void assigned(MemorySegment struct, int fieldValue) {
        struct.set(assigned$LAYOUT, assigned$OFFSET, fieldValue);
    }

    private static final OfLong close_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("close_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gulong close_id
     * }
     */
    public static final OfLong close_id$layout() {
        return close_id$LAYOUT;
    }

    private static final long close_id$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gulong close_id
     * }
     */
    public static final long close_id$offset() {
        return close_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gulong close_id
     * }
     */
    public static long close_id(MemorySegment struct) {
        return struct.get(close_id$LAYOUT, close_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gulong close_id
     * }
     */
    public static void close_id(MemorySegment struct, long fieldValue) {
        struct.set(close_id$LAYOUT, close_id$OFFSET, fieldValue);
    }

    private static final OfLong invalidate_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("invalidate_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gulong invalidate_id
     * }
     */
    public static final OfLong invalidate_id$layout() {
        return invalidate_id$LAYOUT;
    }

    private static final long invalidate_id$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gulong invalidate_id
     * }
     */
    public static final long invalidate_id$offset() {
        return invalidate_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gulong invalidate_id
     * }
     */
    public static long invalidate_id(MemorySegment struct) {
        return struct.get(invalidate_id$LAYOUT, invalidate_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gulong invalidate_id
     * }
     */
    public static void invalidate_id(MemorySegment struct, long fieldValue) {
        struct.set(invalidate_id$LAYOUT, invalidate_id$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

