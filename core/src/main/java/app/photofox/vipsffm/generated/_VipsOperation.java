// Generated by jextract

package app.photofox.vipsffm.generated;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _VipsOperation {
 *     VipsObject parent_instance;
 *     guint hash;
 *     gboolean found_hash;
 *     int pixels;
 * }
 * }
 */
public class _VipsOperation {

    _VipsOperation() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _VipsObject.layout().withName("parent_instance"),
        vips_h.C_INT.withName("hash"),
        vips_h.C_INT.withName("found_hash"),
        vips_h.C_INT.withName("pixels"),
        MemoryLayout.paddingLayout(4)
    ).withName("_VipsOperation");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout parent_instance$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("parent_instance"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VipsObject parent_instance
     * }
     */
    public static final GroupLayout parent_instance$layout() {
        return parent_instance$LAYOUT;
    }

    private static final long parent_instance$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VipsObject parent_instance
     * }
     */
    public static final long parent_instance$offset() {
        return parent_instance$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VipsObject parent_instance
     * }
     */
    public static MemorySegment parent_instance(MemorySegment struct) {
        return struct.asSlice(parent_instance$OFFSET, parent_instance$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VipsObject parent_instance
     * }
     */
    public static void parent_instance(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, parent_instance$OFFSET, parent_instance$LAYOUT.byteSize());
    }

    private static final OfInt hash$LAYOUT = (OfInt)$LAYOUT.select(groupElement("hash"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * guint hash
     * }
     */
    public static final OfInt hash$layout() {
        return hash$LAYOUT;
    }

    private static final long hash$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * guint hash
     * }
     */
    public static final long hash$offset() {
        return hash$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * guint hash
     * }
     */
    public static int hash(MemorySegment struct) {
        return struct.get(hash$LAYOUT, hash$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * guint hash
     * }
     */
    public static void hash(MemorySegment struct, int fieldValue) {
        struct.set(hash$LAYOUT, hash$OFFSET, fieldValue);
    }

    private static final OfInt found_hash$LAYOUT = (OfInt)$LAYOUT.select(groupElement("found_hash"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean found_hash
     * }
     */
    public static final OfInt found_hash$layout() {
        return found_hash$LAYOUT;
    }

    private static final long found_hash$OFFSET = 84;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean found_hash
     * }
     */
    public static final long found_hash$offset() {
        return found_hash$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean found_hash
     * }
     */
    public static int found_hash(MemorySegment struct) {
        return struct.get(found_hash$LAYOUT, found_hash$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean found_hash
     * }
     */
    public static void found_hash(MemorySegment struct, int fieldValue) {
        struct.set(found_hash$LAYOUT, found_hash$OFFSET, fieldValue);
    }

    private static final OfInt pixels$LAYOUT = (OfInt)$LAYOUT.select(groupElement("pixels"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int pixels
     * }
     */
    public static final OfInt pixels$layout() {
        return pixels$LAYOUT;
    }

    private static final long pixels$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int pixels
     * }
     */
    public static final long pixels$offset() {
        return pixels$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int pixels
     * }
     */
    public static int pixels(MemorySegment struct) {
        return struct.get(pixels$LAYOUT, pixels$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int pixels
     * }
     */
    public static void pixels(MemorySegment struct, int fieldValue) {
        struct.set(pixels$LAYOUT, pixels$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

