// Generated by jextract

package app.photofox.vipsffm.generated;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _VipsForeignLoad {
 *     VipsForeign parent_object;
 *     gboolean memory;
 *     VipsAccess access;
 *     VipsForeignFlags flags;
 *     VipsFailOn fail_on;
 *     gboolean fail;
 *     gboolean sequential;
 *     VipsImage *out;
 *     VipsImage *real;
 *     gboolean nocache;
 *     gboolean disc;
 *     gboolean error;
 *     gboolean revalidate;
 * }
 * }
 */
public class _VipsForeignLoad {

    _VipsForeignLoad() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _VipsForeign.layout().withName("parent_object"),
        VipsRaw.C_INT.withName("memory"),
        VipsRaw.C_INT.withName("access"),
        VipsRaw.C_INT.withName("flags"),
        VipsRaw.C_INT.withName("fail_on"),
        VipsRaw.C_INT.withName("fail"),
        VipsRaw.C_INT.withName("sequential"),
        VipsRaw.C_POINTER.withName("out"),
        VipsRaw.C_POINTER.withName("real"),
        VipsRaw.C_INT.withName("nocache"),
        VipsRaw.C_INT.withName("disc"),
        VipsRaw.C_INT.withName("error"),
        VipsRaw.C_INT.withName("revalidate")
    ).withName("_VipsForeignLoad");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout parent_object$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("parent_object"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VipsForeign parent_object
     * }
     */
    public static final GroupLayout parent_object$layout() {
        return parent_object$LAYOUT;
    }

    private static final long parent_object$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VipsForeign parent_object
     * }
     */
    public static final long parent_object$offset() {
        return parent_object$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VipsForeign parent_object
     * }
     */
    public static MemorySegment parent_object(MemorySegment struct) {
        return struct.asSlice(parent_object$OFFSET, parent_object$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VipsForeign parent_object
     * }
     */
    public static void parent_object(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, parent_object$OFFSET, parent_object$LAYOUT.byteSize());
    }

    private static final OfInt memory$LAYOUT = (OfInt)$LAYOUT.select(groupElement("memory"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean memory
     * }
     */
    public static final OfInt memory$layout() {
        return memory$LAYOUT;
    }

    private static final long memory$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean memory
     * }
     */
    public static final long memory$offset() {
        return memory$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean memory
     * }
     */
    public static int memory(MemorySegment struct) {
        return struct.get(memory$LAYOUT, memory$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean memory
     * }
     */
    public static void memory(MemorySegment struct, int fieldValue) {
        struct.set(memory$LAYOUT, memory$OFFSET, fieldValue);
    }

    private static final OfInt access$LAYOUT = (OfInt)$LAYOUT.select(groupElement("access"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VipsAccess access
     * }
     */
    public static final OfInt access$layout() {
        return access$LAYOUT;
    }

    private static final long access$OFFSET = 100;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VipsAccess access
     * }
     */
    public static final long access$offset() {
        return access$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VipsAccess access
     * }
     */
    public static int access(MemorySegment struct) {
        return struct.get(access$LAYOUT, access$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VipsAccess access
     * }
     */
    public static void access(MemorySegment struct, int fieldValue) {
        struct.set(access$LAYOUT, access$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VipsForeignFlags flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VipsForeignFlags flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VipsForeignFlags flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VipsForeignFlags flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final OfInt fail_on$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fail_on"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VipsFailOn fail_on
     * }
     */
    public static final OfInt fail_on$layout() {
        return fail_on$LAYOUT;
    }

    private static final long fail_on$OFFSET = 108;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VipsFailOn fail_on
     * }
     */
    public static final long fail_on$offset() {
        return fail_on$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VipsFailOn fail_on
     * }
     */
    public static int fail_on(MemorySegment struct) {
        return struct.get(fail_on$LAYOUT, fail_on$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VipsFailOn fail_on
     * }
     */
    public static void fail_on(MemorySegment struct, int fieldValue) {
        struct.set(fail_on$LAYOUT, fail_on$OFFSET, fieldValue);
    }

    private static final OfInt fail$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fail"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean fail
     * }
     */
    public static final OfInt fail$layout() {
        return fail$LAYOUT;
    }

    private static final long fail$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean fail
     * }
     */
    public static final long fail$offset() {
        return fail$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean fail
     * }
     */
    public static int fail(MemorySegment struct) {
        return struct.get(fail$LAYOUT, fail$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean fail
     * }
     */
    public static void fail(MemorySegment struct, int fieldValue) {
        struct.set(fail$LAYOUT, fail$OFFSET, fieldValue);
    }

    private static final OfInt sequential$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sequential"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean sequential
     * }
     */
    public static final OfInt sequential$layout() {
        return sequential$LAYOUT;
    }

    private static final long sequential$OFFSET = 116;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean sequential
     * }
     */
    public static final long sequential$offset() {
        return sequential$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean sequential
     * }
     */
    public static int sequential(MemorySegment struct) {
        return struct.get(sequential$LAYOUT, sequential$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean sequential
     * }
     */
    public static void sequential(MemorySegment struct, int fieldValue) {
        struct.set(sequential$LAYOUT, sequential$OFFSET, fieldValue);
    }

    private static final AddressLayout out$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("out"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VipsImage *out
     * }
     */
    public static final AddressLayout out$layout() {
        return out$LAYOUT;
    }

    private static final long out$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VipsImage *out
     * }
     */
    public static final long out$offset() {
        return out$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VipsImage *out
     * }
     */
    public static MemorySegment out(MemorySegment struct) {
        return struct.get(out$LAYOUT, out$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VipsImage *out
     * }
     */
    public static void out(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(out$LAYOUT, out$OFFSET, fieldValue);
    }

    private static final AddressLayout real$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("real"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VipsImage *real
     * }
     */
    public static final AddressLayout real$layout() {
        return real$LAYOUT;
    }

    private static final long real$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VipsImage *real
     * }
     */
    public static final long real$offset() {
        return real$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VipsImage *real
     * }
     */
    public static MemorySegment real(MemorySegment struct) {
        return struct.get(real$LAYOUT, real$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VipsImage *real
     * }
     */
    public static void real(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(real$LAYOUT, real$OFFSET, fieldValue);
    }

    private static final OfInt nocache$LAYOUT = (OfInt)$LAYOUT.select(groupElement("nocache"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean nocache
     * }
     */
    public static final OfInt nocache$layout() {
        return nocache$LAYOUT;
    }

    private static final long nocache$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean nocache
     * }
     */
    public static final long nocache$offset() {
        return nocache$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean nocache
     * }
     */
    public static int nocache(MemorySegment struct) {
        return struct.get(nocache$LAYOUT, nocache$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean nocache
     * }
     */
    public static void nocache(MemorySegment struct, int fieldValue) {
        struct.set(nocache$LAYOUT, nocache$OFFSET, fieldValue);
    }

    private static final OfInt disc$LAYOUT = (OfInt)$LAYOUT.select(groupElement("disc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean disc
     * }
     */
    public static final OfInt disc$layout() {
        return disc$LAYOUT;
    }

    private static final long disc$OFFSET = 140;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean disc
     * }
     */
    public static final long disc$offset() {
        return disc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean disc
     * }
     */
    public static int disc(MemorySegment struct) {
        return struct.get(disc$LAYOUT, disc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean disc
     * }
     */
    public static void disc(MemorySegment struct, int fieldValue) {
        struct.set(disc$LAYOUT, disc$OFFSET, fieldValue);
    }

    private static final OfInt error$LAYOUT = (OfInt)$LAYOUT.select(groupElement("error"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean error
     * }
     */
    public static final OfInt error$layout() {
        return error$LAYOUT;
    }

    private static final long error$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean error
     * }
     */
    public static final long error$offset() {
        return error$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean error
     * }
     */
    public static int error(MemorySegment struct) {
        return struct.get(error$LAYOUT, error$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean error
     * }
     */
    public static void error(MemorySegment struct, int fieldValue) {
        struct.set(error$LAYOUT, error$OFFSET, fieldValue);
    }

    private static final OfInt revalidate$LAYOUT = (OfInt)$LAYOUT.select(groupElement("revalidate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean revalidate
     * }
     */
    public static final OfInt revalidate$layout() {
        return revalidate$LAYOUT;
    }

    private static final long revalidate$OFFSET = 148;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean revalidate
     * }
     */
    public static final long revalidate$offset() {
        return revalidate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean revalidate
     * }
     */
    public static int revalidate(MemorySegment struct) {
        return struct.get(revalidate$LAYOUT, revalidate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean revalidate
     * }
     */
    public static void revalidate(MemorySegment struct, int fieldValue) {
        struct.set(revalidate$LAYOUT, revalidate$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

