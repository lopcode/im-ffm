// Generated by jextract

package app.photofox.vipsffm.generated;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _VipsForeignClass {
 *     VipsOperationClass parent_class;
 *     int priority;
 *     const char **suffs;
 * }
 * }
 */
public class _VipsForeignClass {

    _VipsForeignClass() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _VipsOperationClass.layout().withName("parent_class"),
        VipsRaw.C_INT.withName("priority"),
        MemoryLayout.paddingLayout(4),
        VipsRaw.C_POINTER.withName("suffs")
    ).withName("_VipsForeignClass");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout parent_class$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("parent_class"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VipsOperationClass parent_class
     * }
     */
    public static final GroupLayout parent_class$layout() {
        return parent_class$LAYOUT;
    }

    private static final long parent_class$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VipsOperationClass parent_class
     * }
     */
    public static final long parent_class$offset() {
        return parent_class$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VipsOperationClass parent_class
     * }
     */
    public static MemorySegment parent_class(MemorySegment struct) {
        return struct.asSlice(parent_class$OFFSET, parent_class$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VipsOperationClass parent_class
     * }
     */
    public static void parent_class(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, parent_class$OFFSET, parent_class$LAYOUT.byteSize());
    }

    private static final OfInt priority$LAYOUT = (OfInt)$LAYOUT.select(groupElement("priority"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int priority
     * }
     */
    public static final OfInt priority$layout() {
        return priority$LAYOUT;
    }

    private static final long priority$OFFSET = 360;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int priority
     * }
     */
    public static final long priority$offset() {
        return priority$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int priority
     * }
     */
    public static int priority(MemorySegment struct) {
        return struct.get(priority$LAYOUT, priority$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int priority
     * }
     */
    public static void priority(MemorySegment struct, int fieldValue) {
        struct.set(priority$LAYOUT, priority$OFFSET, fieldValue);
    }

    private static final AddressLayout suffs$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("suffs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char **suffs
     * }
     */
    public static final AddressLayout suffs$layout() {
        return suffs$LAYOUT;
    }

    private static final long suffs$OFFSET = 368;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char **suffs
     * }
     */
    public static final long suffs$offset() {
        return suffs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char **suffs
     * }
     */
    public static MemorySegment suffs(MemorySegment struct) {
        return struct.get(suffs$LAYOUT, suffs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char **suffs
     * }
     */
    public static void suffs(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(suffs$LAYOUT, suffs$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

