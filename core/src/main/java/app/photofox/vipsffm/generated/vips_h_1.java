// Generated by jextract

package app.photofox.vipsffm.generated;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class vips_h_1 {

    vips_h_1() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.libraryLookup(System.mapLibraryName("vips"), LIBRARY_ARENA)
            .or(SymbolLookup.loaderLookup())
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;
    private static final int VIPS_ENABLE_DEPRECATED = (int)1L;
    /**
     * {@snippet lang=c :
     * #define VIPS_ENABLE_DEPRECATED 1
     * }
     */
    public static int VIPS_ENABLE_DEPRECATED() {
        return VIPS_ENABLE_DEPRECATED;
    }
    /**
     * {@snippet lang=c :
     * typedef GObject *GObject_autoptr
     * }
     */
    public static final AddressLayout GObject_autoptr = vips_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GObject_listautoptr
     * }
     */
    public static final AddressLayout GObject_listautoptr = vips_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GObject_slistautoptr
     * }
     */
    public static final AddressLayout GObject_slistautoptr = vips_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GObject_queueautoptr
     * }
     */
    public static final AddressLayout GObject_queueautoptr = vips_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GTypeClass *GTypeClass_autoptr
     * }
     */
    public static final AddressLayout GTypeClass_autoptr = vips_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GTypeClass_listautoptr
     * }
     */
    public static final AddressLayout GTypeClass_listautoptr = vips_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GTypeClass_slistautoptr
     * }
     */
    public static final AddressLayout GTypeClass_slistautoptr = vips_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GTypeClass_queueautoptr
     * }
     */
    public static final AddressLayout GTypeClass_queueautoptr = vips_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GInputStream *GInputStream_autoptr
     * }
     */
    public static final AddressLayout GInputStream_autoptr = vips_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GInputStream_listautoptr
     * }
     */
    public static final AddressLayout GInputStream_listautoptr = vips_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GInputStream_slistautoptr
     * }
     */
    public static final AddressLayout GInputStream_slistautoptr = vips_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GInputStream_queueautoptr
     * }
     */
    public static final AddressLayout GInputStream_queueautoptr = vips_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef unsigned char VipsPel
     * }
     */
    public static final OfByte VipsPel = vips_h.C_CHAR;
    private static final int VIPS_PRECISION_INTEGER = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_PRECISION_INTEGER = 0
     * }
     */
    public static int VIPS_PRECISION_INTEGER() {
        return VIPS_PRECISION_INTEGER;
    }
    private static final int VIPS_PRECISION_FLOAT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_PRECISION_FLOAT = 1
     * }
     */
    public static int VIPS_PRECISION_FLOAT() {
        return VIPS_PRECISION_FLOAT;
    }
    private static final int VIPS_PRECISION_APPROXIMATE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_PRECISION_APPROXIMATE = 2
     * }
     */
    public static int VIPS_PRECISION_APPROXIMATE() {
        return VIPS_PRECISION_APPROXIMATE;
    }
    private static final int VIPS_PRECISION_LAST = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_PRECISION_LAST = 3
     * }
     */
    public static int VIPS_PRECISION_LAST() {
        return VIPS_PRECISION_LAST;
    }

    private static class vips_path_filename7 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_path_filename7");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *vips_path_filename7(const char *path)
     * }
     */
    public static FunctionDescriptor vips_path_filename7$descriptor() {
        return vips_path_filename7.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *vips_path_filename7(const char *path)
     * }
     */
    public static MethodHandle vips_path_filename7$handle() {
        return vips_path_filename7.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *vips_path_filename7(const char *path)
     * }
     */
    public static MemorySegment vips_path_filename7$address() {
        return vips_path_filename7.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *vips_path_filename7(const char *path)
     * }
     */
    public static MemorySegment vips_path_filename7(MemorySegment path) {
        var mh$ = vips_path_filename7.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_path_filename7", path);
            }
            return (MemorySegment)mh$.invokeExact(path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_path_mode7 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_path_mode7");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *vips_path_mode7(const char *path)
     * }
     */
    public static FunctionDescriptor vips_path_mode7$descriptor() {
        return vips_path_mode7.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *vips_path_mode7(const char *path)
     * }
     */
    public static MethodHandle vips_path_mode7$handle() {
        return vips_path_mode7.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *vips_path_mode7(const char *path)
     * }
     */
    public static MemorySegment vips_path_mode7$address() {
        return vips_path_mode7.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *vips_path_mode7(const char *path)
     * }
     */
    public static MemorySegment vips_path_mode7(MemorySegment path) {
        var mh$ = vips_path_mode7.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_path_mode7", path);
            }
            return (MemorySegment)mh$.invokeExact(path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_buf_rewind {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_buf_rewind");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_buf_rewind(VipsBuf *buf)
     * }
     */
    public static FunctionDescriptor vips_buf_rewind$descriptor() {
        return vips_buf_rewind.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_buf_rewind(VipsBuf *buf)
     * }
     */
    public static MethodHandle vips_buf_rewind$handle() {
        return vips_buf_rewind.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_buf_rewind(VipsBuf *buf)
     * }
     */
    public static MemorySegment vips_buf_rewind$address() {
        return vips_buf_rewind.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_buf_rewind(VipsBuf *buf)
     * }
     */
    public static void vips_buf_rewind(MemorySegment buf) {
        var mh$ = vips_buf_rewind.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_buf_rewind", buf);
            }
            mh$.invokeExact(buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_buf_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_buf_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_buf_destroy(VipsBuf *buf)
     * }
     */
    public static FunctionDescriptor vips_buf_destroy$descriptor() {
        return vips_buf_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_buf_destroy(VipsBuf *buf)
     * }
     */
    public static MethodHandle vips_buf_destroy$handle() {
        return vips_buf_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_buf_destroy(VipsBuf *buf)
     * }
     */
    public static MemorySegment vips_buf_destroy$address() {
        return vips_buf_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_buf_destroy(VipsBuf *buf)
     * }
     */
    public static void vips_buf_destroy(MemorySegment buf) {
        var mh$ = vips_buf_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_buf_destroy", buf);
            }
            mh$.invokeExact(buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_buf_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_buf_init");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_buf_init(VipsBuf *buf)
     * }
     */
    public static FunctionDescriptor vips_buf_init$descriptor() {
        return vips_buf_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_buf_init(VipsBuf *buf)
     * }
     */
    public static MethodHandle vips_buf_init$handle() {
        return vips_buf_init.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_buf_init(VipsBuf *buf)
     * }
     */
    public static MemorySegment vips_buf_init$address() {
        return vips_buf_init.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_buf_init(VipsBuf *buf)
     * }
     */
    public static void vips_buf_init(MemorySegment buf) {
        var mh$ = vips_buf_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_buf_init", buf);
            }
            mh$.invokeExact(buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_buf_set_static {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_buf_set_static");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_buf_set_static(VipsBuf *buf, char *base, int mx)
     * }
     */
    public static FunctionDescriptor vips_buf_set_static$descriptor() {
        return vips_buf_set_static.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_buf_set_static(VipsBuf *buf, char *base, int mx)
     * }
     */
    public static MethodHandle vips_buf_set_static$handle() {
        return vips_buf_set_static.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_buf_set_static(VipsBuf *buf, char *base, int mx)
     * }
     */
    public static MemorySegment vips_buf_set_static$address() {
        return vips_buf_set_static.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_buf_set_static(VipsBuf *buf, char *base, int mx)
     * }
     */
    public static void vips_buf_set_static(MemorySegment buf, MemorySegment base, int mx) {
        var mh$ = vips_buf_set_static.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_buf_set_static", buf, base, mx);
            }
            mh$.invokeExact(buf, base, mx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_buf_set_dynamic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_buf_set_dynamic");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_buf_set_dynamic(VipsBuf *buf, int mx)
     * }
     */
    public static FunctionDescriptor vips_buf_set_dynamic$descriptor() {
        return vips_buf_set_dynamic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_buf_set_dynamic(VipsBuf *buf, int mx)
     * }
     */
    public static MethodHandle vips_buf_set_dynamic$handle() {
        return vips_buf_set_dynamic.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_buf_set_dynamic(VipsBuf *buf, int mx)
     * }
     */
    public static MemorySegment vips_buf_set_dynamic$address() {
        return vips_buf_set_dynamic.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_buf_set_dynamic(VipsBuf *buf, int mx)
     * }
     */
    public static void vips_buf_set_dynamic(MemorySegment buf, int mx) {
        var mh$ = vips_buf_set_dynamic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_buf_set_dynamic", buf, mx);
            }
            mh$.invokeExact(buf, mx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_buf_init_static {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_buf_init_static");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_buf_init_static(VipsBuf *buf, char *base, int mx)
     * }
     */
    public static FunctionDescriptor vips_buf_init_static$descriptor() {
        return vips_buf_init_static.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_buf_init_static(VipsBuf *buf, char *base, int mx)
     * }
     */
    public static MethodHandle vips_buf_init_static$handle() {
        return vips_buf_init_static.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_buf_init_static(VipsBuf *buf, char *base, int mx)
     * }
     */
    public static MemorySegment vips_buf_init_static$address() {
        return vips_buf_init_static.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_buf_init_static(VipsBuf *buf, char *base, int mx)
     * }
     */
    public static void vips_buf_init_static(MemorySegment buf, MemorySegment base, int mx) {
        var mh$ = vips_buf_init_static.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_buf_init_static", buf, base, mx);
            }
            mh$.invokeExact(buf, base, mx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_buf_init_dynamic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_buf_init_dynamic");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_buf_init_dynamic(VipsBuf *buf, int mx)
     * }
     */
    public static FunctionDescriptor vips_buf_init_dynamic$descriptor() {
        return vips_buf_init_dynamic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_buf_init_dynamic(VipsBuf *buf, int mx)
     * }
     */
    public static MethodHandle vips_buf_init_dynamic$handle() {
        return vips_buf_init_dynamic.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_buf_init_dynamic(VipsBuf *buf, int mx)
     * }
     */
    public static MemorySegment vips_buf_init_dynamic$address() {
        return vips_buf_init_dynamic.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_buf_init_dynamic(VipsBuf *buf, int mx)
     * }
     */
    public static void vips_buf_init_dynamic(MemorySegment buf, int mx) {
        var mh$ = vips_buf_init_dynamic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_buf_init_dynamic", buf, mx);
            }
            mh$.invokeExact(buf, mx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_buf_appendns {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_buf_appendns");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_buf_appendns(VipsBuf *buf, const char *str, int sz)
     * }
     */
    public static FunctionDescriptor vips_buf_appendns$descriptor() {
        return vips_buf_appendns.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_buf_appendns(VipsBuf *buf, const char *str, int sz)
     * }
     */
    public static MethodHandle vips_buf_appendns$handle() {
        return vips_buf_appendns.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_buf_appendns(VipsBuf *buf, const char *str, int sz)
     * }
     */
    public static MemorySegment vips_buf_appendns$address() {
        return vips_buf_appendns.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_buf_appendns(VipsBuf *buf, const char *str, int sz)
     * }
     */
    public static int vips_buf_appendns(MemorySegment buf, MemorySegment str, int sz) {
        var mh$ = vips_buf_appendns.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_buf_appendns", buf, str, sz);
            }
            return (int)mh$.invokeExact(buf, str, sz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_buf_appends {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_buf_appends");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_buf_appends(VipsBuf *buf, const char *str)
     * }
     */
    public static FunctionDescriptor vips_buf_appends$descriptor() {
        return vips_buf_appends.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_buf_appends(VipsBuf *buf, const char *str)
     * }
     */
    public static MethodHandle vips_buf_appends$handle() {
        return vips_buf_appends.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_buf_appends(VipsBuf *buf, const char *str)
     * }
     */
    public static MemorySegment vips_buf_appends$address() {
        return vips_buf_appends.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_buf_appends(VipsBuf *buf, const char *str)
     * }
     */
    public static int vips_buf_appends(MemorySegment buf, MemorySegment str) {
        var mh$ = vips_buf_appends.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_buf_appends", buf, str);
            }
            return (int)mh$.invokeExact(buf, str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern gboolean vips_buf_appendf(VipsBuf *buf, const char *fmt, ...)
     * }
     */
    public static class vips_buf_appendf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_buf_appendf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_buf_appendf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern gboolean vips_buf_appendf(VipsBuf *buf, const char *fmt, ...)
         * }
         */
        public static vips_buf_appendf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_buf_appendf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment buf, MemorySegment fmt, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_buf_appendf", buf, fmt, x2);
                }
                return (int)spreader.invokeExact(buf, fmt, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class vips_buf_vappendf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_buf_vappendf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_buf_vappendf(VipsBuf *buf, const char *fmt, va_list ap)
     * }
     */
    public static FunctionDescriptor vips_buf_vappendf$descriptor() {
        return vips_buf_vappendf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_buf_vappendf(VipsBuf *buf, const char *fmt, va_list ap)
     * }
     */
    public static MethodHandle vips_buf_vappendf$handle() {
        return vips_buf_vappendf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_buf_vappendf(VipsBuf *buf, const char *fmt, va_list ap)
     * }
     */
    public static MemorySegment vips_buf_vappendf$address() {
        return vips_buf_vappendf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_buf_vappendf(VipsBuf *buf, const char *fmt, va_list ap)
     * }
     */
    public static int vips_buf_vappendf(MemorySegment buf, MemorySegment fmt, MemorySegment ap) {
        var mh$ = vips_buf_vappendf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_buf_vappendf", buf, fmt, ap);
            }
            return (int)mh$.invokeExact(buf, fmt, ap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_buf_appendc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_CHAR
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_buf_appendc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_buf_appendc(VipsBuf *buf, char ch)
     * }
     */
    public static FunctionDescriptor vips_buf_appendc$descriptor() {
        return vips_buf_appendc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_buf_appendc(VipsBuf *buf, char ch)
     * }
     */
    public static MethodHandle vips_buf_appendc$handle() {
        return vips_buf_appendc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_buf_appendc(VipsBuf *buf, char ch)
     * }
     */
    public static MemorySegment vips_buf_appendc$address() {
        return vips_buf_appendc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_buf_appendc(VipsBuf *buf, char ch)
     * }
     */
    public static int vips_buf_appendc(MemorySegment buf, byte ch) {
        var mh$ = vips_buf_appendc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_buf_appendc", buf, ch);
            }
            return (int)mh$.invokeExact(buf, ch);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_buf_appendsc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_buf_appendsc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_buf_appendsc(VipsBuf *buf, gboolean quote, const char *str)
     * }
     */
    public static FunctionDescriptor vips_buf_appendsc$descriptor() {
        return vips_buf_appendsc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_buf_appendsc(VipsBuf *buf, gboolean quote, const char *str)
     * }
     */
    public static MethodHandle vips_buf_appendsc$handle() {
        return vips_buf_appendsc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_buf_appendsc(VipsBuf *buf, gboolean quote, const char *str)
     * }
     */
    public static MemorySegment vips_buf_appendsc$address() {
        return vips_buf_appendsc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_buf_appendsc(VipsBuf *buf, gboolean quote, const char *str)
     * }
     */
    public static int vips_buf_appendsc(MemorySegment buf, int quote, MemorySegment str) {
        var mh$ = vips_buf_appendsc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_buf_appendsc", buf, quote, str);
            }
            return (int)mh$.invokeExact(buf, quote, str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_buf_appendgv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_buf_appendgv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_buf_appendgv(VipsBuf *buf, GValue *value)
     * }
     */
    public static FunctionDescriptor vips_buf_appendgv$descriptor() {
        return vips_buf_appendgv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_buf_appendgv(VipsBuf *buf, GValue *value)
     * }
     */
    public static MethodHandle vips_buf_appendgv$handle() {
        return vips_buf_appendgv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_buf_appendgv(VipsBuf *buf, GValue *value)
     * }
     */
    public static MemorySegment vips_buf_appendgv$address() {
        return vips_buf_appendgv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_buf_appendgv(VipsBuf *buf, GValue *value)
     * }
     */
    public static int vips_buf_appendgv(MemorySegment buf, MemorySegment value) {
        var mh$ = vips_buf_appendgv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_buf_appendgv", buf, value);
            }
            return (int)mh$.invokeExact(buf, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_buf_append_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_LONG
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_buf_append_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_buf_append_size(VipsBuf *buf, size_t n)
     * }
     */
    public static FunctionDescriptor vips_buf_append_size$descriptor() {
        return vips_buf_append_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_buf_append_size(VipsBuf *buf, size_t n)
     * }
     */
    public static MethodHandle vips_buf_append_size$handle() {
        return vips_buf_append_size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_buf_append_size(VipsBuf *buf, size_t n)
     * }
     */
    public static MemorySegment vips_buf_append_size$address() {
        return vips_buf_append_size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_buf_append_size(VipsBuf *buf, size_t n)
     * }
     */
    public static int vips_buf_append_size(MemorySegment buf, long n) {
        var mh$ = vips_buf_append_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_buf_append_size", buf, n);
            }
            return (int)mh$.invokeExact(buf, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_buf_removec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_CHAR
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_buf_removec");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_buf_removec(VipsBuf *buf, char ch)
     * }
     */
    public static FunctionDescriptor vips_buf_removec$descriptor() {
        return vips_buf_removec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_buf_removec(VipsBuf *buf, char ch)
     * }
     */
    public static MethodHandle vips_buf_removec$handle() {
        return vips_buf_removec.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_buf_removec(VipsBuf *buf, char ch)
     * }
     */
    public static MemorySegment vips_buf_removec$address() {
        return vips_buf_removec.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_buf_removec(VipsBuf *buf, char ch)
     * }
     */
    public static int vips_buf_removec(MemorySegment buf, byte ch) {
        var mh$ = vips_buf_removec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_buf_removec", buf, ch);
            }
            return (int)mh$.invokeExact(buf, ch);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_buf_change {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_buf_change");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_buf_change(VipsBuf *buf, const char *o, const char *n)
     * }
     */
    public static FunctionDescriptor vips_buf_change$descriptor() {
        return vips_buf_change.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_buf_change(VipsBuf *buf, const char *o, const char *n)
     * }
     */
    public static MethodHandle vips_buf_change$handle() {
        return vips_buf_change.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_buf_change(VipsBuf *buf, const char *o, const char *n)
     * }
     */
    public static MemorySegment vips_buf_change$address() {
        return vips_buf_change.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_buf_change(VipsBuf *buf, const char *o, const char *n)
     * }
     */
    public static int vips_buf_change(MemorySegment buf, MemorySegment o, MemorySegment n) {
        var mh$ = vips_buf_change.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_buf_change", buf, o, n);
            }
            return (int)mh$.invokeExact(buf, o, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_buf_is_empty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_buf_is_empty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_buf_is_empty(VipsBuf *buf)
     * }
     */
    public static FunctionDescriptor vips_buf_is_empty$descriptor() {
        return vips_buf_is_empty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_buf_is_empty(VipsBuf *buf)
     * }
     */
    public static MethodHandle vips_buf_is_empty$handle() {
        return vips_buf_is_empty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_buf_is_empty(VipsBuf *buf)
     * }
     */
    public static MemorySegment vips_buf_is_empty$address() {
        return vips_buf_is_empty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_buf_is_empty(VipsBuf *buf)
     * }
     */
    public static int vips_buf_is_empty(MemorySegment buf) {
        var mh$ = vips_buf_is_empty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_buf_is_empty", buf);
            }
            return (int)mh$.invokeExact(buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_buf_is_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_buf_is_full");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_buf_is_full(VipsBuf *buf)
     * }
     */
    public static FunctionDescriptor vips_buf_is_full$descriptor() {
        return vips_buf_is_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_buf_is_full(VipsBuf *buf)
     * }
     */
    public static MethodHandle vips_buf_is_full$handle() {
        return vips_buf_is_full.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_buf_is_full(VipsBuf *buf)
     * }
     */
    public static MemorySegment vips_buf_is_full$address() {
        return vips_buf_is_full.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_buf_is_full(VipsBuf *buf)
     * }
     */
    public static int vips_buf_is_full(MemorySegment buf) {
        var mh$ = vips_buf_is_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_buf_is_full", buf);
            }
            return (int)mh$.invokeExact(buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_buf_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_buf_all");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *vips_buf_all(VipsBuf *buf)
     * }
     */
    public static FunctionDescriptor vips_buf_all$descriptor() {
        return vips_buf_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *vips_buf_all(VipsBuf *buf)
     * }
     */
    public static MethodHandle vips_buf_all$handle() {
        return vips_buf_all.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *vips_buf_all(VipsBuf *buf)
     * }
     */
    public static MemorySegment vips_buf_all$address() {
        return vips_buf_all.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *vips_buf_all(VipsBuf *buf)
     * }
     */
    public static MemorySegment vips_buf_all(MemorySegment buf) {
        var mh$ = vips_buf_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_buf_all", buf);
            }
            return (MemorySegment)mh$.invokeExact(buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_buf_firstline {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_buf_firstline");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *vips_buf_firstline(VipsBuf *buf)
     * }
     */
    public static FunctionDescriptor vips_buf_firstline$descriptor() {
        return vips_buf_firstline.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *vips_buf_firstline(VipsBuf *buf)
     * }
     */
    public static MethodHandle vips_buf_firstline$handle() {
        return vips_buf_firstline.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *vips_buf_firstline(VipsBuf *buf)
     * }
     */
    public static MemorySegment vips_buf_firstline$address() {
        return vips_buf_firstline.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *vips_buf_firstline(VipsBuf *buf)
     * }
     */
    public static MemorySegment vips_buf_firstline(MemorySegment buf) {
        var mh$ = vips_buf_firstline.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_buf_firstline", buf);
            }
            return (MemorySegment)mh$.invokeExact(buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_buf_appendg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_buf_appendg");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_buf_appendg(VipsBuf *buf, double g)
     * }
     */
    public static FunctionDescriptor vips_buf_appendg$descriptor() {
        return vips_buf_appendg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_buf_appendg(VipsBuf *buf, double g)
     * }
     */
    public static MethodHandle vips_buf_appendg$handle() {
        return vips_buf_appendg.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_buf_appendg(VipsBuf *buf, double g)
     * }
     */
    public static MemorySegment vips_buf_appendg$address() {
        return vips_buf_appendg.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_buf_appendg(VipsBuf *buf, double g)
     * }
     */
    public static int vips_buf_appendg(MemorySegment buf, double g) {
        var mh$ = vips_buf_appendg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_buf_appendg", buf, g);
            }
            return (int)mh$.invokeExact(buf, g);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_buf_appendd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_buf_appendd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_buf_appendd(VipsBuf *buf, int d)
     * }
     */
    public static FunctionDescriptor vips_buf_appendd$descriptor() {
        return vips_buf_appendd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_buf_appendd(VipsBuf *buf, int d)
     * }
     */
    public static MethodHandle vips_buf_appendd$handle() {
        return vips_buf_appendd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_buf_appendd(VipsBuf *buf, int d)
     * }
     */
    public static MemorySegment vips_buf_appendd$address() {
        return vips_buf_appendd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_buf_appendd(VipsBuf *buf, int d)
     * }
     */
    public static int vips_buf_appendd(MemorySegment buf, int d) {
        var mh$ = vips_buf_appendd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_buf_appendd", buf, d);
            }
            return (int)mh$.invokeExact(buf, d);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_buf_len {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_buf_len");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_buf_len(VipsBuf *buf)
     * }
     */
    public static FunctionDescriptor vips_buf_len$descriptor() {
        return vips_buf_len.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_buf_len(VipsBuf *buf)
     * }
     */
    public static MethodHandle vips_buf_len$handle() {
        return vips_buf_len.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_buf_len(VipsBuf *buf)
     * }
     */
    public static MemorySegment vips_buf_len$address() {
        return vips_buf_len.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_buf_len(VipsBuf *buf)
     * }
     */
    public static int vips_buf_len(MemorySegment buf) {
        var mh$ = vips_buf_len.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_buf_len", buf);
            }
            return (int)mh$.invokeExact(buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_dbuf_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_dbuf_init");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_dbuf_init(VipsDbuf *dbuf)
     * }
     */
    public static FunctionDescriptor vips_dbuf_init$descriptor() {
        return vips_dbuf_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_dbuf_init(VipsDbuf *dbuf)
     * }
     */
    public static MethodHandle vips_dbuf_init$handle() {
        return vips_dbuf_init.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_dbuf_init(VipsDbuf *dbuf)
     * }
     */
    public static MemorySegment vips_dbuf_init$address() {
        return vips_dbuf_init.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_dbuf_init(VipsDbuf *dbuf)
     * }
     */
    public static void vips_dbuf_init(MemorySegment dbuf) {
        var mh$ = vips_dbuf_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_dbuf_init", dbuf);
            }
            mh$.invokeExact(dbuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_dbuf_minimum_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_LONG
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_dbuf_minimum_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_dbuf_minimum_size(VipsDbuf *dbuf, size_t size)
     * }
     */
    public static FunctionDescriptor vips_dbuf_minimum_size$descriptor() {
        return vips_dbuf_minimum_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_dbuf_minimum_size(VipsDbuf *dbuf, size_t size)
     * }
     */
    public static MethodHandle vips_dbuf_minimum_size$handle() {
        return vips_dbuf_minimum_size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_dbuf_minimum_size(VipsDbuf *dbuf, size_t size)
     * }
     */
    public static MemorySegment vips_dbuf_minimum_size$address() {
        return vips_dbuf_minimum_size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_dbuf_minimum_size(VipsDbuf *dbuf, size_t size)
     * }
     */
    public static int vips_dbuf_minimum_size(MemorySegment dbuf, long size) {
        var mh$ = vips_dbuf_minimum_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_dbuf_minimum_size", dbuf, size);
            }
            return (int)mh$.invokeExact(dbuf, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_dbuf_allocate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_LONG
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_dbuf_allocate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_dbuf_allocate(VipsDbuf *dbuf, size_t size)
     * }
     */
    public static FunctionDescriptor vips_dbuf_allocate$descriptor() {
        return vips_dbuf_allocate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_dbuf_allocate(VipsDbuf *dbuf, size_t size)
     * }
     */
    public static MethodHandle vips_dbuf_allocate$handle() {
        return vips_dbuf_allocate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_dbuf_allocate(VipsDbuf *dbuf, size_t size)
     * }
     */
    public static MemorySegment vips_dbuf_allocate$address() {
        return vips_dbuf_allocate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_dbuf_allocate(VipsDbuf *dbuf, size_t size)
     * }
     */
    public static int vips_dbuf_allocate(MemorySegment dbuf, long size) {
        var mh$ = vips_dbuf_allocate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_dbuf_allocate", dbuf, size);
            }
            return (int)mh$.invokeExact(dbuf, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_dbuf_read {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_LONG
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_dbuf_read");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t vips_dbuf_read(VipsDbuf *dbuf, unsigned char *data, size_t size)
     * }
     */
    public static FunctionDescriptor vips_dbuf_read$descriptor() {
        return vips_dbuf_read.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t vips_dbuf_read(VipsDbuf *dbuf, unsigned char *data, size_t size)
     * }
     */
    public static MethodHandle vips_dbuf_read$handle() {
        return vips_dbuf_read.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern size_t vips_dbuf_read(VipsDbuf *dbuf, unsigned char *data, size_t size)
     * }
     */
    public static MemorySegment vips_dbuf_read$address() {
        return vips_dbuf_read.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern size_t vips_dbuf_read(VipsDbuf *dbuf, unsigned char *data, size_t size)
     * }
     */
    public static long vips_dbuf_read(MemorySegment dbuf, MemorySegment data, long size) {
        var mh$ = vips_dbuf_read.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_dbuf_read", dbuf, data, size);
            }
            return (long)mh$.invokeExact(dbuf, data, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_dbuf_get_write {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_dbuf_get_write");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned char *vips_dbuf_get_write(VipsDbuf *dbuf, size_t *size)
     * }
     */
    public static FunctionDescriptor vips_dbuf_get_write$descriptor() {
        return vips_dbuf_get_write.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned char *vips_dbuf_get_write(VipsDbuf *dbuf, size_t *size)
     * }
     */
    public static MethodHandle vips_dbuf_get_write$handle() {
        return vips_dbuf_get_write.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned char *vips_dbuf_get_write(VipsDbuf *dbuf, size_t *size)
     * }
     */
    public static MemorySegment vips_dbuf_get_write$address() {
        return vips_dbuf_get_write.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned char *vips_dbuf_get_write(VipsDbuf *dbuf, size_t *size)
     * }
     */
    public static MemorySegment vips_dbuf_get_write(MemorySegment dbuf, MemorySegment size) {
        var mh$ = vips_dbuf_get_write.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_dbuf_get_write", dbuf, size);
            }
            return (MemorySegment)mh$.invokeExact(dbuf, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_dbuf_write {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_LONG
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_dbuf_write");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_dbuf_write(VipsDbuf *dbuf, const unsigned char *data, size_t size)
     * }
     */
    public static FunctionDescriptor vips_dbuf_write$descriptor() {
        return vips_dbuf_write.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_dbuf_write(VipsDbuf *dbuf, const unsigned char *data, size_t size)
     * }
     */
    public static MethodHandle vips_dbuf_write$handle() {
        return vips_dbuf_write.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_dbuf_write(VipsDbuf *dbuf, const unsigned char *data, size_t size)
     * }
     */
    public static MemorySegment vips_dbuf_write$address() {
        return vips_dbuf_write.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_dbuf_write(VipsDbuf *dbuf, const unsigned char *data, size_t size)
     * }
     */
    public static int vips_dbuf_write(MemorySegment dbuf, MemorySegment data, long size) {
        var mh$ = vips_dbuf_write.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_dbuf_write", dbuf, data, size);
            }
            return (int)mh$.invokeExact(dbuf, data, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern gboolean vips_dbuf_writef(VipsDbuf *dbuf, const char *fmt, ...)
     * }
     */
    public static class vips_dbuf_writef {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_dbuf_writef");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_dbuf_writef(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern gboolean vips_dbuf_writef(VipsDbuf *dbuf, const char *fmt, ...)
         * }
         */
        public static vips_dbuf_writef makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_dbuf_writef(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment dbuf, MemorySegment fmt, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_dbuf_writef", dbuf, fmt, x2);
                }
                return (int)spreader.invokeExact(dbuf, fmt, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class vips_dbuf_write_amp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_dbuf_write_amp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_dbuf_write_amp(VipsDbuf *dbuf, const char *str)
     * }
     */
    public static FunctionDescriptor vips_dbuf_write_amp$descriptor() {
        return vips_dbuf_write_amp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_dbuf_write_amp(VipsDbuf *dbuf, const char *str)
     * }
     */
    public static MethodHandle vips_dbuf_write_amp$handle() {
        return vips_dbuf_write_amp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_dbuf_write_amp(VipsDbuf *dbuf, const char *str)
     * }
     */
    public static MemorySegment vips_dbuf_write_amp$address() {
        return vips_dbuf_write_amp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_dbuf_write_amp(VipsDbuf *dbuf, const char *str)
     * }
     */
    public static int vips_dbuf_write_amp(MemorySegment dbuf, MemorySegment str) {
        var mh$ = vips_dbuf_write_amp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_dbuf_write_amp", dbuf, str);
            }
            return (int)mh$.invokeExact(dbuf, str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_dbuf_reset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_dbuf_reset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_dbuf_reset(VipsDbuf *dbuf)
     * }
     */
    public static FunctionDescriptor vips_dbuf_reset$descriptor() {
        return vips_dbuf_reset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_dbuf_reset(VipsDbuf *dbuf)
     * }
     */
    public static MethodHandle vips_dbuf_reset$handle() {
        return vips_dbuf_reset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_dbuf_reset(VipsDbuf *dbuf)
     * }
     */
    public static MemorySegment vips_dbuf_reset$address() {
        return vips_dbuf_reset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_dbuf_reset(VipsDbuf *dbuf)
     * }
     */
    public static void vips_dbuf_reset(MemorySegment dbuf) {
        var mh$ = vips_dbuf_reset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_dbuf_reset", dbuf);
            }
            mh$.invokeExact(dbuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_dbuf_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_dbuf_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_dbuf_destroy(VipsDbuf *dbuf)
     * }
     */
    public static FunctionDescriptor vips_dbuf_destroy$descriptor() {
        return vips_dbuf_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_dbuf_destroy(VipsDbuf *dbuf)
     * }
     */
    public static MethodHandle vips_dbuf_destroy$handle() {
        return vips_dbuf_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_dbuf_destroy(VipsDbuf *dbuf)
     * }
     */
    public static MemorySegment vips_dbuf_destroy$address() {
        return vips_dbuf_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_dbuf_destroy(VipsDbuf *dbuf)
     * }
     */
    public static void vips_dbuf_destroy(MemorySegment dbuf) {
        var mh$ = vips_dbuf_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_dbuf_destroy", dbuf);
            }
            mh$.invokeExact(dbuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_dbuf_seek {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_LONG_LONG,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_dbuf_seek");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_dbuf_seek(VipsDbuf *dbuf, off_t offset, int whence)
     * }
     */
    public static FunctionDescriptor vips_dbuf_seek$descriptor() {
        return vips_dbuf_seek.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_dbuf_seek(VipsDbuf *dbuf, off_t offset, int whence)
     * }
     */
    public static MethodHandle vips_dbuf_seek$handle() {
        return vips_dbuf_seek.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_dbuf_seek(VipsDbuf *dbuf, off_t offset, int whence)
     * }
     */
    public static MemorySegment vips_dbuf_seek$address() {
        return vips_dbuf_seek.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_dbuf_seek(VipsDbuf *dbuf, off_t offset, int whence)
     * }
     */
    public static int vips_dbuf_seek(MemorySegment dbuf, long offset, int whence) {
        var mh$ = vips_dbuf_seek.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_dbuf_seek", dbuf, offset, whence);
            }
            return (int)mh$.invokeExact(dbuf, offset, whence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_dbuf_truncate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_dbuf_truncate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_dbuf_truncate(VipsDbuf *dbuf)
     * }
     */
    public static FunctionDescriptor vips_dbuf_truncate$descriptor() {
        return vips_dbuf_truncate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_dbuf_truncate(VipsDbuf *dbuf)
     * }
     */
    public static MethodHandle vips_dbuf_truncate$handle() {
        return vips_dbuf_truncate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_dbuf_truncate(VipsDbuf *dbuf)
     * }
     */
    public static MemorySegment vips_dbuf_truncate$address() {
        return vips_dbuf_truncate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_dbuf_truncate(VipsDbuf *dbuf)
     * }
     */
    public static void vips_dbuf_truncate(MemorySegment dbuf) {
        var mh$ = vips_dbuf_truncate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_dbuf_truncate", dbuf);
            }
            mh$.invokeExact(dbuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_dbuf_tell {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG_LONG,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_dbuf_tell");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern off_t vips_dbuf_tell(VipsDbuf *dbuf)
     * }
     */
    public static FunctionDescriptor vips_dbuf_tell$descriptor() {
        return vips_dbuf_tell.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern off_t vips_dbuf_tell(VipsDbuf *dbuf)
     * }
     */
    public static MethodHandle vips_dbuf_tell$handle() {
        return vips_dbuf_tell.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern off_t vips_dbuf_tell(VipsDbuf *dbuf)
     * }
     */
    public static MemorySegment vips_dbuf_tell$address() {
        return vips_dbuf_tell.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern off_t vips_dbuf_tell(VipsDbuf *dbuf)
     * }
     */
    public static long vips_dbuf_tell(MemorySegment dbuf) {
        var mh$ = vips_dbuf_tell.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_dbuf_tell", dbuf);
            }
            return (long)mh$.invokeExact(dbuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_dbuf_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_dbuf_string");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned char *vips_dbuf_string(VipsDbuf *dbuf, size_t *size)
     * }
     */
    public static FunctionDescriptor vips_dbuf_string$descriptor() {
        return vips_dbuf_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned char *vips_dbuf_string(VipsDbuf *dbuf, size_t *size)
     * }
     */
    public static MethodHandle vips_dbuf_string$handle() {
        return vips_dbuf_string.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned char *vips_dbuf_string(VipsDbuf *dbuf, size_t *size)
     * }
     */
    public static MemorySegment vips_dbuf_string$address() {
        return vips_dbuf_string.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned char *vips_dbuf_string(VipsDbuf *dbuf, size_t *size)
     * }
     */
    public static MemorySegment vips_dbuf_string(MemorySegment dbuf, MemorySegment size) {
        var mh$ = vips_dbuf_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_dbuf_string", dbuf, size);
            }
            return (MemorySegment)mh$.invokeExact(dbuf, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_dbuf_steal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_dbuf_steal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned char *vips_dbuf_steal(VipsDbuf *dbuf, size_t *size)
     * }
     */
    public static FunctionDescriptor vips_dbuf_steal$descriptor() {
        return vips_dbuf_steal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned char *vips_dbuf_steal(VipsDbuf *dbuf, size_t *size)
     * }
     */
    public static MethodHandle vips_dbuf_steal$handle() {
        return vips_dbuf_steal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned char *vips_dbuf_steal(VipsDbuf *dbuf, size_t *size)
     * }
     */
    public static MemorySegment vips_dbuf_steal$address() {
        return vips_dbuf_steal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned char *vips_dbuf_steal(VipsDbuf *dbuf, size_t *size)
     * }
     */
    public static MemorySegment vips_dbuf_steal(MemorySegment dbuf, MemorySegment size) {
        var mh$ = vips_dbuf_steal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_dbuf_steal", dbuf, size);
            }
            return (MemorySegment)mh$.invokeExact(dbuf, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_enum_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_LONG,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_enum_string");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *vips_enum_string(GType enm, int value)
     * }
     */
    public static FunctionDescriptor vips_enum_string$descriptor() {
        return vips_enum_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *vips_enum_string(GType enm, int value)
     * }
     */
    public static MethodHandle vips_enum_string$handle() {
        return vips_enum_string.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *vips_enum_string(GType enm, int value)
     * }
     */
    public static MemorySegment vips_enum_string$address() {
        return vips_enum_string.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *vips_enum_string(GType enm, int value)
     * }
     */
    public static MemorySegment vips_enum_string(long enm, int value) {
        var mh$ = vips_enum_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_enum_string", enm, value);
            }
            return (MemorySegment)mh$.invokeExact(enm, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_enum_nick {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_LONG,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_enum_nick");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *vips_enum_nick(GType enm, int value)
     * }
     */
    public static FunctionDescriptor vips_enum_nick$descriptor() {
        return vips_enum_nick.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *vips_enum_nick(GType enm, int value)
     * }
     */
    public static MethodHandle vips_enum_nick$handle() {
        return vips_enum_nick.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *vips_enum_nick(GType enm, int value)
     * }
     */
    public static MemorySegment vips_enum_nick$address() {
        return vips_enum_nick.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *vips_enum_nick(GType enm, int value)
     * }
     */
    public static MemorySegment vips_enum_nick(long enm, int value) {
        var mh$ = vips_enum_nick.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_enum_nick", enm, value);
            }
            return (MemorySegment)mh$.invokeExact(enm, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_enum_from_nick {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_LONG,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_enum_from_nick");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_enum_from_nick(const char *domain, GType type, const char *str)
     * }
     */
    public static FunctionDescriptor vips_enum_from_nick$descriptor() {
        return vips_enum_from_nick.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_enum_from_nick(const char *domain, GType type, const char *str)
     * }
     */
    public static MethodHandle vips_enum_from_nick$handle() {
        return vips_enum_from_nick.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_enum_from_nick(const char *domain, GType type, const char *str)
     * }
     */
    public static MemorySegment vips_enum_from_nick$address() {
        return vips_enum_from_nick.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_enum_from_nick(const char *domain, GType type, const char *str)
     * }
     */
    public static int vips_enum_from_nick(MemorySegment domain, long type, MemorySegment str) {
        var mh$ = vips_enum_from_nick.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_enum_from_nick", domain, type, str);
            }
            return (int)mh$.invokeExact(domain, type, str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_flags_from_nick {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_LONG,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_flags_from_nick");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_flags_from_nick(const char *domain, GType type, const char *nick)
     * }
     */
    public static FunctionDescriptor vips_flags_from_nick$descriptor() {
        return vips_flags_from_nick.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_flags_from_nick(const char *domain, GType type, const char *nick)
     * }
     */
    public static MethodHandle vips_flags_from_nick$handle() {
        return vips_flags_from_nick.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_flags_from_nick(const char *domain, GType type, const char *nick)
     * }
     */
    public static MemorySegment vips_flags_from_nick$address() {
        return vips_flags_from_nick.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_flags_from_nick(const char *domain, GType type, const char *nick)
     * }
     */
    public static int vips_flags_from_nick(MemorySegment domain, long type, MemorySegment nick) {
        var mh$ = vips_flags_from_nick.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_flags_from_nick", domain, type, nick);
            }
            return (int)mh$.invokeExact(domain, type, nick);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_slist_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_slist_equal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_slist_equal(GSList *l1, GSList *l2)
     * }
     */
    public static FunctionDescriptor vips_slist_equal$descriptor() {
        return vips_slist_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_slist_equal(GSList *l1, GSList *l2)
     * }
     */
    public static MethodHandle vips_slist_equal$handle() {
        return vips_slist_equal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_slist_equal(GSList *l1, GSList *l2)
     * }
     */
    public static MemorySegment vips_slist_equal$address() {
        return vips_slist_equal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_slist_equal(GSList *l1, GSList *l2)
     * }
     */
    public static int vips_slist_equal(MemorySegment l1, MemorySegment l2) {
        var mh$ = vips_slist_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_slist_equal", l1, l2);
            }
            return (int)mh$.invokeExact(l1, l2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_slist_map2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_slist_map2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *vips_slist_map2(GSList *list, VipsSListMap2Fn fn, void *a, void *b)
     * }
     */
    public static FunctionDescriptor vips_slist_map2$descriptor() {
        return vips_slist_map2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *vips_slist_map2(GSList *list, VipsSListMap2Fn fn, void *a, void *b)
     * }
     */
    public static MethodHandle vips_slist_map2$handle() {
        return vips_slist_map2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *vips_slist_map2(GSList *list, VipsSListMap2Fn fn, void *a, void *b)
     * }
     */
    public static MemorySegment vips_slist_map2$address() {
        return vips_slist_map2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *vips_slist_map2(GSList *list, VipsSListMap2Fn fn, void *a, void *b)
     * }
     */
    public static MemorySegment vips_slist_map2(MemorySegment list, MemorySegment fn, MemorySegment a, MemorySegment b) {
        var mh$ = vips_slist_map2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_slist_map2", list, fn, a, b);
            }
            return (MemorySegment)mh$.invokeExact(list, fn, a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_slist_map2_rev {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_slist_map2_rev");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *vips_slist_map2_rev(GSList *list, VipsSListMap2Fn fn, void *a, void *b)
     * }
     */
    public static FunctionDescriptor vips_slist_map2_rev$descriptor() {
        return vips_slist_map2_rev.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *vips_slist_map2_rev(GSList *list, VipsSListMap2Fn fn, void *a, void *b)
     * }
     */
    public static MethodHandle vips_slist_map2_rev$handle() {
        return vips_slist_map2_rev.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *vips_slist_map2_rev(GSList *list, VipsSListMap2Fn fn, void *a, void *b)
     * }
     */
    public static MemorySegment vips_slist_map2_rev$address() {
        return vips_slist_map2_rev.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *vips_slist_map2_rev(GSList *list, VipsSListMap2Fn fn, void *a, void *b)
     * }
     */
    public static MemorySegment vips_slist_map2_rev(MemorySegment list, MemorySegment fn, MemorySegment a, MemorySegment b) {
        var mh$ = vips_slist_map2_rev.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_slist_map2_rev", list, fn, a, b);
            }
            return (MemorySegment)mh$.invokeExact(list, fn, a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_slist_map4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_slist_map4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *vips_slist_map4(GSList *list, VipsSListMap4Fn fn, void *a, void *b, void *c, void *d)
     * }
     */
    public static FunctionDescriptor vips_slist_map4$descriptor() {
        return vips_slist_map4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *vips_slist_map4(GSList *list, VipsSListMap4Fn fn, void *a, void *b, void *c, void *d)
     * }
     */
    public static MethodHandle vips_slist_map4$handle() {
        return vips_slist_map4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *vips_slist_map4(GSList *list, VipsSListMap4Fn fn, void *a, void *b, void *c, void *d)
     * }
     */
    public static MemorySegment vips_slist_map4$address() {
        return vips_slist_map4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *vips_slist_map4(GSList *list, VipsSListMap4Fn fn, void *a, void *b, void *c, void *d)
     * }
     */
    public static MemorySegment vips_slist_map4(MemorySegment list, MemorySegment fn, MemorySegment a, MemorySegment b, MemorySegment c, MemorySegment d) {
        var mh$ = vips_slist_map4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_slist_map4", list, fn, a, b, c, d);
            }
            return (MemorySegment)mh$.invokeExact(list, fn, a, b, c, d);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_slist_fold2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_slist_fold2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *vips_slist_fold2(GSList *list, void *start, VipsSListFold2Fn fn, void *a, void *b)
     * }
     */
    public static FunctionDescriptor vips_slist_fold2$descriptor() {
        return vips_slist_fold2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *vips_slist_fold2(GSList *list, void *start, VipsSListFold2Fn fn, void *a, void *b)
     * }
     */
    public static MethodHandle vips_slist_fold2$handle() {
        return vips_slist_fold2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *vips_slist_fold2(GSList *list, void *start, VipsSListFold2Fn fn, void *a, void *b)
     * }
     */
    public static MemorySegment vips_slist_fold2$address() {
        return vips_slist_fold2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *vips_slist_fold2(GSList *list, void *start, VipsSListFold2Fn fn, void *a, void *b)
     * }
     */
    public static MemorySegment vips_slist_fold2(MemorySegment list, MemorySegment start, MemorySegment fn, MemorySegment a, MemorySegment b) {
        var mh$ = vips_slist_fold2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_slist_fold2", list, start, fn, a, b);
            }
            return (MemorySegment)mh$.invokeExact(list, start, fn, a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_slist_filter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_slist_filter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *vips_slist_filter(GSList *list, VipsSListMap2Fn fn, void *a, void *b)
     * }
     */
    public static FunctionDescriptor vips_slist_filter$descriptor() {
        return vips_slist_filter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *vips_slist_filter(GSList *list, VipsSListMap2Fn fn, void *a, void *b)
     * }
     */
    public static MethodHandle vips_slist_filter$handle() {
        return vips_slist_filter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GSList *vips_slist_filter(GSList *list, VipsSListMap2Fn fn, void *a, void *b)
     * }
     */
    public static MemorySegment vips_slist_filter$address() {
        return vips_slist_filter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GSList *vips_slist_filter(GSList *list, VipsSListMap2Fn fn, void *a, void *b)
     * }
     */
    public static MemorySegment vips_slist_filter(MemorySegment list, MemorySegment fn, MemorySegment a, MemorySegment b) {
        var mh$ = vips_slist_filter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_slist_filter", list, fn, a, b);
            }
            return (MemorySegment)mh$.invokeExact(list, fn, a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_slist_free_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_slist_free_all");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_slist_free_all(GSList *list)
     * }
     */
    public static FunctionDescriptor vips_slist_free_all$descriptor() {
        return vips_slist_free_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_slist_free_all(GSList *list)
     * }
     */
    public static MethodHandle vips_slist_free_all$handle() {
        return vips_slist_free_all.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_slist_free_all(GSList *list)
     * }
     */
    public static MemorySegment vips_slist_free_all$address() {
        return vips_slist_free_all.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_slist_free_all(GSList *list)
     * }
     */
    public static void vips_slist_free_all(MemorySegment list) {
        var mh$ = vips_slist_free_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_slist_free_all", list);
            }
            mh$.invokeExact(list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_map_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_map_equal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *vips_map_equal(void *a, void *b)
     * }
     */
    public static FunctionDescriptor vips_map_equal$descriptor() {
        return vips_map_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *vips_map_equal(void *a, void *b)
     * }
     */
    public static MethodHandle vips_map_equal$handle() {
        return vips_map_equal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *vips_map_equal(void *a, void *b)
     * }
     */
    public static MemorySegment vips_map_equal$address() {
        return vips_map_equal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *vips_map_equal(void *a, void *b)
     * }
     */
    public static MemorySegment vips_map_equal(MemorySegment a, MemorySegment b) {
        var mh$ = vips_map_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_map_equal", a, b);
            }
            return (MemorySegment)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_hash_table_map {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_hash_table_map");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *vips_hash_table_map(GHashTable *hash, VipsSListMap2Fn fn, void *a, void *b)
     * }
     */
    public static FunctionDescriptor vips_hash_table_map$descriptor() {
        return vips_hash_table_map.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *vips_hash_table_map(GHashTable *hash, VipsSListMap2Fn fn, void *a, void *b)
     * }
     */
    public static MethodHandle vips_hash_table_map$handle() {
        return vips_hash_table_map.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *vips_hash_table_map(GHashTable *hash, VipsSListMap2Fn fn, void *a, void *b)
     * }
     */
    public static MemorySegment vips_hash_table_map$address() {
        return vips_hash_table_map.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *vips_hash_table_map(GHashTable *hash, VipsSListMap2Fn fn, void *a, void *b)
     * }
     */
    public static MemorySegment vips_hash_table_map(MemorySegment hash, MemorySegment fn, MemorySegment a, MemorySegment b) {
        var mh$ = vips_hash_table_map.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_hash_table_map", hash, fn, a, b);
            }
            return (MemorySegment)mh$.invokeExact(hash, fn, a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_strncpy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_strncpy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *vips_strncpy(char *dest, const char *src, int n)
     * }
     */
    public static FunctionDescriptor vips_strncpy$descriptor() {
        return vips_strncpy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *vips_strncpy(char *dest, const char *src, int n)
     * }
     */
    public static MethodHandle vips_strncpy$handle() {
        return vips_strncpy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *vips_strncpy(char *dest, const char *src, int n)
     * }
     */
    public static MemorySegment vips_strncpy$address() {
        return vips_strncpy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *vips_strncpy(char *dest, const char *src, int n)
     * }
     */
    public static MemorySegment vips_strncpy(MemorySegment dest, MemorySegment src, int n) {
        var mh$ = vips_strncpy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_strncpy", dest, src, n);
            }
            return (MemorySegment)mh$.invokeExact(dest, src, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_strrstr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_strrstr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *vips_strrstr(const char *haystack, const char *needle)
     * }
     */
    public static FunctionDescriptor vips_strrstr$descriptor() {
        return vips_strrstr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *vips_strrstr(const char *haystack, const char *needle)
     * }
     */
    public static MethodHandle vips_strrstr$handle() {
        return vips_strrstr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *vips_strrstr(const char *haystack, const char *needle)
     * }
     */
    public static MemorySegment vips_strrstr$address() {
        return vips_strrstr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *vips_strrstr(const char *haystack, const char *needle)
     * }
     */
    public static MemorySegment vips_strrstr(MemorySegment haystack, MemorySegment needle) {
        var mh$ = vips_strrstr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_strrstr", haystack, needle);
            }
            return (MemorySegment)mh$.invokeExact(haystack, needle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_ispostfix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_ispostfix");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_ispostfix(const char *a, const char *b)
     * }
     */
    public static FunctionDescriptor vips_ispostfix$descriptor() {
        return vips_ispostfix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_ispostfix(const char *a, const char *b)
     * }
     */
    public static MethodHandle vips_ispostfix$handle() {
        return vips_ispostfix.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_ispostfix(const char *a, const char *b)
     * }
     */
    public static MemorySegment vips_ispostfix$address() {
        return vips_ispostfix.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_ispostfix(const char *a, const char *b)
     * }
     */
    public static int vips_ispostfix(MemorySegment a, MemorySegment b) {
        var mh$ = vips_ispostfix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_ispostfix", a, b);
            }
            return (int)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_iscasepostfix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_iscasepostfix");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_iscasepostfix(const char *a, const char *b)
     * }
     */
    public static FunctionDescriptor vips_iscasepostfix$descriptor() {
        return vips_iscasepostfix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_iscasepostfix(const char *a, const char *b)
     * }
     */
    public static MethodHandle vips_iscasepostfix$handle() {
        return vips_iscasepostfix.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_iscasepostfix(const char *a, const char *b)
     * }
     */
    public static MemorySegment vips_iscasepostfix$address() {
        return vips_iscasepostfix.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_iscasepostfix(const char *a, const char *b)
     * }
     */
    public static int vips_iscasepostfix(MemorySegment a, MemorySegment b) {
        var mh$ = vips_iscasepostfix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_iscasepostfix", a, b);
            }
            return (int)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_isprefix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_isprefix");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_isprefix(const char *a, const char *b)
     * }
     */
    public static FunctionDescriptor vips_isprefix$descriptor() {
        return vips_isprefix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_isprefix(const char *a, const char *b)
     * }
     */
    public static MethodHandle vips_isprefix$handle() {
        return vips_isprefix.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_isprefix(const char *a, const char *b)
     * }
     */
    public static MemorySegment vips_isprefix$address() {
        return vips_isprefix.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_isprefix(const char *a, const char *b)
     * }
     */
    public static int vips_isprefix(MemorySegment a, MemorySegment b) {
        var mh$ = vips_isprefix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_isprefix", a, b);
            }
            return (int)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_break_token {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_break_token");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *vips_break_token(char *str, const char *brk)
     * }
     */
    public static FunctionDescriptor vips_break_token$descriptor() {
        return vips_break_token.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *vips_break_token(char *str, const char *brk)
     * }
     */
    public static MethodHandle vips_break_token$handle() {
        return vips_break_token.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *vips_break_token(char *str, const char *brk)
     * }
     */
    public static MemorySegment vips_break_token$address() {
        return vips_break_token.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *vips_break_token(char *str, const char *brk)
     * }
     */
    public static MemorySegment vips_break_token(MemorySegment str, MemorySegment brk) {
        var mh$ = vips_break_token.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_break_token", str, brk);
            }
            return (MemorySegment)mh$.invokeExact(str, brk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__chomp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__chomp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vips__chomp(char *str)
     * }
     */
    public static FunctionDescriptor vips__chomp$descriptor() {
        return vips__chomp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vips__chomp(char *str)
     * }
     */
    public static MethodHandle vips__chomp$handle() {
        return vips__chomp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void vips__chomp(char *str)
     * }
     */
    public static MemorySegment vips__chomp$address() {
        return vips__chomp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void vips__chomp(char *str)
     * }
     */
    public static void vips__chomp(MemorySegment str) {
        var mh$ = vips__chomp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__chomp", str);
            }
            mh$.invokeExact(str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_vsnprintf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_LONG,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_vsnprintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_vsnprintf(char *str, size_t size, const char *format, va_list ap)
     * }
     */
    public static FunctionDescriptor vips_vsnprintf$descriptor() {
        return vips_vsnprintf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_vsnprintf(char *str, size_t size, const char *format, va_list ap)
     * }
     */
    public static MethodHandle vips_vsnprintf$handle() {
        return vips_vsnprintf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_vsnprintf(char *str, size_t size, const char *format, va_list ap)
     * }
     */
    public static MemorySegment vips_vsnprintf$address() {
        return vips_vsnprintf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_vsnprintf(char *str, size_t size, const char *format, va_list ap)
     * }
     */
    public static int vips_vsnprintf(MemorySegment str, long size, MemorySegment format, MemorySegment ap) {
        var mh$ = vips_vsnprintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_vsnprintf", str, size, format, ap);
            }
            return (int)mh$.invokeExact(str, size, format, ap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_snprintf(char *str, size_t size, const char *format, ...)
     * }
     */
    public static class vips_snprintf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_LONG,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_snprintf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_snprintf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_snprintf(char *str, size_t size, const char *format, ...)
         * }
         */
        public static vips_snprintf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_snprintf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment str, long size, MemorySegment format, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_snprintf", str, size, format, x3);
                }
                return (int)spreader.invokeExact(str, size, format, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class vips_filename_suffix_match {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_filename_suffix_match");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_filename_suffix_match(const char *path, const char *suffixes[])
     * }
     */
    public static FunctionDescriptor vips_filename_suffix_match$descriptor() {
        return vips_filename_suffix_match.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_filename_suffix_match(const char *path, const char *suffixes[])
     * }
     */
    public static MethodHandle vips_filename_suffix_match$handle() {
        return vips_filename_suffix_match.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_filename_suffix_match(const char *path, const char *suffixes[])
     * }
     */
    public static MemorySegment vips_filename_suffix_match$address() {
        return vips_filename_suffix_match.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_filename_suffix_match(const char *path, const char *suffixes[])
     * }
     */
    public static int vips_filename_suffix_match(MemorySegment path, MemorySegment suffixes) {
        var mh$ = vips_filename_suffix_match.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_filename_suffix_match", path, suffixes);
            }
            return (int)mh$.invokeExact(path, suffixes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_file_length {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG_LONG,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_file_length");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint64 vips_file_length(int fd)
     * }
     */
    public static FunctionDescriptor vips_file_length$descriptor() {
        return vips_file_length.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint64 vips_file_length(int fd)
     * }
     */
    public static MethodHandle vips_file_length$handle() {
        return vips_file_length.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gint64 vips_file_length(int fd)
     * }
     */
    public static MemorySegment vips_file_length$address() {
        return vips_file_length.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gint64 vips_file_length(int fd)
     * }
     */
    public static long vips_file_length(int fd) {
        var mh$ = vips_file_length.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_file_length", fd);
            }
            return (long)mh$.invokeExact(fd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__write {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_LONG
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__write");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips__write(int fd, const void *buf, size_t count)
     * }
     */
    public static FunctionDescriptor vips__write$descriptor() {
        return vips__write.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips__write(int fd, const void *buf, size_t count)
     * }
     */
    public static MethodHandle vips__write$handle() {
        return vips__write.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips__write(int fd, const void *buf, size_t count)
     * }
     */
    public static MemorySegment vips__write$address() {
        return vips__write.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips__write(int fd, const void *buf, size_t count)
     * }
     */
    public static int vips__write(int fd, MemorySegment buf, long count) {
        var mh$ = vips__write.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__write", fd, buf, count);
            }
            return (int)mh$.invokeExact(fd, buf, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__open {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_INT,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__open");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips__open(const char *filename, int flags, int mode)
     * }
     */
    public static FunctionDescriptor vips__open$descriptor() {
        return vips__open.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips__open(const char *filename, int flags, int mode)
     * }
     */
    public static MethodHandle vips__open$handle() {
        return vips__open.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips__open(const char *filename, int flags, int mode)
     * }
     */
    public static MemorySegment vips__open$address() {
        return vips__open.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips__open(const char *filename, int flags, int mode)
     * }
     */
    public static int vips__open(MemorySegment filename, int flags, int mode) {
        var mh$ = vips__open.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__open", filename, flags, mode);
            }
            return (int)mh$.invokeExact(filename, flags, mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__open_read {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__open_read");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int vips__open_read(const char *filename)
     * }
     */
    public static FunctionDescriptor vips__open_read$descriptor() {
        return vips__open_read.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int vips__open_read(const char *filename)
     * }
     */
    public static MethodHandle vips__open_read$handle() {
        return vips__open_read.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int vips__open_read(const char *filename)
     * }
     */
    public static MemorySegment vips__open_read$address() {
        return vips__open_read.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int vips__open_read(const char *filename)
     * }
     */
    public static int vips__open_read(MemorySegment filename) {
        var mh$ = vips__open_read.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__open_read", filename);
            }
            return (int)mh$.invokeExact(filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__fopen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__fopen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FILE *vips__fopen(const char *filename, const char *mode)
     * }
     */
    public static FunctionDescriptor vips__fopen$descriptor() {
        return vips__fopen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FILE *vips__fopen(const char *filename, const char *mode)
     * }
     */
    public static MethodHandle vips__fopen$handle() {
        return vips__fopen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FILE *vips__fopen(const char *filename, const char *mode)
     * }
     */
    public static MemorySegment vips__fopen$address() {
        return vips__fopen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FILE *vips__fopen(const char *filename, const char *mode)
     * }
     */
    public static MemorySegment vips__fopen(MemorySegment filename, MemorySegment mode) {
        var mh$ = vips__fopen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__fopen", filename, mode);
            }
            return (MemorySegment)mh$.invokeExact(filename, mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__file_open_read {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__file_open_read");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FILE *vips__file_open_read(const char *filename, const char *fallback_dir, gboolean text_mode)
     * }
     */
    public static FunctionDescriptor vips__file_open_read$descriptor() {
        return vips__file_open_read.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FILE *vips__file_open_read(const char *filename, const char *fallback_dir, gboolean text_mode)
     * }
     */
    public static MethodHandle vips__file_open_read$handle() {
        return vips__file_open_read.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FILE *vips__file_open_read(const char *filename, const char *fallback_dir, gboolean text_mode)
     * }
     */
    public static MemorySegment vips__file_open_read$address() {
        return vips__file_open_read.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FILE *vips__file_open_read(const char *filename, const char *fallback_dir, gboolean text_mode)
     * }
     */
    public static MemorySegment vips__file_open_read(MemorySegment filename, MemorySegment fallback_dir, int text_mode) {
        var mh$ = vips__file_open_read.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__file_open_read", filename, fallback_dir, text_mode);
            }
            return (MemorySegment)mh$.invokeExact(filename, fallback_dir, text_mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__file_open_write {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__file_open_write");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FILE *vips__file_open_write(const char *filename, gboolean text_mode)
     * }
     */
    public static FunctionDescriptor vips__file_open_write$descriptor() {
        return vips__file_open_write.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FILE *vips__file_open_write(const char *filename, gboolean text_mode)
     * }
     */
    public static MethodHandle vips__file_open_write$handle() {
        return vips__file_open_write.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FILE *vips__file_open_write(const char *filename, gboolean text_mode)
     * }
     */
    public static MemorySegment vips__file_open_write$address() {
        return vips__file_open_write.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FILE *vips__file_open_write(const char *filename, gboolean text_mode)
     * }
     */
    public static MemorySegment vips__file_open_write(MemorySegment filename, int text_mode) {
        var mh$ = vips__file_open_write.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__file_open_write", filename, text_mode);
            }
            return (MemorySegment)mh$.invokeExact(filename, text_mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__file_read {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__file_read");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *vips__file_read(FILE *fp, const char *name, size_t *length_out)
     * }
     */
    public static FunctionDescriptor vips__file_read$descriptor() {
        return vips__file_read.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *vips__file_read(FILE *fp, const char *name, size_t *length_out)
     * }
     */
    public static MethodHandle vips__file_read$handle() {
        return vips__file_read.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *vips__file_read(FILE *fp, const char *name, size_t *length_out)
     * }
     */
    public static MemorySegment vips__file_read$address() {
        return vips__file_read.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *vips__file_read(FILE *fp, const char *name, size_t *length_out)
     * }
     */
    public static MemorySegment vips__file_read(MemorySegment fp, MemorySegment name, MemorySegment length_out) {
        var mh$ = vips__file_read.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__file_read", fp, name, length_out);
            }
            return (MemorySegment)mh$.invokeExact(fp, name, length_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__file_read_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__file_read_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *vips__file_read_name(const char *name, const char *fallback_dir, size_t *length_out)
     * }
     */
    public static FunctionDescriptor vips__file_read_name$descriptor() {
        return vips__file_read_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *vips__file_read_name(const char *name, const char *fallback_dir, size_t *length_out)
     * }
     */
    public static MethodHandle vips__file_read_name$handle() {
        return vips__file_read_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *vips__file_read_name(const char *name, const char *fallback_dir, size_t *length_out)
     * }
     */
    public static MemorySegment vips__file_read_name$address() {
        return vips__file_read_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *vips__file_read_name(const char *name, const char *fallback_dir, size_t *length_out)
     * }
     */
    public static MemorySegment vips__file_read_name(MemorySegment name, MemorySegment fallback_dir, MemorySegment length_out) {
        var mh$ = vips__file_read_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__file_read_name", name, fallback_dir, length_out);
            }
            return (MemorySegment)mh$.invokeExact(name, fallback_dir, length_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__file_write {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_LONG,
            vips_h.C_LONG,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__file_write");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int vips__file_write(void *data, size_t size, size_t nmemb, FILE *stream)
     * }
     */
    public static FunctionDescriptor vips__file_write$descriptor() {
        return vips__file_write.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int vips__file_write(void *data, size_t size, size_t nmemb, FILE *stream)
     * }
     */
    public static MethodHandle vips__file_write$handle() {
        return vips__file_write.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int vips__file_write(void *data, size_t size, size_t nmemb, FILE *stream)
     * }
     */
    public static MemorySegment vips__file_write$address() {
        return vips__file_write.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int vips__file_write(void *data, size_t size, size_t nmemb, FILE *stream)
     * }
     */
    public static int vips__file_write(MemorySegment data, long size, long nmemb, MemorySegment stream) {
        var mh$ = vips__file_write.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__file_write", data, size, nmemb, stream);
            }
            return (int)mh$.invokeExact(data, size, nmemb, stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__get_bytes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG_LONG,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__get_bytes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint64 vips__get_bytes(const char *filename, unsigned char buf[], gint64 len)
     * }
     */
    public static FunctionDescriptor vips__get_bytes$descriptor() {
        return vips__get_bytes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint64 vips__get_bytes(const char *filename, unsigned char buf[], gint64 len)
     * }
     */
    public static MethodHandle vips__get_bytes$handle() {
        return vips__get_bytes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gint64 vips__get_bytes(const char *filename, unsigned char buf[], gint64 len)
     * }
     */
    public static MemorySegment vips__get_bytes$address() {
        return vips__get_bytes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gint64 vips__get_bytes(const char *filename, unsigned char buf[], gint64 len)
     * }
     */
    public static long vips__get_bytes(MemorySegment filename, MemorySegment buf, long len) {
        var mh$ = vips__get_bytes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__get_bytes", filename, buf, len);
            }
            return (long)mh$.invokeExact(filename, buf, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__fgetc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__fgetc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int vips__fgetc(FILE *fp)
     * }
     */
    public static FunctionDescriptor vips__fgetc$descriptor() {
        return vips__fgetc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int vips__fgetc(FILE *fp)
     * }
     */
    public static MethodHandle vips__fgetc$handle() {
        return vips__fgetc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int vips__fgetc(FILE *fp)
     * }
     */
    public static MemorySegment vips__fgetc$address() {
        return vips__fgetc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int vips__fgetc(FILE *fp)
     * }
     */
    public static int vips__fgetc(MemorySegment fp) {
        var mh$ = vips__fgetc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__fgetc", fp);
            }
            return (int)mh$.invokeExact(fp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__gvalue_ref_string_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__gvalue_ref_string_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * GValue *vips__gvalue_ref_string_new(const char *text)
     * }
     */
    public static FunctionDescriptor vips__gvalue_ref_string_new$descriptor() {
        return vips__gvalue_ref_string_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * GValue *vips__gvalue_ref_string_new(const char *text)
     * }
     */
    public static MethodHandle vips__gvalue_ref_string_new$handle() {
        return vips__gvalue_ref_string_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * GValue *vips__gvalue_ref_string_new(const char *text)
     * }
     */
    public static MemorySegment vips__gvalue_ref_string_new$address() {
        return vips__gvalue_ref_string_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * GValue *vips__gvalue_ref_string_new(const char *text)
     * }
     */
    public static MemorySegment vips__gvalue_ref_string_new(MemorySegment text) {
        var mh$ = vips__gvalue_ref_string_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__gvalue_ref_string_new", text);
            }
            return (MemorySegment)mh$.invokeExact(text);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__gslist_gvalue_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__gslist_gvalue_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vips__gslist_gvalue_free(GSList *list)
     * }
     */
    public static FunctionDescriptor vips__gslist_gvalue_free$descriptor() {
        return vips__gslist_gvalue_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vips__gslist_gvalue_free(GSList *list)
     * }
     */
    public static MethodHandle vips__gslist_gvalue_free$handle() {
        return vips__gslist_gvalue_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void vips__gslist_gvalue_free(GSList *list)
     * }
     */
    public static MemorySegment vips__gslist_gvalue_free$address() {
        return vips__gslist_gvalue_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void vips__gslist_gvalue_free(GSList *list)
     * }
     */
    public static void vips__gslist_gvalue_free(MemorySegment list) {
        var mh$ = vips__gslist_gvalue_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__gslist_gvalue_free", list);
            }
            mh$.invokeExact(list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__gslist_gvalue_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__gslist_gvalue_copy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * GSList *vips__gslist_gvalue_copy(const GSList *list)
     * }
     */
    public static FunctionDescriptor vips__gslist_gvalue_copy$descriptor() {
        return vips__gslist_gvalue_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * GSList *vips__gslist_gvalue_copy(const GSList *list)
     * }
     */
    public static MethodHandle vips__gslist_gvalue_copy$handle() {
        return vips__gslist_gvalue_copy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * GSList *vips__gslist_gvalue_copy(const GSList *list)
     * }
     */
    public static MemorySegment vips__gslist_gvalue_copy$address() {
        return vips__gslist_gvalue_copy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * GSList *vips__gslist_gvalue_copy(const GSList *list)
     * }
     */
    public static MemorySegment vips__gslist_gvalue_copy(MemorySegment list) {
        var mh$ = vips__gslist_gvalue_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__gslist_gvalue_copy", list);
            }
            return (MemorySegment)mh$.invokeExact(list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__gslist_gvalue_merge {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__gslist_gvalue_merge");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * GSList *vips__gslist_gvalue_merge(GSList *a, const GSList *b)
     * }
     */
    public static FunctionDescriptor vips__gslist_gvalue_merge$descriptor() {
        return vips__gslist_gvalue_merge.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * GSList *vips__gslist_gvalue_merge(GSList *a, const GSList *b)
     * }
     */
    public static MethodHandle vips__gslist_gvalue_merge$handle() {
        return vips__gslist_gvalue_merge.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * GSList *vips__gslist_gvalue_merge(GSList *a, const GSList *b)
     * }
     */
    public static MemorySegment vips__gslist_gvalue_merge$address() {
        return vips__gslist_gvalue_merge.ADDR;
    }

    /**
     * {@snippet lang=c :
     * GSList *vips__gslist_gvalue_merge(GSList *a, const GSList *b)
     * }
     */
    public static MemorySegment vips__gslist_gvalue_merge(MemorySegment a, MemorySegment b) {
        var mh$ = vips__gslist_gvalue_merge.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__gslist_gvalue_merge", a, b);
            }
            return (MemorySegment)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__gslist_gvalue_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__gslist_gvalue_get");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *vips__gslist_gvalue_get(const GSList *list)
     * }
     */
    public static FunctionDescriptor vips__gslist_gvalue_get$descriptor() {
        return vips__gslist_gvalue_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *vips__gslist_gvalue_get(const GSList *list)
     * }
     */
    public static MethodHandle vips__gslist_gvalue_get$handle() {
        return vips__gslist_gvalue_get.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *vips__gslist_gvalue_get(const GSList *list)
     * }
     */
    public static MemorySegment vips__gslist_gvalue_get$address() {
        return vips__gslist_gvalue_get.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *vips__gslist_gvalue_get(const GSList *list)
     * }
     */
    public static MemorySegment vips__gslist_gvalue_get(MemorySegment list) {
        var mh$ = vips__gslist_gvalue_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__gslist_gvalue_get", list);
            }
            return (MemorySegment)mh$.invokeExact(list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__seek_no_error {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG_LONG,
            vips_h.C_INT,
            vips_h.C_LONG_LONG,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__seek_no_error");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * gint64 vips__seek_no_error(int fd, gint64 pos, int whence)
     * }
     */
    public static FunctionDescriptor vips__seek_no_error$descriptor() {
        return vips__seek_no_error.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * gint64 vips__seek_no_error(int fd, gint64 pos, int whence)
     * }
     */
    public static MethodHandle vips__seek_no_error$handle() {
        return vips__seek_no_error.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * gint64 vips__seek_no_error(int fd, gint64 pos, int whence)
     * }
     */
    public static MemorySegment vips__seek_no_error$address() {
        return vips__seek_no_error.ADDR;
    }

    /**
     * {@snippet lang=c :
     * gint64 vips__seek_no_error(int fd, gint64 pos, int whence)
     * }
     */
    public static long vips__seek_no_error(int fd, long pos, int whence) {
        var mh$ = vips__seek_no_error.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__seek_no_error", fd, pos, whence);
            }
            return (long)mh$.invokeExact(fd, pos, whence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__seek {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG_LONG,
            vips_h.C_INT,
            vips_h.C_LONG_LONG,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__seek");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint64 vips__seek(int fd, gint64 pos, int whence)
     * }
     */
    public static FunctionDescriptor vips__seek$descriptor() {
        return vips__seek.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint64 vips__seek(int fd, gint64 pos, int whence)
     * }
     */
    public static MethodHandle vips__seek$handle() {
        return vips__seek.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gint64 vips__seek(int fd, gint64 pos, int whence)
     * }
     */
    public static MemorySegment vips__seek$address() {
        return vips__seek.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gint64 vips__seek(int fd, gint64 pos, int whence)
     * }
     */
    public static long vips__seek(int fd, long pos, int whence) {
        var mh$ = vips__seek.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__seek", fd, pos, whence);
            }
            return (long)mh$.invokeExact(fd, pos, whence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__ftruncate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_INT,
            vips_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__ftruncate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int vips__ftruncate(int fd, gint64 pos)
     * }
     */
    public static FunctionDescriptor vips__ftruncate$descriptor() {
        return vips__ftruncate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int vips__ftruncate(int fd, gint64 pos)
     * }
     */
    public static MethodHandle vips__ftruncate$handle() {
        return vips__ftruncate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int vips__ftruncate(int fd, gint64 pos)
     * }
     */
    public static MemorySegment vips__ftruncate$address() {
        return vips__ftruncate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int vips__ftruncate(int fd, gint64 pos)
     * }
     */
    public static int vips__ftruncate(int fd, long pos) {
        var mh$ = vips__ftruncate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__ftruncate", fd, pos);
            }
            return (int)mh$.invokeExact(fd, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_existsf(const char *name, ...)
     * }
     */
    public static class vips_existsf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_existsf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_existsf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_existsf(const char *name, ...)
         * }
         */
        public static vips_existsf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_existsf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment name, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_existsf", name, x1);
                }
                return (int)spreader.invokeExact(name, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_isdirf(const char *name, ...)
     * }
     */
    public static class vips_isdirf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_isdirf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_isdirf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_isdirf(const char *name, ...)
         * }
         */
        public static vips_isdirf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_isdirf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment name, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_isdirf", name, x1);
                }
                return (int)spreader.invokeExact(name, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_mkdirf(const char *name, ...)
     * }
     */
    public static class vips_mkdirf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_mkdirf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_mkdirf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_mkdirf(const char *name, ...)
         * }
         */
        public static vips_mkdirf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_mkdirf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment name, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_mkdirf", name, x1);
                }
                return (int)spreader.invokeExact(name, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_rmdirf(const char *name, ...)
     * }
     */
    public static class vips_rmdirf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_rmdirf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_rmdirf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_rmdirf(const char *name, ...)
         * }
         */
        public static vips_rmdirf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_rmdirf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment name, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_rmdirf", name, x1);
                }
                return (int)spreader.invokeExact(name, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class vips_rename {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_rename");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_rename(const char *old_name, const char *new_name)
     * }
     */
    public static FunctionDescriptor vips_rename$descriptor() {
        return vips_rename.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_rename(const char *old_name, const char *new_name)
     * }
     */
    public static MethodHandle vips_rename$handle() {
        return vips_rename.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_rename(const char *old_name, const char *new_name)
     * }
     */
    public static MemorySegment vips_rename$address() {
        return vips_rename.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_rename(const char *old_name, const char *new_name)
     * }
     */
    public static int vips_rename(MemorySegment old_name, MemorySegment new_name) {
        var mh$ = vips_rename.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_rename", old_name, new_name);
            }
            return (int)mh$.invokeExact(old_name, new_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VIPS_TOKEN_LEFT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_TOKEN_LEFT = 1
     * }
     */
    public static int VIPS_TOKEN_LEFT() {
        return VIPS_TOKEN_LEFT;
    }
    private static final int VIPS_TOKEN_RIGHT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_TOKEN_RIGHT = 2
     * }
     */
    public static int VIPS_TOKEN_RIGHT() {
        return VIPS_TOKEN_RIGHT;
    }
    private static final int VIPS_TOKEN_STRING = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_TOKEN_STRING = 3
     * }
     */
    public static int VIPS_TOKEN_STRING() {
        return VIPS_TOKEN_STRING;
    }
    private static final int VIPS_TOKEN_EQUALS = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_TOKEN_EQUALS = 4
     * }
     */
    public static int VIPS_TOKEN_EQUALS() {
        return VIPS_TOKEN_EQUALS;
    }
    private static final int VIPS_TOKEN_COMMA = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_TOKEN_COMMA = 5
     * }
     */
    public static int VIPS_TOKEN_COMMA() {
        return VIPS_TOKEN_COMMA;
    }

    private static class vips__token_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__token_get");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *vips__token_get(const char *buffer, VipsToken *token, char *string, int size)
     * }
     */
    public static FunctionDescriptor vips__token_get$descriptor() {
        return vips__token_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *vips__token_get(const char *buffer, VipsToken *token, char *string, int size)
     * }
     */
    public static MethodHandle vips__token_get$handle() {
        return vips__token_get.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *vips__token_get(const char *buffer, VipsToken *token, char *string, int size)
     * }
     */
    public static MemorySegment vips__token_get$address() {
        return vips__token_get.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *vips__token_get(const char *buffer, VipsToken *token, char *string, int size)
     * }
     */
    public static MemorySegment vips__token_get(MemorySegment buffer, MemorySegment token, MemorySegment string, int size) {
        var mh$ = vips__token_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__token_get", buffer, token, string, size);
            }
            return (MemorySegment)mh$.invokeExact(buffer, token, string, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__token_must {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__token_must");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *vips__token_must(const char *buffer, VipsToken *token, char *string, int size)
     * }
     */
    public static FunctionDescriptor vips__token_must$descriptor() {
        return vips__token_must.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *vips__token_must(const char *buffer, VipsToken *token, char *string, int size)
     * }
     */
    public static MethodHandle vips__token_must$handle() {
        return vips__token_must.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *vips__token_must(const char *buffer, VipsToken *token, char *string, int size)
     * }
     */
    public static MemorySegment vips__token_must$address() {
        return vips__token_must.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *vips__token_must(const char *buffer, VipsToken *token, char *string, int size)
     * }
     */
    public static MemorySegment vips__token_must(MemorySegment buffer, MemorySegment token, MemorySegment string, int size) {
        var mh$ = vips__token_must.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__token_must", buffer, token, string, size);
            }
            return (MemorySegment)mh$.invokeExact(buffer, token, string, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__token_need {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__token_need");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *vips__token_need(const char *buffer, VipsToken need_token, char *string, int size)
     * }
     */
    public static FunctionDescriptor vips__token_need$descriptor() {
        return vips__token_need.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *vips__token_need(const char *buffer, VipsToken need_token, char *string, int size)
     * }
     */
    public static MethodHandle vips__token_need$handle() {
        return vips__token_need.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *vips__token_need(const char *buffer, VipsToken need_token, char *string, int size)
     * }
     */
    public static MemorySegment vips__token_need$address() {
        return vips__token_need.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *vips__token_need(const char *buffer, VipsToken need_token, char *string, int size)
     * }
     */
    public static MemorySegment vips__token_need(MemorySegment buffer, int need_token, MemorySegment string, int size) {
        var mh$ = vips__token_need.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__token_need", buffer, need_token, string, size);
            }
            return (MemorySegment)mh$.invokeExact(buffer, need_token, string, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__token_segment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__token_segment");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *vips__token_segment(const char *p, VipsToken *token, char *string, int size)
     * }
     */
    public static FunctionDescriptor vips__token_segment$descriptor() {
        return vips__token_segment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *vips__token_segment(const char *p, VipsToken *token, char *string, int size)
     * }
     */
    public static MethodHandle vips__token_segment$handle() {
        return vips__token_segment.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *vips__token_segment(const char *p, VipsToken *token, char *string, int size)
     * }
     */
    public static MemorySegment vips__token_segment$address() {
        return vips__token_segment.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *vips__token_segment(const char *p, VipsToken *token, char *string, int size)
     * }
     */
    public static MemorySegment vips__token_segment(MemorySegment p, MemorySegment token, MemorySegment string, int size) {
        var mh$ = vips__token_segment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__token_segment", p, token, string, size);
            }
            return (MemorySegment)mh$.invokeExact(p, token, string, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__token_segment_need {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__token_segment_need");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *vips__token_segment_need(const char *p, VipsToken need_token, char *string, int size)
     * }
     */
    public static FunctionDescriptor vips__token_segment_need$descriptor() {
        return vips__token_segment_need.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *vips__token_segment_need(const char *p, VipsToken need_token, char *string, int size)
     * }
     */
    public static MethodHandle vips__token_segment_need$handle() {
        return vips__token_segment_need.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *vips__token_segment_need(const char *p, VipsToken need_token, char *string, int size)
     * }
     */
    public static MemorySegment vips__token_segment_need$address() {
        return vips__token_segment_need.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *vips__token_segment_need(const char *p, VipsToken need_token, char *string, int size)
     * }
     */
    public static MemorySegment vips__token_segment_need(MemorySegment p, int need_token, MemorySegment string, int size) {
        var mh$ = vips__token_segment_need.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__token_segment_need", p, need_token, string, size);
            }
            return (MemorySegment)mh$.invokeExact(p, need_token, string, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__find_rightmost_brackets {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__find_rightmost_brackets");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *vips__find_rightmost_brackets(const char *p)
     * }
     */
    public static FunctionDescriptor vips__find_rightmost_brackets$descriptor() {
        return vips__find_rightmost_brackets.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *vips__find_rightmost_brackets(const char *p)
     * }
     */
    public static MethodHandle vips__find_rightmost_brackets$handle() {
        return vips__find_rightmost_brackets.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *vips__find_rightmost_brackets(const char *p)
     * }
     */
    public static MemorySegment vips__find_rightmost_brackets$address() {
        return vips__find_rightmost_brackets.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *vips__find_rightmost_brackets(const char *p)
     * }
     */
    public static MemorySegment vips__find_rightmost_brackets(MemorySegment p) {
        var mh$ = vips__find_rightmost_brackets.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__find_rightmost_brackets", p);
            }
            return (MemorySegment)mh$.invokeExact(p);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__filename_split8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__filename_split8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips__filename_split8(const char *name, char *filename, char *option_string)
     * }
     */
    public static FunctionDescriptor vips__filename_split8$descriptor() {
        return vips__filename_split8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips__filename_split8(const char *name, char *filename, char *option_string)
     * }
     */
    public static MethodHandle vips__filename_split8$handle() {
        return vips__filename_split8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips__filename_split8(const char *name, char *filename, char *option_string)
     * }
     */
    public static MemorySegment vips__filename_split8$address() {
        return vips__filename_split8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips__filename_split8(const char *name, char *filename, char *option_string)
     * }
     */
    public static void vips__filename_split8(MemorySegment name, MemorySegment filename, MemorySegment option_string) {
        var mh$ = vips__filename_split8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__filename_split8", name, filename, option_string);
            }
            mh$.invokeExact(name, filename, option_string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_ispoweroftwo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_ispoweroftwo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_ispoweroftwo(int p)
     * }
     */
    public static FunctionDescriptor vips_ispoweroftwo$descriptor() {
        return vips_ispoweroftwo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_ispoweroftwo(int p)
     * }
     */
    public static MethodHandle vips_ispoweroftwo$handle() {
        return vips_ispoweroftwo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_ispoweroftwo(int p)
     * }
     */
    public static MemorySegment vips_ispoweroftwo$address() {
        return vips_ispoweroftwo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_ispoweroftwo(int p)
     * }
     */
    public static int vips_ispoweroftwo(int p) {
        var mh$ = vips_ispoweroftwo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_ispoweroftwo", p);
            }
            return (int)mh$.invokeExact(p);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_amiMSBfirst {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_amiMSBfirst");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_amiMSBfirst()
     * }
     */
    public static FunctionDescriptor vips_amiMSBfirst$descriptor() {
        return vips_amiMSBfirst.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_amiMSBfirst()
     * }
     */
    public static MethodHandle vips_amiMSBfirst$handle() {
        return vips_amiMSBfirst.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_amiMSBfirst()
     * }
     */
    public static MemorySegment vips_amiMSBfirst$address() {
        return vips_amiMSBfirst.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_amiMSBfirst()
     * }
     */
    public static int vips_amiMSBfirst() {
        var mh$ = vips_amiMSBfirst.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_amiMSBfirst");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__temp_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__temp_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *vips__temp_name(const char *format)
     * }
     */
    public static FunctionDescriptor vips__temp_name$descriptor() {
        return vips__temp_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *vips__temp_name(const char *format)
     * }
     */
    public static MethodHandle vips__temp_name$handle() {
        return vips__temp_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *vips__temp_name(const char *format)
     * }
     */
    public static MemorySegment vips__temp_name$address() {
        return vips__temp_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *vips__temp_name(const char *format)
     * }
     */
    public static MemorySegment vips__temp_name(MemorySegment format) {
        var mh$ = vips__temp_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__temp_name", format);
            }
            return (MemorySegment)mh$.invokeExact(format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__change_suffix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__change_suffix");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vips__change_suffix(const char *name, char *out, int mx, const char *new_suff, const char **olds, int nolds)
     * }
     */
    public static FunctionDescriptor vips__change_suffix$descriptor() {
        return vips__change_suffix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vips__change_suffix(const char *name, char *out, int mx, const char *new_suff, const char **olds, int nolds)
     * }
     */
    public static MethodHandle vips__change_suffix$handle() {
        return vips__change_suffix.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void vips__change_suffix(const char *name, char *out, int mx, const char *new_suff, const char **olds, int nolds)
     * }
     */
    public static MemorySegment vips__change_suffix$address() {
        return vips__change_suffix.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void vips__change_suffix(const char *name, char *out, int mx, const char *new_suff, const char **olds, int nolds)
     * }
     */
    public static void vips__change_suffix(MemorySegment name, MemorySegment out, int mx, MemorySegment new_suff, MemorySegment olds, int nolds) {
        var mh$ = vips__change_suffix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__change_suffix", name, out, mx, new_suff, olds, nolds);
            }
            mh$.invokeExact(name, out, mx, new_suff, olds, nolds);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_realpath {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_realpath");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *vips_realpath(const char *path)
     * }
     */
    public static FunctionDescriptor vips_realpath$descriptor() {
        return vips_realpath.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *vips_realpath(const char *path)
     * }
     */
    public static MethodHandle vips_realpath$handle() {
        return vips_realpath.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *vips_realpath(const char *path)
     * }
     */
    public static MemorySegment vips_realpath$address() {
        return vips_realpath.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *vips_realpath(const char *path)
     * }
     */
    public static MemorySegment vips_realpath(MemorySegment path) {
        var mh$ = vips_realpath.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_realpath", path);
            }
            return (MemorySegment)mh$.invokeExact(path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__random {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__random");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * guint32 vips__random(guint32 seed)
     * }
     */
    public static FunctionDescriptor vips__random$descriptor() {
        return vips__random.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * guint32 vips__random(guint32 seed)
     * }
     */
    public static MethodHandle vips__random$handle() {
        return vips__random.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * guint32 vips__random(guint32 seed)
     * }
     */
    public static MemorySegment vips__random$address() {
        return vips__random.ADDR;
    }

    /**
     * {@snippet lang=c :
     * guint32 vips__random(guint32 seed)
     * }
     */
    public static int vips__random(int seed) {
        var mh$ = vips__random.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__random", seed);
            }
            return (int)mh$.invokeExact(seed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__random_add {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_INT,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__random_add");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * guint32 vips__random_add(guint32 seed, int value)
     * }
     */
    public static FunctionDescriptor vips__random_add$descriptor() {
        return vips__random_add.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * guint32 vips__random_add(guint32 seed, int value)
     * }
     */
    public static MethodHandle vips__random_add$handle() {
        return vips__random_add.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * guint32 vips__random_add(guint32 seed, int value)
     * }
     */
    public static MemorySegment vips__random_add$address() {
        return vips__random_add.ADDR;
    }

    /**
     * {@snippet lang=c :
     * guint32 vips__random_add(guint32 seed, int value)
     * }
     */
    public static int vips__random_add(int seed, int value) {
        var mh$ = vips__random_add.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__random_add", seed, value);
            }
            return (int)mh$.invokeExact(seed, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__icc_dir {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__icc_dir");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *vips__icc_dir()
     * }
     */
    public static FunctionDescriptor vips__icc_dir$descriptor() {
        return vips__icc_dir.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *vips__icc_dir()
     * }
     */
    public static MethodHandle vips__icc_dir$handle() {
        return vips__icc_dir.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *vips__icc_dir()
     * }
     */
    public static MemorySegment vips__icc_dir$address() {
        return vips__icc_dir.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *vips__icc_dir()
     * }
     */
    public static MemorySegment vips__icc_dir() {
        var mh$ = vips__icc_dir.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__icc_dir");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__windows_prefix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__windows_prefix");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *vips__windows_prefix()
     * }
     */
    public static FunctionDescriptor vips__windows_prefix$descriptor() {
        return vips__windows_prefix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *vips__windows_prefix()
     * }
     */
    public static MethodHandle vips__windows_prefix$handle() {
        return vips__windows_prefix.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *vips__windows_prefix()
     * }
     */
    public static MemorySegment vips__windows_prefix$address() {
        return vips__windows_prefix.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *vips__windows_prefix()
     * }
     */
    public static MemorySegment vips__windows_prefix() {
        var mh$ = vips__windows_prefix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__windows_prefix");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__get_iso8601 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__get_iso8601");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *vips__get_iso8601()
     * }
     */
    public static FunctionDescriptor vips__get_iso8601$descriptor() {
        return vips__get_iso8601.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *vips__get_iso8601()
     * }
     */
    public static MethodHandle vips__get_iso8601$handle() {
        return vips__get_iso8601.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *vips__get_iso8601()
     * }
     */
    public static MemorySegment vips__get_iso8601$address() {
        return vips__get_iso8601.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *vips__get_iso8601()
     * }
     */
    public static MemorySegment vips__get_iso8601() {
        var mh$ = vips__get_iso8601.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__get_iso8601");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_strtod {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_strtod");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_strtod(const char *str, double *out)
     * }
     */
    public static FunctionDescriptor vips_strtod$descriptor() {
        return vips_strtod.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_strtod(const char *str, double *out)
     * }
     */
    public static MethodHandle vips_strtod$handle() {
        return vips_strtod.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_strtod(const char *str, double *out)
     * }
     */
    public static MemorySegment vips_strtod$address() {
        return vips_strtod.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_strtod(const char *str, double *out)
     * }
     */
    public static int vips_strtod(MemorySegment str, MemorySegment out) {
        var mh$ = vips_strtod.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_strtod", str, out);
            }
            return (int)mh$.invokeExact(str, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VIPS_ARGUMENT_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ARGUMENT_NONE = 0
     * }
     */
    public static int VIPS_ARGUMENT_NONE() {
        return VIPS_ARGUMENT_NONE;
    }
    private static final int VIPS_ARGUMENT_REQUIRED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ARGUMENT_REQUIRED = 1
     * }
     */
    public static int VIPS_ARGUMENT_REQUIRED() {
        return VIPS_ARGUMENT_REQUIRED;
    }
    private static final int VIPS_ARGUMENT_CONSTRUCT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ARGUMENT_CONSTRUCT = 2
     * }
     */
    public static int VIPS_ARGUMENT_CONSTRUCT() {
        return VIPS_ARGUMENT_CONSTRUCT;
    }
    private static final int VIPS_ARGUMENT_SET_ONCE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ARGUMENT_SET_ONCE = 4
     * }
     */
    public static int VIPS_ARGUMENT_SET_ONCE() {
        return VIPS_ARGUMENT_SET_ONCE;
    }
    private static final int VIPS_ARGUMENT_SET_ALWAYS = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ARGUMENT_SET_ALWAYS = 8
     * }
     */
    public static int VIPS_ARGUMENT_SET_ALWAYS() {
        return VIPS_ARGUMENT_SET_ALWAYS;
    }
    private static final int VIPS_ARGUMENT_INPUT = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ARGUMENT_INPUT = 16
     * }
     */
    public static int VIPS_ARGUMENT_INPUT() {
        return VIPS_ARGUMENT_INPUT;
    }
    private static final int VIPS_ARGUMENT_OUTPUT = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ARGUMENT_OUTPUT = 32
     * }
     */
    public static int VIPS_ARGUMENT_OUTPUT() {
        return VIPS_ARGUMENT_OUTPUT;
    }
    private static final int VIPS_ARGUMENT_DEPRECATED = (int)64L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ARGUMENT_DEPRECATED = 64
     * }
     */
    public static int VIPS_ARGUMENT_DEPRECATED() {
        return VIPS_ARGUMENT_DEPRECATED;
    }
    private static final int VIPS_ARGUMENT_MODIFY = (int)128L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ARGUMENT_MODIFY = 128
     * }
     */
    public static int VIPS_ARGUMENT_MODIFY() {
        return VIPS_ARGUMENT_MODIFY;
    }
    private static final int VIPS_ARGUMENT_NON_HASHABLE = (int)256L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ARGUMENT_NON_HASHABLE = 256
     * }
     */
    public static int VIPS_ARGUMENT_NON_HASHABLE() {
        return VIPS_ARGUMENT_NON_HASHABLE;
    }

    private static class vips_argument_get_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_argument_get_id");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_argument_get_id()
     * }
     */
    public static FunctionDescriptor vips_argument_get_id$descriptor() {
        return vips_argument_get_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_argument_get_id()
     * }
     */
    public static MethodHandle vips_argument_get_id$handle() {
        return vips_argument_get_id.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_argument_get_id()
     * }
     */
    public static MemorySegment vips_argument_get_id$address() {
        return vips_argument_get_id.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_argument_get_id()
     * }
     */
    public static int vips_argument_get_id() {
        var mh$ = vips_argument_get_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_argument_get_id");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__object_set_member {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__object_set_member");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vips__object_set_member(VipsObject *object, GParamSpec *pspec, GObject **member, GObject *argument)
     * }
     */
    public static FunctionDescriptor vips__object_set_member$descriptor() {
        return vips__object_set_member.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vips__object_set_member(VipsObject *object, GParamSpec *pspec, GObject **member, GObject *argument)
     * }
     */
    public static MethodHandle vips__object_set_member$handle() {
        return vips__object_set_member.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void vips__object_set_member(VipsObject *object, GParamSpec *pspec, GObject **member, GObject *argument)
     * }
     */
    public static MemorySegment vips__object_set_member$address() {
        return vips__object_set_member.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void vips__object_set_member(VipsObject *object, GParamSpec *pspec, GObject **member, GObject *argument)
     * }
     */
    public static void vips__object_set_member(MemorySegment object, MemorySegment pspec, MemorySegment member, MemorySegment argument) {
        var mh$ = vips__object_set_member.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__object_set_member", object, pspec, member, argument);
            }
            mh$.invokeExact(object, pspec, member, argument);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_argument_map {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_argument_map");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *vips_argument_map(VipsObject *object, VipsArgumentMapFn fn, void *a, void *b)
     * }
     */
    public static FunctionDescriptor vips_argument_map$descriptor() {
        return vips_argument_map.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *vips_argument_map(VipsObject *object, VipsArgumentMapFn fn, void *a, void *b)
     * }
     */
    public static MethodHandle vips_argument_map$handle() {
        return vips_argument_map.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *vips_argument_map(VipsObject *object, VipsArgumentMapFn fn, void *a, void *b)
     * }
     */
    public static MemorySegment vips_argument_map$address() {
        return vips_argument_map.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *vips_argument_map(VipsObject *object, VipsArgumentMapFn fn, void *a, void *b)
     * }
     */
    public static MemorySegment vips_argument_map(MemorySegment object, MemorySegment fn, MemorySegment a, MemorySegment b) {
        var mh$ = vips_argument_map.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_argument_map", object, fn, a, b);
            }
            return (MemorySegment)mh$.invokeExact(object, fn, a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_get_args {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_object_get_args");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_object_get_args(VipsObject *object, const char ***names, int **flags, int *n_args)
     * }
     */
    public static FunctionDescriptor vips_object_get_args$descriptor() {
        return vips_object_get_args.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_object_get_args(VipsObject *object, const char ***names, int **flags, int *n_args)
     * }
     */
    public static MethodHandle vips_object_get_args$handle() {
        return vips_object_get_args.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_object_get_args(VipsObject *object, const char ***names, int **flags, int *n_args)
     * }
     */
    public static MemorySegment vips_object_get_args$address() {
        return vips_object_get_args.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_object_get_args(VipsObject *object, const char ***names, int **flags, int *n_args)
     * }
     */
    public static int vips_object_get_args(MemorySegment object, MemorySegment names, MemorySegment flags, MemorySegment n_args) {
        var mh$ = vips_object_get_args.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_get_args", object, names, flags, n_args);
            }
            return (int)mh$.invokeExact(object, names, flags, n_args);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_argument_class_map {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_argument_class_map");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *vips_argument_class_map(VipsObjectClass *object_class, VipsArgumentClassMapFn fn, void *a, void *b)
     * }
     */
    public static FunctionDescriptor vips_argument_class_map$descriptor() {
        return vips_argument_class_map.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *vips_argument_class_map(VipsObjectClass *object_class, VipsArgumentClassMapFn fn, void *a, void *b)
     * }
     */
    public static MethodHandle vips_argument_class_map$handle() {
        return vips_argument_class_map.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *vips_argument_class_map(VipsObjectClass *object_class, VipsArgumentClassMapFn fn, void *a, void *b)
     * }
     */
    public static MemorySegment vips_argument_class_map$address() {
        return vips_argument_class_map.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *vips_argument_class_map(VipsObjectClass *object_class, VipsArgumentClassMapFn fn, void *a, void *b)
     * }
     */
    public static MemorySegment vips_argument_class_map(MemorySegment object_class, MemorySegment fn, MemorySegment a, MemorySegment b) {
        var mh$ = vips_argument_class_map.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_argument_class_map", object_class, fn, a, b);
            }
            return (MemorySegment)mh$.invokeExact(object_class, fn, a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_argument_class_needsstring {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_argument_class_needsstring");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_argument_class_needsstring(VipsArgumentClass *argument_class)
     * }
     */
    public static FunctionDescriptor vips_argument_class_needsstring$descriptor() {
        return vips_argument_class_needsstring.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_argument_class_needsstring(VipsArgumentClass *argument_class)
     * }
     */
    public static MethodHandle vips_argument_class_needsstring$handle() {
        return vips_argument_class_needsstring.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_argument_class_needsstring(VipsArgumentClass *argument_class)
     * }
     */
    public static MemorySegment vips_argument_class_needsstring$address() {
        return vips_argument_class_needsstring.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_argument_class_needsstring(VipsArgumentClass *argument_class)
     * }
     */
    public static int vips_argument_class_needsstring(MemorySegment argument_class) {
        var mh$ = vips_argument_class_needsstring.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_argument_class_needsstring", argument_class);
            }
            return (int)mh$.invokeExact(argument_class);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_get_argument {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_object_get_argument");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_object_get_argument(VipsObject *object, const char *name, GParamSpec **pspec, VipsArgumentClass **argument_class, VipsArgumentInstance **argument_instance)
     * }
     */
    public static FunctionDescriptor vips_object_get_argument$descriptor() {
        return vips_object_get_argument.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_object_get_argument(VipsObject *object, const char *name, GParamSpec **pspec, VipsArgumentClass **argument_class, VipsArgumentInstance **argument_instance)
     * }
     */
    public static MethodHandle vips_object_get_argument$handle() {
        return vips_object_get_argument.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_object_get_argument(VipsObject *object, const char *name, GParamSpec **pspec, VipsArgumentClass **argument_class, VipsArgumentInstance **argument_instance)
     * }
     */
    public static MemorySegment vips_object_get_argument$address() {
        return vips_object_get_argument.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_object_get_argument(VipsObject *object, const char *name, GParamSpec **pspec, VipsArgumentClass **argument_class, VipsArgumentInstance **argument_instance)
     * }
     */
    public static int vips_object_get_argument(MemorySegment object, MemorySegment name, MemorySegment pspec, MemorySegment argument_class, MemorySegment argument_instance) {
        var mh$ = vips_object_get_argument.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_get_argument", object, name, pspec, argument_class, argument_instance);
            }
            return (int)mh$.invokeExact(object, name, pspec, argument_class, argument_instance);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_argument_isset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_object_argument_isset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_object_argument_isset(VipsObject *object, const char *name)
     * }
     */
    public static FunctionDescriptor vips_object_argument_isset$descriptor() {
        return vips_object_argument_isset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_object_argument_isset(VipsObject *object, const char *name)
     * }
     */
    public static MethodHandle vips_object_argument_isset$handle() {
        return vips_object_argument_isset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_object_argument_isset(VipsObject *object, const char *name)
     * }
     */
    public static MemorySegment vips_object_argument_isset$address() {
        return vips_object_argument_isset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_object_argument_isset(VipsObject *object, const char *name)
     * }
     */
    public static int vips_object_argument_isset(MemorySegment object, MemorySegment name) {
        var mh$ = vips_object_argument_isset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_argument_isset", object, name);
            }
            return (int)mh$.invokeExact(object, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_get_argument_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_object_get_argument_flags");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsArgumentFlags vips_object_get_argument_flags(VipsObject *object, const char *name)
     * }
     */
    public static FunctionDescriptor vips_object_get_argument_flags$descriptor() {
        return vips_object_get_argument_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsArgumentFlags vips_object_get_argument_flags(VipsObject *object, const char *name)
     * }
     */
    public static MethodHandle vips_object_get_argument_flags$handle() {
        return vips_object_get_argument_flags.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsArgumentFlags vips_object_get_argument_flags(VipsObject *object, const char *name)
     * }
     */
    public static MemorySegment vips_object_get_argument_flags$address() {
        return vips_object_get_argument_flags.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsArgumentFlags vips_object_get_argument_flags(VipsObject *object, const char *name)
     * }
     */
    public static int vips_object_get_argument_flags(MemorySegment object, MemorySegment name) {
        var mh$ = vips_object_get_argument_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_get_argument_flags", object, name);
            }
            return (int)mh$.invokeExact(object, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_get_argument_priority {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_object_get_argument_priority");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_object_get_argument_priority(VipsObject *object, const char *name)
     * }
     */
    public static FunctionDescriptor vips_object_get_argument_priority$descriptor() {
        return vips_object_get_argument_priority.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_object_get_argument_priority(VipsObject *object, const char *name)
     * }
     */
    public static MethodHandle vips_object_get_argument_priority$handle() {
        return vips_object_get_argument_priority.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_object_get_argument_priority(VipsObject *object, const char *name)
     * }
     */
    public static MemorySegment vips_object_get_argument_priority$address() {
        return vips_object_get_argument_priority.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_object_get_argument_priority(VipsObject *object, const char *name)
     * }
     */
    public static int vips_object_get_argument_priority(MemorySegment object, MemorySegment name) {
        var mh$ = vips_object_get_argument_priority.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_get_argument_priority", object, name);
            }
            return (int)mh$.invokeExact(object, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_value_is_null {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_value_is_null");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_value_is_null(GParamSpec *psoec, const GValue *value)
     * }
     */
    public static FunctionDescriptor vips_value_is_null$descriptor() {
        return vips_value_is_null.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_value_is_null(GParamSpec *psoec, const GValue *value)
     * }
     */
    public static MethodHandle vips_value_is_null$handle() {
        return vips_value_is_null.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_value_is_null(GParamSpec *psoec, const GValue *value)
     * }
     */
    public static MemorySegment vips_value_is_null$address() {
        return vips_value_is_null.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_value_is_null(GParamSpec *psoec, const GValue *value)
     * }
     */
    public static int vips_value_is_null(MemorySegment psoec, MemorySegment value) {
        var mh$ = vips_value_is_null.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_value_is_null", psoec, value);
            }
            return (int)mh$.invokeExact(psoec, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_set_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_object_set_property");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_object_set_property(GObject *gobject, guint property_id, const GValue *value, GParamSpec *pspec)
     * }
     */
    public static FunctionDescriptor vips_object_set_property$descriptor() {
        return vips_object_set_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_object_set_property(GObject *gobject, guint property_id, const GValue *value, GParamSpec *pspec)
     * }
     */
    public static MethodHandle vips_object_set_property$handle() {
        return vips_object_set_property.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_object_set_property(GObject *gobject, guint property_id, const GValue *value, GParamSpec *pspec)
     * }
     */
    public static MemorySegment vips_object_set_property$address() {
        return vips_object_set_property.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_object_set_property(GObject *gobject, guint property_id, const GValue *value, GParamSpec *pspec)
     * }
     */
    public static void vips_object_set_property(MemorySegment gobject, int property_id, MemorySegment value, MemorySegment pspec) {
        var mh$ = vips_object_set_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_set_property", gobject, property_id, value, pspec);
            }
            mh$.invokeExact(gobject, property_id, value, pspec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_get_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_object_get_property");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_object_get_property(GObject *gobject, guint property_id, GValue *value, GParamSpec *pspec)
     * }
     */
    public static FunctionDescriptor vips_object_get_property$descriptor() {
        return vips_object_get_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_object_get_property(GObject *gobject, guint property_id, GValue *value, GParamSpec *pspec)
     * }
     */
    public static MethodHandle vips_object_get_property$handle() {
        return vips_object_get_property.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_object_get_property(GObject *gobject, guint property_id, GValue *value, GParamSpec *pspec)
     * }
     */
    public static MemorySegment vips_object_get_property$address() {
        return vips_object_get_property.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_object_get_property(GObject *gobject, guint property_id, GValue *value, GParamSpec *pspec)
     * }
     */
    public static void vips_object_get_property(MemorySegment gobject, int property_id, MemorySegment value, MemorySegment pspec) {
        var mh$ = vips_object_get_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_get_property", gobject, property_id, value, pspec);
            }
            mh$.invokeExact(gobject, property_id, value, pspec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_preclose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_object_preclose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_object_preclose(VipsObject *object)
     * }
     */
    public static FunctionDescriptor vips_object_preclose$descriptor() {
        return vips_object_preclose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_object_preclose(VipsObject *object)
     * }
     */
    public static MethodHandle vips_object_preclose$handle() {
        return vips_object_preclose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_object_preclose(VipsObject *object)
     * }
     */
    public static MemorySegment vips_object_preclose$address() {
        return vips_object_preclose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_object_preclose(VipsObject *object)
     * }
     */
    public static void vips_object_preclose(MemorySegment object) {
        var mh$ = vips_object_preclose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_preclose", object);
            }
            mh$.invokeExact(object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_build {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_object_build");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_object_build(VipsObject *object)
     * }
     */
    public static FunctionDescriptor vips_object_build$descriptor() {
        return vips_object_build.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_object_build(VipsObject *object)
     * }
     */
    public static MethodHandle vips_object_build$handle() {
        return vips_object_build.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_object_build(VipsObject *object)
     * }
     */
    public static MemorySegment vips_object_build$address() {
        return vips_object_build.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_object_build(VipsObject *object)
     * }
     */
    public static int vips_object_build(MemorySegment object) {
        var mh$ = vips_object_build.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_build", object);
            }
            return (int)mh$.invokeExact(object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_summary_class {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_object_summary_class");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_object_summary_class(VipsObjectClass *klass, VipsBuf *buf)
     * }
     */
    public static FunctionDescriptor vips_object_summary_class$descriptor() {
        return vips_object_summary_class.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_object_summary_class(VipsObjectClass *klass, VipsBuf *buf)
     * }
     */
    public static MethodHandle vips_object_summary_class$handle() {
        return vips_object_summary_class.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_object_summary_class(VipsObjectClass *klass, VipsBuf *buf)
     * }
     */
    public static MemorySegment vips_object_summary_class$address() {
        return vips_object_summary_class.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_object_summary_class(VipsObjectClass *klass, VipsBuf *buf)
     * }
     */
    public static void vips_object_summary_class(MemorySegment klass, MemorySegment buf) {
        var mh$ = vips_object_summary_class.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_summary_class", klass, buf);
            }
            mh$.invokeExact(klass, buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_summary {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_object_summary");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_object_summary(VipsObject *object, VipsBuf *buf)
     * }
     */
    public static FunctionDescriptor vips_object_summary$descriptor() {
        return vips_object_summary.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_object_summary(VipsObject *object, VipsBuf *buf)
     * }
     */
    public static MethodHandle vips_object_summary$handle() {
        return vips_object_summary.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_object_summary(VipsObject *object, VipsBuf *buf)
     * }
     */
    public static MemorySegment vips_object_summary$address() {
        return vips_object_summary.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_object_summary(VipsObject *object, VipsBuf *buf)
     * }
     */
    public static void vips_object_summary(MemorySegment object, MemorySegment buf) {
        var mh$ = vips_object_summary.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_summary", object, buf);
            }
            mh$.invokeExact(object, buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_dump {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_object_dump");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_object_dump(VipsObject *object, VipsBuf *buf)
     * }
     */
    public static FunctionDescriptor vips_object_dump$descriptor() {
        return vips_object_dump.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_object_dump(VipsObject *object, VipsBuf *buf)
     * }
     */
    public static MethodHandle vips_object_dump$handle() {
        return vips_object_dump.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_object_dump(VipsObject *object, VipsBuf *buf)
     * }
     */
    public static MemorySegment vips_object_dump$address() {
        return vips_object_dump.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_object_dump(VipsObject *object, VipsBuf *buf)
     * }
     */
    public static void vips_object_dump(MemorySegment object, MemorySegment buf) {
        var mh$ = vips_object_dump.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_dump", object, buf);
            }
            mh$.invokeExact(object, buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_print_summary_class {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_object_print_summary_class");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_object_print_summary_class(VipsObjectClass *klass)
     * }
     */
    public static FunctionDescriptor vips_object_print_summary_class$descriptor() {
        return vips_object_print_summary_class.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_object_print_summary_class(VipsObjectClass *klass)
     * }
     */
    public static MethodHandle vips_object_print_summary_class$handle() {
        return vips_object_print_summary_class.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_object_print_summary_class(VipsObjectClass *klass)
     * }
     */
    public static MemorySegment vips_object_print_summary_class$address() {
        return vips_object_print_summary_class.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_object_print_summary_class(VipsObjectClass *klass)
     * }
     */
    public static void vips_object_print_summary_class(MemorySegment klass) {
        var mh$ = vips_object_print_summary_class.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_print_summary_class", klass);
            }
            mh$.invokeExact(klass);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_print_summary {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_object_print_summary");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_object_print_summary(VipsObject *object)
     * }
     */
    public static FunctionDescriptor vips_object_print_summary$descriptor() {
        return vips_object_print_summary.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_object_print_summary(VipsObject *object)
     * }
     */
    public static MethodHandle vips_object_print_summary$handle() {
        return vips_object_print_summary.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_object_print_summary(VipsObject *object)
     * }
     */
    public static MemorySegment vips_object_print_summary$address() {
        return vips_object_print_summary.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_object_print_summary(VipsObject *object)
     * }
     */
    public static void vips_object_print_summary(MemorySegment object) {
        var mh$ = vips_object_print_summary.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_print_summary", object);
            }
            mh$.invokeExact(object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_print_dump {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_object_print_dump");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_object_print_dump(VipsObject *object)
     * }
     */
    public static FunctionDescriptor vips_object_print_dump$descriptor() {
        return vips_object_print_dump.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_object_print_dump(VipsObject *object)
     * }
     */
    public static MethodHandle vips_object_print_dump$handle() {
        return vips_object_print_dump.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_object_print_dump(VipsObject *object)
     * }
     */
    public static MemorySegment vips_object_print_dump$address() {
        return vips_object_print_dump.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_object_print_dump(VipsObject *object)
     * }
     */
    public static void vips_object_print_dump(MemorySegment object) {
        var mh$ = vips_object_print_dump.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_print_dump", object);
            }
            mh$.invokeExact(object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_print_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_object_print_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_object_print_name(VipsObject *object)
     * }
     */
    public static FunctionDescriptor vips_object_print_name$descriptor() {
        return vips_object_print_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_object_print_name(VipsObject *object)
     * }
     */
    public static MethodHandle vips_object_print_name$handle() {
        return vips_object_print_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_object_print_name(VipsObject *object)
     * }
     */
    public static MemorySegment vips_object_print_name$address() {
        return vips_object_print_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_object_print_name(VipsObject *object)
     * }
     */
    public static void vips_object_print_name(MemorySegment object) {
        var mh$ = vips_object_print_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_print_name", object);
            }
            mh$.invokeExact(object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_sanity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_object_sanity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_object_sanity(VipsObject *object)
     * }
     */
    public static FunctionDescriptor vips_object_sanity$descriptor() {
        return vips_object_sanity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_object_sanity(VipsObject *object)
     * }
     */
    public static MethodHandle vips_object_sanity$handle() {
        return vips_object_sanity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_object_sanity(VipsObject *object)
     * }
     */
    public static MemorySegment vips_object_sanity$address() {
        return vips_object_sanity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_object_sanity(VipsObject *object)
     * }
     */
    public static int vips_object_sanity(MemorySegment object) {
        var mh$ = vips_object_sanity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_sanity", object);
            }
            return (int)mh$.invokeExact(object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_object_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_object_get_type()
     * }
     */
    public static FunctionDescriptor vips_object_get_type$descriptor() {
        return vips_object_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_object_get_type()
     * }
     */
    public static MethodHandle vips_object_get_type$handle() {
        return vips_object_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_object_get_type()
     * }
     */
    public static MemorySegment vips_object_get_type$address() {
        return vips_object_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_object_get_type()
     * }
     */
    public static long vips_object_get_type() {
        var mh$ = vips_object_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_class_install_argument {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_INT,
            vips_h.C_INT,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_object_class_install_argument");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_object_class_install_argument(VipsObjectClass *cls, GParamSpec *pspec, VipsArgumentFlags flags, int priority, guint offset)
     * }
     */
    public static FunctionDescriptor vips_object_class_install_argument$descriptor() {
        return vips_object_class_install_argument.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_object_class_install_argument(VipsObjectClass *cls, GParamSpec *pspec, VipsArgumentFlags flags, int priority, guint offset)
     * }
     */
    public static MethodHandle vips_object_class_install_argument$handle() {
        return vips_object_class_install_argument.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_object_class_install_argument(VipsObjectClass *cls, GParamSpec *pspec, VipsArgumentFlags flags, int priority, guint offset)
     * }
     */
    public static MemorySegment vips_object_class_install_argument$address() {
        return vips_object_class_install_argument.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_object_class_install_argument(VipsObjectClass *cls, GParamSpec *pspec, VipsArgumentFlags flags, int priority, guint offset)
     * }
     */
    public static void vips_object_class_install_argument(MemorySegment cls, MemorySegment pspec, int flags, int priority, int offset) {
        var mh$ = vips_object_class_install_argument.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_class_install_argument", cls, pspec, flags, priority, offset);
            }
            mh$.invokeExact(cls, pspec, flags, priority, offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_set_argument_from_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_object_set_argument_from_string");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_object_set_argument_from_string(VipsObject *object, const char *name, const char *value)
     * }
     */
    public static FunctionDescriptor vips_object_set_argument_from_string$descriptor() {
        return vips_object_set_argument_from_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_object_set_argument_from_string(VipsObject *object, const char *name, const char *value)
     * }
     */
    public static MethodHandle vips_object_set_argument_from_string$handle() {
        return vips_object_set_argument_from_string.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_object_set_argument_from_string(VipsObject *object, const char *name, const char *value)
     * }
     */
    public static MemorySegment vips_object_set_argument_from_string$address() {
        return vips_object_set_argument_from_string.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_object_set_argument_from_string(VipsObject *object, const char *name, const char *value)
     * }
     */
    public static int vips_object_set_argument_from_string(MemorySegment object, MemorySegment name, MemorySegment value) {
        var mh$ = vips_object_set_argument_from_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_set_argument_from_string", object, name, value);
            }
            return (int)mh$.invokeExact(object, name, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_argument_needsstring {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_object_argument_needsstring");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_object_argument_needsstring(VipsObject *object, const char *name)
     * }
     */
    public static FunctionDescriptor vips_object_argument_needsstring$descriptor() {
        return vips_object_argument_needsstring.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_object_argument_needsstring(VipsObject *object, const char *name)
     * }
     */
    public static MethodHandle vips_object_argument_needsstring$handle() {
        return vips_object_argument_needsstring.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_object_argument_needsstring(VipsObject *object, const char *name)
     * }
     */
    public static MemorySegment vips_object_argument_needsstring$address() {
        return vips_object_argument_needsstring.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_object_argument_needsstring(VipsObject *object, const char *name)
     * }
     */
    public static int vips_object_argument_needsstring(MemorySegment object, MemorySegment name) {
        var mh$ = vips_object_argument_needsstring.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_argument_needsstring", object, name);
            }
            return (int)mh$.invokeExact(object, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_get_argument_to_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_object_get_argument_to_string");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_object_get_argument_to_string(VipsObject *object, const char *name, const char *arg)
     * }
     */
    public static FunctionDescriptor vips_object_get_argument_to_string$descriptor() {
        return vips_object_get_argument_to_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_object_get_argument_to_string(VipsObject *object, const char *name, const char *arg)
     * }
     */
    public static MethodHandle vips_object_get_argument_to_string$handle() {
        return vips_object_get_argument_to_string.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_object_get_argument_to_string(VipsObject *object, const char *name, const char *arg)
     * }
     */
    public static MemorySegment vips_object_get_argument_to_string$address() {
        return vips_object_get_argument_to_string.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_object_get_argument_to_string(VipsObject *object, const char *name, const char *arg)
     * }
     */
    public static int vips_object_get_argument_to_string(MemorySegment object, MemorySegment name, MemorySegment arg) {
        var mh$ = vips_object_get_argument_to_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_get_argument_to_string", object, name, arg);
            }
            return (int)mh$.invokeExact(object, name, arg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_set_required {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_object_set_required");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_object_set_required(VipsObject *object, const char *value)
     * }
     */
    public static FunctionDescriptor vips_object_set_required$descriptor() {
        return vips_object_set_required.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_object_set_required(VipsObject *object, const char *value)
     * }
     */
    public static MethodHandle vips_object_set_required$handle() {
        return vips_object_set_required.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_object_set_required(VipsObject *object, const char *value)
     * }
     */
    public static MemorySegment vips_object_set_required$address() {
        return vips_object_set_required.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_object_set_required(VipsObject *object, const char *value)
     * }
     */
    public static int vips_object_set_required(MemorySegment object, MemorySegment value) {
        var mh$ = vips_object_set_required.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_set_required", object, value);
            }
            return (int)mh$.invokeExact(object, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_LONG,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_object_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsObject *vips_object_new(GType type, VipsObjectSetArguments set, void *a, void *b)
     * }
     */
    public static FunctionDescriptor vips_object_new$descriptor() {
        return vips_object_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsObject *vips_object_new(GType type, VipsObjectSetArguments set, void *a, void *b)
     * }
     */
    public static MethodHandle vips_object_new$handle() {
        return vips_object_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsObject *vips_object_new(GType type, VipsObjectSetArguments set, void *a, void *b)
     * }
     */
    public static MemorySegment vips_object_new$address() {
        return vips_object_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsObject *vips_object_new(GType type, VipsObjectSetArguments set, void *a, void *b)
     * }
     */
    public static MemorySegment vips_object_new(long type, MemorySegment set, MemorySegment a, MemorySegment b) {
        var mh$ = vips_object_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_new", type, set, a, b);
            }
            return (MemorySegment)mh$.invokeExact(type, set, a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_set_valist {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_object_set_valist");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_object_set_valist(VipsObject *object, va_list ap)
     * }
     */
    public static FunctionDescriptor vips_object_set_valist$descriptor() {
        return vips_object_set_valist.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_object_set_valist(VipsObject *object, va_list ap)
     * }
     */
    public static MethodHandle vips_object_set_valist$handle() {
        return vips_object_set_valist.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_object_set_valist(VipsObject *object, va_list ap)
     * }
     */
    public static MemorySegment vips_object_set_valist$address() {
        return vips_object_set_valist.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_object_set_valist(VipsObject *object, va_list ap)
     * }
     */
    public static int vips_object_set_valist(MemorySegment object, MemorySegment ap) {
        var mh$ = vips_object_set_valist.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_set_valist", object, ap);
            }
            return (int)mh$.invokeExact(object, ap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_object_set(VipsObject *object, ...)
     * }
     */
    public static class vips_object_set {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_object_set");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_object_set(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_object_set(VipsObject *object, ...)
         * }
         */
        public static vips_object_set makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_object_set(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment object, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_object_set", object, x1);
                }
                return (int)spreader.invokeExact(object, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class vips_object_set_from_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_object_set_from_string");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_object_set_from_string(VipsObject *object, const char *string)
     * }
     */
    public static FunctionDescriptor vips_object_set_from_string$descriptor() {
        return vips_object_set_from_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_object_set_from_string(VipsObject *object, const char *string)
     * }
     */
    public static MethodHandle vips_object_set_from_string$handle() {
        return vips_object_set_from_string.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_object_set_from_string(VipsObject *object, const char *string)
     * }
     */
    public static MemorySegment vips_object_set_from_string$address() {
        return vips_object_set_from_string.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_object_set_from_string(VipsObject *object, const char *string)
     * }
     */
    public static int vips_object_set_from_string(MemorySegment object, MemorySegment string) {
        var mh$ = vips_object_set_from_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_set_from_string", object, string);
            }
            return (int)mh$.invokeExact(object, string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_new_from_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_object_new_from_string");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsObject *vips_object_new_from_string(VipsObjectClass *object_class, const char *p)
     * }
     */
    public static FunctionDescriptor vips_object_new_from_string$descriptor() {
        return vips_object_new_from_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsObject *vips_object_new_from_string(VipsObjectClass *object_class, const char *p)
     * }
     */
    public static MethodHandle vips_object_new_from_string$handle() {
        return vips_object_new_from_string.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsObject *vips_object_new_from_string(VipsObjectClass *object_class, const char *p)
     * }
     */
    public static MemorySegment vips_object_new_from_string$address() {
        return vips_object_new_from_string.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsObject *vips_object_new_from_string(VipsObjectClass *object_class, const char *p)
     * }
     */
    public static MemorySegment vips_object_new_from_string(MemorySegment object_class, MemorySegment p) {
        var mh$ = vips_object_new_from_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_new_from_string", object_class, p);
            }
            return (MemorySegment)mh$.invokeExact(object_class, p);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_to_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_object_to_string");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_object_to_string(VipsObject *object, VipsBuf *buf)
     * }
     */
    public static FunctionDescriptor vips_object_to_string$descriptor() {
        return vips_object_to_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_object_to_string(VipsObject *object, VipsBuf *buf)
     * }
     */
    public static MethodHandle vips_object_to_string$handle() {
        return vips_object_to_string.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_object_to_string(VipsObject *object, VipsBuf *buf)
     * }
     */
    public static MemorySegment vips_object_to_string$address() {
        return vips_object_to_string.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_object_to_string(VipsObject *object, VipsBuf *buf)
     * }
     */
    public static void vips_object_to_string(MemorySegment object, MemorySegment buf) {
        var mh$ = vips_object_to_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_to_string", object, buf);
            }
            mh$.invokeExact(object, buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_map {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_object_map");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *vips_object_map(VipsSListMap2Fn fn, void *a, void *b)
     * }
     */
    public static FunctionDescriptor vips_object_map$descriptor() {
        return vips_object_map.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *vips_object_map(VipsSListMap2Fn fn, void *a, void *b)
     * }
     */
    public static MethodHandle vips_object_map$handle() {
        return vips_object_map.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *vips_object_map(VipsSListMap2Fn fn, void *a, void *b)
     * }
     */
    public static MemorySegment vips_object_map$address() {
        return vips_object_map.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *vips_object_map(VipsSListMap2Fn fn, void *a, void *b)
     * }
     */
    public static MemorySegment vips_object_map(MemorySegment fn, MemorySegment a, MemorySegment b) {
        var mh$ = vips_object_map.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_map", fn, a, b);
            }
            return (MemorySegment)mh$.invokeExact(fn, a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_type_map {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_LONG,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_type_map");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *vips_type_map(GType base, VipsTypeMap2Fn fn, void *a, void *b)
     * }
     */
    public static FunctionDescriptor vips_type_map$descriptor() {
        return vips_type_map.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *vips_type_map(GType base, VipsTypeMap2Fn fn, void *a, void *b)
     * }
     */
    public static MethodHandle vips_type_map$handle() {
        return vips_type_map.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *vips_type_map(GType base, VipsTypeMap2Fn fn, void *a, void *b)
     * }
     */
    public static MemorySegment vips_type_map$address() {
        return vips_type_map.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *vips_type_map(GType base, VipsTypeMap2Fn fn, void *a, void *b)
     * }
     */
    public static MemorySegment vips_type_map(long base, MemorySegment fn, MemorySegment a, MemorySegment b) {
        var mh$ = vips_type_map.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_type_map", base, fn, a, b);
            }
            return (MemorySegment)mh$.invokeExact(base, fn, a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_type_map_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_LONG,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_type_map_all");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *vips_type_map_all(GType base, VipsTypeMapFn fn, void *a)
     * }
     */
    public static FunctionDescriptor vips_type_map_all$descriptor() {
        return vips_type_map_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *vips_type_map_all(GType base, VipsTypeMapFn fn, void *a)
     * }
     */
    public static MethodHandle vips_type_map_all$handle() {
        return vips_type_map_all.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *vips_type_map_all(GType base, VipsTypeMapFn fn, void *a)
     * }
     */
    public static MemorySegment vips_type_map_all$address() {
        return vips_type_map_all.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *vips_type_map_all(GType base, VipsTypeMapFn fn, void *a)
     * }
     */
    public static MemorySegment vips_type_map_all(long base, MemorySegment fn, MemorySegment a) {
        var mh$ = vips_type_map_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_type_map_all", base, fn, a);
            }
            return (MemorySegment)mh$.invokeExact(base, fn, a);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_type_depth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_LONG
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_type_depth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_type_depth(GType type)
     * }
     */
    public static FunctionDescriptor vips_type_depth$descriptor() {
        return vips_type_depth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_type_depth(GType type)
     * }
     */
    public static MethodHandle vips_type_depth$handle() {
        return vips_type_depth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_type_depth(GType type)
     * }
     */
    public static MemorySegment vips_type_depth$address() {
        return vips_type_depth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_type_depth(GType type)
     * }
     */
    public static int vips_type_depth(long type) {
        var mh$ = vips_type_depth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_type_depth", type);
            }
            return (int)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_type_find {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_type_find");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_type_find(const char *basename, const char *nickname)
     * }
     */
    public static FunctionDescriptor vips_type_find$descriptor() {
        return vips_type_find.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_type_find(const char *basename, const char *nickname)
     * }
     */
    public static MethodHandle vips_type_find$handle() {
        return vips_type_find.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_type_find(const char *basename, const char *nickname)
     * }
     */
    public static MemorySegment vips_type_find$address() {
        return vips_type_find.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_type_find(const char *basename, const char *nickname)
     * }
     */
    public static long vips_type_find(MemorySegment basename, MemorySegment nickname) {
        var mh$ = vips_type_find.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_type_find", basename, nickname);
            }
            return (long)mh$.invokeExact(basename, nickname);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_nickname_find {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_LONG
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_nickname_find");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *vips_nickname_find(GType type)
     * }
     */
    public static FunctionDescriptor vips_nickname_find$descriptor() {
        return vips_nickname_find.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *vips_nickname_find(GType type)
     * }
     */
    public static MethodHandle vips_nickname_find$handle() {
        return vips_nickname_find.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *vips_nickname_find(GType type)
     * }
     */
    public static MemorySegment vips_nickname_find$address() {
        return vips_nickname_find.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *vips_nickname_find(GType type)
     * }
     */
    public static MemorySegment vips_nickname_find(long type) {
        var mh$ = vips_nickname_find.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_nickname_find", type);
            }
            return (MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_class_map_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_LONG,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_class_map_all");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *vips_class_map_all(GType type, VipsClassMapFn fn, void *a)
     * }
     */
    public static FunctionDescriptor vips_class_map_all$descriptor() {
        return vips_class_map_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *vips_class_map_all(GType type, VipsClassMapFn fn, void *a)
     * }
     */
    public static MethodHandle vips_class_map_all$handle() {
        return vips_class_map_all.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *vips_class_map_all(GType type, VipsClassMapFn fn, void *a)
     * }
     */
    public static MemorySegment vips_class_map_all$address() {
        return vips_class_map_all.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *vips_class_map_all(GType type, VipsClassMapFn fn, void *a)
     * }
     */
    public static MemorySegment vips_class_map_all(long type, MemorySegment fn, MemorySegment a) {
        var mh$ = vips_class_map_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_class_map_all", type, fn, a);
            }
            return (MemorySegment)mh$.invokeExact(type, fn, a);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_class_find {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_class_find");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const VipsObjectClass *vips_class_find(const char *basename, const char *nickname)
     * }
     */
    public static FunctionDescriptor vips_class_find$descriptor() {
        return vips_class_find.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const VipsObjectClass *vips_class_find(const char *basename, const char *nickname)
     * }
     */
    public static MethodHandle vips_class_find$handle() {
        return vips_class_find.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const VipsObjectClass *vips_class_find(const char *basename, const char *nickname)
     * }
     */
    public static MemorySegment vips_class_find$address() {
        return vips_class_find.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const VipsObjectClass *vips_class_find(const char *basename, const char *nickname)
     * }
     */
    public static MemorySegment vips_class_find(MemorySegment basename, MemorySegment nickname) {
        var mh$ = vips_class_find.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_class_find", basename, nickname);
            }
            return (MemorySegment)mh$.invokeExact(basename, nickname);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_local_array {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_object_local_array");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsObject **vips_object_local_array(VipsObject *parent, int n)
     * }
     */
    public static FunctionDescriptor vips_object_local_array$descriptor() {
        return vips_object_local_array.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsObject **vips_object_local_array(VipsObject *parent, int n)
     * }
     */
    public static MethodHandle vips_object_local_array$handle() {
        return vips_object_local_array.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsObject **vips_object_local_array(VipsObject *parent, int n)
     * }
     */
    public static MemorySegment vips_object_local_array$address() {
        return vips_object_local_array.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsObject **vips_object_local_array(VipsObject *parent, int n)
     * }
     */
    public static MemorySegment vips_object_local_array(MemorySegment parent, int n) {
        var mh$ = vips_object_local_array.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_local_array", parent, n);
            }
            return (MemorySegment)mh$.invokeExact(parent, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_local_cb {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_object_local_cb");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_object_local_cb(VipsObject *vobject, GObject *gobject)
     * }
     */
    public static FunctionDescriptor vips_object_local_cb$descriptor() {
        return vips_object_local_cb.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_object_local_cb(VipsObject *vobject, GObject *gobject)
     * }
     */
    public static MethodHandle vips_object_local_cb$handle() {
        return vips_object_local_cb.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_object_local_cb(VipsObject *vobject, GObject *gobject)
     * }
     */
    public static MemorySegment vips_object_local_cb$address() {
        return vips_object_local_cb.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_object_local_cb(VipsObject *vobject, GObject *gobject)
     * }
     */
    public static void vips_object_local_cb(MemorySegment vobject, MemorySegment gobject) {
        var mh$ = vips_object_local_cb.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_local_cb", vobject, gobject);
            }
            mh$.invokeExact(vobject, gobject);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_set_static {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_object_set_static");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_object_set_static(VipsObject *object, gboolean static_object)
     * }
     */
    public static FunctionDescriptor vips_object_set_static$descriptor() {
        return vips_object_set_static.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_object_set_static(VipsObject *object, gboolean static_object)
     * }
     */
    public static MethodHandle vips_object_set_static$handle() {
        return vips_object_set_static.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_object_set_static(VipsObject *object, gboolean static_object)
     * }
     */
    public static MemorySegment vips_object_set_static$address() {
        return vips_object_set_static.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_object_set_static(VipsObject *object, gboolean static_object)
     * }
     */
    public static void vips_object_set_static(MemorySegment object, int static_object) {
        var mh$ = vips_object_set_static.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_set_static", object, static_object);
            }
            mh$.invokeExact(object, static_object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_print_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_object_print_all");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_object_print_all()
     * }
     */
    public static FunctionDescriptor vips_object_print_all$descriptor() {
        return vips_object_print_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_object_print_all()
     * }
     */
    public static MethodHandle vips_object_print_all$handle() {
        return vips_object_print_all.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_object_print_all()
     * }
     */
    public static MemorySegment vips_object_print_all$address() {
        return vips_object_print_all.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_object_print_all()
     * }
     */
    public static void vips_object_print_all() {
        var mh$ = vips_object_print_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_print_all");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_sanity_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_object_sanity_all");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_object_sanity_all()
     * }
     */
    public static FunctionDescriptor vips_object_sanity_all$descriptor() {
        return vips_object_sanity_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_object_sanity_all()
     * }
     */
    public static MethodHandle vips_object_sanity_all$handle() {
        return vips_object_sanity_all.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_object_sanity_all()
     * }
     */
    public static MemorySegment vips_object_sanity_all$address() {
        return vips_object_sanity_all.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_object_sanity_all()
     * }
     */
    public static void vips_object_sanity_all() {
        var mh$ = vips_object_sanity_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_sanity_all");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_rewind {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_object_rewind");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_object_rewind(VipsObject *object)
     * }
     */
    public static FunctionDescriptor vips_object_rewind$descriptor() {
        return vips_object_rewind.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_object_rewind(VipsObject *object)
     * }
     */
    public static MethodHandle vips_object_rewind$handle() {
        return vips_object_rewind.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_object_rewind(VipsObject *object)
     * }
     */
    public static MemorySegment vips_object_rewind$address() {
        return vips_object_rewind.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_object_rewind(VipsObject *object)
     * }
     */
    public static void vips_object_rewind(MemorySegment object) {
        var mh$ = vips_object_rewind.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_rewind", object);
            }
            mh$.invokeExact(object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_unref_outputs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_object_unref_outputs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_object_unref_outputs(VipsObject *object)
     * }
     */
    public static FunctionDescriptor vips_object_unref_outputs$descriptor() {
        return vips_object_unref_outputs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_object_unref_outputs(VipsObject *object)
     * }
     */
    public static MethodHandle vips_object_unref_outputs$handle() {
        return vips_object_unref_outputs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_object_unref_outputs(VipsObject *object)
     * }
     */
    public static MemorySegment vips_object_unref_outputs$address() {
        return vips_object_unref_outputs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_object_unref_outputs(VipsObject *object)
     * }
     */
    public static void vips_object_unref_outputs(MemorySegment object) {
        var mh$ = vips_object_unref_outputs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_unref_outputs", object);
            }
            mh$.invokeExact(object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_object_get_description {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_object_get_description");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *vips_object_get_description(VipsObject *object)
     * }
     */
    public static FunctionDescriptor vips_object_get_description$descriptor() {
        return vips_object_get_description.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *vips_object_get_description(VipsObject *object)
     * }
     */
    public static MethodHandle vips_object_get_description$handle() {
        return vips_object_get_description.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *vips_object_get_description(VipsObject *object)
     * }
     */
    public static MemorySegment vips_object_get_description$address() {
        return vips_object_get_description.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *vips_object_get_description(VipsObject *object)
     * }
     */
    public static MemorySegment vips_object_get_description(MemorySegment object) {
        var mh$ = vips_object_get_description.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_object_get_description", object);
            }
            return (MemorySegment)mh$.invokeExact(object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_thing_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_thing_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_thing_get_type()
     * }
     */
    public static FunctionDescriptor vips_thing_get_type$descriptor() {
        return vips_thing_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_thing_get_type()
     * }
     */
    public static MethodHandle vips_thing_get_type$handle() {
        return vips_thing_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_thing_get_type()
     * }
     */
    public static MemorySegment vips_thing_get_type$address() {
        return vips_thing_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_thing_get_type()
     * }
     */
    public static long vips_thing_get_type() {
        var mh$ = vips_thing_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_thing_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_thing_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_thing_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsThing *vips_thing_new(int i)
     * }
     */
    public static FunctionDescriptor vips_thing_new$descriptor() {
        return vips_thing_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsThing *vips_thing_new(int i)
     * }
     */
    public static MethodHandle vips_thing_new$handle() {
        return vips_thing_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsThing *vips_thing_new(int i)
     * }
     */
    public static MemorySegment vips_thing_new$address() {
        return vips_thing_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsThing *vips_thing_new(int i)
     * }
     */
    public static MemorySegment vips_thing_new(int i) {
        var mh$ = vips_thing_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_thing_new", i);
            }
            return (MemorySegment)mh$.invokeExact(i);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_area_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_area_copy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsArea *vips_area_copy(VipsArea *area)
     * }
     */
    public static FunctionDescriptor vips_area_copy$descriptor() {
        return vips_area_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsArea *vips_area_copy(VipsArea *area)
     * }
     */
    public static MethodHandle vips_area_copy$handle() {
        return vips_area_copy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsArea *vips_area_copy(VipsArea *area)
     * }
     */
    public static MemorySegment vips_area_copy$address() {
        return vips_area_copy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsArea *vips_area_copy(VipsArea *area)
     * }
     */
    public static MemorySegment vips_area_copy(MemorySegment area) {
        var mh$ = vips_area_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_area_copy", area);
            }
            return (MemorySegment)mh$.invokeExact(area);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_area_free_cb {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_area_free_cb");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_area_free_cb(void *mem, VipsArea *area)
     * }
     */
    public static FunctionDescriptor vips_area_free_cb$descriptor() {
        return vips_area_free_cb.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_area_free_cb(void *mem, VipsArea *area)
     * }
     */
    public static MethodHandle vips_area_free_cb$handle() {
        return vips_area_free_cb.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_area_free_cb(void *mem, VipsArea *area)
     * }
     */
    public static MemorySegment vips_area_free_cb$address() {
        return vips_area_free_cb.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_area_free_cb(void *mem, VipsArea *area)
     * }
     */
    public static int vips_area_free_cb(MemorySegment mem, MemorySegment area) {
        var mh$ = vips_area_free_cb.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_area_free_cb", mem, area);
            }
            return (int)mh$.invokeExact(mem, area);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_area_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_area_unref");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_area_unref(VipsArea *area)
     * }
     */
    public static FunctionDescriptor vips_area_unref$descriptor() {
        return vips_area_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_area_unref(VipsArea *area)
     * }
     */
    public static MethodHandle vips_area_unref$handle() {
        return vips_area_unref.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_area_unref(VipsArea *area)
     * }
     */
    public static MemorySegment vips_area_unref$address() {
        return vips_area_unref.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_area_unref(VipsArea *area)
     * }
     */
    public static void vips_area_unref(MemorySegment area) {
        var mh$ = vips_area_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_area_unref", area);
            }
            mh$.invokeExact(area);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_area_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_area_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsArea *vips_area_new(VipsCallbackFn free_fn, void *data)
     * }
     */
    public static FunctionDescriptor vips_area_new$descriptor() {
        return vips_area_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsArea *vips_area_new(VipsCallbackFn free_fn, void *data)
     * }
     */
    public static MethodHandle vips_area_new$handle() {
        return vips_area_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsArea *vips_area_new(VipsCallbackFn free_fn, void *data)
     * }
     */
    public static MemorySegment vips_area_new$address() {
        return vips_area_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsArea *vips_area_new(VipsCallbackFn free_fn, void *data)
     * }
     */
    public static MemorySegment vips_area_new(MemorySegment free_fn, MemorySegment data) {
        var mh$ = vips_area_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_area_new", free_fn, data);
            }
            return (MemorySegment)mh$.invokeExact(free_fn, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_area_new_array {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_LONG,
            vips_h.C_LONG,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_area_new_array");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsArea *vips_area_new_array(GType type, size_t sizeof_type, int n)
     * }
     */
    public static FunctionDescriptor vips_area_new_array$descriptor() {
        return vips_area_new_array.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsArea *vips_area_new_array(GType type, size_t sizeof_type, int n)
     * }
     */
    public static MethodHandle vips_area_new_array$handle() {
        return vips_area_new_array.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsArea *vips_area_new_array(GType type, size_t sizeof_type, int n)
     * }
     */
    public static MemorySegment vips_area_new_array$address() {
        return vips_area_new_array.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsArea *vips_area_new_array(GType type, size_t sizeof_type, int n)
     * }
     */
    public static MemorySegment vips_area_new_array(long type, long sizeof_type, int n) {
        var mh$ = vips_area_new_array.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_area_new_array", type, sizeof_type, n);
            }
            return (MemorySegment)mh$.invokeExact(type, sizeof_type, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_area_new_array_object {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_area_new_array_object");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsArea *vips_area_new_array_object(int n)
     * }
     */
    public static FunctionDescriptor vips_area_new_array_object$descriptor() {
        return vips_area_new_array_object.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsArea *vips_area_new_array_object(int n)
     * }
     */
    public static MethodHandle vips_area_new_array_object$handle() {
        return vips_area_new_array_object.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsArea *vips_area_new_array_object(int n)
     * }
     */
    public static MemorySegment vips_area_new_array_object$address() {
        return vips_area_new_array_object.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsArea *vips_area_new_array_object(int n)
     * }
     */
    public static MemorySegment vips_area_new_array_object(int n) {
        var mh$ = vips_area_new_array_object.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_area_new_array_object", n);
            }
            return (MemorySegment)mh$.invokeExact(n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_area_get_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_area_get_data");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *vips_area_get_data(VipsArea *area, size_t *length, int *n, GType *type, size_t *sizeof_type)
     * }
     */
    public static FunctionDescriptor vips_area_get_data$descriptor() {
        return vips_area_get_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *vips_area_get_data(VipsArea *area, size_t *length, int *n, GType *type, size_t *sizeof_type)
     * }
     */
    public static MethodHandle vips_area_get_data$handle() {
        return vips_area_get_data.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *vips_area_get_data(VipsArea *area, size_t *length, int *n, GType *type, size_t *sizeof_type)
     * }
     */
    public static MemorySegment vips_area_get_data$address() {
        return vips_area_get_data.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *vips_area_get_data(VipsArea *area, size_t *length, int *n, GType *type, size_t *sizeof_type)
     * }
     */
    public static MemorySegment vips_area_get_data(MemorySegment area, MemorySegment length, MemorySegment n, MemorySegment type, MemorySegment sizeof_type) {
        var mh$ = vips_area_get_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_area_get_data", area, length, n, type, sizeof_type);
            }
            return (MemorySegment)mh$.invokeExact(area, length, n, type, sizeof_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_area_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_area_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_area_get_type()
     * }
     */
    public static FunctionDescriptor vips_area_get_type$descriptor() {
        return vips_area_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_area_get_type()
     * }
     */
    public static MethodHandle vips_area_get_type$handle() {
        return vips_area_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_area_get_type()
     * }
     */
    public static MemorySegment vips_area_get_type$address() {
        return vips_area_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_area_get_type()
     * }
     */
    public static long vips_area_get_type() {
        var mh$ = vips_area_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_area_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_save_string_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_save_string_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_save_string_get_type()
     * }
     */
    public static FunctionDescriptor vips_save_string_get_type$descriptor() {
        return vips_save_string_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_save_string_get_type()
     * }
     */
    public static MethodHandle vips_save_string_get_type$handle() {
        return vips_save_string_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_save_string_get_type()
     * }
     */
    public static MemorySegment vips_save_string_get_type$address() {
        return vips_save_string_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_save_string_get_type()
     * }
     */
    public static long vips_save_string_get_type() {
        var mh$ = vips_save_string_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_save_string_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_ref_string_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_ref_string_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsRefString *vips_ref_string_new(const char *str)
     * }
     */
    public static FunctionDescriptor vips_ref_string_new$descriptor() {
        return vips_ref_string_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsRefString *vips_ref_string_new(const char *str)
     * }
     */
    public static MethodHandle vips_ref_string_new$handle() {
        return vips_ref_string_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsRefString *vips_ref_string_new(const char *str)
     * }
     */
    public static MemorySegment vips_ref_string_new$address() {
        return vips_ref_string_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsRefString *vips_ref_string_new(const char *str)
     * }
     */
    public static MemorySegment vips_ref_string_new(MemorySegment str) {
        var mh$ = vips_ref_string_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_ref_string_new", str);
            }
            return (MemorySegment)mh$.invokeExact(str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_ref_string_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_ref_string_get");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *vips_ref_string_get(VipsRefString *refstr, size_t *length)
     * }
     */
    public static FunctionDescriptor vips_ref_string_get$descriptor() {
        return vips_ref_string_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *vips_ref_string_get(VipsRefString *refstr, size_t *length)
     * }
     */
    public static MethodHandle vips_ref_string_get$handle() {
        return vips_ref_string_get.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *vips_ref_string_get(VipsRefString *refstr, size_t *length)
     * }
     */
    public static MemorySegment vips_ref_string_get$address() {
        return vips_ref_string_get.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *vips_ref_string_get(VipsRefString *refstr, size_t *length)
     * }
     */
    public static MemorySegment vips_ref_string_get(MemorySegment refstr, MemorySegment length) {
        var mh$ = vips_ref_string_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_ref_string_get", refstr, length);
            }
            return (MemorySegment)mh$.invokeExact(refstr, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_ref_string_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_ref_string_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_ref_string_get_type()
     * }
     */
    public static FunctionDescriptor vips_ref_string_get_type$descriptor() {
        return vips_ref_string_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_ref_string_get_type()
     * }
     */
    public static MethodHandle vips_ref_string_get_type$handle() {
        return vips_ref_string_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_ref_string_get_type()
     * }
     */
    public static MemorySegment vips_ref_string_get_type$address() {
        return vips_ref_string_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_ref_string_get_type()
     * }
     */
    public static long vips_ref_string_get_type() {
        var mh$ = vips_ref_string_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_ref_string_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_blob_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_LONG
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_blob_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsBlob *vips_blob_new(VipsCallbackFn free_fn, const void *data, size_t length)
     * }
     */
    public static FunctionDescriptor vips_blob_new$descriptor() {
        return vips_blob_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsBlob *vips_blob_new(VipsCallbackFn free_fn, const void *data, size_t length)
     * }
     */
    public static MethodHandle vips_blob_new$handle() {
        return vips_blob_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsBlob *vips_blob_new(VipsCallbackFn free_fn, const void *data, size_t length)
     * }
     */
    public static MemorySegment vips_blob_new$address() {
        return vips_blob_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsBlob *vips_blob_new(VipsCallbackFn free_fn, const void *data, size_t length)
     * }
     */
    public static MemorySegment vips_blob_new(MemorySegment free_fn, MemorySegment data, long length) {
        var mh$ = vips_blob_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_blob_new", free_fn, data, length);
            }
            return (MemorySegment)mh$.invokeExact(free_fn, data, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_blob_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_LONG
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_blob_copy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsBlob *vips_blob_copy(const void *data, size_t length)
     * }
     */
    public static FunctionDescriptor vips_blob_copy$descriptor() {
        return vips_blob_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsBlob *vips_blob_copy(const void *data, size_t length)
     * }
     */
    public static MethodHandle vips_blob_copy$handle() {
        return vips_blob_copy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsBlob *vips_blob_copy(const void *data, size_t length)
     * }
     */
    public static MemorySegment vips_blob_copy$address() {
        return vips_blob_copy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsBlob *vips_blob_copy(const void *data, size_t length)
     * }
     */
    public static MemorySegment vips_blob_copy(MemorySegment data, long length) {
        var mh$ = vips_blob_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_blob_copy", data, length);
            }
            return (MemorySegment)mh$.invokeExact(data, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_blob_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_blob_get");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const void *vips_blob_get(VipsBlob *blob, size_t *length)
     * }
     */
    public static FunctionDescriptor vips_blob_get$descriptor() {
        return vips_blob_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const void *vips_blob_get(VipsBlob *blob, size_t *length)
     * }
     */
    public static MethodHandle vips_blob_get$handle() {
        return vips_blob_get.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const void *vips_blob_get(VipsBlob *blob, size_t *length)
     * }
     */
    public static MemorySegment vips_blob_get$address() {
        return vips_blob_get.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const void *vips_blob_get(VipsBlob *blob, size_t *length)
     * }
     */
    public static MemorySegment vips_blob_get(MemorySegment blob, MemorySegment length) {
        var mh$ = vips_blob_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_blob_get", blob, length);
            }
            return (MemorySegment)mh$.invokeExact(blob, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_blob_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_LONG
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_blob_set");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_blob_set(VipsBlob *blob, VipsCallbackFn free_fn, const void *data, size_t length)
     * }
     */
    public static FunctionDescriptor vips_blob_set$descriptor() {
        return vips_blob_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_blob_set(VipsBlob *blob, VipsCallbackFn free_fn, const void *data, size_t length)
     * }
     */
    public static MethodHandle vips_blob_set$handle() {
        return vips_blob_set.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_blob_set(VipsBlob *blob, VipsCallbackFn free_fn, const void *data, size_t length)
     * }
     */
    public static MemorySegment vips_blob_set$address() {
        return vips_blob_set.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_blob_set(VipsBlob *blob, VipsCallbackFn free_fn, const void *data, size_t length)
     * }
     */
    public static void vips_blob_set(MemorySegment blob, MemorySegment free_fn, MemorySegment data, long length) {
        var mh$ = vips_blob_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_blob_set", blob, free_fn, data, length);
            }
            mh$.invokeExact(blob, free_fn, data, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_blob_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_blob_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_blob_get_type()
     * }
     */
    public static FunctionDescriptor vips_blob_get_type$descriptor() {
        return vips_blob_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_blob_get_type()
     * }
     */
    public static MethodHandle vips_blob_get_type$handle() {
        return vips_blob_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_blob_get_type()
     * }
     */
    public static MemorySegment vips_blob_get_type$address() {
        return vips_blob_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_blob_get_type()
     * }
     */
    public static long vips_blob_get_type() {
        var mh$ = vips_blob_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_blob_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_array_double_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_array_double_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsArrayDouble *vips_array_double_new(const double *array, int n)
     * }
     */
    public static FunctionDescriptor vips_array_double_new$descriptor() {
        return vips_array_double_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsArrayDouble *vips_array_double_new(const double *array, int n)
     * }
     */
    public static MethodHandle vips_array_double_new$handle() {
        return vips_array_double_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsArrayDouble *vips_array_double_new(const double *array, int n)
     * }
     */
    public static MemorySegment vips_array_double_new$address() {
        return vips_array_double_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsArrayDouble *vips_array_double_new(const double *array, int n)
     * }
     */
    public static MemorySegment vips_array_double_new(MemorySegment array, int n) {
        var mh$ = vips_array_double_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_array_double_new", array, n);
            }
            return (MemorySegment)mh$.invokeExact(array, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern VipsArrayDouble *vips_array_double_newv(int n, ...)
     * }
     */
    public static class vips_array_double_newv {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_array_double_newv");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_array_double_newv(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern VipsArrayDouble *vips_array_double_newv(int n, ...)
         * }
         */
        public static vips_array_double_newv makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_array_double_newv(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(int n, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_array_double_newv", n, x1);
                }
                return (MemorySegment)spreader.invokeExact(n, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class vips_array_double_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_array_double_get");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double *vips_array_double_get(VipsArrayDouble *array, int *n)
     * }
     */
    public static FunctionDescriptor vips_array_double_get$descriptor() {
        return vips_array_double_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double *vips_array_double_get(VipsArrayDouble *array, int *n)
     * }
     */
    public static MethodHandle vips_array_double_get$handle() {
        return vips_array_double_get.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double *vips_array_double_get(VipsArrayDouble *array, int *n)
     * }
     */
    public static MemorySegment vips_array_double_get$address() {
        return vips_array_double_get.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double *vips_array_double_get(VipsArrayDouble *array, int *n)
     * }
     */
    public static MemorySegment vips_array_double_get(MemorySegment array, MemorySegment n) {
        var mh$ = vips_array_double_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_array_double_get", array, n);
            }
            return (MemorySegment)mh$.invokeExact(array, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_array_double_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_array_double_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_array_double_get_type()
     * }
     */
    public static FunctionDescriptor vips_array_double_get_type$descriptor() {
        return vips_array_double_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_array_double_get_type()
     * }
     */
    public static MethodHandle vips_array_double_get_type$handle() {
        return vips_array_double_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_array_double_get_type()
     * }
     */
    public static MemorySegment vips_array_double_get_type$address() {
        return vips_array_double_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_array_double_get_type()
     * }
     */
    public static long vips_array_double_get_type() {
        var mh$ = vips_array_double_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_array_double_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_array_int_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_array_int_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsArrayInt *vips_array_int_new(const int *array, int n)
     * }
     */
    public static FunctionDescriptor vips_array_int_new$descriptor() {
        return vips_array_int_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsArrayInt *vips_array_int_new(const int *array, int n)
     * }
     */
    public static MethodHandle vips_array_int_new$handle() {
        return vips_array_int_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsArrayInt *vips_array_int_new(const int *array, int n)
     * }
     */
    public static MemorySegment vips_array_int_new$address() {
        return vips_array_int_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsArrayInt *vips_array_int_new(const int *array, int n)
     * }
     */
    public static MemorySegment vips_array_int_new(MemorySegment array, int n) {
        var mh$ = vips_array_int_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_array_int_new", array, n);
            }
            return (MemorySegment)mh$.invokeExact(array, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern VipsArrayInt *vips_array_int_newv(int n, ...)
     * }
     */
    public static class vips_array_int_newv {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_array_int_newv");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_array_int_newv(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern VipsArrayInt *vips_array_int_newv(int n, ...)
         * }
         */
        public static vips_array_int_newv makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_array_int_newv(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(int n, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_array_int_newv", n, x1);
                }
                return (MemorySegment)spreader.invokeExact(n, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class vips_array_int_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_array_int_get");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int *vips_array_int_get(VipsArrayInt *array, int *n)
     * }
     */
    public static FunctionDescriptor vips_array_int_get$descriptor() {
        return vips_array_int_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int *vips_array_int_get(VipsArrayInt *array, int *n)
     * }
     */
    public static MethodHandle vips_array_int_get$handle() {
        return vips_array_int_get.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int *vips_array_int_get(VipsArrayInt *array, int *n)
     * }
     */
    public static MemorySegment vips_array_int_get$address() {
        return vips_array_int_get.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int *vips_array_int_get(VipsArrayInt *array, int *n)
     * }
     */
    public static MemorySegment vips_array_int_get(MemorySegment array, MemorySegment n) {
        var mh$ = vips_array_int_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_array_int_get", array, n);
            }
            return (MemorySegment)mh$.invokeExact(array, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_array_int_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_array_int_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_array_int_get_type()
     * }
     */
    public static FunctionDescriptor vips_array_int_get_type$descriptor() {
        return vips_array_int_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_array_int_get_type()
     * }
     */
    public static MethodHandle vips_array_int_get_type$handle() {
        return vips_array_int_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_array_int_get_type()
     * }
     */
    public static MemorySegment vips_array_int_get_type$address() {
        return vips_array_int_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_array_int_get_type()
     * }
     */
    public static long vips_array_int_get_type() {
        var mh$ = vips_array_int_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_array_int_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_array_image_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_array_image_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_array_image_get_type()
     * }
     */
    public static FunctionDescriptor vips_array_image_get_type$descriptor() {
        return vips_array_image_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_array_image_get_type()
     * }
     */
    public static MethodHandle vips_array_image_get_type$handle() {
        return vips_array_image_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_array_image_get_type()
     * }
     */
    public static MemorySegment vips_array_image_get_type$address() {
        return vips_array_image_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_array_image_get_type()
     * }
     */
    public static long vips_array_image_get_type() {
        var mh$ = vips_array_image_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_array_image_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_value_set_area {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_value_set_area");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_value_set_area(GValue *value, VipsCallbackFn free_fn, void *data)
     * }
     */
    public static FunctionDescriptor vips_value_set_area$descriptor() {
        return vips_value_set_area.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_value_set_area(GValue *value, VipsCallbackFn free_fn, void *data)
     * }
     */
    public static MethodHandle vips_value_set_area$handle() {
        return vips_value_set_area.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_value_set_area(GValue *value, VipsCallbackFn free_fn, void *data)
     * }
     */
    public static MemorySegment vips_value_set_area$address() {
        return vips_value_set_area.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_value_set_area(GValue *value, VipsCallbackFn free_fn, void *data)
     * }
     */
    public static void vips_value_set_area(MemorySegment value, MemorySegment free_fn, MemorySegment data) {
        var mh$ = vips_value_set_area.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_value_set_area", value, free_fn, data);
            }
            mh$.invokeExact(value, free_fn, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_value_get_area {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_value_get_area");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *vips_value_get_area(const GValue *value, size_t *length)
     * }
     */
    public static FunctionDescriptor vips_value_get_area$descriptor() {
        return vips_value_get_area.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *vips_value_get_area(const GValue *value, size_t *length)
     * }
     */
    public static MethodHandle vips_value_get_area$handle() {
        return vips_value_get_area.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *vips_value_get_area(const GValue *value, size_t *length)
     * }
     */
    public static MemorySegment vips_value_get_area$address() {
        return vips_value_get_area.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *vips_value_get_area(const GValue *value, size_t *length)
     * }
     */
    public static MemorySegment vips_value_get_area(MemorySegment value, MemorySegment length) {
        var mh$ = vips_value_get_area.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_value_get_area", value, length);
            }
            return (MemorySegment)mh$.invokeExact(value, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_value_get_save_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_value_get_save_string");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *vips_value_get_save_string(const GValue *value)
     * }
     */
    public static FunctionDescriptor vips_value_get_save_string$descriptor() {
        return vips_value_get_save_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *vips_value_get_save_string(const GValue *value)
     * }
     */
    public static MethodHandle vips_value_get_save_string$handle() {
        return vips_value_get_save_string.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *vips_value_get_save_string(const GValue *value)
     * }
     */
    public static MemorySegment vips_value_get_save_string$address() {
        return vips_value_get_save_string.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *vips_value_get_save_string(const GValue *value)
     * }
     */
    public static MemorySegment vips_value_get_save_string(MemorySegment value) {
        var mh$ = vips_value_get_save_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_value_get_save_string", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_value_set_save_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_value_set_save_string");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_value_set_save_string(GValue *value, const char *str)
     * }
     */
    public static FunctionDescriptor vips_value_set_save_string$descriptor() {
        return vips_value_set_save_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_value_set_save_string(GValue *value, const char *str)
     * }
     */
    public static MethodHandle vips_value_set_save_string$handle() {
        return vips_value_set_save_string.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_value_set_save_string(GValue *value, const char *str)
     * }
     */
    public static MemorySegment vips_value_set_save_string$address() {
        return vips_value_set_save_string.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_value_set_save_string(GValue *value, const char *str)
     * }
     */
    public static void vips_value_set_save_string(MemorySegment value, MemorySegment str) {
        var mh$ = vips_value_set_save_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_value_set_save_string", value, str);
            }
            mh$.invokeExact(value, str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void vips_value_set_save_stringf(GValue *value, const char *fmt, ...)
     * }
     */
    public static class vips_value_set_save_stringf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_value_set_save_stringf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_value_set_save_stringf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void vips_value_set_save_stringf(GValue *value, const char *fmt, ...)
         * }
         */
        public static vips_value_set_save_stringf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_value_set_save_stringf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment value, MemorySegment fmt, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_value_set_save_stringf", value, fmt, x2);
                }
                spreader.invokeExact(value, fmt, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class vips_value_get_ref_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_value_get_ref_string");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *vips_value_get_ref_string(const GValue *value, size_t *length)
     * }
     */
    public static FunctionDescriptor vips_value_get_ref_string$descriptor() {
        return vips_value_get_ref_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *vips_value_get_ref_string(const GValue *value, size_t *length)
     * }
     */
    public static MethodHandle vips_value_get_ref_string$handle() {
        return vips_value_get_ref_string.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *vips_value_get_ref_string(const GValue *value, size_t *length)
     * }
     */
    public static MemorySegment vips_value_get_ref_string$address() {
        return vips_value_get_ref_string.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *vips_value_get_ref_string(const GValue *value, size_t *length)
     * }
     */
    public static MemorySegment vips_value_get_ref_string(MemorySegment value, MemorySegment length) {
        var mh$ = vips_value_get_ref_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_value_get_ref_string", value, length);
            }
            return (MemorySegment)mh$.invokeExact(value, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_value_set_ref_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_value_set_ref_string");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_value_set_ref_string(GValue *value, const char *str)
     * }
     */
    public static FunctionDescriptor vips_value_set_ref_string$descriptor() {
        return vips_value_set_ref_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_value_set_ref_string(GValue *value, const char *str)
     * }
     */
    public static MethodHandle vips_value_set_ref_string$handle() {
        return vips_value_set_ref_string.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_value_set_ref_string(GValue *value, const char *str)
     * }
     */
    public static MemorySegment vips_value_set_ref_string$address() {
        return vips_value_set_ref_string.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_value_set_ref_string(GValue *value, const char *str)
     * }
     */
    public static void vips_value_set_ref_string(MemorySegment value, MemorySegment str) {
        var mh$ = vips_value_set_ref_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_value_set_ref_string", value, str);
            }
            mh$.invokeExact(value, str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_value_get_blob {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_value_get_blob");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *vips_value_get_blob(const GValue *value, size_t *length)
     * }
     */
    public static FunctionDescriptor vips_value_get_blob$descriptor() {
        return vips_value_get_blob.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *vips_value_get_blob(const GValue *value, size_t *length)
     * }
     */
    public static MethodHandle vips_value_get_blob$handle() {
        return vips_value_get_blob.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *vips_value_get_blob(const GValue *value, size_t *length)
     * }
     */
    public static MemorySegment vips_value_get_blob$address() {
        return vips_value_get_blob.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *vips_value_get_blob(const GValue *value, size_t *length)
     * }
     */
    public static MemorySegment vips_value_get_blob(MemorySegment value, MemorySegment length) {
        var mh$ = vips_value_get_blob.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_value_get_blob", value, length);
            }
            return (MemorySegment)mh$.invokeExact(value, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_value_set_blob {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_LONG
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_value_set_blob");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_value_set_blob(GValue *value, VipsCallbackFn free_fn, const void *data, size_t length)
     * }
     */
    public static FunctionDescriptor vips_value_set_blob$descriptor() {
        return vips_value_set_blob.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_value_set_blob(GValue *value, VipsCallbackFn free_fn, const void *data, size_t length)
     * }
     */
    public static MethodHandle vips_value_set_blob$handle() {
        return vips_value_set_blob.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_value_set_blob(GValue *value, VipsCallbackFn free_fn, const void *data, size_t length)
     * }
     */
    public static MemorySegment vips_value_set_blob$address() {
        return vips_value_set_blob.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_value_set_blob(GValue *value, VipsCallbackFn free_fn, const void *data, size_t length)
     * }
     */
    public static void vips_value_set_blob(MemorySegment value, MemorySegment free_fn, MemorySegment data, long length) {
        var mh$ = vips_value_set_blob.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_value_set_blob", value, free_fn, data, length);
            }
            mh$.invokeExact(value, free_fn, data, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_value_set_blob_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_LONG
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_value_set_blob_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_value_set_blob_free(GValue *value, void *data, size_t length)
     * }
     */
    public static FunctionDescriptor vips_value_set_blob_free$descriptor() {
        return vips_value_set_blob_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_value_set_blob_free(GValue *value, void *data, size_t length)
     * }
     */
    public static MethodHandle vips_value_set_blob_free$handle() {
        return vips_value_set_blob_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_value_set_blob_free(GValue *value, void *data, size_t length)
     * }
     */
    public static MemorySegment vips_value_set_blob_free$address() {
        return vips_value_set_blob_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_value_set_blob_free(GValue *value, void *data, size_t length)
     * }
     */
    public static void vips_value_set_blob_free(MemorySegment value, MemorySegment data, long length) {
        var mh$ = vips_value_set_blob_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_value_set_blob_free", value, data, length);
            }
            mh$.invokeExact(value, data, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_value_set_array {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_INT,
            vips_h.C_LONG,
            vips_h.C_LONG
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_value_set_array");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_value_set_array(GValue *value, int n, GType type, size_t sizeof_type)
     * }
     */
    public static FunctionDescriptor vips_value_set_array$descriptor() {
        return vips_value_set_array.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_value_set_array(GValue *value, int n, GType type, size_t sizeof_type)
     * }
     */
    public static MethodHandle vips_value_set_array$handle() {
        return vips_value_set_array.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_value_set_array(GValue *value, int n, GType type, size_t sizeof_type)
     * }
     */
    public static MemorySegment vips_value_set_array$address() {
        return vips_value_set_array.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_value_set_array(GValue *value, int n, GType type, size_t sizeof_type)
     * }
     */
    public static void vips_value_set_array(MemorySegment value, int n, long type, long sizeof_type) {
        var mh$ = vips_value_set_array.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_value_set_array", value, n, type, sizeof_type);
            }
            mh$.invokeExact(value, n, type, sizeof_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_value_get_array {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_value_get_array");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *vips_value_get_array(const GValue *value, int *n, GType *type, size_t *sizeof_type)
     * }
     */
    public static FunctionDescriptor vips_value_get_array$descriptor() {
        return vips_value_get_array.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *vips_value_get_array(const GValue *value, int *n, GType *type, size_t *sizeof_type)
     * }
     */
    public static MethodHandle vips_value_get_array$handle() {
        return vips_value_get_array.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *vips_value_get_array(const GValue *value, int *n, GType *type, size_t *sizeof_type)
     * }
     */
    public static MemorySegment vips_value_get_array$address() {
        return vips_value_get_array.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *vips_value_get_array(const GValue *value, int *n, GType *type, size_t *sizeof_type)
     * }
     */
    public static MemorySegment vips_value_get_array(MemorySegment value, MemorySegment n, MemorySegment type, MemorySegment sizeof_type) {
        var mh$ = vips_value_get_array.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_value_get_array", value, n, type, sizeof_type);
            }
            return (MemorySegment)mh$.invokeExact(value, n, type, sizeof_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_value_get_array_double {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_value_get_array_double");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double *vips_value_get_array_double(const GValue *value, int *n)
     * }
     */
    public static FunctionDescriptor vips_value_get_array_double$descriptor() {
        return vips_value_get_array_double.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double *vips_value_get_array_double(const GValue *value, int *n)
     * }
     */
    public static MethodHandle vips_value_get_array_double$handle() {
        return vips_value_get_array_double.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double *vips_value_get_array_double(const GValue *value, int *n)
     * }
     */
    public static MemorySegment vips_value_get_array_double$address() {
        return vips_value_get_array_double.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double *vips_value_get_array_double(const GValue *value, int *n)
     * }
     */
    public static MemorySegment vips_value_get_array_double(MemorySegment value, MemorySegment n) {
        var mh$ = vips_value_get_array_double.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_value_get_array_double", value, n);
            }
            return (MemorySegment)mh$.invokeExact(value, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_value_set_array_double {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_value_set_array_double");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_value_set_array_double(GValue *value, const double *array, int n)
     * }
     */
    public static FunctionDescriptor vips_value_set_array_double$descriptor() {
        return vips_value_set_array_double.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_value_set_array_double(GValue *value, const double *array, int n)
     * }
     */
    public static MethodHandle vips_value_set_array_double$handle() {
        return vips_value_set_array_double.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_value_set_array_double(GValue *value, const double *array, int n)
     * }
     */
    public static MemorySegment vips_value_set_array_double$address() {
        return vips_value_set_array_double.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_value_set_array_double(GValue *value, const double *array, int n)
     * }
     */
    public static void vips_value_set_array_double(MemorySegment value, MemorySegment array, int n) {
        var mh$ = vips_value_set_array_double.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_value_set_array_double", value, array, n);
            }
            mh$.invokeExact(value, array, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_value_get_array_int {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_value_get_array_int");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int *vips_value_get_array_int(const GValue *value, int *n)
     * }
     */
    public static FunctionDescriptor vips_value_get_array_int$descriptor() {
        return vips_value_get_array_int.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int *vips_value_get_array_int(const GValue *value, int *n)
     * }
     */
    public static MethodHandle vips_value_get_array_int$handle() {
        return vips_value_get_array_int.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int *vips_value_get_array_int(const GValue *value, int *n)
     * }
     */
    public static MemorySegment vips_value_get_array_int$address() {
        return vips_value_get_array_int.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int *vips_value_get_array_int(const GValue *value, int *n)
     * }
     */
    public static MemorySegment vips_value_get_array_int(MemorySegment value, MemorySegment n) {
        var mh$ = vips_value_get_array_int.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_value_get_array_int", value, n);
            }
            return (MemorySegment)mh$.invokeExact(value, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_value_set_array_int {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_value_set_array_int");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_value_set_array_int(GValue *value, const int *array, int n)
     * }
     */
    public static FunctionDescriptor vips_value_set_array_int$descriptor() {
        return vips_value_set_array_int.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_value_set_array_int(GValue *value, const int *array, int n)
     * }
     */
    public static MethodHandle vips_value_set_array_int$handle() {
        return vips_value_set_array_int.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_value_set_array_int(GValue *value, const int *array, int n)
     * }
     */
    public static MemorySegment vips_value_set_array_int$address() {
        return vips_value_set_array_int.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_value_set_array_int(GValue *value, const int *array, int n)
     * }
     */
    public static void vips_value_set_array_int(MemorySegment value, MemorySegment array, int n) {
        var mh$ = vips_value_set_array_int.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_value_set_array_int", value, array, n);
            }
            mh$.invokeExact(value, array, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_value_get_array_object {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_value_get_array_object");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GObject **vips_value_get_array_object(const GValue *value, int *n)
     * }
     */
    public static FunctionDescriptor vips_value_get_array_object$descriptor() {
        return vips_value_get_array_object.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GObject **vips_value_get_array_object(const GValue *value, int *n)
     * }
     */
    public static MethodHandle vips_value_get_array_object$handle() {
        return vips_value_get_array_object.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GObject **vips_value_get_array_object(const GValue *value, int *n)
     * }
     */
    public static MemorySegment vips_value_get_array_object$address() {
        return vips_value_get_array_object.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GObject **vips_value_get_array_object(const GValue *value, int *n)
     * }
     */
    public static MemorySegment vips_value_get_array_object(MemorySegment value, MemorySegment n) {
        var mh$ = vips_value_get_array_object.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_value_get_array_object", value, n);
            }
            return (MemorySegment)mh$.invokeExact(value, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_value_set_array_object {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_value_set_array_object");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_value_set_array_object(GValue *value, int n)
     * }
     */
    public static FunctionDescriptor vips_value_set_array_object$descriptor() {
        return vips_value_set_array_object.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_value_set_array_object(GValue *value, int n)
     * }
     */
    public static MethodHandle vips_value_set_array_object$handle() {
        return vips_value_set_array_object.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_value_set_array_object(GValue *value, int n)
     * }
     */
    public static MemorySegment vips_value_set_array_object$address() {
        return vips_value_set_array_object.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_value_set_array_object(GValue *value, int n)
     * }
     */
    public static void vips_value_set_array_object(MemorySegment value, int n) {
        var mh$ = vips_value_set_array_object.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_value_set_array_object", value, n);
            }
            mh$.invokeExact(value, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__thread_profile$constants {
        public static final OfInt LAYOUT = vips_h.C_INT;
        public static final MemorySegment SEGMENT = vips_h.findOrThrow("vips__thread_profile").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern gboolean vips__thread_profile
     * }
     */
    public static OfInt vips__thread_profile$layout() {
        return vips__thread_profile$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern gboolean vips__thread_profile
     * }
     */
    public static MemorySegment vips__thread_profile$segment() {
        return vips__thread_profile$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern gboolean vips__thread_profile
     * }
     */
    public static int vips__thread_profile() {
        return vips__thread_profile$constants.SEGMENT.get(vips__thread_profile$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern gboolean vips__thread_profile
     * }
     */
    public static void vips__thread_profile(int varValue) {
        vips__thread_profile$constants.SEGMENT.set(vips__thread_profile$constants.LAYOUT, 0L, varValue);
    }

    private static class vips_profile_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_profile_set");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_profile_set(gboolean profile)
     * }
     */
    public static FunctionDescriptor vips_profile_set$descriptor() {
        return vips_profile_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_profile_set(gboolean profile)
     * }
     */
    public static MethodHandle vips_profile_set$handle() {
        return vips_profile_set.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_profile_set(gboolean profile)
     * }
     */
    public static MemorySegment vips_profile_set$address() {
        return vips_profile_set.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_profile_set(gboolean profile)
     * }
     */
    public static void vips_profile_set(int profile) {
        var mh$ = vips_profile_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_profile_set", profile);
            }
            mh$.invokeExact(profile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__thread_profile_attach {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__thread_profile_attach");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vips__thread_profile_attach(const char *thread_name)
     * }
     */
    public static FunctionDescriptor vips__thread_profile_attach$descriptor() {
        return vips__thread_profile_attach.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vips__thread_profile_attach(const char *thread_name)
     * }
     */
    public static MethodHandle vips__thread_profile_attach$handle() {
        return vips__thread_profile_attach.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void vips__thread_profile_attach(const char *thread_name)
     * }
     */
    public static MemorySegment vips__thread_profile_attach$address() {
        return vips__thread_profile_attach.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void vips__thread_profile_attach(const char *thread_name)
     * }
     */
    public static void vips__thread_profile_attach(MemorySegment thread_name) {
        var mh$ = vips__thread_profile_attach.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__thread_profile_attach", thread_name);
            }
            mh$.invokeExact(thread_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__thread_profile_detach {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__thread_profile_detach");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vips__thread_profile_detach()
     * }
     */
    public static FunctionDescriptor vips__thread_profile_detach$descriptor() {
        return vips__thread_profile_detach.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vips__thread_profile_detach()
     * }
     */
    public static MethodHandle vips__thread_profile_detach$handle() {
        return vips__thread_profile_detach.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void vips__thread_profile_detach()
     * }
     */
    public static MemorySegment vips__thread_profile_detach$address() {
        return vips__thread_profile_detach.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void vips__thread_profile_detach()
     * }
     */
    public static void vips__thread_profile_detach() {
        var mh$ = vips__thread_profile_detach.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__thread_profile_detach");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__thread_profile_stop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__thread_profile_stop");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vips__thread_profile_stop()
     * }
     */
    public static FunctionDescriptor vips__thread_profile_stop$descriptor() {
        return vips__thread_profile_stop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vips__thread_profile_stop()
     * }
     */
    public static MethodHandle vips__thread_profile_stop$handle() {
        return vips__thread_profile_stop.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void vips__thread_profile_stop()
     * }
     */
    public static MemorySegment vips__thread_profile_stop$address() {
        return vips__thread_profile_stop.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void vips__thread_profile_stop()
     * }
     */
    public static void vips__thread_profile_stop() {
        var mh$ = vips__thread_profile_stop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__thread_profile_stop");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__thread_gate_start {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__thread_gate_start");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vips__thread_gate_start(const char *gate_name)
     * }
     */
    public static FunctionDescriptor vips__thread_gate_start$descriptor() {
        return vips__thread_gate_start.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vips__thread_gate_start(const char *gate_name)
     * }
     */
    public static MethodHandle vips__thread_gate_start$handle() {
        return vips__thread_gate_start.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void vips__thread_gate_start(const char *gate_name)
     * }
     */
    public static MemorySegment vips__thread_gate_start$address() {
        return vips__thread_gate_start.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void vips__thread_gate_start(const char *gate_name)
     * }
     */
    public static void vips__thread_gate_start(MemorySegment gate_name) {
        var mh$ = vips__thread_gate_start.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__thread_gate_start", gate_name);
            }
            mh$.invokeExact(gate_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__thread_gate_stop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__thread_gate_stop");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vips__thread_gate_stop(const char *gate_name)
     * }
     */
    public static FunctionDescriptor vips__thread_gate_stop$descriptor() {
        return vips__thread_gate_stop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vips__thread_gate_stop(const char *gate_name)
     * }
     */
    public static MethodHandle vips__thread_gate_stop$handle() {
        return vips__thread_gate_stop.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void vips__thread_gate_stop(const char *gate_name)
     * }
     */
    public static MemorySegment vips__thread_gate_stop$address() {
        return vips__thread_gate_stop.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void vips__thread_gate_stop(const char *gate_name)
     * }
     */
    public static void vips__thread_gate_stop(MemorySegment gate_name) {
        var mh$ = vips__thread_gate_stop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__thread_gate_stop", gate_name);
            }
            mh$.invokeExact(gate_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__thread_malloc_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__thread_malloc_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vips__thread_malloc_free(gint64 size)
     * }
     */
    public static FunctionDescriptor vips__thread_malloc_free$descriptor() {
        return vips__thread_malloc_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vips__thread_malloc_free(gint64 size)
     * }
     */
    public static MethodHandle vips__thread_malloc_free$handle() {
        return vips__thread_malloc_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void vips__thread_malloc_free(gint64 size)
     * }
     */
    public static MemorySegment vips__thread_malloc_free$address() {
        return vips__thread_malloc_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void vips__thread_malloc_free(gint64 size)
     * }
     */
    public static void vips__thread_malloc_free(long size) {
        var mh$ = vips__thread_malloc_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__thread_malloc_free", size);
            }
            mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_connection_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_connection_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_connection_get_type()
     * }
     */
    public static FunctionDescriptor vips_connection_get_type$descriptor() {
        return vips_connection_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_connection_get_type()
     * }
     */
    public static MethodHandle vips_connection_get_type$handle() {
        return vips_connection_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_connection_get_type()
     * }
     */
    public static MemorySegment vips_connection_get_type$address() {
        return vips_connection_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_connection_get_type()
     * }
     */
    public static long vips_connection_get_type() {
        var mh$ = vips_connection_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_connection_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_connection_filename {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_connection_filename");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *vips_connection_filename(VipsConnection *connection)
     * }
     */
    public static FunctionDescriptor vips_connection_filename$descriptor() {
        return vips_connection_filename.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *vips_connection_filename(VipsConnection *connection)
     * }
     */
    public static MethodHandle vips_connection_filename$handle() {
        return vips_connection_filename.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *vips_connection_filename(VipsConnection *connection)
     * }
     */
    public static MemorySegment vips_connection_filename$address() {
        return vips_connection_filename.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *vips_connection_filename(VipsConnection *connection)
     * }
     */
    public static MemorySegment vips_connection_filename(MemorySegment connection) {
        var mh$ = vips_connection_filename.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_connection_filename", connection);
            }
            return (MemorySegment)mh$.invokeExact(connection);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_connection_nick {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_connection_nick");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *vips_connection_nick(VipsConnection *connection)
     * }
     */
    public static FunctionDescriptor vips_connection_nick$descriptor() {
        return vips_connection_nick.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *vips_connection_nick(VipsConnection *connection)
     * }
     */
    public static MethodHandle vips_connection_nick$handle() {
        return vips_connection_nick.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *vips_connection_nick(VipsConnection *connection)
     * }
     */
    public static MemorySegment vips_connection_nick$address() {
        return vips_connection_nick.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *vips_connection_nick(VipsConnection *connection)
     * }
     */
    public static MemorySegment vips_connection_nick(MemorySegment connection) {
        var mh$ = vips_connection_nick.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_connection_nick", connection);
            }
            return (MemorySegment)mh$.invokeExact(connection);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_pipe_read_limit_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_pipe_read_limit_set");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_pipe_read_limit_set(gint64 limit)
     * }
     */
    public static FunctionDescriptor vips_pipe_read_limit_set$descriptor() {
        return vips_pipe_read_limit_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_pipe_read_limit_set(gint64 limit)
     * }
     */
    public static MethodHandle vips_pipe_read_limit_set$handle() {
        return vips_pipe_read_limit_set.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_pipe_read_limit_set(gint64 limit)
     * }
     */
    public static MemorySegment vips_pipe_read_limit_set$address() {
        return vips_pipe_read_limit_set.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_pipe_read_limit_set(gint64 limit)
     * }
     */
    public static void vips_pipe_read_limit_set(long limit) {
        var mh$ = vips_pipe_read_limit_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_pipe_read_limit_set", limit);
            }
            mh$.invokeExact(limit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_source_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_source_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_source_get_type()
     * }
     */
    public static FunctionDescriptor vips_source_get_type$descriptor() {
        return vips_source_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_source_get_type()
     * }
     */
    public static MethodHandle vips_source_get_type$handle() {
        return vips_source_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_source_get_type()
     * }
     */
    public static MemorySegment vips_source_get_type$address() {
        return vips_source_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_source_get_type()
     * }
     */
    public static long vips_source_get_type() {
        var mh$ = vips_source_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_source_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_source_new_from_descriptor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_source_new_from_descriptor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsSource *vips_source_new_from_descriptor(int descriptor)
     * }
     */
    public static FunctionDescriptor vips_source_new_from_descriptor$descriptor() {
        return vips_source_new_from_descriptor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsSource *vips_source_new_from_descriptor(int descriptor)
     * }
     */
    public static MethodHandle vips_source_new_from_descriptor$handle() {
        return vips_source_new_from_descriptor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsSource *vips_source_new_from_descriptor(int descriptor)
     * }
     */
    public static MemorySegment vips_source_new_from_descriptor$address() {
        return vips_source_new_from_descriptor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsSource *vips_source_new_from_descriptor(int descriptor)
     * }
     */
    public static MemorySegment vips_source_new_from_descriptor(int descriptor) {
        var mh$ = vips_source_new_from_descriptor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_source_new_from_descriptor", descriptor);
            }
            return (MemorySegment)mh$.invokeExact(descriptor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_source_new_from_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_source_new_from_file");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsSource *vips_source_new_from_file(const char *filename)
     * }
     */
    public static FunctionDescriptor vips_source_new_from_file$descriptor() {
        return vips_source_new_from_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsSource *vips_source_new_from_file(const char *filename)
     * }
     */
    public static MethodHandle vips_source_new_from_file$handle() {
        return vips_source_new_from_file.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsSource *vips_source_new_from_file(const char *filename)
     * }
     */
    public static MemorySegment vips_source_new_from_file$address() {
        return vips_source_new_from_file.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsSource *vips_source_new_from_file(const char *filename)
     * }
     */
    public static MemorySegment vips_source_new_from_file(MemorySegment filename) {
        var mh$ = vips_source_new_from_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_source_new_from_file", filename);
            }
            return (MemorySegment)mh$.invokeExact(filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_source_new_from_blob {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_source_new_from_blob");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsSource *vips_source_new_from_blob(VipsBlob *blob)
     * }
     */
    public static FunctionDescriptor vips_source_new_from_blob$descriptor() {
        return vips_source_new_from_blob.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsSource *vips_source_new_from_blob(VipsBlob *blob)
     * }
     */
    public static MethodHandle vips_source_new_from_blob$handle() {
        return vips_source_new_from_blob.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsSource *vips_source_new_from_blob(VipsBlob *blob)
     * }
     */
    public static MemorySegment vips_source_new_from_blob$address() {
        return vips_source_new_from_blob.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsSource *vips_source_new_from_blob(VipsBlob *blob)
     * }
     */
    public static MemorySegment vips_source_new_from_blob(MemorySegment blob) {
        var mh$ = vips_source_new_from_blob.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_source_new_from_blob", blob);
            }
            return (MemorySegment)mh$.invokeExact(blob);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_source_new_from_target {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_source_new_from_target");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsSource *vips_source_new_from_target(VipsTarget *target)
     * }
     */
    public static FunctionDescriptor vips_source_new_from_target$descriptor() {
        return vips_source_new_from_target.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsSource *vips_source_new_from_target(VipsTarget *target)
     * }
     */
    public static MethodHandle vips_source_new_from_target$handle() {
        return vips_source_new_from_target.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsSource *vips_source_new_from_target(VipsTarget *target)
     * }
     */
    public static MemorySegment vips_source_new_from_target$address() {
        return vips_source_new_from_target.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsSource *vips_source_new_from_target(VipsTarget *target)
     * }
     */
    public static MemorySegment vips_source_new_from_target(MemorySegment target) {
        var mh$ = vips_source_new_from_target.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_source_new_from_target", target);
            }
            return (MemorySegment)mh$.invokeExact(target);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_source_new_from_memory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_LONG
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_source_new_from_memory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsSource *vips_source_new_from_memory(const void *data, size_t size)
     * }
     */
    public static FunctionDescriptor vips_source_new_from_memory$descriptor() {
        return vips_source_new_from_memory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsSource *vips_source_new_from_memory(const void *data, size_t size)
     * }
     */
    public static MethodHandle vips_source_new_from_memory$handle() {
        return vips_source_new_from_memory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsSource *vips_source_new_from_memory(const void *data, size_t size)
     * }
     */
    public static MemorySegment vips_source_new_from_memory$address() {
        return vips_source_new_from_memory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsSource *vips_source_new_from_memory(const void *data, size_t size)
     * }
     */
    public static MemorySegment vips_source_new_from_memory(MemorySegment data, long size) {
        var mh$ = vips_source_new_from_memory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_source_new_from_memory", data, size);
            }
            return (MemorySegment)mh$.invokeExact(data, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_source_new_from_options {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_source_new_from_options");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsSource *vips_source_new_from_options(const char *options)
     * }
     */
    public static FunctionDescriptor vips_source_new_from_options$descriptor() {
        return vips_source_new_from_options.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsSource *vips_source_new_from_options(const char *options)
     * }
     */
    public static MethodHandle vips_source_new_from_options$handle() {
        return vips_source_new_from_options.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsSource *vips_source_new_from_options(const char *options)
     * }
     */
    public static MemorySegment vips_source_new_from_options$address() {
        return vips_source_new_from_options.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsSource *vips_source_new_from_options(const char *options)
     * }
     */
    public static MemorySegment vips_source_new_from_options(MemorySegment options) {
        var mh$ = vips_source_new_from_options.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_source_new_from_options", options);
            }
            return (MemorySegment)mh$.invokeExact(options);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_source_minimise {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_source_minimise");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_source_minimise(VipsSource *source)
     * }
     */
    public static FunctionDescriptor vips_source_minimise$descriptor() {
        return vips_source_minimise.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_source_minimise(VipsSource *source)
     * }
     */
    public static MethodHandle vips_source_minimise$handle() {
        return vips_source_minimise.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_source_minimise(VipsSource *source)
     * }
     */
    public static MemorySegment vips_source_minimise$address() {
        return vips_source_minimise.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_source_minimise(VipsSource *source)
     * }
     */
    public static void vips_source_minimise(MemorySegment source) {
        var mh$ = vips_source_minimise.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_source_minimise", source);
            }
            mh$.invokeExact(source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_source_unminimise {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_source_unminimise");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_source_unminimise(VipsSource *source)
     * }
     */
    public static FunctionDescriptor vips_source_unminimise$descriptor() {
        return vips_source_unminimise.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_source_unminimise(VipsSource *source)
     * }
     */
    public static MethodHandle vips_source_unminimise$handle() {
        return vips_source_unminimise.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_source_unminimise(VipsSource *source)
     * }
     */
    public static MemorySegment vips_source_unminimise$address() {
        return vips_source_unminimise.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_source_unminimise(VipsSource *source)
     * }
     */
    public static int vips_source_unminimise(MemorySegment source) {
        var mh$ = vips_source_unminimise.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_source_unminimise", source);
            }
            return (int)mh$.invokeExact(source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_source_decode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_source_decode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_source_decode(VipsSource *source)
     * }
     */
    public static FunctionDescriptor vips_source_decode$descriptor() {
        return vips_source_decode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_source_decode(VipsSource *source)
     * }
     */
    public static MethodHandle vips_source_decode$handle() {
        return vips_source_decode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_source_decode(VipsSource *source)
     * }
     */
    public static MemorySegment vips_source_decode$address() {
        return vips_source_decode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_source_decode(VipsSource *source)
     * }
     */
    public static int vips_source_decode(MemorySegment source) {
        var mh$ = vips_source_decode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_source_decode", source);
            }
            return (int)mh$.invokeExact(source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_source_read {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG_LONG,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_LONG
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_source_read");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint64 vips_source_read(VipsSource *source, void *data, size_t length)
     * }
     */
    public static FunctionDescriptor vips_source_read$descriptor() {
        return vips_source_read.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint64 vips_source_read(VipsSource *source, void *data, size_t length)
     * }
     */
    public static MethodHandle vips_source_read$handle() {
        return vips_source_read.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gint64 vips_source_read(VipsSource *source, void *data, size_t length)
     * }
     */
    public static MemorySegment vips_source_read$address() {
        return vips_source_read.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gint64 vips_source_read(VipsSource *source, void *data, size_t length)
     * }
     */
    public static long vips_source_read(MemorySegment source, MemorySegment data, long length) {
        var mh$ = vips_source_read.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_source_read", source, data, length);
            }
            return (long)mh$.invokeExact(source, data, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_source_is_mappable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_source_is_mappable");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_source_is_mappable(VipsSource *source)
     * }
     */
    public static FunctionDescriptor vips_source_is_mappable$descriptor() {
        return vips_source_is_mappable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_source_is_mappable(VipsSource *source)
     * }
     */
    public static MethodHandle vips_source_is_mappable$handle() {
        return vips_source_is_mappable.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_source_is_mappable(VipsSource *source)
     * }
     */
    public static MemorySegment vips_source_is_mappable$address() {
        return vips_source_is_mappable.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_source_is_mappable(VipsSource *source)
     * }
     */
    public static int vips_source_is_mappable(MemorySegment source) {
        var mh$ = vips_source_is_mappable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_source_is_mappable", source);
            }
            return (int)mh$.invokeExact(source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_source_is_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_source_is_file");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_source_is_file(VipsSource *source)
     * }
     */
    public static FunctionDescriptor vips_source_is_file$descriptor() {
        return vips_source_is_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_source_is_file(VipsSource *source)
     * }
     */
    public static MethodHandle vips_source_is_file$handle() {
        return vips_source_is_file.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_source_is_file(VipsSource *source)
     * }
     */
    public static MemorySegment vips_source_is_file$address() {
        return vips_source_is_file.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_source_is_file(VipsSource *source)
     * }
     */
    public static int vips_source_is_file(MemorySegment source) {
        var mh$ = vips_source_is_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_source_is_file", source);
            }
            return (int)mh$.invokeExact(source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_source_map {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_source_map");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const void *vips_source_map(VipsSource *source, size_t *length)
     * }
     */
    public static FunctionDescriptor vips_source_map$descriptor() {
        return vips_source_map.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const void *vips_source_map(VipsSource *source, size_t *length)
     * }
     */
    public static MethodHandle vips_source_map$handle() {
        return vips_source_map.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const void *vips_source_map(VipsSource *source, size_t *length)
     * }
     */
    public static MemorySegment vips_source_map$address() {
        return vips_source_map.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const void *vips_source_map(VipsSource *source, size_t *length)
     * }
     */
    public static MemorySegment vips_source_map(MemorySegment source, MemorySegment length) {
        var mh$ = vips_source_map.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_source_map", source, length);
            }
            return (MemorySegment)mh$.invokeExact(source, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_source_map_blob {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_source_map_blob");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsBlob *vips_source_map_blob(VipsSource *source)
     * }
     */
    public static FunctionDescriptor vips_source_map_blob$descriptor() {
        return vips_source_map_blob.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsBlob *vips_source_map_blob(VipsSource *source)
     * }
     */
    public static MethodHandle vips_source_map_blob$handle() {
        return vips_source_map_blob.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsBlob *vips_source_map_blob(VipsSource *source)
     * }
     */
    public static MemorySegment vips_source_map_blob$address() {
        return vips_source_map_blob.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsBlob *vips_source_map_blob(VipsSource *source)
     * }
     */
    public static MemorySegment vips_source_map_blob(MemorySegment source) {
        var mh$ = vips_source_map_blob.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_source_map_blob", source);
            }
            return (MemorySegment)mh$.invokeExact(source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_source_seek {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG_LONG,
            vips_h.C_POINTER,
            vips_h.C_LONG_LONG,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_source_seek");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint64 vips_source_seek(VipsSource *source, gint64 offset, int whence)
     * }
     */
    public static FunctionDescriptor vips_source_seek$descriptor() {
        return vips_source_seek.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint64 vips_source_seek(VipsSource *source, gint64 offset, int whence)
     * }
     */
    public static MethodHandle vips_source_seek$handle() {
        return vips_source_seek.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gint64 vips_source_seek(VipsSource *source, gint64 offset, int whence)
     * }
     */
    public static MemorySegment vips_source_seek$address() {
        return vips_source_seek.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gint64 vips_source_seek(VipsSource *source, gint64 offset, int whence)
     * }
     */
    public static long vips_source_seek(MemorySegment source, long offset, int whence) {
        var mh$ = vips_source_seek.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_source_seek", source, offset, whence);
            }
            return (long)mh$.invokeExact(source, offset, whence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_source_rewind {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_source_rewind");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_source_rewind(VipsSource *source)
     * }
     */
    public static FunctionDescriptor vips_source_rewind$descriptor() {
        return vips_source_rewind.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_source_rewind(VipsSource *source)
     * }
     */
    public static MethodHandle vips_source_rewind$handle() {
        return vips_source_rewind.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_source_rewind(VipsSource *source)
     * }
     */
    public static MemorySegment vips_source_rewind$address() {
        return vips_source_rewind.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_source_rewind(VipsSource *source)
     * }
     */
    public static int vips_source_rewind(MemorySegment source) {
        var mh$ = vips_source_rewind.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_source_rewind", source);
            }
            return (int)mh$.invokeExact(source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_source_sniff_at_most {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG_LONG,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_LONG
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_source_sniff_at_most");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint64 vips_source_sniff_at_most(VipsSource *source, unsigned char **data, size_t length)
     * }
     */
    public static FunctionDescriptor vips_source_sniff_at_most$descriptor() {
        return vips_source_sniff_at_most.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint64 vips_source_sniff_at_most(VipsSource *source, unsigned char **data, size_t length)
     * }
     */
    public static MethodHandle vips_source_sniff_at_most$handle() {
        return vips_source_sniff_at_most.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gint64 vips_source_sniff_at_most(VipsSource *source, unsigned char **data, size_t length)
     * }
     */
    public static MemorySegment vips_source_sniff_at_most$address() {
        return vips_source_sniff_at_most.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gint64 vips_source_sniff_at_most(VipsSource *source, unsigned char **data, size_t length)
     * }
     */
    public static long vips_source_sniff_at_most(MemorySegment source, MemorySegment data, long length) {
        var mh$ = vips_source_sniff_at_most.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_source_sniff_at_most", source, data, length);
            }
            return (long)mh$.invokeExact(source, data, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_source_sniff {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_LONG
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_source_sniff");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned char *vips_source_sniff(VipsSource *source, size_t length)
     * }
     */
    public static FunctionDescriptor vips_source_sniff$descriptor() {
        return vips_source_sniff.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned char *vips_source_sniff(VipsSource *source, size_t length)
     * }
     */
    public static MethodHandle vips_source_sniff$handle() {
        return vips_source_sniff.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned char *vips_source_sniff(VipsSource *source, size_t length)
     * }
     */
    public static MemorySegment vips_source_sniff$address() {
        return vips_source_sniff.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned char *vips_source_sniff(VipsSource *source, size_t length)
     * }
     */
    public static MemorySegment vips_source_sniff(MemorySegment source, long length) {
        var mh$ = vips_source_sniff.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_source_sniff", source, length);
            }
            return (MemorySegment)mh$.invokeExact(source, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_source_length {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG_LONG,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_source_length");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint64 vips_source_length(VipsSource *source)
     * }
     */
    public static FunctionDescriptor vips_source_length$descriptor() {
        return vips_source_length.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint64 vips_source_length(VipsSource *source)
     * }
     */
    public static MethodHandle vips_source_length$handle() {
        return vips_source_length.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gint64 vips_source_length(VipsSource *source)
     * }
     */
    public static MemorySegment vips_source_length$address() {
        return vips_source_length.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gint64 vips_source_length(VipsSource *source)
     * }
     */
    public static long vips_source_length(MemorySegment source) {
        var mh$ = vips_source_length.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_source_length", source);
            }
            return (long)mh$.invokeExact(source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_source_custom_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_source_custom_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_source_custom_get_type()
     * }
     */
    public static FunctionDescriptor vips_source_custom_get_type$descriptor() {
        return vips_source_custom_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_source_custom_get_type()
     * }
     */
    public static MethodHandle vips_source_custom_get_type$handle() {
        return vips_source_custom_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_source_custom_get_type()
     * }
     */
    public static MemorySegment vips_source_custom_get_type$address() {
        return vips_source_custom_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_source_custom_get_type()
     * }
     */
    public static long vips_source_custom_get_type() {
        var mh$ = vips_source_custom_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_source_custom_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_source_custom_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_source_custom_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsSourceCustom *vips_source_custom_new()
     * }
     */
    public static FunctionDescriptor vips_source_custom_new$descriptor() {
        return vips_source_custom_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsSourceCustom *vips_source_custom_new()
     * }
     */
    public static MethodHandle vips_source_custom_new$handle() {
        return vips_source_custom_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsSourceCustom *vips_source_custom_new()
     * }
     */
    public static MemorySegment vips_source_custom_new$address() {
        return vips_source_custom_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsSourceCustom *vips_source_custom_new()
     * }
     */
    public static MemorySegment vips_source_custom_new() {
        var mh$ = vips_source_custom_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_source_custom_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_g_input_stream_new_from_source {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_g_input_stream_new_from_source");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GInputStream *vips_g_input_stream_new_from_source(VipsSource *source)
     * }
     */
    public static FunctionDescriptor vips_g_input_stream_new_from_source$descriptor() {
        return vips_g_input_stream_new_from_source.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GInputStream *vips_g_input_stream_new_from_source(VipsSource *source)
     * }
     */
    public static MethodHandle vips_g_input_stream_new_from_source$handle() {
        return vips_g_input_stream_new_from_source.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GInputStream *vips_g_input_stream_new_from_source(VipsSource *source)
     * }
     */
    public static MemorySegment vips_g_input_stream_new_from_source$address() {
        return vips_g_input_stream_new_from_source.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GInputStream *vips_g_input_stream_new_from_source(VipsSource *source)
     * }
     */
    public static MemorySegment vips_g_input_stream_new_from_source(MemorySegment source) {
        var mh$ = vips_g_input_stream_new_from_source.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_g_input_stream_new_from_source", source);
            }
            return (MemorySegment)mh$.invokeExact(source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_source_g_input_stream_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_source_g_input_stream_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsSourceGInputStream *vips_source_g_input_stream_new(GInputStream *stream)
     * }
     */
    public static FunctionDescriptor vips_source_g_input_stream_new$descriptor() {
        return vips_source_g_input_stream_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsSourceGInputStream *vips_source_g_input_stream_new(GInputStream *stream)
     * }
     */
    public static MethodHandle vips_source_g_input_stream_new$handle() {
        return vips_source_g_input_stream_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsSourceGInputStream *vips_source_g_input_stream_new(GInputStream *stream)
     * }
     */
    public static MemorySegment vips_source_g_input_stream_new$address() {
        return vips_source_g_input_stream_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsSourceGInputStream *vips_source_g_input_stream_new(GInputStream *stream)
     * }
     */
    public static MemorySegment vips_source_g_input_stream_new(MemorySegment stream) {
        var mh$ = vips_source_g_input_stream_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_source_g_input_stream_new", stream);
            }
            return (MemorySegment)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_target_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_target_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_target_get_type()
     * }
     */
    public static FunctionDescriptor vips_target_get_type$descriptor() {
        return vips_target_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_target_get_type()
     * }
     */
    public static MethodHandle vips_target_get_type$handle() {
        return vips_target_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_target_get_type()
     * }
     */
    public static MemorySegment vips_target_get_type$address() {
        return vips_target_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_target_get_type()
     * }
     */
    public static long vips_target_get_type() {
        var mh$ = vips_target_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_target_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_target_new_to_descriptor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_target_new_to_descriptor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsTarget *vips_target_new_to_descriptor(int descriptor)
     * }
     */
    public static FunctionDescriptor vips_target_new_to_descriptor$descriptor() {
        return vips_target_new_to_descriptor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsTarget *vips_target_new_to_descriptor(int descriptor)
     * }
     */
    public static MethodHandle vips_target_new_to_descriptor$handle() {
        return vips_target_new_to_descriptor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsTarget *vips_target_new_to_descriptor(int descriptor)
     * }
     */
    public static MemorySegment vips_target_new_to_descriptor$address() {
        return vips_target_new_to_descriptor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsTarget *vips_target_new_to_descriptor(int descriptor)
     * }
     */
    public static MemorySegment vips_target_new_to_descriptor(int descriptor) {
        var mh$ = vips_target_new_to_descriptor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_target_new_to_descriptor", descriptor);
            }
            return (MemorySegment)mh$.invokeExact(descriptor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_target_new_to_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_target_new_to_file");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsTarget *vips_target_new_to_file(const char *filename)
     * }
     */
    public static FunctionDescriptor vips_target_new_to_file$descriptor() {
        return vips_target_new_to_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsTarget *vips_target_new_to_file(const char *filename)
     * }
     */
    public static MethodHandle vips_target_new_to_file$handle() {
        return vips_target_new_to_file.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsTarget *vips_target_new_to_file(const char *filename)
     * }
     */
    public static MemorySegment vips_target_new_to_file$address() {
        return vips_target_new_to_file.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsTarget *vips_target_new_to_file(const char *filename)
     * }
     */
    public static MemorySegment vips_target_new_to_file(MemorySegment filename) {
        var mh$ = vips_target_new_to_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_target_new_to_file", filename);
            }
            return (MemorySegment)mh$.invokeExact(filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_target_new_to_memory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_target_new_to_memory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsTarget *vips_target_new_to_memory()
     * }
     */
    public static FunctionDescriptor vips_target_new_to_memory$descriptor() {
        return vips_target_new_to_memory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsTarget *vips_target_new_to_memory()
     * }
     */
    public static MethodHandle vips_target_new_to_memory$handle() {
        return vips_target_new_to_memory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsTarget *vips_target_new_to_memory()
     * }
     */
    public static MemorySegment vips_target_new_to_memory$address() {
        return vips_target_new_to_memory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsTarget *vips_target_new_to_memory()
     * }
     */
    public static MemorySegment vips_target_new_to_memory() {
        var mh$ = vips_target_new_to_memory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_target_new_to_memory");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_target_new_temp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_target_new_temp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsTarget *vips_target_new_temp(VipsTarget *target)
     * }
     */
    public static FunctionDescriptor vips_target_new_temp$descriptor() {
        return vips_target_new_temp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsTarget *vips_target_new_temp(VipsTarget *target)
     * }
     */
    public static MethodHandle vips_target_new_temp$handle() {
        return vips_target_new_temp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsTarget *vips_target_new_temp(VipsTarget *target)
     * }
     */
    public static MemorySegment vips_target_new_temp$address() {
        return vips_target_new_temp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsTarget *vips_target_new_temp(VipsTarget *target)
     * }
     */
    public static MemorySegment vips_target_new_temp(MemorySegment target) {
        var mh$ = vips_target_new_temp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_target_new_temp", target);
            }
            return (MemorySegment)mh$.invokeExact(target);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_target_write {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_LONG
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_target_write");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_target_write(VipsTarget *target, const void *data, size_t length)
     * }
     */
    public static FunctionDescriptor vips_target_write$descriptor() {
        return vips_target_write.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_target_write(VipsTarget *target, const void *data, size_t length)
     * }
     */
    public static MethodHandle vips_target_write$handle() {
        return vips_target_write.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_target_write(VipsTarget *target, const void *data, size_t length)
     * }
     */
    public static MemorySegment vips_target_write$address() {
        return vips_target_write.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_target_write(VipsTarget *target, const void *data, size_t length)
     * }
     */
    public static int vips_target_write(MemorySegment target, MemorySegment data, long length) {
        var mh$ = vips_target_write.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_target_write", target, data, length);
            }
            return (int)mh$.invokeExact(target, data, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_target_read {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG_LONG,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_LONG
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_target_read");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint64 vips_target_read(VipsTarget *target, void *buffer, size_t length)
     * }
     */
    public static FunctionDescriptor vips_target_read$descriptor() {
        return vips_target_read.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint64 vips_target_read(VipsTarget *target, void *buffer, size_t length)
     * }
     */
    public static MethodHandle vips_target_read$handle() {
        return vips_target_read.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gint64 vips_target_read(VipsTarget *target, void *buffer, size_t length)
     * }
     */
    public static MemorySegment vips_target_read$address() {
        return vips_target_read.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gint64 vips_target_read(VipsTarget *target, void *buffer, size_t length)
     * }
     */
    public static long vips_target_read(MemorySegment target, MemorySegment buffer, long length) {
        var mh$ = vips_target_read.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_target_read", target, buffer, length);
            }
            return (long)mh$.invokeExact(target, buffer, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_target_seek {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG_LONG,
            vips_h.C_POINTER,
            vips_h.C_LONG_LONG,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_target_seek");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint64 vips_target_seek(VipsTarget *target, gint64 offset, int whence)
     * }
     */
    public static FunctionDescriptor vips_target_seek$descriptor() {
        return vips_target_seek.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint64 vips_target_seek(VipsTarget *target, gint64 offset, int whence)
     * }
     */
    public static MethodHandle vips_target_seek$handle() {
        return vips_target_seek.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gint64 vips_target_seek(VipsTarget *target, gint64 offset, int whence)
     * }
     */
    public static MemorySegment vips_target_seek$address() {
        return vips_target_seek.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gint64 vips_target_seek(VipsTarget *target, gint64 offset, int whence)
     * }
     */
    public static long vips_target_seek(MemorySegment target, long offset, int whence) {
        var mh$ = vips_target_seek.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_target_seek", target, offset, whence);
            }
            return (long)mh$.invokeExact(target, offset, whence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_target_end {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_target_end");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_target_end(VipsTarget *target)
     * }
     */
    public static FunctionDescriptor vips_target_end$descriptor() {
        return vips_target_end.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_target_end(VipsTarget *target)
     * }
     */
    public static MethodHandle vips_target_end$handle() {
        return vips_target_end.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_target_end(VipsTarget *target)
     * }
     */
    public static MemorySegment vips_target_end$address() {
        return vips_target_end.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_target_end(VipsTarget *target)
     * }
     */
    public static int vips_target_end(MemorySegment target) {
        var mh$ = vips_target_end.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_target_end", target);
            }
            return (int)mh$.invokeExact(target);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_target_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_target_finish");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_target_finish(VipsTarget *target)
     * }
     */
    public static FunctionDescriptor vips_target_finish$descriptor() {
        return vips_target_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_target_finish(VipsTarget *target)
     * }
     */
    public static MethodHandle vips_target_finish$handle() {
        return vips_target_finish.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_target_finish(VipsTarget *target)
     * }
     */
    public static MemorySegment vips_target_finish$address() {
        return vips_target_finish.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_target_finish(VipsTarget *target)
     * }
     */
    public static void vips_target_finish(MemorySegment target) {
        var mh$ = vips_target_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_target_finish", target);
            }
            mh$.invokeExact(target);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_target_steal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_target_steal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned char *vips_target_steal(VipsTarget *target, size_t *length)
     * }
     */
    public static FunctionDescriptor vips_target_steal$descriptor() {
        return vips_target_steal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned char *vips_target_steal(VipsTarget *target, size_t *length)
     * }
     */
    public static MethodHandle vips_target_steal$handle() {
        return vips_target_steal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned char *vips_target_steal(VipsTarget *target, size_t *length)
     * }
     */
    public static MemorySegment vips_target_steal$address() {
        return vips_target_steal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned char *vips_target_steal(VipsTarget *target, size_t *length)
     * }
     */
    public static MemorySegment vips_target_steal(MemorySegment target, MemorySegment length) {
        var mh$ = vips_target_steal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_target_steal", target, length);
            }
            return (MemorySegment)mh$.invokeExact(target, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_target_steal_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_target_steal_text");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *vips_target_steal_text(VipsTarget *target)
     * }
     */
    public static FunctionDescriptor vips_target_steal_text$descriptor() {
        return vips_target_steal_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *vips_target_steal_text(VipsTarget *target)
     * }
     */
    public static MethodHandle vips_target_steal_text$handle() {
        return vips_target_steal_text.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *vips_target_steal_text(VipsTarget *target)
     * }
     */
    public static MemorySegment vips_target_steal_text$address() {
        return vips_target_steal_text.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *vips_target_steal_text(VipsTarget *target)
     * }
     */
    public static MemorySegment vips_target_steal_text(MemorySegment target) {
        var mh$ = vips_target_steal_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_target_steal_text", target);
            }
            return (MemorySegment)mh$.invokeExact(target);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_target_putc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_target_putc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_target_putc(VipsTarget *target, int ch)
     * }
     */
    public static FunctionDescriptor vips_target_putc$descriptor() {
        return vips_target_putc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_target_putc(VipsTarget *target, int ch)
     * }
     */
    public static MethodHandle vips_target_putc$handle() {
        return vips_target_putc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_target_putc(VipsTarget *target, int ch)
     * }
     */
    public static MemorySegment vips_target_putc$address() {
        return vips_target_putc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_target_putc(VipsTarget *target, int ch)
     * }
     */
    public static int vips_target_putc(MemorySegment target, int ch) {
        var mh$ = vips_target_putc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_target_putc", target, ch);
            }
            return (int)mh$.invokeExact(target, ch);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_target_writes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_target_writes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_target_writes(VipsTarget *target, const char *str)
     * }
     */
    public static FunctionDescriptor vips_target_writes$descriptor() {
        return vips_target_writes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_target_writes(VipsTarget *target, const char *str)
     * }
     */
    public static MethodHandle vips_target_writes$handle() {
        return vips_target_writes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_target_writes(VipsTarget *target, const char *str)
     * }
     */
    public static MemorySegment vips_target_writes$address() {
        return vips_target_writes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_target_writes(VipsTarget *target, const char *str)
     * }
     */
    public static int vips_target_writes(MemorySegment target, MemorySegment str) {
        var mh$ = vips_target_writes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_target_writes", target, str);
            }
            return (int)mh$.invokeExact(target, str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_target_writef(VipsTarget *target, const char *fmt, ...)
     * }
     */
    public static class vips_target_writef {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_target_writef");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_target_writef(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_target_writef(VipsTarget *target, const char *fmt, ...)
         * }
         */
        public static vips_target_writef makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_target_writef(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment target, MemorySegment fmt, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_target_writef", target, fmt, x2);
                }
                return (int)spreader.invokeExact(target, fmt, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class vips_target_write_amp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_target_write_amp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_target_write_amp(VipsTarget *target, const char *str)
     * }
     */
    public static FunctionDescriptor vips_target_write_amp$descriptor() {
        return vips_target_write_amp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_target_write_amp(VipsTarget *target, const char *str)
     * }
     */
    public static MethodHandle vips_target_write_amp$handle() {
        return vips_target_write_amp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_target_write_amp(VipsTarget *target, const char *str)
     * }
     */
    public static MemorySegment vips_target_write_amp$address() {
        return vips_target_write_amp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_target_write_amp(VipsTarget *target, const char *str)
     * }
     */
    public static int vips_target_write_amp(MemorySegment target, MemorySegment str) {
        var mh$ = vips_target_write_amp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_target_write_amp", target, str);
            }
            return (int)mh$.invokeExact(target, str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_target_custom_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_target_custom_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_target_custom_get_type()
     * }
     */
    public static FunctionDescriptor vips_target_custom_get_type$descriptor() {
        return vips_target_custom_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_target_custom_get_type()
     * }
     */
    public static MethodHandle vips_target_custom_get_type$handle() {
        return vips_target_custom_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_target_custom_get_type()
     * }
     */
    public static MemorySegment vips_target_custom_get_type$address() {
        return vips_target_custom_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_target_custom_get_type()
     * }
     */
    public static long vips_target_custom_get_type() {
        var mh$ = vips_target_custom_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_target_custom_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_target_custom_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_target_custom_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsTargetCustom *vips_target_custom_new()
     * }
     */
    public static FunctionDescriptor vips_target_custom_new$descriptor() {
        return vips_target_custom_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsTargetCustom *vips_target_custom_new()
     * }
     */
    public static MethodHandle vips_target_custom_new$handle() {
        return vips_target_custom_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsTargetCustom *vips_target_custom_new()
     * }
     */
    public static MemorySegment vips_target_custom_new$address() {
        return vips_target_custom_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsTargetCustom *vips_target_custom_new()
     * }
     */
    public static MemorySegment vips_target_custom_new() {
        var mh$ = vips_target_custom_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_target_custom_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_sbuf_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_sbuf_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_sbuf_get_type()
     * }
     */
    public static FunctionDescriptor vips_sbuf_get_type$descriptor() {
        return vips_sbuf_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_sbuf_get_type()
     * }
     */
    public static MethodHandle vips_sbuf_get_type$handle() {
        return vips_sbuf_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_sbuf_get_type()
     * }
     */
    public static MemorySegment vips_sbuf_get_type$address() {
        return vips_sbuf_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_sbuf_get_type()
     * }
     */
    public static long vips_sbuf_get_type() {
        var mh$ = vips_sbuf_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_sbuf_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_sbuf_new_from_source {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_sbuf_new_from_source");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsSbuf *vips_sbuf_new_from_source(VipsSource *source)
     * }
     */
    public static FunctionDescriptor vips_sbuf_new_from_source$descriptor() {
        return vips_sbuf_new_from_source.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsSbuf *vips_sbuf_new_from_source(VipsSource *source)
     * }
     */
    public static MethodHandle vips_sbuf_new_from_source$handle() {
        return vips_sbuf_new_from_source.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsSbuf *vips_sbuf_new_from_source(VipsSource *source)
     * }
     */
    public static MemorySegment vips_sbuf_new_from_source$address() {
        return vips_sbuf_new_from_source.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsSbuf *vips_sbuf_new_from_source(VipsSource *source)
     * }
     */
    public static MemorySegment vips_sbuf_new_from_source(MemorySegment source) {
        var mh$ = vips_sbuf_new_from_source.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_sbuf_new_from_source", source);
            }
            return (MemorySegment)mh$.invokeExact(source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_sbuf_unbuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_sbuf_unbuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_sbuf_unbuffer(VipsSbuf *sbuf)
     * }
     */
    public static FunctionDescriptor vips_sbuf_unbuffer$descriptor() {
        return vips_sbuf_unbuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_sbuf_unbuffer(VipsSbuf *sbuf)
     * }
     */
    public static MethodHandle vips_sbuf_unbuffer$handle() {
        return vips_sbuf_unbuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_sbuf_unbuffer(VipsSbuf *sbuf)
     * }
     */
    public static MemorySegment vips_sbuf_unbuffer$address() {
        return vips_sbuf_unbuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_sbuf_unbuffer(VipsSbuf *sbuf)
     * }
     */
    public static void vips_sbuf_unbuffer(MemorySegment sbuf) {
        var mh$ = vips_sbuf_unbuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_sbuf_unbuffer", sbuf);
            }
            mh$.invokeExact(sbuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_sbuf_getc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_sbuf_getc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_sbuf_getc(VipsSbuf *sbuf)
     * }
     */
    public static FunctionDescriptor vips_sbuf_getc$descriptor() {
        return vips_sbuf_getc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_sbuf_getc(VipsSbuf *sbuf)
     * }
     */
    public static MethodHandle vips_sbuf_getc$handle() {
        return vips_sbuf_getc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_sbuf_getc(VipsSbuf *sbuf)
     * }
     */
    public static MemorySegment vips_sbuf_getc$address() {
        return vips_sbuf_getc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_sbuf_getc(VipsSbuf *sbuf)
     * }
     */
    public static int vips_sbuf_getc(MemorySegment sbuf) {
        var mh$ = vips_sbuf_getc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_sbuf_getc", sbuf);
            }
            return (int)mh$.invokeExact(sbuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_sbuf_ungetc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_sbuf_ungetc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_sbuf_ungetc(VipsSbuf *sbuf)
     * }
     */
    public static FunctionDescriptor vips_sbuf_ungetc$descriptor() {
        return vips_sbuf_ungetc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_sbuf_ungetc(VipsSbuf *sbuf)
     * }
     */
    public static MethodHandle vips_sbuf_ungetc$handle() {
        return vips_sbuf_ungetc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_sbuf_ungetc(VipsSbuf *sbuf)
     * }
     */
    public static MemorySegment vips_sbuf_ungetc$address() {
        return vips_sbuf_ungetc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_sbuf_ungetc(VipsSbuf *sbuf)
     * }
     */
    public static void vips_sbuf_ungetc(MemorySegment sbuf) {
        var mh$ = vips_sbuf_ungetc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_sbuf_ungetc", sbuf);
            }
            mh$.invokeExact(sbuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_sbuf_require {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_sbuf_require");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_sbuf_require(VipsSbuf *sbuf, int require)
     * }
     */
    public static FunctionDescriptor vips_sbuf_require$descriptor() {
        return vips_sbuf_require.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_sbuf_require(VipsSbuf *sbuf, int require)
     * }
     */
    public static MethodHandle vips_sbuf_require$handle() {
        return vips_sbuf_require.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_sbuf_require(VipsSbuf *sbuf, int require)
     * }
     */
    public static MemorySegment vips_sbuf_require$address() {
        return vips_sbuf_require.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_sbuf_require(VipsSbuf *sbuf, int require)
     * }
     */
    public static int vips_sbuf_require(MemorySegment sbuf, int require) {
        var mh$ = vips_sbuf_require.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_sbuf_require", sbuf, require);
            }
            return (int)mh$.invokeExact(sbuf, require);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_sbuf_get_line {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_sbuf_get_line");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *vips_sbuf_get_line(VipsSbuf *sbuf)
     * }
     */
    public static FunctionDescriptor vips_sbuf_get_line$descriptor() {
        return vips_sbuf_get_line.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *vips_sbuf_get_line(VipsSbuf *sbuf)
     * }
     */
    public static MethodHandle vips_sbuf_get_line$handle() {
        return vips_sbuf_get_line.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *vips_sbuf_get_line(VipsSbuf *sbuf)
     * }
     */
    public static MemorySegment vips_sbuf_get_line$address() {
        return vips_sbuf_get_line.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *vips_sbuf_get_line(VipsSbuf *sbuf)
     * }
     */
    public static MemorySegment vips_sbuf_get_line(MemorySegment sbuf) {
        var mh$ = vips_sbuf_get_line.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_sbuf_get_line", sbuf);
            }
            return (MemorySegment)mh$.invokeExact(sbuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_sbuf_get_line_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_sbuf_get_line_copy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *vips_sbuf_get_line_copy(VipsSbuf *sbuf)
     * }
     */
    public static FunctionDescriptor vips_sbuf_get_line_copy$descriptor() {
        return vips_sbuf_get_line_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *vips_sbuf_get_line_copy(VipsSbuf *sbuf)
     * }
     */
    public static MethodHandle vips_sbuf_get_line_copy$handle() {
        return vips_sbuf_get_line_copy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *vips_sbuf_get_line_copy(VipsSbuf *sbuf)
     * }
     */
    public static MemorySegment vips_sbuf_get_line_copy$address() {
        return vips_sbuf_get_line_copy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *vips_sbuf_get_line_copy(VipsSbuf *sbuf)
     * }
     */
    public static MemorySegment vips_sbuf_get_line_copy(MemorySegment sbuf) {
        var mh$ = vips_sbuf_get_line_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_sbuf_get_line_copy", sbuf);
            }
            return (MemorySegment)mh$.invokeExact(sbuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_sbuf_get_non_whitespace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_sbuf_get_non_whitespace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *vips_sbuf_get_non_whitespace(VipsSbuf *sbuf)
     * }
     */
    public static FunctionDescriptor vips_sbuf_get_non_whitespace$descriptor() {
        return vips_sbuf_get_non_whitespace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *vips_sbuf_get_non_whitespace(VipsSbuf *sbuf)
     * }
     */
    public static MethodHandle vips_sbuf_get_non_whitespace$handle() {
        return vips_sbuf_get_non_whitespace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *vips_sbuf_get_non_whitespace(VipsSbuf *sbuf)
     * }
     */
    public static MemorySegment vips_sbuf_get_non_whitespace$address() {
        return vips_sbuf_get_non_whitespace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *vips_sbuf_get_non_whitespace(VipsSbuf *sbuf)
     * }
     */
    public static MemorySegment vips_sbuf_get_non_whitespace(MemorySegment sbuf) {
        var mh$ = vips_sbuf_get_non_whitespace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_sbuf_get_non_whitespace", sbuf);
            }
            return (MemorySegment)mh$.invokeExact(sbuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_sbuf_skip_whitespace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_sbuf_skip_whitespace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_sbuf_skip_whitespace(VipsSbuf *sbuf)
     * }
     */
    public static FunctionDescriptor vips_sbuf_skip_whitespace$descriptor() {
        return vips_sbuf_skip_whitespace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_sbuf_skip_whitespace(VipsSbuf *sbuf)
     * }
     */
    public static MethodHandle vips_sbuf_skip_whitespace$handle() {
        return vips_sbuf_skip_whitespace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_sbuf_skip_whitespace(VipsSbuf *sbuf)
     * }
     */
    public static MemorySegment vips_sbuf_skip_whitespace$address() {
        return vips_sbuf_skip_whitespace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_sbuf_skip_whitespace(VipsSbuf *sbuf)
     * }
     */
    public static int vips_sbuf_skip_whitespace(MemorySegment sbuf) {
        var mh$ = vips_sbuf_skip_whitespace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_sbuf_skip_whitespace", sbuf);
            }
            return (int)mh$.invokeExact(sbuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_rect_isempty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_rect_isempty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_rect_isempty(const VipsRect *r)
     * }
     */
    public static FunctionDescriptor vips_rect_isempty$descriptor() {
        return vips_rect_isempty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_rect_isempty(const VipsRect *r)
     * }
     */
    public static MethodHandle vips_rect_isempty$handle() {
        return vips_rect_isempty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_rect_isempty(const VipsRect *r)
     * }
     */
    public static MemorySegment vips_rect_isempty$address() {
        return vips_rect_isempty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_rect_isempty(const VipsRect *r)
     * }
     */
    public static int vips_rect_isempty(MemorySegment r) {
        var mh$ = vips_rect_isempty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_rect_isempty", r);
            }
            return (int)mh$.invokeExact(r);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_rect_includespoint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_INT,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_rect_includespoint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_rect_includespoint(const VipsRect *r, int x, int y)
     * }
     */
    public static FunctionDescriptor vips_rect_includespoint$descriptor() {
        return vips_rect_includespoint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_rect_includespoint(const VipsRect *r, int x, int y)
     * }
     */
    public static MethodHandle vips_rect_includespoint$handle() {
        return vips_rect_includespoint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_rect_includespoint(const VipsRect *r, int x, int y)
     * }
     */
    public static MemorySegment vips_rect_includespoint$address() {
        return vips_rect_includespoint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_rect_includespoint(const VipsRect *r, int x, int y)
     * }
     */
    public static int vips_rect_includespoint(MemorySegment r, int x, int y) {
        var mh$ = vips_rect_includespoint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_rect_includespoint", r, x, y);
            }
            return (int)mh$.invokeExact(r, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_rect_includesrect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_rect_includesrect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_rect_includesrect(const VipsRect *r1, const VipsRect *r2)
     * }
     */
    public static FunctionDescriptor vips_rect_includesrect$descriptor() {
        return vips_rect_includesrect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_rect_includesrect(const VipsRect *r1, const VipsRect *r2)
     * }
     */
    public static MethodHandle vips_rect_includesrect$handle() {
        return vips_rect_includesrect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_rect_includesrect(const VipsRect *r1, const VipsRect *r2)
     * }
     */
    public static MemorySegment vips_rect_includesrect$address() {
        return vips_rect_includesrect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_rect_includesrect(const VipsRect *r1, const VipsRect *r2)
     * }
     */
    public static int vips_rect_includesrect(MemorySegment r1, MemorySegment r2) {
        var mh$ = vips_rect_includesrect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_rect_includesrect", r1, r2);
            }
            return (int)mh$.invokeExact(r1, r2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_rect_equalsrect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_rect_equalsrect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_rect_equalsrect(const VipsRect *r1, const VipsRect *r2)
     * }
     */
    public static FunctionDescriptor vips_rect_equalsrect$descriptor() {
        return vips_rect_equalsrect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_rect_equalsrect(const VipsRect *r1, const VipsRect *r2)
     * }
     */
    public static MethodHandle vips_rect_equalsrect$handle() {
        return vips_rect_equalsrect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_rect_equalsrect(const VipsRect *r1, const VipsRect *r2)
     * }
     */
    public static MemorySegment vips_rect_equalsrect$address() {
        return vips_rect_equalsrect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_rect_equalsrect(const VipsRect *r1, const VipsRect *r2)
     * }
     */
    public static int vips_rect_equalsrect(MemorySegment r1, MemorySegment r2) {
        var mh$ = vips_rect_equalsrect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_rect_equalsrect", r1, r2);
            }
            return (int)mh$.invokeExact(r1, r2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_rect_overlapsrect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_rect_overlapsrect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_rect_overlapsrect(const VipsRect *r1, const VipsRect *r2)
     * }
     */
    public static FunctionDescriptor vips_rect_overlapsrect$descriptor() {
        return vips_rect_overlapsrect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_rect_overlapsrect(const VipsRect *r1, const VipsRect *r2)
     * }
     */
    public static MethodHandle vips_rect_overlapsrect$handle() {
        return vips_rect_overlapsrect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_rect_overlapsrect(const VipsRect *r1, const VipsRect *r2)
     * }
     */
    public static MemorySegment vips_rect_overlapsrect$address() {
        return vips_rect_overlapsrect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_rect_overlapsrect(const VipsRect *r1, const VipsRect *r2)
     * }
     */
    public static int vips_rect_overlapsrect(MemorySegment r1, MemorySegment r2) {
        var mh$ = vips_rect_overlapsrect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_rect_overlapsrect", r1, r2);
            }
            return (int)mh$.invokeExact(r1, r2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_rect_marginadjust {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_rect_marginadjust");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_rect_marginadjust(VipsRect *r, int n)
     * }
     */
    public static FunctionDescriptor vips_rect_marginadjust$descriptor() {
        return vips_rect_marginadjust.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_rect_marginadjust(VipsRect *r, int n)
     * }
     */
    public static MethodHandle vips_rect_marginadjust$handle() {
        return vips_rect_marginadjust.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_rect_marginadjust(VipsRect *r, int n)
     * }
     */
    public static MemorySegment vips_rect_marginadjust$address() {
        return vips_rect_marginadjust.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_rect_marginadjust(VipsRect *r, int n)
     * }
     */
    public static void vips_rect_marginadjust(MemorySegment r, int n) {
        var mh$ = vips_rect_marginadjust.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_rect_marginadjust", r, n);
            }
            mh$.invokeExact(r, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_rect_intersectrect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_rect_intersectrect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_rect_intersectrect(const VipsRect *r1, const VipsRect *r2, VipsRect *out)
     * }
     */
    public static FunctionDescriptor vips_rect_intersectrect$descriptor() {
        return vips_rect_intersectrect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_rect_intersectrect(const VipsRect *r1, const VipsRect *r2, VipsRect *out)
     * }
     */
    public static MethodHandle vips_rect_intersectrect$handle() {
        return vips_rect_intersectrect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_rect_intersectrect(const VipsRect *r1, const VipsRect *r2, VipsRect *out)
     * }
     */
    public static MemorySegment vips_rect_intersectrect$address() {
        return vips_rect_intersectrect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_rect_intersectrect(const VipsRect *r1, const VipsRect *r2, VipsRect *out)
     * }
     */
    public static void vips_rect_intersectrect(MemorySegment r1, MemorySegment r2, MemorySegment out) {
        var mh$ = vips_rect_intersectrect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_rect_intersectrect", r1, r2, out);
            }
            mh$.invokeExact(r1, r2, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_rect_unionrect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_rect_unionrect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_rect_unionrect(const VipsRect *r1, const VipsRect *r2, VipsRect *out)
     * }
     */
    public static FunctionDescriptor vips_rect_unionrect$descriptor() {
        return vips_rect_unionrect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_rect_unionrect(const VipsRect *r1, const VipsRect *r2, VipsRect *out)
     * }
     */
    public static MethodHandle vips_rect_unionrect$handle() {
        return vips_rect_unionrect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_rect_unionrect(const VipsRect *r1, const VipsRect *r2, VipsRect *out)
     * }
     */
    public static MemorySegment vips_rect_unionrect$address() {
        return vips_rect_unionrect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_rect_unionrect(const VipsRect *r1, const VipsRect *r2, VipsRect *out)
     * }
     */
    public static void vips_rect_unionrect(MemorySegment r1, MemorySegment r2, MemorySegment out) {
        var mh$ = vips_rect_unionrect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_rect_unionrect", r1, r2, out);
            }
            mh$.invokeExact(r1, r2, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_rect_dup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_rect_dup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsRect *vips_rect_dup(const VipsRect *r)
     * }
     */
    public static FunctionDescriptor vips_rect_dup$descriptor() {
        return vips_rect_dup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsRect *vips_rect_dup(const VipsRect *r)
     * }
     */
    public static MethodHandle vips_rect_dup$handle() {
        return vips_rect_dup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsRect *vips_rect_dup(const VipsRect *r)
     * }
     */
    public static MemorySegment vips_rect_dup$address() {
        return vips_rect_dup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsRect *vips_rect_dup(const VipsRect *r)
     * }
     */
    public static MemorySegment vips_rect_dup(MemorySegment r) {
        var mh$ = vips_rect_dup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_rect_dup", r);
            }
            return (MemorySegment)mh$.invokeExact(r);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_rect_normalise {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_rect_normalise");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_rect_normalise(VipsRect *r)
     * }
     */
    public static FunctionDescriptor vips_rect_normalise$descriptor() {
        return vips_rect_normalise.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_rect_normalise(VipsRect *r)
     * }
     */
    public static MethodHandle vips_rect_normalise$handle() {
        return vips_rect_normalise.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_rect_normalise(VipsRect *r)
     * }
     */
    public static MemorySegment vips_rect_normalise$address() {
        return vips_rect_normalise.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_rect_normalise(VipsRect *r)
     * }
     */
    public static void vips_rect_normalise(MemorySegment r) {
        var mh$ = vips_rect_normalise.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_rect_normalise", r);
            }
            mh$.invokeExact(r);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_window_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_window_unref");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_window_unref(VipsWindow *window)
     * }
     */
    public static FunctionDescriptor vips_window_unref$descriptor() {
        return vips_window_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_window_unref(VipsWindow *window)
     * }
     */
    public static MethodHandle vips_window_unref$handle() {
        return vips_window_unref.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_window_unref(VipsWindow *window)
     * }
     */
    public static MemorySegment vips_window_unref$address() {
        return vips_window_unref.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_window_unref(VipsWindow *window)
     * }
     */
    public static int vips_window_unref(MemorySegment window) {
        var mh$ = vips_window_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_window_unref", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_window_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_window_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_window_print(VipsWindow *window)
     * }
     */
    public static FunctionDescriptor vips_window_print$descriptor() {
        return vips_window_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_window_print(VipsWindow *window)
     * }
     */
    public static MethodHandle vips_window_print$handle() {
        return vips_window_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_window_print(VipsWindow *window)
     * }
     */
    public static MemorySegment vips_window_print$address() {
        return vips_window_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_window_print(VipsWindow *window)
     * }
     */
    public static void vips_window_print(MemorySegment window) {
        var mh$ = vips_window_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_window_print", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_buffer_dump_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_buffer_dump_all");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_buffer_dump_all()
     * }
     */
    public static FunctionDescriptor vips_buffer_dump_all$descriptor() {
        return vips_buffer_dump_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_buffer_dump_all()
     * }
     */
    public static MethodHandle vips_buffer_dump_all$handle() {
        return vips_buffer_dump_all.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_buffer_dump_all()
     * }
     */
    public static MemorySegment vips_buffer_dump_all$address() {
        return vips_buffer_dump_all.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_buffer_dump_all()
     * }
     */
    public static void vips_buffer_dump_all() {
        var mh$ = vips_buffer_dump_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_buffer_dump_all");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_buffer_done {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_buffer_done");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_buffer_done(VipsBuffer *buffer)
     * }
     */
    public static FunctionDescriptor vips_buffer_done$descriptor() {
        return vips_buffer_done.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_buffer_done(VipsBuffer *buffer)
     * }
     */
    public static MethodHandle vips_buffer_done$handle() {
        return vips_buffer_done.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_buffer_done(VipsBuffer *buffer)
     * }
     */
    public static MemorySegment vips_buffer_done$address() {
        return vips_buffer_done.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_buffer_done(VipsBuffer *buffer)
     * }
     */
    public static void vips_buffer_done(MemorySegment buffer) {
        var mh$ = vips_buffer_done.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_buffer_done", buffer);
            }
            mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_buffer_undone {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_buffer_undone");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_buffer_undone(VipsBuffer *buffer)
     * }
     */
    public static FunctionDescriptor vips_buffer_undone$descriptor() {
        return vips_buffer_undone.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_buffer_undone(VipsBuffer *buffer)
     * }
     */
    public static MethodHandle vips_buffer_undone$handle() {
        return vips_buffer_undone.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_buffer_undone(VipsBuffer *buffer)
     * }
     */
    public static MemorySegment vips_buffer_undone$address() {
        return vips_buffer_undone.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_buffer_undone(VipsBuffer *buffer)
     * }
     */
    public static void vips_buffer_undone(MemorySegment buffer) {
        var mh$ = vips_buffer_undone.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_buffer_undone", buffer);
            }
            mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_buffer_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_buffer_unref");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_buffer_unref(VipsBuffer *buffer)
     * }
     */
    public static FunctionDescriptor vips_buffer_unref$descriptor() {
        return vips_buffer_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_buffer_unref(VipsBuffer *buffer)
     * }
     */
    public static MethodHandle vips_buffer_unref$handle() {
        return vips_buffer_unref.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_buffer_unref(VipsBuffer *buffer)
     * }
     */
    public static MemorySegment vips_buffer_unref$address() {
        return vips_buffer_unref.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_buffer_unref(VipsBuffer *buffer)
     * }
     */
    public static void vips_buffer_unref(MemorySegment buffer) {
        var mh$ = vips_buffer_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_buffer_unref", buffer);
            }
            mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_buffer_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_buffer_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsBuffer *vips_buffer_new(struct _VipsImage *im, VipsRect *area)
     * }
     */
    public static FunctionDescriptor vips_buffer_new$descriptor() {
        return vips_buffer_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsBuffer *vips_buffer_new(struct _VipsImage *im, VipsRect *area)
     * }
     */
    public static MethodHandle vips_buffer_new$handle() {
        return vips_buffer_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsBuffer *vips_buffer_new(struct _VipsImage *im, VipsRect *area)
     * }
     */
    public static MemorySegment vips_buffer_new$address() {
        return vips_buffer_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsBuffer *vips_buffer_new(struct _VipsImage *im, VipsRect *area)
     * }
     */
    public static MemorySegment vips_buffer_new(MemorySegment im, MemorySegment area) {
        var mh$ = vips_buffer_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_buffer_new", im, area);
            }
            return (MemorySegment)mh$.invokeExact(im, area);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_buffer_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_buffer_ref");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsBuffer *vips_buffer_ref(struct _VipsImage *im, VipsRect *area)
     * }
     */
    public static FunctionDescriptor vips_buffer_ref$descriptor() {
        return vips_buffer_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsBuffer *vips_buffer_ref(struct _VipsImage *im, VipsRect *area)
     * }
     */
    public static MethodHandle vips_buffer_ref$handle() {
        return vips_buffer_ref.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsBuffer *vips_buffer_ref(struct _VipsImage *im, VipsRect *area)
     * }
     */
    public static MemorySegment vips_buffer_ref$address() {
        return vips_buffer_ref.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsBuffer *vips_buffer_ref(struct _VipsImage *im, VipsRect *area)
     * }
     */
    public static MemorySegment vips_buffer_ref(MemorySegment im, MemorySegment area) {
        var mh$ = vips_buffer_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_buffer_ref", im, area);
            }
            return (MemorySegment)mh$.invokeExact(im, area);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_buffer_unref_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_buffer_unref_ref");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsBuffer *vips_buffer_unref_ref(VipsBuffer *buffer, struct _VipsImage *im, VipsRect *area)
     * }
     */
    public static FunctionDescriptor vips_buffer_unref_ref$descriptor() {
        return vips_buffer_unref_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsBuffer *vips_buffer_unref_ref(VipsBuffer *buffer, struct _VipsImage *im, VipsRect *area)
     * }
     */
    public static MethodHandle vips_buffer_unref_ref$handle() {
        return vips_buffer_unref_ref.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsBuffer *vips_buffer_unref_ref(VipsBuffer *buffer, struct _VipsImage *im, VipsRect *area)
     * }
     */
    public static MemorySegment vips_buffer_unref_ref$address() {
        return vips_buffer_unref_ref.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsBuffer *vips_buffer_unref_ref(VipsBuffer *buffer, struct _VipsImage *im, VipsRect *area)
     * }
     */
    public static MemorySegment vips_buffer_unref_ref(MemorySegment buffer, MemorySegment im, MemorySegment area) {
        var mh$ = vips_buffer_unref_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_buffer_unref_ref", buffer, im, area);
            }
            return (MemorySegment)mh$.invokeExact(buffer, im, area);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_buffer_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_buffer_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_buffer_print(VipsBuffer *buffer)
     * }
     */
    public static FunctionDescriptor vips_buffer_print$descriptor() {
        return vips_buffer_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_buffer_print(VipsBuffer *buffer)
     * }
     */
    public static MethodHandle vips_buffer_print$handle() {
        return vips_buffer_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_buffer_print(VipsBuffer *buffer)
     * }
     */
    public static MemorySegment vips_buffer_print$address() {
        return vips_buffer_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_buffer_print(VipsBuffer *buffer)
     * }
     */
    public static void vips_buffer_print(MemorySegment buffer) {
        var mh$ = vips_buffer_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_buffer_print", buffer);
            }
            mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__render_shutdown {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__render_shutdown");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vips__render_shutdown()
     * }
     */
    public static FunctionDescriptor vips__render_shutdown$descriptor() {
        return vips__render_shutdown.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vips__render_shutdown()
     * }
     */
    public static MethodHandle vips__render_shutdown$handle() {
        return vips__render_shutdown.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void vips__render_shutdown()
     * }
     */
    public static MemorySegment vips__render_shutdown$address() {
        return vips__render_shutdown.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void vips__render_shutdown()
     * }
     */
    public static void vips__render_shutdown() {
        var mh$ = vips__render_shutdown.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__render_shutdown");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VIPS_REGION_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _RegionType.VIPS_REGION_NONE = 0
     * }
     */
    public static int VIPS_REGION_NONE() {
        return VIPS_REGION_NONE;
    }
    private static final int VIPS_REGION_BUFFER = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _RegionType.VIPS_REGION_BUFFER = 1
     * }
     */
    public static int VIPS_REGION_BUFFER() {
        return VIPS_REGION_BUFFER;
    }
    private static final int VIPS_REGION_OTHER_REGION = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _RegionType.VIPS_REGION_OTHER_REGION = 2
     * }
     */
    public static int VIPS_REGION_OTHER_REGION() {
        return VIPS_REGION_OTHER_REGION;
    }
    private static final int VIPS_REGION_OTHER_IMAGE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _RegionType.VIPS_REGION_OTHER_IMAGE = 3
     * }
     */
    public static int VIPS_REGION_OTHER_IMAGE() {
        return VIPS_REGION_OTHER_IMAGE;
    }
    private static final int VIPS_REGION_WINDOW = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _RegionType.VIPS_REGION_WINDOW = 4
     * }
     */
    public static int VIPS_REGION_WINDOW() {
        return VIPS_REGION_WINDOW;
    }

    private static class vips__region_take_ownership {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__region_take_ownership");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vips__region_take_ownership(struct _VipsRegion *reg)
     * }
     */
    public static FunctionDescriptor vips__region_take_ownership$descriptor() {
        return vips__region_take_ownership.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vips__region_take_ownership(struct _VipsRegion *reg)
     * }
     */
    public static MethodHandle vips__region_take_ownership$handle() {
        return vips__region_take_ownership.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void vips__region_take_ownership(struct _VipsRegion *reg)
     * }
     */
    public static MemorySegment vips__region_take_ownership$address() {
        return vips__region_take_ownership.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void vips__region_take_ownership(struct _VipsRegion *reg)
     * }
     */
    public static void vips__region_take_ownership(MemorySegment reg) {
        var mh$ = vips__region_take_ownership.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__region_take_ownership", reg);
            }
            mh$.invokeExact(reg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__region_check_ownership {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__region_check_ownership");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vips__region_check_ownership(struct _VipsRegion *reg)
     * }
     */
    public static FunctionDescriptor vips__region_check_ownership$descriptor() {
        return vips__region_check_ownership.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vips__region_check_ownership(struct _VipsRegion *reg)
     * }
     */
    public static MethodHandle vips__region_check_ownership$handle() {
        return vips__region_check_ownership.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void vips__region_check_ownership(struct _VipsRegion *reg)
     * }
     */
    public static MemorySegment vips__region_check_ownership$address() {
        return vips__region_check_ownership.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void vips__region_check_ownership(struct _VipsRegion *reg)
     * }
     */
    public static void vips__region_check_ownership(MemorySegment reg) {
        var mh$ = vips__region_check_ownership.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__region_check_ownership", reg);
            }
            mh$.invokeExact(reg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__region_no_ownership {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__region_no_ownership");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips__region_no_ownership(struct _VipsRegion *reg)
     * }
     */
    public static FunctionDescriptor vips__region_no_ownership$descriptor() {
        return vips__region_no_ownership.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips__region_no_ownership(struct _VipsRegion *reg)
     * }
     */
    public static MethodHandle vips__region_no_ownership$handle() {
        return vips__region_no_ownership.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips__region_no_ownership(struct _VipsRegion *reg)
     * }
     */
    public static MemorySegment vips__region_no_ownership$address() {
        return vips__region_no_ownership.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips__region_no_ownership(struct _VipsRegion *reg)
     * }
     */
    public static void vips__region_no_ownership(MemorySegment reg) {
        var mh$ = vips__region_no_ownership.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__region_no_ownership", reg);
            }
            mh$.invokeExact(reg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_region_fill {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_region_fill");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_region_fill(struct _VipsRegion *reg, const VipsRect *r, VipsRegionFillFn fn, void *a)
     * }
     */
    public static FunctionDescriptor vips_region_fill$descriptor() {
        return vips_region_fill.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_region_fill(struct _VipsRegion *reg, const VipsRect *r, VipsRegionFillFn fn, void *a)
     * }
     */
    public static MethodHandle vips_region_fill$handle() {
        return vips_region_fill.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_region_fill(struct _VipsRegion *reg, const VipsRect *r, VipsRegionFillFn fn, void *a)
     * }
     */
    public static MemorySegment vips_region_fill$address() {
        return vips_region_fill.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_region_fill(struct _VipsRegion *reg, const VipsRect *r, VipsRegionFillFn fn, void *a)
     * }
     */
    public static int vips_region_fill(MemorySegment reg, MemorySegment r, MemorySegment fn, MemorySegment a) {
        var mh$ = vips_region_fill.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_region_fill", reg, r, fn, a);
            }
            return (int)mh$.invokeExact(reg, r, fn, a);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__image_wio_output {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__image_wio_output");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int vips__image_wio_output(struct _VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips__image_wio_output$descriptor() {
        return vips__image_wio_output.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int vips__image_wio_output(struct _VipsImage *image)
     * }
     */
    public static MethodHandle vips__image_wio_output$handle() {
        return vips__image_wio_output.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int vips__image_wio_output(struct _VipsImage *image)
     * }
     */
    public static MemorySegment vips__image_wio_output$address() {
        return vips__image_wio_output.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int vips__image_wio_output(struct _VipsImage *image)
     * }
     */
    public static int vips__image_wio_output(MemorySegment image) {
        var mh$ = vips__image_wio_output.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__image_wio_output", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__image_pio_output {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__image_pio_output");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int vips__image_pio_output(struct _VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips__image_pio_output$descriptor() {
        return vips__image_pio_output.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int vips__image_pio_output(struct _VipsImage *image)
     * }
     */
    public static MethodHandle vips__image_pio_output$handle() {
        return vips__image_pio_output.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int vips__image_pio_output(struct _VipsImage *image)
     * }
     */
    public static MemorySegment vips__image_pio_output$address() {
        return vips__image_pio_output.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int vips__image_pio_output(struct _VipsImage *image)
     * }
     */
    public static int vips__image_pio_output(MemorySegment image) {
        var mh$ = vips__image_pio_output.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__image_pio_output", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__argument_get_instance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__argument_get_instance");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsArgumentInstance *vips__argument_get_instance(VipsArgumentClass *argument_class, VipsObject *object)
     * }
     */
    public static FunctionDescriptor vips__argument_get_instance$descriptor() {
        return vips__argument_get_instance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsArgumentInstance *vips__argument_get_instance(VipsArgumentClass *argument_class, VipsObject *object)
     * }
     */
    public static MethodHandle vips__argument_get_instance$handle() {
        return vips__argument_get_instance.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsArgumentInstance *vips__argument_get_instance(VipsArgumentClass *argument_class, VipsObject *object)
     * }
     */
    public static MemorySegment vips__argument_get_instance$address() {
        return vips__argument_get_instance.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsArgumentInstance *vips__argument_get_instance(VipsArgumentClass *argument_class, VipsObject *object)
     * }
     */
    public static MemorySegment vips__argument_get_instance(MemorySegment argument_class, MemorySegment object) {
        var mh$ = vips__argument_get_instance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__argument_get_instance", argument_class, object);
            }
            return (MemorySegment)mh$.invokeExact(argument_class, object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__argument_table_lookup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__argument_table_lookup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VipsArgument *vips__argument_table_lookup(VipsArgumentTable *table, GParamSpec *pspec)
     * }
     */
    public static FunctionDescriptor vips__argument_table_lookup$descriptor() {
        return vips__argument_table_lookup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VipsArgument *vips__argument_table_lookup(VipsArgumentTable *table, GParamSpec *pspec)
     * }
     */
    public static MethodHandle vips__argument_table_lookup$handle() {
        return vips__argument_table_lookup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * VipsArgument *vips__argument_table_lookup(VipsArgumentTable *table, GParamSpec *pspec)
     * }
     */
    public static MemorySegment vips__argument_table_lookup$address() {
        return vips__argument_table_lookup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * VipsArgument *vips__argument_table_lookup(VipsArgumentTable *table, GParamSpec *pspec)
     * }
     */
    public static MemorySegment vips__argument_table_lookup(MemorySegment table, MemorySegment pspec) {
        var mh$ = vips__argument_table_lookup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__argument_table_lookup", table, pspec);
            }
            return (MemorySegment)mh$.invokeExact(table, pspec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__demand_hint_array {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__demand_hint_array");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips__demand_hint_array(struct _VipsImage *image, int hint, struct _VipsImage **in)
     * }
     */
    public static FunctionDescriptor vips__demand_hint_array$descriptor() {
        return vips__demand_hint_array.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips__demand_hint_array(struct _VipsImage *image, int hint, struct _VipsImage **in)
     * }
     */
    public static MethodHandle vips__demand_hint_array$handle() {
        return vips__demand_hint_array.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips__demand_hint_array(struct _VipsImage *image, int hint, struct _VipsImage **in)
     * }
     */
    public static MemorySegment vips__demand_hint_array$address() {
        return vips__demand_hint_array.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips__demand_hint_array(struct _VipsImage *image, int hint, struct _VipsImage **in)
     * }
     */
    public static void vips__demand_hint_array(MemorySegment image, int hint, MemorySegment in) {
        var mh$ = vips__demand_hint_array.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__demand_hint_array", image, hint, in);
            }
            mh$.invokeExact(image, hint, in);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__image_copy_fields_array {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__image_copy_fields_array");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips__image_copy_fields_array(struct _VipsImage *out, struct _VipsImage *in[])
     * }
     */
    public static FunctionDescriptor vips__image_copy_fields_array$descriptor() {
        return vips__image_copy_fields_array.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips__image_copy_fields_array(struct _VipsImage *out, struct _VipsImage *in[])
     * }
     */
    public static MethodHandle vips__image_copy_fields_array$handle() {
        return vips__image_copy_fields_array.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips__image_copy_fields_array(struct _VipsImage *out, struct _VipsImage *in[])
     * }
     */
    public static MemorySegment vips__image_copy_fields_array$address() {
        return vips__image_copy_fields_array.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips__image_copy_fields_array(struct _VipsImage *out, struct _VipsImage *in[])
     * }
     */
    public static int vips__image_copy_fields_array(MemorySegment out, MemorySegment in) {
        var mh$ = vips__image_copy_fields_array.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__image_copy_fields_array", out, in);
            }
            return (int)mh$.invokeExact(out, in);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__region_count_pixels {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__region_count_pixels");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vips__region_count_pixels(struct _VipsRegion *region, const char *nickname)
     * }
     */
    public static FunctionDescriptor vips__region_count_pixels$descriptor() {
        return vips__region_count_pixels.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vips__region_count_pixels(struct _VipsRegion *region, const char *nickname)
     * }
     */
    public static MethodHandle vips__region_count_pixels$handle() {
        return vips__region_count_pixels.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void vips__region_count_pixels(struct _VipsRegion *region, const char *nickname)
     * }
     */
    public static MemorySegment vips__region_count_pixels$address() {
        return vips__region_count_pixels.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void vips__region_count_pixels(struct _VipsRegion *region, const char *nickname)
     * }
     */
    public static void vips__region_count_pixels(MemorySegment region, MemorySegment nickname) {
        var mh$ = vips__region_count_pixels.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__region_count_pixels", region, nickname);
            }
            mh$.invokeExact(region, nickname);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_region_dump_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_region_dump_all");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_region_dump_all()
     * }
     */
    public static FunctionDescriptor vips_region_dump_all$descriptor() {
        return vips_region_dump_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_region_dump_all()
     * }
     */
    public static MethodHandle vips_region_dump_all$handle() {
        return vips_region_dump_all.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_region_dump_all()
     * }
     */
    public static MemorySegment vips_region_dump_all$address() {
        return vips_region_dump_all.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_region_dump_all()
     * }
     */
    public static void vips_region_dump_all() {
        var mh$ = vips_region_dump_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_region_dump_all");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_region_prepare_many {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_region_prepare_many");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_region_prepare_many(struct _VipsRegion **reg, const VipsRect *r)
     * }
     */
    public static FunctionDescriptor vips_region_prepare_many$descriptor() {
        return vips_region_prepare_many.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_region_prepare_many(struct _VipsRegion **reg, const VipsRect *r)
     * }
     */
    public static MethodHandle vips_region_prepare_many$handle() {
        return vips_region_prepare_many.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_region_prepare_many(struct _VipsRegion **reg, const VipsRect *r)
     * }
     */
    public static MemorySegment vips_region_prepare_many$address() {
        return vips_region_prepare_many.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_region_prepare_many(struct _VipsRegion **reg, const VipsRect *r)
     * }
     */
    public static int vips_region_prepare_many(MemorySegment reg, MemorySegment r) {
        var mh$ = vips_region_prepare_many.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_region_prepare_many", reg, r);
            }
            return (int)mh$.invokeExact(reg, r);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips__view_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__view_image");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int vips__view_image(struct _VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips__view_image$descriptor() {
        return vips__view_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int vips__view_image(struct _VipsImage *image)
     * }
     */
    public static MethodHandle vips__view_image$handle() {
        return vips__view_image.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int vips__view_image(struct _VipsImage *image)
     * }
     */
    public static MemorySegment vips__view_image$address() {
        return vips__view_image.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int vips__view_image(struct _VipsImage *image)
     * }
     */
    public static int vips__view_image(MemorySegment image) {
        var mh$ = vips__view_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__view_image", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _vips__argument_id$constants {
        public static final OfInt LAYOUT = vips_h.C_INT;
        public static final MemorySegment SEGMENT = vips_h.findOrThrow("_vips__argument_id").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int _vips__argument_id
     * }
     */
    public static OfInt _vips__argument_id$layout() {
        return _vips__argument_id$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int _vips__argument_id
     * }
     */
    public static MemorySegment _vips__argument_id$segment() {
        return _vips__argument_id$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int _vips__argument_id
     * }
     */
    public static int _vips__argument_id() {
        return _vips__argument_id$constants.SEGMENT.get(_vips__argument_id$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int _vips__argument_id
     * }
     */
    public static void _vips__argument_id(int varValue) {
        _vips__argument_id$constants.SEGMENT.set(_vips__argument_id$constants.LAYOUT, 0L, varValue);
    }

    private static class vips__meta_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips__meta_init");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vips__meta_init()
     * }
     */
    public static FunctionDescriptor vips__meta_init$descriptor() {
        return vips__meta_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vips__meta_init()
     * }
     */
    public static MethodHandle vips__meta_init$handle() {
        return vips__meta_init.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void vips__meta_init()
     * }
     */
    public static MemorySegment vips__meta_init$address() {
        return vips__meta_init.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void vips__meta_init()
     * }
     */
    public static void vips__meta_init() {
        var mh$ = vips__meta_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips__meta_init");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VIPS_REGION_SHRINK_MEAN = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_REGION_SHRINK_MEAN = 0
     * }
     */
    public static int VIPS_REGION_SHRINK_MEAN() {
        return VIPS_REGION_SHRINK_MEAN;
    }
    private static final int VIPS_REGION_SHRINK_MEDIAN = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_REGION_SHRINK_MEDIAN = 1
     * }
     */
    public static int VIPS_REGION_SHRINK_MEDIAN() {
        return VIPS_REGION_SHRINK_MEDIAN;
    }
    private static final int VIPS_REGION_SHRINK_MODE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_REGION_SHRINK_MODE = 2
     * }
     */
    public static int VIPS_REGION_SHRINK_MODE() {
        return VIPS_REGION_SHRINK_MODE;
    }
    private static final int VIPS_REGION_SHRINK_MAX = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_REGION_SHRINK_MAX = 3
     * }
     */
    public static int VIPS_REGION_SHRINK_MAX() {
        return VIPS_REGION_SHRINK_MAX;
    }
    private static final int VIPS_REGION_SHRINK_MIN = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_REGION_SHRINK_MIN = 4
     * }
     */
    public static int VIPS_REGION_SHRINK_MIN() {
        return VIPS_REGION_SHRINK_MIN;
    }
    private static final int VIPS_REGION_SHRINK_NEAREST = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_REGION_SHRINK_NEAREST = 5
     * }
     */
    public static int VIPS_REGION_SHRINK_NEAREST() {
        return VIPS_REGION_SHRINK_NEAREST;
    }
    private static final int VIPS_REGION_SHRINK_LAST = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_REGION_SHRINK_LAST = 6
     * }
     */
    public static int VIPS_REGION_SHRINK_LAST() {
        return VIPS_REGION_SHRINK_LAST;
    }

    private static class vips_region_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_region_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_region_get_type()
     * }
     */
    public static FunctionDescriptor vips_region_get_type$descriptor() {
        return vips_region_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_region_get_type()
     * }
     */
    public static MethodHandle vips_region_get_type$handle() {
        return vips_region_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_region_get_type()
     * }
     */
    public static MemorySegment vips_region_get_type$address() {
        return vips_region_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_region_get_type()
     * }
     */
    public static long vips_region_get_type() {
        var mh$ = vips_region_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_region_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_region_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_region_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsRegion *vips_region_new(VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_region_new$descriptor() {
        return vips_region_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsRegion *vips_region_new(VipsImage *image)
     * }
     */
    public static MethodHandle vips_region_new$handle() {
        return vips_region_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsRegion *vips_region_new(VipsImage *image)
     * }
     */
    public static MemorySegment vips_region_new$address() {
        return vips_region_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsRegion *vips_region_new(VipsImage *image)
     * }
     */
    public static MemorySegment vips_region_new(MemorySegment image) {
        var mh$ = vips_region_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_region_new", image);
            }
            return (MemorySegment)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_region_buffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_region_buffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_region_buffer(VipsRegion *reg, const VipsRect *r)
     * }
     */
    public static FunctionDescriptor vips_region_buffer$descriptor() {
        return vips_region_buffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_region_buffer(VipsRegion *reg, const VipsRect *r)
     * }
     */
    public static MethodHandle vips_region_buffer$handle() {
        return vips_region_buffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_region_buffer(VipsRegion *reg, const VipsRect *r)
     * }
     */
    public static MemorySegment vips_region_buffer$address() {
        return vips_region_buffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_region_buffer(VipsRegion *reg, const VipsRect *r)
     * }
     */
    public static int vips_region_buffer(MemorySegment reg, MemorySegment r) {
        var mh$ = vips_region_buffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_region_buffer", reg, r);
            }
            return (int)mh$.invokeExact(reg, r);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_region_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_region_image");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_region_image(VipsRegion *reg, const VipsRect *r)
     * }
     */
    public static FunctionDescriptor vips_region_image$descriptor() {
        return vips_region_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_region_image(VipsRegion *reg, const VipsRect *r)
     * }
     */
    public static MethodHandle vips_region_image$handle() {
        return vips_region_image.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_region_image(VipsRegion *reg, const VipsRect *r)
     * }
     */
    public static MemorySegment vips_region_image$address() {
        return vips_region_image.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_region_image(VipsRegion *reg, const VipsRect *r)
     * }
     */
    public static int vips_region_image(MemorySegment reg, MemorySegment r) {
        var mh$ = vips_region_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_region_image", reg, r);
            }
            return (int)mh$.invokeExact(reg, r);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_region_region {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_INT,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_region_region");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_region_region(VipsRegion *reg, VipsRegion *dest, const VipsRect *r, int x, int y)
     * }
     */
    public static FunctionDescriptor vips_region_region$descriptor() {
        return vips_region_region.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_region_region(VipsRegion *reg, VipsRegion *dest, const VipsRect *r, int x, int y)
     * }
     */
    public static MethodHandle vips_region_region$handle() {
        return vips_region_region.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_region_region(VipsRegion *reg, VipsRegion *dest, const VipsRect *r, int x, int y)
     * }
     */
    public static MemorySegment vips_region_region$address() {
        return vips_region_region.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_region_region(VipsRegion *reg, VipsRegion *dest, const VipsRect *r, int x, int y)
     * }
     */
    public static int vips_region_region(MemorySegment reg, MemorySegment dest, MemorySegment r, int x, int y) {
        var mh$ = vips_region_region.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_region_region", reg, dest, r, x, y);
            }
            return (int)mh$.invokeExact(reg, dest, r, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_region_equalsregion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_region_equalsregion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_region_equalsregion(VipsRegion *reg1, VipsRegion *reg2)
     * }
     */
    public static FunctionDescriptor vips_region_equalsregion$descriptor() {
        return vips_region_equalsregion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_region_equalsregion(VipsRegion *reg1, VipsRegion *reg2)
     * }
     */
    public static MethodHandle vips_region_equalsregion$handle() {
        return vips_region_equalsregion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_region_equalsregion(VipsRegion *reg1, VipsRegion *reg2)
     * }
     */
    public static MemorySegment vips_region_equalsregion$address() {
        return vips_region_equalsregion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_region_equalsregion(VipsRegion *reg1, VipsRegion *reg2)
     * }
     */
    public static int vips_region_equalsregion(MemorySegment reg1, MemorySegment reg2) {
        var mh$ = vips_region_equalsregion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_region_equalsregion", reg1, reg2);
            }
            return (int)mh$.invokeExact(reg1, reg2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_region_position {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_INT,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_region_position");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_region_position(VipsRegion *reg, int x, int y)
     * }
     */
    public static FunctionDescriptor vips_region_position$descriptor() {
        return vips_region_position.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_region_position(VipsRegion *reg, int x, int y)
     * }
     */
    public static MethodHandle vips_region_position$handle() {
        return vips_region_position.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_region_position(VipsRegion *reg, int x, int y)
     * }
     */
    public static MemorySegment vips_region_position$address() {
        return vips_region_position.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_region_position(VipsRegion *reg, int x, int y)
     * }
     */
    public static int vips_region_position(MemorySegment reg, int x, int y) {
        var mh$ = vips_region_position.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_region_position", reg, x, y);
            }
            return (int)mh$.invokeExact(reg, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_region_paint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_region_paint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_region_paint(VipsRegion *reg, const VipsRect *r, int value)
     * }
     */
    public static FunctionDescriptor vips_region_paint$descriptor() {
        return vips_region_paint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_region_paint(VipsRegion *reg, const VipsRect *r, int value)
     * }
     */
    public static MethodHandle vips_region_paint$handle() {
        return vips_region_paint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_region_paint(VipsRegion *reg, const VipsRect *r, int value)
     * }
     */
    public static MemorySegment vips_region_paint$address() {
        return vips_region_paint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_region_paint(VipsRegion *reg, const VipsRect *r, int value)
     * }
     */
    public static void vips_region_paint(MemorySegment reg, MemorySegment r, int value) {
        var mh$ = vips_region_paint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_region_paint", reg, r, value);
            }
            mh$.invokeExact(reg, r, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_region_paint_pel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_region_paint_pel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_region_paint_pel(VipsRegion *reg, const VipsRect *r, const VipsPel *ink)
     * }
     */
    public static FunctionDescriptor vips_region_paint_pel$descriptor() {
        return vips_region_paint_pel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_region_paint_pel(VipsRegion *reg, const VipsRect *r, const VipsPel *ink)
     * }
     */
    public static MethodHandle vips_region_paint_pel$handle() {
        return vips_region_paint_pel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_region_paint_pel(VipsRegion *reg, const VipsRect *r, const VipsPel *ink)
     * }
     */
    public static MemorySegment vips_region_paint_pel$address() {
        return vips_region_paint_pel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_region_paint_pel(VipsRegion *reg, const VipsRect *r, const VipsPel *ink)
     * }
     */
    public static void vips_region_paint_pel(MemorySegment reg, MemorySegment r, MemorySegment ink) {
        var mh$ = vips_region_paint_pel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_region_paint_pel", reg, r, ink);
            }
            mh$.invokeExact(reg, r, ink);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_region_black {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_region_black");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_region_black(VipsRegion *reg)
     * }
     */
    public static FunctionDescriptor vips_region_black$descriptor() {
        return vips_region_black.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_region_black(VipsRegion *reg)
     * }
     */
    public static MethodHandle vips_region_black$handle() {
        return vips_region_black.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_region_black(VipsRegion *reg)
     * }
     */
    public static MemorySegment vips_region_black$address() {
        return vips_region_black.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_region_black(VipsRegion *reg)
     * }
     */
    public static void vips_region_black(MemorySegment reg) {
        var mh$ = vips_region_black.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_region_black", reg);
            }
            mh$.invokeExact(reg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_region_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_INT,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_region_copy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_region_copy(VipsRegion *reg, VipsRegion *dest, const VipsRect *r, int x, int y)
     * }
     */
    public static FunctionDescriptor vips_region_copy$descriptor() {
        return vips_region_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_region_copy(VipsRegion *reg, VipsRegion *dest, const VipsRect *r, int x, int y)
     * }
     */
    public static MethodHandle vips_region_copy$handle() {
        return vips_region_copy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_region_copy(VipsRegion *reg, VipsRegion *dest, const VipsRect *r, int x, int y)
     * }
     */
    public static MemorySegment vips_region_copy$address() {
        return vips_region_copy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_region_copy(VipsRegion *reg, VipsRegion *dest, const VipsRect *r, int x, int y)
     * }
     */
    public static void vips_region_copy(MemorySegment reg, MemorySegment dest, MemorySegment r, int x, int y) {
        var mh$ = vips_region_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_region_copy", reg, dest, r, x, y);
            }
            mh$.invokeExact(reg, dest, r, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_region_shrink_method {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_region_shrink_method");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_region_shrink_method(VipsRegion *from, VipsRegion *to, const VipsRect *target, VipsRegionShrink method)
     * }
     */
    public static FunctionDescriptor vips_region_shrink_method$descriptor() {
        return vips_region_shrink_method.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_region_shrink_method(VipsRegion *from, VipsRegion *to, const VipsRect *target, VipsRegionShrink method)
     * }
     */
    public static MethodHandle vips_region_shrink_method$handle() {
        return vips_region_shrink_method.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_region_shrink_method(VipsRegion *from, VipsRegion *to, const VipsRect *target, VipsRegionShrink method)
     * }
     */
    public static MemorySegment vips_region_shrink_method$address() {
        return vips_region_shrink_method.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_region_shrink_method(VipsRegion *from, VipsRegion *to, const VipsRect *target, VipsRegionShrink method)
     * }
     */
    public static int vips_region_shrink_method(MemorySegment from, MemorySegment to, MemorySegment target, int method) {
        var mh$ = vips_region_shrink_method.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_region_shrink_method", from, to, target, method);
            }
            return (int)mh$.invokeExact(from, to, target, method);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_region_shrink {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_region_shrink");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_region_shrink(VipsRegion *from, VipsRegion *to, const VipsRect *target)
     * }
     */
    public static FunctionDescriptor vips_region_shrink$descriptor() {
        return vips_region_shrink.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_region_shrink(VipsRegion *from, VipsRegion *to, const VipsRect *target)
     * }
     */
    public static MethodHandle vips_region_shrink$handle() {
        return vips_region_shrink.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_region_shrink(VipsRegion *from, VipsRegion *to, const VipsRect *target)
     * }
     */
    public static MemorySegment vips_region_shrink$address() {
        return vips_region_shrink.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_region_shrink(VipsRegion *from, VipsRegion *to, const VipsRect *target)
     * }
     */
    public static int vips_region_shrink(MemorySegment from, MemorySegment to, MemorySegment target) {
        var mh$ = vips_region_shrink.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_region_shrink", from, to, target);
            }
            return (int)mh$.invokeExact(from, to, target);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_region_prepare {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_region_prepare");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_region_prepare(VipsRegion *reg, const VipsRect *r)
     * }
     */
    public static FunctionDescriptor vips_region_prepare$descriptor() {
        return vips_region_prepare.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_region_prepare(VipsRegion *reg, const VipsRect *r)
     * }
     */
    public static MethodHandle vips_region_prepare$handle() {
        return vips_region_prepare.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_region_prepare(VipsRegion *reg, const VipsRect *r)
     * }
     */
    public static MemorySegment vips_region_prepare$address() {
        return vips_region_prepare.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_region_prepare(VipsRegion *reg, const VipsRect *r)
     * }
     */
    public static int vips_region_prepare(MemorySegment reg, MemorySegment r) {
        var mh$ = vips_region_prepare.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_region_prepare", reg, r);
            }
            return (int)mh$.invokeExact(reg, r);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_region_prepare_to {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_INT,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_region_prepare_to");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_region_prepare_to(VipsRegion *reg, VipsRegion *dest, const VipsRect *r, int x, int y)
     * }
     */
    public static FunctionDescriptor vips_region_prepare_to$descriptor() {
        return vips_region_prepare_to.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_region_prepare_to(VipsRegion *reg, VipsRegion *dest, const VipsRect *r, int x, int y)
     * }
     */
    public static MethodHandle vips_region_prepare_to$handle() {
        return vips_region_prepare_to.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_region_prepare_to(VipsRegion *reg, VipsRegion *dest, const VipsRect *r, int x, int y)
     * }
     */
    public static MemorySegment vips_region_prepare_to$address() {
        return vips_region_prepare_to.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_region_prepare_to(VipsRegion *reg, VipsRegion *dest, const VipsRect *r, int x, int y)
     * }
     */
    public static int vips_region_prepare_to(MemorySegment reg, MemorySegment dest, MemorySegment r, int x, int y) {
        var mh$ = vips_region_prepare_to.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_region_prepare_to", reg, dest, r, x, y);
            }
            return (int)mh$.invokeExact(reg, dest, r, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_region_fetch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_INT,
            vips_h.C_INT,
            vips_h.C_INT,
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_region_fetch");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsPel *vips_region_fetch(VipsRegion *region, int left, int top, int width, int height, size_t *len)
     * }
     */
    public static FunctionDescriptor vips_region_fetch$descriptor() {
        return vips_region_fetch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsPel *vips_region_fetch(VipsRegion *region, int left, int top, int width, int height, size_t *len)
     * }
     */
    public static MethodHandle vips_region_fetch$handle() {
        return vips_region_fetch.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsPel *vips_region_fetch(VipsRegion *region, int left, int top, int width, int height, size_t *len)
     * }
     */
    public static MemorySegment vips_region_fetch$address() {
        return vips_region_fetch.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsPel *vips_region_fetch(VipsRegion *region, int left, int top, int width, int height, size_t *len)
     * }
     */
    public static MemorySegment vips_region_fetch(MemorySegment region, int left, int top, int width, int height, MemorySegment len) {
        var mh$ = vips_region_fetch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_region_fetch", region, left, top, width, height, len);
            }
            return (MemorySegment)mh$.invokeExact(region, left, top, width, height, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_region_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_region_width");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_region_width(VipsRegion *region)
     * }
     */
    public static FunctionDescriptor vips_region_width$descriptor() {
        return vips_region_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_region_width(VipsRegion *region)
     * }
     */
    public static MethodHandle vips_region_width$handle() {
        return vips_region_width.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_region_width(VipsRegion *region)
     * }
     */
    public static MemorySegment vips_region_width$address() {
        return vips_region_width.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_region_width(VipsRegion *region)
     * }
     */
    public static int vips_region_width(MemorySegment region) {
        var mh$ = vips_region_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_region_width", region);
            }
            return (int)mh$.invokeExact(region);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_region_height {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_region_height");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_region_height(VipsRegion *region)
     * }
     */
    public static FunctionDescriptor vips_region_height$descriptor() {
        return vips_region_height.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_region_height(VipsRegion *region)
     * }
     */
    public static MethodHandle vips_region_height$handle() {
        return vips_region_height.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_region_height(VipsRegion *region)
     * }
     */
    public static MemorySegment vips_region_height$address() {
        return vips_region_height.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_region_height(VipsRegion *region)
     * }
     */
    public static int vips_region_height(MemorySegment region) {
        var mh$ = vips_region_height.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_region_height", region);
            }
            return (int)mh$.invokeExact(region);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_region_invalidate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_region_invalidate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_region_invalidate(VipsRegion *reg)
     * }
     */
    public static FunctionDescriptor vips_region_invalidate$descriptor() {
        return vips_region_invalidate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_region_invalidate(VipsRegion *reg)
     * }
     */
    public static MethodHandle vips_region_invalidate$handle() {
        return vips_region_invalidate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_region_invalidate(VipsRegion *reg)
     * }
     */
    public static MemorySegment vips_region_invalidate$address() {
        return vips_region_invalidate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_region_invalidate(VipsRegion *reg)
     * }
     */
    public static void vips_region_invalidate(MemorySegment reg) {
        var mh$ = vips_region_invalidate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_region_invalidate", reg);
            }
            mh$.invokeExact(reg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VIPS_DEMAND_STYLE_ERROR = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_DEMAND_STYLE_ERROR = -1
     * }
     */
    public static int VIPS_DEMAND_STYLE_ERROR() {
        return VIPS_DEMAND_STYLE_ERROR;
    }
    private static final int VIPS_DEMAND_STYLE_SMALLTILE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_DEMAND_STYLE_SMALLTILE = 0
     * }
     */
    public static int VIPS_DEMAND_STYLE_SMALLTILE() {
        return VIPS_DEMAND_STYLE_SMALLTILE;
    }
    private static final int VIPS_DEMAND_STYLE_FATSTRIP = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_DEMAND_STYLE_FATSTRIP = 1
     * }
     */
    public static int VIPS_DEMAND_STYLE_FATSTRIP() {
        return VIPS_DEMAND_STYLE_FATSTRIP;
    }
    private static final int VIPS_DEMAND_STYLE_THINSTRIP = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_DEMAND_STYLE_THINSTRIP = 2
     * }
     */
    public static int VIPS_DEMAND_STYLE_THINSTRIP() {
        return VIPS_DEMAND_STYLE_THINSTRIP;
    }
    private static final int VIPS_DEMAND_STYLE_ANY = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_DEMAND_STYLE_ANY = 3
     * }
     */
    public static int VIPS_DEMAND_STYLE_ANY() {
        return VIPS_DEMAND_STYLE_ANY;
    }
    private static final int VIPS_IMAGE_ERROR = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_IMAGE_ERROR = -1
     * }
     */
    public static int VIPS_IMAGE_ERROR() {
        return VIPS_IMAGE_ERROR;
    }
    private static final int VIPS_IMAGE_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_IMAGE_NONE = 0
     * }
     */
    public static int VIPS_IMAGE_NONE() {
        return VIPS_IMAGE_NONE;
    }
    private static final int VIPS_IMAGE_SETBUF = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_IMAGE_SETBUF = 1
     * }
     */
    public static int VIPS_IMAGE_SETBUF() {
        return VIPS_IMAGE_SETBUF;
    }
    private static final int VIPS_IMAGE_SETBUF_FOREIGN = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_IMAGE_SETBUF_FOREIGN = 2
     * }
     */
    public static int VIPS_IMAGE_SETBUF_FOREIGN() {
        return VIPS_IMAGE_SETBUF_FOREIGN;
    }
    private static final int VIPS_IMAGE_OPENIN = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_IMAGE_OPENIN = 3
     * }
     */
    public static int VIPS_IMAGE_OPENIN() {
        return VIPS_IMAGE_OPENIN;
    }
    private static final int VIPS_IMAGE_MMAPIN = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_IMAGE_MMAPIN = 4
     * }
     */
    public static int VIPS_IMAGE_MMAPIN() {
        return VIPS_IMAGE_MMAPIN;
    }
    private static final int VIPS_IMAGE_MMAPINRW = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_IMAGE_MMAPINRW = 5
     * }
     */
    public static int VIPS_IMAGE_MMAPINRW() {
        return VIPS_IMAGE_MMAPINRW;
    }
    private static final int VIPS_IMAGE_OPENOUT = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_IMAGE_OPENOUT = 6
     * }
     */
    public static int VIPS_IMAGE_OPENOUT() {
        return VIPS_IMAGE_OPENOUT;
    }
    private static final int VIPS_IMAGE_PARTIAL = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_IMAGE_PARTIAL = 7
     * }
     */
    public static int VIPS_IMAGE_PARTIAL() {
        return VIPS_IMAGE_PARTIAL;
    }
    private static final int VIPS_INTERPRETATION_ERROR = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERPRETATION_ERROR = -1
     * }
     */
    public static int VIPS_INTERPRETATION_ERROR() {
        return VIPS_INTERPRETATION_ERROR;
    }
    private static final int VIPS_INTERPRETATION_MULTIBAND = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERPRETATION_MULTIBAND = 0
     * }
     */
    public static int VIPS_INTERPRETATION_MULTIBAND() {
        return VIPS_INTERPRETATION_MULTIBAND;
    }
    private static final int VIPS_INTERPRETATION_B_W = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERPRETATION_B_W = 1
     * }
     */
    public static int VIPS_INTERPRETATION_B_W() {
        return VIPS_INTERPRETATION_B_W;
    }
    private static final int VIPS_INTERPRETATION_HISTOGRAM = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERPRETATION_HISTOGRAM = 10
     * }
     */
    public static int VIPS_INTERPRETATION_HISTOGRAM() {
        return VIPS_INTERPRETATION_HISTOGRAM;
    }
    private static final int VIPS_INTERPRETATION_XYZ = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERPRETATION_XYZ = 12
     * }
     */
    public static int VIPS_INTERPRETATION_XYZ() {
        return VIPS_INTERPRETATION_XYZ;
    }
    private static final int VIPS_INTERPRETATION_LAB = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERPRETATION_LAB = 13
     * }
     */
    public static int VIPS_INTERPRETATION_LAB() {
        return VIPS_INTERPRETATION_LAB;
    }
    private static final int VIPS_INTERPRETATION_CMYK = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERPRETATION_CMYK = 15
     * }
     */
    public static int VIPS_INTERPRETATION_CMYK() {
        return VIPS_INTERPRETATION_CMYK;
    }
    private static final int VIPS_INTERPRETATION_LABQ = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERPRETATION_LABQ = 16
     * }
     */
    public static int VIPS_INTERPRETATION_LABQ() {
        return VIPS_INTERPRETATION_LABQ;
    }
    private static final int VIPS_INTERPRETATION_RGB = (int)17L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERPRETATION_RGB = 17
     * }
     */
    public static int VIPS_INTERPRETATION_RGB() {
        return VIPS_INTERPRETATION_RGB;
    }
    private static final int VIPS_INTERPRETATION_CMC = (int)18L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERPRETATION_CMC = 18
     * }
     */
    public static int VIPS_INTERPRETATION_CMC() {
        return VIPS_INTERPRETATION_CMC;
    }
    private static final int VIPS_INTERPRETATION_LCH = (int)19L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERPRETATION_LCH = 19
     * }
     */
    public static int VIPS_INTERPRETATION_LCH() {
        return VIPS_INTERPRETATION_LCH;
    }
    private static final int VIPS_INTERPRETATION_LABS = (int)21L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERPRETATION_LABS = 21
     * }
     */
    public static int VIPS_INTERPRETATION_LABS() {
        return VIPS_INTERPRETATION_LABS;
    }
    private static final int VIPS_INTERPRETATION_sRGB = (int)22L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERPRETATION_sRGB = 22
     * }
     */
    public static int VIPS_INTERPRETATION_sRGB() {
        return VIPS_INTERPRETATION_sRGB;
    }
    private static final int VIPS_INTERPRETATION_YXY = (int)23L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERPRETATION_YXY = 23
     * }
     */
    public static int VIPS_INTERPRETATION_YXY() {
        return VIPS_INTERPRETATION_YXY;
    }
    private static final int VIPS_INTERPRETATION_FOURIER = (int)24L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERPRETATION_FOURIER = 24
     * }
     */
    public static int VIPS_INTERPRETATION_FOURIER() {
        return VIPS_INTERPRETATION_FOURIER;
    }
    private static final int VIPS_INTERPRETATION_RGB16 = (int)25L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERPRETATION_RGB16 = 25
     * }
     */
    public static int VIPS_INTERPRETATION_RGB16() {
        return VIPS_INTERPRETATION_RGB16;
    }
    private static final int VIPS_INTERPRETATION_GREY16 = (int)26L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERPRETATION_GREY16 = 26
     * }
     */
    public static int VIPS_INTERPRETATION_GREY16() {
        return VIPS_INTERPRETATION_GREY16;
    }
    private static final int VIPS_INTERPRETATION_MATRIX = (int)27L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERPRETATION_MATRIX = 27
     * }
     */
    public static int VIPS_INTERPRETATION_MATRIX() {
        return VIPS_INTERPRETATION_MATRIX;
    }
    private static final int VIPS_INTERPRETATION_scRGB = (int)28L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERPRETATION_scRGB = 28
     * }
     */
    public static int VIPS_INTERPRETATION_scRGB() {
        return VIPS_INTERPRETATION_scRGB;
    }
    private static final int VIPS_INTERPRETATION_HSV = (int)29L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERPRETATION_HSV = 29
     * }
     */
    public static int VIPS_INTERPRETATION_HSV() {
        return VIPS_INTERPRETATION_HSV;
    }
    private static final int VIPS_INTERPRETATION_LAST = (int)30L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_INTERPRETATION_LAST = 30
     * }
     */
    public static int VIPS_INTERPRETATION_LAST() {
        return VIPS_INTERPRETATION_LAST;
    }
    private static final int VIPS_FORMAT_NOTSET = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FORMAT_NOTSET = -1
     * }
     */
    public static int VIPS_FORMAT_NOTSET() {
        return VIPS_FORMAT_NOTSET;
    }
    private static final int VIPS_FORMAT_UCHAR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FORMAT_UCHAR = 0
     * }
     */
    public static int VIPS_FORMAT_UCHAR() {
        return VIPS_FORMAT_UCHAR;
    }
    private static final int VIPS_FORMAT_CHAR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FORMAT_CHAR = 1
     * }
     */
    public static int VIPS_FORMAT_CHAR() {
        return VIPS_FORMAT_CHAR;
    }
    private static final int VIPS_FORMAT_USHORT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FORMAT_USHORT = 2
     * }
     */
    public static int VIPS_FORMAT_USHORT() {
        return VIPS_FORMAT_USHORT;
    }
    private static final int VIPS_FORMAT_SHORT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FORMAT_SHORT = 3
     * }
     */
    public static int VIPS_FORMAT_SHORT() {
        return VIPS_FORMAT_SHORT;
    }
    private static final int VIPS_FORMAT_UINT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FORMAT_UINT = 4
     * }
     */
    public static int VIPS_FORMAT_UINT() {
        return VIPS_FORMAT_UINT;
    }
    private static final int VIPS_FORMAT_INT = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FORMAT_INT = 5
     * }
     */
    public static int VIPS_FORMAT_INT() {
        return VIPS_FORMAT_INT;
    }
    private static final int VIPS_FORMAT_FLOAT = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FORMAT_FLOAT = 6
     * }
     */
    public static int VIPS_FORMAT_FLOAT() {
        return VIPS_FORMAT_FLOAT;
    }
    private static final int VIPS_FORMAT_COMPLEX = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FORMAT_COMPLEX = 7
     * }
     */
    public static int VIPS_FORMAT_COMPLEX() {
        return VIPS_FORMAT_COMPLEX;
    }
    private static final int VIPS_FORMAT_DOUBLE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FORMAT_DOUBLE = 8
     * }
     */
    public static int VIPS_FORMAT_DOUBLE() {
        return VIPS_FORMAT_DOUBLE;
    }
    private static final int VIPS_FORMAT_DPCOMPLEX = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FORMAT_DPCOMPLEX = 9
     * }
     */
    public static int VIPS_FORMAT_DPCOMPLEX() {
        return VIPS_FORMAT_DPCOMPLEX;
    }
    private static final int VIPS_FORMAT_LAST = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FORMAT_LAST = 10
     * }
     */
    public static int VIPS_FORMAT_LAST() {
        return VIPS_FORMAT_LAST;
    }
    private static final int VIPS_CODING_ERROR = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_CODING_ERROR = -1
     * }
     */
    public static int VIPS_CODING_ERROR() {
        return VIPS_CODING_ERROR;
    }
    private static final int VIPS_CODING_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_CODING_NONE = 0
     * }
     */
    public static int VIPS_CODING_NONE() {
        return VIPS_CODING_NONE;
    }
    private static final int VIPS_CODING_LABQ = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_CODING_LABQ = 2
     * }
     */
    public static int VIPS_CODING_LABQ() {
        return VIPS_CODING_LABQ;
    }
    private static final int VIPS_CODING_RAD = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_CODING_RAD = 6
     * }
     */
    public static int VIPS_CODING_RAD() {
        return VIPS_CODING_RAD;
    }
    private static final int VIPS_CODING_LAST = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_CODING_LAST = 7
     * }
     */
    public static int VIPS_CODING_LAST() {
        return VIPS_CODING_LAST;
    }
    private static final int VIPS_ACCESS_RANDOM = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ACCESS_RANDOM = 0
     * }
     */
    public static int VIPS_ACCESS_RANDOM() {
        return VIPS_ACCESS_RANDOM;
    }
    private static final int VIPS_ACCESS_SEQUENTIAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ACCESS_SEQUENTIAL = 1
     * }
     */
    public static int VIPS_ACCESS_SEQUENTIAL() {
        return VIPS_ACCESS_SEQUENTIAL;
    }
    private static final int VIPS_ACCESS_SEQUENTIAL_UNBUFFERED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ACCESS_SEQUENTIAL_UNBUFFERED = 2
     * }
     */
    public static int VIPS_ACCESS_SEQUENTIAL_UNBUFFERED() {
        return VIPS_ACCESS_SEQUENTIAL_UNBUFFERED;
    }
    private static final int VIPS_ACCESS_LAST = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_ACCESS_LAST = 3
     * }
     */
    public static int VIPS_ACCESS_LAST() {
        return VIPS_ACCESS_LAST;
    }

    private static class vips_image_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_image_get_type()
     * }
     */
    public static FunctionDescriptor vips_image_get_type$descriptor() {
        return vips_image_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_image_get_type()
     * }
     */
    public static MethodHandle vips_image_get_type$handle() {
        return vips_image_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_image_get_type()
     * }
     */
    public static MemorySegment vips_image_get_type$address() {
        return vips_image_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_image_get_type()
     * }
     */
    public static long vips_image_get_type() {
        var mh$ = vips_image_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_progress_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_progress_set");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_progress_set(gboolean progress)
     * }
     */
    public static FunctionDescriptor vips_progress_set$descriptor() {
        return vips_progress_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_progress_set(gboolean progress)
     * }
     */
    public static MethodHandle vips_progress_set$handle() {
        return vips_progress_set.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_progress_set(gboolean progress)
     * }
     */
    public static MemorySegment vips_progress_set$address() {
        return vips_progress_set.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_progress_set(gboolean progress)
     * }
     */
    public static void vips_progress_set(int progress) {
        var mh$ = vips_progress_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_progress_set", progress);
            }
            mh$.invokeExact(progress);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_invalidate_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_invalidate_all");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_image_invalidate_all(VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_invalidate_all$descriptor() {
        return vips_image_invalidate_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_image_invalidate_all(VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_invalidate_all$handle() {
        return vips_image_invalidate_all.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_image_invalidate_all(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_invalidate_all$address() {
        return vips_image_invalidate_all.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_image_invalidate_all(VipsImage *image)
     * }
     */
    public static void vips_image_invalidate_all(MemorySegment image) {
        var mh$ = vips_image_invalidate_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_invalidate_all", image);
            }
            mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_minimise_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_minimise_all");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_image_minimise_all(VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_minimise_all$descriptor() {
        return vips_image_minimise_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_image_minimise_all(VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_minimise_all$handle() {
        return vips_image_minimise_all.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_image_minimise_all(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_minimise_all$address() {
        return vips_image_minimise_all.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_image_minimise_all(VipsImage *image)
     * }
     */
    public static void vips_image_minimise_all(MemorySegment image) {
        var mh$ = vips_image_minimise_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_minimise_all", image);
            }
            mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_is_sequential {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_is_sequential");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_image_is_sequential(VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_is_sequential$descriptor() {
        return vips_image_is_sequential.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_image_is_sequential(VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_is_sequential$handle() {
        return vips_image_is_sequential.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_image_is_sequential(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_is_sequential$address() {
        return vips_image_is_sequential.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_image_is_sequential(VipsImage *image)
     * }
     */
    public static int vips_image_is_sequential(MemorySegment image) {
        var mh$ = vips_image_is_sequential.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_is_sequential", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_set_progress {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_set_progress");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_image_set_progress(VipsImage *image, gboolean progress)
     * }
     */
    public static FunctionDescriptor vips_image_set_progress$descriptor() {
        return vips_image_set_progress.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_image_set_progress(VipsImage *image, gboolean progress)
     * }
     */
    public static MethodHandle vips_image_set_progress$handle() {
        return vips_image_set_progress.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_image_set_progress(VipsImage *image, gboolean progress)
     * }
     */
    public static MemorySegment vips_image_set_progress$address() {
        return vips_image_set_progress.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_image_set_progress(VipsImage *image, gboolean progress)
     * }
     */
    public static void vips_image_set_progress(MemorySegment image, int progress) {
        var mh$ = vips_image_set_progress.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_set_progress", image, progress);
            }
            mh$.invokeExact(image, progress);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_iskilled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_iskilled");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_image_iskilled(VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_iskilled$descriptor() {
        return vips_image_iskilled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_image_iskilled(VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_iskilled$handle() {
        return vips_image_iskilled.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_image_iskilled(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_iskilled$address() {
        return vips_image_iskilled.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_image_iskilled(VipsImage *image)
     * }
     */
    public static int vips_image_iskilled(MemorySegment image) {
        var mh$ = vips_image_iskilled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_iskilled", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_set_kill {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_set_kill");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_image_set_kill(VipsImage *image, gboolean kill)
     * }
     */
    public static FunctionDescriptor vips_image_set_kill$descriptor() {
        return vips_image_set_kill.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_image_set_kill(VipsImage *image, gboolean kill)
     * }
     */
    public static MethodHandle vips_image_set_kill$handle() {
        return vips_image_set_kill.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_image_set_kill(VipsImage *image, gboolean kill)
     * }
     */
    public static MemorySegment vips_image_set_kill$address() {
        return vips_image_set_kill.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_image_set_kill(VipsImage *image, gboolean kill)
     * }
     */
    public static void vips_image_set_kill(MemorySegment image, int kill) {
        var mh$ = vips_image_set_kill.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_set_kill", image, kill);
            }
            mh$.invokeExact(image, kill);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_filename_get_filename {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_filename_get_filename");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *vips_filename_get_filename(const char *vips_filename)
     * }
     */
    public static FunctionDescriptor vips_filename_get_filename$descriptor() {
        return vips_filename_get_filename.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *vips_filename_get_filename(const char *vips_filename)
     * }
     */
    public static MethodHandle vips_filename_get_filename$handle() {
        return vips_filename_get_filename.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *vips_filename_get_filename(const char *vips_filename)
     * }
     */
    public static MemorySegment vips_filename_get_filename$address() {
        return vips_filename_get_filename.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *vips_filename_get_filename(const char *vips_filename)
     * }
     */
    public static MemorySegment vips_filename_get_filename(MemorySegment vips_filename) {
        var mh$ = vips_filename_get_filename.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_filename_get_filename", vips_filename);
            }
            return (MemorySegment)mh$.invokeExact(vips_filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_filename_get_options {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_filename_get_options");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *vips_filename_get_options(const char *vips_filename)
     * }
     */
    public static FunctionDescriptor vips_filename_get_options$descriptor() {
        return vips_filename_get_options.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *vips_filename_get_options(const char *vips_filename)
     * }
     */
    public static MethodHandle vips_filename_get_options$handle() {
        return vips_filename_get_options.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *vips_filename_get_options(const char *vips_filename)
     * }
     */
    public static MemorySegment vips_filename_get_options$address() {
        return vips_filename_get_options.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *vips_filename_get_options(const char *vips_filename)
     * }
     */
    public static MemorySegment vips_filename_get_options(MemorySegment vips_filename) {
        var mh$ = vips_filename_get_options.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_filename_get_options", vips_filename);
            }
            return (MemorySegment)mh$.invokeExact(vips_filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new()
     * }
     */
    public static FunctionDescriptor vips_image_new$descriptor() {
        return vips_image_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new()
     * }
     */
    public static MethodHandle vips_image_new$handle() {
        return vips_image_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new()
     * }
     */
    public static MemorySegment vips_image_new$address() {
        return vips_image_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new()
     * }
     */
    public static MemorySegment vips_image_new() {
        var mh$ = vips_image_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_new_memory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_new_memory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_memory()
     * }
     */
    public static FunctionDescriptor vips_image_new_memory$descriptor() {
        return vips_image_new_memory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_memory()
     * }
     */
    public static MethodHandle vips_image_new_memory$handle() {
        return vips_image_new_memory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_memory()
     * }
     */
    public static MemorySegment vips_image_new_memory$address() {
        return vips_image_new_memory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_memory()
     * }
     */
    public static MemorySegment vips_image_new_memory() {
        var mh$ = vips_image_new_memory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_new_memory");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_memory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_memory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_memory()
     * }
     */
    public static FunctionDescriptor vips_image_memory$descriptor() {
        return vips_image_memory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_memory()
     * }
     */
    public static MethodHandle vips_image_memory$handle() {
        return vips_image_memory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_memory()
     * }
     */
    public static MemorySegment vips_image_memory$address() {
        return vips_image_memory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsImage *vips_image_memory()
     * }
     */
    public static MemorySegment vips_image_memory() {
        var mh$ = vips_image_memory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_memory");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_file(const char *name, ...)
     * }
     */
    public static class vips_image_new_from_file {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_new_from_file");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_image_new_from_file(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern VipsImage *vips_image_new_from_file(const char *name, ...)
         * }
         */
        public static vips_image_new_from_file makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_image_new_from_file(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment name, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_image_new_from_file", name, x1);
                }
                return (MemorySegment)spreader.invokeExact(name, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class vips_image_new_from_file_RW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_new_from_file_RW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_file_RW(const char *filename)
     * }
     */
    public static FunctionDescriptor vips_image_new_from_file_RW$descriptor() {
        return vips_image_new_from_file_RW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_file_RW(const char *filename)
     * }
     */
    public static MethodHandle vips_image_new_from_file_RW$handle() {
        return vips_image_new_from_file_RW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_file_RW(const char *filename)
     * }
     */
    public static MemorySegment vips_image_new_from_file_RW$address() {
        return vips_image_new_from_file_RW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_file_RW(const char *filename)
     * }
     */
    public static MemorySegment vips_image_new_from_file_RW(MemorySegment filename) {
        var mh$ = vips_image_new_from_file_RW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_new_from_file_RW", filename);
            }
            return (MemorySegment)mh$.invokeExact(filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_new_from_file_raw {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_INT,
            vips_h.C_INT,
            vips_h.C_INT,
            vips_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_new_from_file_raw");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_file_raw(const char *filename, int xsize, int ysize, int bands, guint64 offset)
     * }
     */
    public static FunctionDescriptor vips_image_new_from_file_raw$descriptor() {
        return vips_image_new_from_file_raw.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_file_raw(const char *filename, int xsize, int ysize, int bands, guint64 offset)
     * }
     */
    public static MethodHandle vips_image_new_from_file_raw$handle() {
        return vips_image_new_from_file_raw.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_file_raw(const char *filename, int xsize, int ysize, int bands, guint64 offset)
     * }
     */
    public static MemorySegment vips_image_new_from_file_raw$address() {
        return vips_image_new_from_file_raw.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_file_raw(const char *filename, int xsize, int ysize, int bands, guint64 offset)
     * }
     */
    public static MemorySegment vips_image_new_from_file_raw(MemorySegment filename, int xsize, int ysize, int bands, long offset) {
        var mh$ = vips_image_new_from_file_raw.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_new_from_file_raw", filename, xsize, ysize, bands, offset);
            }
            return (MemorySegment)mh$.invokeExact(filename, xsize, ysize, bands, offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_new_from_memory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_LONG,
            vips_h.C_INT,
            vips_h.C_INT,
            vips_h.C_INT,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_new_from_memory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_memory(const void *data, size_t size, int width, int height, int bands, VipsBandFormat format)
     * }
     */
    public static FunctionDescriptor vips_image_new_from_memory$descriptor() {
        return vips_image_new_from_memory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_memory(const void *data, size_t size, int width, int height, int bands, VipsBandFormat format)
     * }
     */
    public static MethodHandle vips_image_new_from_memory$handle() {
        return vips_image_new_from_memory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_memory(const void *data, size_t size, int width, int height, int bands, VipsBandFormat format)
     * }
     */
    public static MemorySegment vips_image_new_from_memory$address() {
        return vips_image_new_from_memory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_memory(const void *data, size_t size, int width, int height, int bands, VipsBandFormat format)
     * }
     */
    public static MemorySegment vips_image_new_from_memory(MemorySegment data, long size, int width, int height, int bands, int format) {
        var mh$ = vips_image_new_from_memory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_new_from_memory", data, size, width, height, bands, format);
            }
            return (MemorySegment)mh$.invokeExact(data, size, width, height, bands, format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_new_from_memory_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_LONG,
            vips_h.C_INT,
            vips_h.C_INT,
            vips_h.C_INT,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_new_from_memory_copy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_memory_copy(const void *data, size_t size, int width, int height, int bands, VipsBandFormat format)
     * }
     */
    public static FunctionDescriptor vips_image_new_from_memory_copy$descriptor() {
        return vips_image_new_from_memory_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_memory_copy(const void *data, size_t size, int width, int height, int bands, VipsBandFormat format)
     * }
     */
    public static MethodHandle vips_image_new_from_memory_copy$handle() {
        return vips_image_new_from_memory_copy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_memory_copy(const void *data, size_t size, int width, int height, int bands, VipsBandFormat format)
     * }
     */
    public static MemorySegment vips_image_new_from_memory_copy$address() {
        return vips_image_new_from_memory_copy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_memory_copy(const void *data, size_t size, int width, int height, int bands, VipsBandFormat format)
     * }
     */
    public static MemorySegment vips_image_new_from_memory_copy(MemorySegment data, long size, int width, int height, int bands, int format) {
        var mh$ = vips_image_new_from_memory_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_new_from_memory_copy", data, size, width, height, bands, format);
            }
            return (MemorySegment)mh$.invokeExact(data, size, width, height, bands, format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_buffer(const void *buf, size_t len, const char *option_string, ...)
     * }
     */
    public static class vips_image_new_from_buffer {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_LONG,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_new_from_buffer");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_image_new_from_buffer(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern VipsImage *vips_image_new_from_buffer(const void *buf, size_t len, const char *option_string, ...)
         * }
         */
        public static vips_image_new_from_buffer makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_image_new_from_buffer(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment buf, long len, MemorySegment option_string, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_image_new_from_buffer", buf, len, option_string, x3);
                }
                return (MemorySegment)spreader.invokeExact(buf, len, option_string, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_source(VipsSource *source, const char *option_string, ...)
     * }
     */
    public static class vips_image_new_from_source {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_new_from_source");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_image_new_from_source(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern VipsImage *vips_image_new_from_source(VipsSource *source, const char *option_string, ...)
         * }
         */
        public static vips_image_new_from_source makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_image_new_from_source(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment source, MemorySegment option_string, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_image_new_from_source", source, option_string, x2);
                }
                return (MemorySegment)spreader.invokeExact(source, option_string, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class vips_image_new_matrix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_INT,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_new_matrix");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_matrix(int width, int height)
     * }
     */
    public static FunctionDescriptor vips_image_new_matrix$descriptor() {
        return vips_image_new_matrix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_matrix(int width, int height)
     * }
     */
    public static MethodHandle vips_image_new_matrix$handle() {
        return vips_image_new_matrix.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_matrix(int width, int height)
     * }
     */
    public static MemorySegment vips_image_new_matrix$address() {
        return vips_image_new_matrix.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_matrix(int width, int height)
     * }
     */
    public static MemorySegment vips_image_new_matrix(int width, int height) {
        var mh$ = vips_image_new_matrix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_new_matrix", width, height);
            }
            return (MemorySegment)mh$.invokeExact(width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_matrixv(int width, int height, ...)
     * }
     */
    public static class vips_image_new_matrixv {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_new_matrixv");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_image_new_matrixv(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern VipsImage *vips_image_new_matrixv(int width, int height, ...)
         * }
         */
        public static vips_image_new_matrixv makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_image_new_matrixv(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(int width, int height, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_image_new_matrixv", width, height, x2);
                }
                return (MemorySegment)spreader.invokeExact(width, height, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class vips_image_new_matrix_from_array {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_INT,
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_new_matrix_from_array");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_matrix_from_array(int width, int height, const double *array, int size)
     * }
     */
    public static FunctionDescriptor vips_image_new_matrix_from_array$descriptor() {
        return vips_image_new_matrix_from_array.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_matrix_from_array(int width, int height, const double *array, int size)
     * }
     */
    public static MethodHandle vips_image_new_matrix_from_array$handle() {
        return vips_image_new_matrix_from_array.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_matrix_from_array(int width, int height, const double *array, int size)
     * }
     */
    public static MemorySegment vips_image_new_matrix_from_array$address() {
        return vips_image_new_matrix_from_array.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_matrix_from_array(int width, int height, const double *array, int size)
     * }
     */
    public static MemorySegment vips_image_new_matrix_from_array(int width, int height, MemorySegment array, int size) {
        var mh$ = vips_image_new_matrix_from_array.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_new_matrix_from_array", width, height, array, size);
            }
            return (MemorySegment)mh$.invokeExact(width, height, array, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_matrix_from_array {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_INT,
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_matrix_from_array");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_matrix_from_array(int width, int height, const double *array, int size)
     * }
     */
    public static FunctionDescriptor vips_image_matrix_from_array$descriptor() {
        return vips_image_matrix_from_array.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_matrix_from_array(int width, int height, const double *array, int size)
     * }
     */
    public static MethodHandle vips_image_matrix_from_array$handle() {
        return vips_image_matrix_from_array.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_matrix_from_array(int width, int height, const double *array, int size)
     * }
     */
    public static MemorySegment vips_image_matrix_from_array$address() {
        return vips_image_matrix_from_array.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsImage *vips_image_matrix_from_array(int width, int height, const double *array, int size)
     * }
     */
    public static MemorySegment vips_image_matrix_from_array(int width, int height, MemorySegment array, int size) {
        var mh$ = vips_image_matrix_from_array.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_matrix_from_array", width, height, array, size);
            }
            return (MemorySegment)mh$.invokeExact(width, height, array, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_new_from_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_new_from_image");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_image(VipsImage *image, const double *c, int n)
     * }
     */
    public static FunctionDescriptor vips_image_new_from_image$descriptor() {
        return vips_image_new_from_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_image(VipsImage *image, const double *c, int n)
     * }
     */
    public static MethodHandle vips_image_new_from_image$handle() {
        return vips_image_new_from_image.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_image(VipsImage *image, const double *c, int n)
     * }
     */
    public static MemorySegment vips_image_new_from_image$address() {
        return vips_image_new_from_image.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_image(VipsImage *image, const double *c, int n)
     * }
     */
    public static MemorySegment vips_image_new_from_image(MemorySegment image, MemorySegment c, int n) {
        var mh$ = vips_image_new_from_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_new_from_image", image, c, n);
            }
            return (MemorySegment)mh$.invokeExact(image, c, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_new_from_image1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_new_from_image1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_image1(VipsImage *image, double c)
     * }
     */
    public static FunctionDescriptor vips_image_new_from_image1$descriptor() {
        return vips_image_new_from_image1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_image1(VipsImage *image, double c)
     * }
     */
    public static MethodHandle vips_image_new_from_image1$handle() {
        return vips_image_new_from_image1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_image1(VipsImage *image, double c)
     * }
     */
    public static MemorySegment vips_image_new_from_image1$address() {
        return vips_image_new_from_image1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_from_image1(VipsImage *image, double c)
     * }
     */
    public static MemorySegment vips_image_new_from_image1(MemorySegment image, double c) {
        var mh$ = vips_image_new_from_image1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_new_from_image1", image, c);
            }
            return (MemorySegment)mh$.invokeExact(image, c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_set_delete_on_close {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_set_delete_on_close");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_image_set_delete_on_close(VipsImage *image, gboolean delete_on_close)
     * }
     */
    public static FunctionDescriptor vips_image_set_delete_on_close$descriptor() {
        return vips_image_set_delete_on_close.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_image_set_delete_on_close(VipsImage *image, gboolean delete_on_close)
     * }
     */
    public static MethodHandle vips_image_set_delete_on_close$handle() {
        return vips_image_set_delete_on_close.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_image_set_delete_on_close(VipsImage *image, gboolean delete_on_close)
     * }
     */
    public static MemorySegment vips_image_set_delete_on_close$address() {
        return vips_image_set_delete_on_close.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_image_set_delete_on_close(VipsImage *image, gboolean delete_on_close)
     * }
     */
    public static void vips_image_set_delete_on_close(MemorySegment image, int delete_on_close) {
        var mh$ = vips_image_set_delete_on_close.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_set_delete_on_close", image, delete_on_close);
            }
            mh$.invokeExact(image, delete_on_close);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_get_disc_threshold {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_get_disc_threshold");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint64 vips_get_disc_threshold()
     * }
     */
    public static FunctionDescriptor vips_get_disc_threshold$descriptor() {
        return vips_get_disc_threshold.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint64 vips_get_disc_threshold()
     * }
     */
    public static MethodHandle vips_get_disc_threshold$handle() {
        return vips_get_disc_threshold.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern guint64 vips_get_disc_threshold()
     * }
     */
    public static MemorySegment vips_get_disc_threshold$address() {
        return vips_get_disc_threshold.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern guint64 vips_get_disc_threshold()
     * }
     */
    public static long vips_get_disc_threshold() {
        var mh$ = vips_get_disc_threshold.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_get_disc_threshold");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_new_temp_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_new_temp_file");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_temp_file(const char *format)
     * }
     */
    public static FunctionDescriptor vips_image_new_temp_file$descriptor() {
        return vips_image_new_temp_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_temp_file(const char *format)
     * }
     */
    public static MethodHandle vips_image_new_temp_file$handle() {
        return vips_image_new_temp_file.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_temp_file(const char *format)
     * }
     */
    public static MemorySegment vips_image_new_temp_file$address() {
        return vips_image_new_temp_file.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsImage *vips_image_new_temp_file(const char *format)
     * }
     */
    public static MemorySegment vips_image_new_temp_file(MemorySegment format) {
        var mh$ = vips_image_new_temp_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_new_temp_file", format);
            }
            return (MemorySegment)mh$.invokeExact(format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_write {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_write");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_write(VipsImage *image, VipsImage *out)
     * }
     */
    public static FunctionDescriptor vips_image_write$descriptor() {
        return vips_image_write.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_write(VipsImage *image, VipsImage *out)
     * }
     */
    public static MethodHandle vips_image_write$handle() {
        return vips_image_write.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_write(VipsImage *image, VipsImage *out)
     * }
     */
    public static MemorySegment vips_image_write$address() {
        return vips_image_write.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_write(VipsImage *image, VipsImage *out)
     * }
     */
    public static int vips_image_write(MemorySegment image, MemorySegment out) {
        var mh$ = vips_image_write.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_write", image, out);
            }
            return (int)mh$.invokeExact(image, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_image_write_to_file(VipsImage *image, const char *name, ...)
     * }
     */
    public static class vips_image_write_to_file {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_write_to_file");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_image_write_to_file(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_image_write_to_file(VipsImage *image, const char *name, ...)
         * }
         */
        public static vips_image_write_to_file makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_image_write_to_file(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment image, MemorySegment name, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_image_write_to_file", image, name, x2);
                }
                return (int)spreader.invokeExact(image, name, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_image_write_to_buffer(VipsImage *in, const char *suffix, void **buf, size_t *size, ...)
     * }
     */
    public static class vips_image_write_to_buffer {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_write_to_buffer");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_image_write_to_buffer(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_image_write_to_buffer(VipsImage *in, const char *suffix, void **buf, size_t *size, ...)
         * }
         */
        public static vips_image_write_to_buffer makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_image_write_to_buffer(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment suffix, MemorySegment buf, MemorySegment size, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_image_write_to_buffer", in, suffix, buf, size, x4);
                }
                return (int)spreader.invokeExact(in, suffix, buf, size, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_image_write_to_target(VipsImage *in, const char *suffix, VipsTarget *target, ...)
     * }
     */
    public static class vips_image_write_to_target {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_write_to_target");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_image_write_to_target(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_image_write_to_target(VipsImage *in, const char *suffix, VipsTarget *target, ...)
         * }
         */
        public static vips_image_write_to_target makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_image_write_to_target(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment suffix, MemorySegment target, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_image_write_to_target", in, suffix, target, x3);
                }
                return (int)spreader.invokeExact(in, suffix, target, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class vips_image_write_to_memory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_write_to_memory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *vips_image_write_to_memory(VipsImage *in, size_t *size)
     * }
     */
    public static FunctionDescriptor vips_image_write_to_memory$descriptor() {
        return vips_image_write_to_memory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *vips_image_write_to_memory(VipsImage *in, size_t *size)
     * }
     */
    public static MethodHandle vips_image_write_to_memory$handle() {
        return vips_image_write_to_memory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *vips_image_write_to_memory(VipsImage *in, size_t *size)
     * }
     */
    public static MemorySegment vips_image_write_to_memory$address() {
        return vips_image_write_to_memory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *vips_image_write_to_memory(VipsImage *in, size_t *size)
     * }
     */
    public static MemorySegment vips_image_write_to_memory(MemorySegment in, MemorySegment size) {
        var mh$ = vips_image_write_to_memory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_write_to_memory", in, size);
            }
            return (MemorySegment)mh$.invokeExact(in, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_decode_predict {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_decode_predict");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_decode_predict(VipsImage *in, int *bands, VipsBandFormat *format)
     * }
     */
    public static FunctionDescriptor vips_image_decode_predict$descriptor() {
        return vips_image_decode_predict.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_decode_predict(VipsImage *in, int *bands, VipsBandFormat *format)
     * }
     */
    public static MethodHandle vips_image_decode_predict$handle() {
        return vips_image_decode_predict.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_decode_predict(VipsImage *in, int *bands, VipsBandFormat *format)
     * }
     */
    public static MemorySegment vips_image_decode_predict$address() {
        return vips_image_decode_predict.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_decode_predict(VipsImage *in, int *bands, VipsBandFormat *format)
     * }
     */
    public static int vips_image_decode_predict(MemorySegment in, MemorySegment bands, MemorySegment format) {
        var mh$ = vips_image_decode_predict.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_decode_predict", in, bands, format);
            }
            return (int)mh$.invokeExact(in, bands, format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_decode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_decode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_decode(VipsImage *in, VipsImage **out)
     * }
     */
    public static FunctionDescriptor vips_image_decode$descriptor() {
        return vips_image_decode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_decode(VipsImage *in, VipsImage **out)
     * }
     */
    public static MethodHandle vips_image_decode$handle() {
        return vips_image_decode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_decode(VipsImage *in, VipsImage **out)
     * }
     */
    public static MemorySegment vips_image_decode$address() {
        return vips_image_decode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_decode(VipsImage *in, VipsImage **out)
     * }
     */
    public static int vips_image_decode(MemorySegment in, MemorySegment out) {
        var mh$ = vips_image_decode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_decode", in, out);
            }
            return (int)mh$.invokeExact(in, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_encode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_encode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_encode(VipsImage *in, VipsImage **out, VipsCoding coding)
     * }
     */
    public static FunctionDescriptor vips_image_encode$descriptor() {
        return vips_image_encode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_encode(VipsImage *in, VipsImage **out, VipsCoding coding)
     * }
     */
    public static MethodHandle vips_image_encode$handle() {
        return vips_image_encode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_encode(VipsImage *in, VipsImage **out, VipsCoding coding)
     * }
     */
    public static MemorySegment vips_image_encode$address() {
        return vips_image_encode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_encode(VipsImage *in, VipsImage **out, VipsCoding coding)
     * }
     */
    public static int vips_image_encode(MemorySegment in, MemorySegment out, int coding) {
        var mh$ = vips_image_encode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_encode", in, out, coding);
            }
            return (int)mh$.invokeExact(in, out, coding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_isMSBfirst {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_isMSBfirst");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_image_isMSBfirst(VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_isMSBfirst$descriptor() {
        return vips_image_isMSBfirst.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_image_isMSBfirst(VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_isMSBfirst$handle() {
        return vips_image_isMSBfirst.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_image_isMSBfirst(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_isMSBfirst$address() {
        return vips_image_isMSBfirst.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_image_isMSBfirst(VipsImage *image)
     * }
     */
    public static int vips_image_isMSBfirst(MemorySegment image) {
        var mh$ = vips_image_isMSBfirst.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_isMSBfirst", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_isfile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_isfile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_image_isfile(VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_isfile$descriptor() {
        return vips_image_isfile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_image_isfile(VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_isfile$handle() {
        return vips_image_isfile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_image_isfile(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_isfile$address() {
        return vips_image_isfile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_image_isfile(VipsImage *image)
     * }
     */
    public static int vips_image_isfile(MemorySegment image) {
        var mh$ = vips_image_isfile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_isfile", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_ispartial {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_ispartial");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_image_ispartial(VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_ispartial$descriptor() {
        return vips_image_ispartial.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_image_ispartial(VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_ispartial$handle() {
        return vips_image_ispartial.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_image_ispartial(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_ispartial$address() {
        return vips_image_ispartial.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_image_ispartial(VipsImage *image)
     * }
     */
    public static int vips_image_ispartial(MemorySegment image) {
        var mh$ = vips_image_ispartial.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_ispartial", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_hasalpha {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_hasalpha");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_image_hasalpha(VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_hasalpha$descriptor() {
        return vips_image_hasalpha.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_image_hasalpha(VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_hasalpha$handle() {
        return vips_image_hasalpha.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_image_hasalpha(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_hasalpha$address() {
        return vips_image_hasalpha.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_image_hasalpha(VipsImage *image)
     * }
     */
    public static int vips_image_hasalpha(MemorySegment image) {
        var mh$ = vips_image_hasalpha.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_hasalpha", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_copy_memory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_copy_memory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_copy_memory(VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_copy_memory$descriptor() {
        return vips_image_copy_memory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_copy_memory(VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_copy_memory$handle() {
        return vips_image_copy_memory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsImage *vips_image_copy_memory(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_copy_memory$address() {
        return vips_image_copy_memory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsImage *vips_image_copy_memory(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_copy_memory(MemorySegment image) {
        var mh$ = vips_image_copy_memory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_copy_memory", image);
            }
            return (MemorySegment)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_wio_input {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_wio_input");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_wio_input(VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_wio_input$descriptor() {
        return vips_image_wio_input.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_wio_input(VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_wio_input$handle() {
        return vips_image_wio_input.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_wio_input(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_wio_input$address() {
        return vips_image_wio_input.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_wio_input(VipsImage *image)
     * }
     */
    public static int vips_image_wio_input(MemorySegment image) {
        var mh$ = vips_image_wio_input.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_wio_input", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_pio_input {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_pio_input");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_pio_input(VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_pio_input$descriptor() {
        return vips_image_pio_input.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_pio_input(VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_pio_input$handle() {
        return vips_image_pio_input.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_pio_input(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_pio_input$address() {
        return vips_image_pio_input.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_pio_input(VipsImage *image)
     * }
     */
    public static int vips_image_pio_input(MemorySegment image) {
        var mh$ = vips_image_pio_input.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_pio_input", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_pio_output {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_pio_output");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_pio_output(VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_pio_output$descriptor() {
        return vips_image_pio_output.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_pio_output(VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_pio_output$handle() {
        return vips_image_pio_output.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_pio_output(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_pio_output$address() {
        return vips_image_pio_output.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_pio_output(VipsImage *image)
     * }
     */
    public static int vips_image_pio_output(MemorySegment image) {
        var mh$ = vips_image_pio_output.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_pio_output", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_inplace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_inplace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_inplace(VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_inplace$descriptor() {
        return vips_image_inplace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_inplace(VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_inplace$handle() {
        return vips_image_inplace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_inplace(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_inplace$address() {
        return vips_image_inplace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_inplace(VipsImage *image)
     * }
     */
    public static int vips_image_inplace(MemorySegment image) {
        var mh$ = vips_image_inplace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_inplace", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_write_prepare {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_write_prepare");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_write_prepare(VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_write_prepare$descriptor() {
        return vips_image_write_prepare.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_write_prepare(VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_write_prepare$handle() {
        return vips_image_write_prepare.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_write_prepare(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_write_prepare$address() {
        return vips_image_write_prepare.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_write_prepare(VipsImage *image)
     * }
     */
    public static int vips_image_write_prepare(MemorySegment image) {
        var mh$ = vips_image_write_prepare.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_write_prepare", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_write_line {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_write_line");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_write_line(VipsImage *image, int ypos, VipsPel *linebuffer)
     * }
     */
    public static FunctionDescriptor vips_image_write_line$descriptor() {
        return vips_image_write_line.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_write_line(VipsImage *image, int ypos, VipsPel *linebuffer)
     * }
     */
    public static MethodHandle vips_image_write_line$handle() {
        return vips_image_write_line.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_write_line(VipsImage *image, int ypos, VipsPel *linebuffer)
     * }
     */
    public static MemorySegment vips_image_write_line$address() {
        return vips_image_write_line.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_write_line(VipsImage *image, int ypos, VipsPel *linebuffer)
     * }
     */
    public static int vips_image_write_line(MemorySegment image, int ypos, MemorySegment linebuffer) {
        var mh$ = vips_image_write_line.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_write_line", image, ypos, linebuffer);
            }
            return (int)mh$.invokeExact(image, ypos, linebuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_band_format_isint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_band_format_isint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_band_format_isint(VipsBandFormat format)
     * }
     */
    public static FunctionDescriptor vips_band_format_isint$descriptor() {
        return vips_band_format_isint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_band_format_isint(VipsBandFormat format)
     * }
     */
    public static MethodHandle vips_band_format_isint$handle() {
        return vips_band_format_isint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_band_format_isint(VipsBandFormat format)
     * }
     */
    public static MemorySegment vips_band_format_isint$address() {
        return vips_band_format_isint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_band_format_isint(VipsBandFormat format)
     * }
     */
    public static int vips_band_format_isint(int format) {
        var mh$ = vips_band_format_isint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_band_format_isint", format);
            }
            return (int)mh$.invokeExact(format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_band_format_isuint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_band_format_isuint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_band_format_isuint(VipsBandFormat format)
     * }
     */
    public static FunctionDescriptor vips_band_format_isuint$descriptor() {
        return vips_band_format_isuint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_band_format_isuint(VipsBandFormat format)
     * }
     */
    public static MethodHandle vips_band_format_isuint$handle() {
        return vips_band_format_isuint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_band_format_isuint(VipsBandFormat format)
     * }
     */
    public static MemorySegment vips_band_format_isuint$address() {
        return vips_band_format_isuint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_band_format_isuint(VipsBandFormat format)
     * }
     */
    public static int vips_band_format_isuint(int format) {
        var mh$ = vips_band_format_isuint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_band_format_isuint", format);
            }
            return (int)mh$.invokeExact(format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_band_format_is8bit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_band_format_is8bit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_band_format_is8bit(VipsBandFormat format)
     * }
     */
    public static FunctionDescriptor vips_band_format_is8bit$descriptor() {
        return vips_band_format_is8bit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_band_format_is8bit(VipsBandFormat format)
     * }
     */
    public static MethodHandle vips_band_format_is8bit$handle() {
        return vips_band_format_is8bit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_band_format_is8bit(VipsBandFormat format)
     * }
     */
    public static MemorySegment vips_band_format_is8bit$address() {
        return vips_band_format_is8bit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_band_format_is8bit(VipsBandFormat format)
     * }
     */
    public static int vips_band_format_is8bit(int format) {
        var mh$ = vips_band_format_is8bit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_band_format_is8bit", format);
            }
            return (int)mh$.invokeExact(format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_band_format_isfloat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_band_format_isfloat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_band_format_isfloat(VipsBandFormat format)
     * }
     */
    public static FunctionDescriptor vips_band_format_isfloat$descriptor() {
        return vips_band_format_isfloat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_band_format_isfloat(VipsBandFormat format)
     * }
     */
    public static MethodHandle vips_band_format_isfloat$handle() {
        return vips_band_format_isfloat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_band_format_isfloat(VipsBandFormat format)
     * }
     */
    public static MemorySegment vips_band_format_isfloat$address() {
        return vips_band_format_isfloat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_band_format_isfloat(VipsBandFormat format)
     * }
     */
    public static int vips_band_format_isfloat(int format) {
        var mh$ = vips_band_format_isfloat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_band_format_isfloat", format);
            }
            return (int)mh$.invokeExact(format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_band_format_iscomplex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_band_format_iscomplex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_band_format_iscomplex(VipsBandFormat format)
     * }
     */
    public static FunctionDescriptor vips_band_format_iscomplex$descriptor() {
        return vips_band_format_iscomplex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_band_format_iscomplex(VipsBandFormat format)
     * }
     */
    public static MethodHandle vips_band_format_iscomplex$handle() {
        return vips_band_format_iscomplex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_band_format_iscomplex(VipsBandFormat format)
     * }
     */
    public static MemorySegment vips_band_format_iscomplex$address() {
        return vips_band_format_iscomplex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_band_format_iscomplex(VipsBandFormat format)
     * }
     */
    public static int vips_band_format_iscomplex(int format) {
        var mh$ = vips_band_format_iscomplex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_band_format_iscomplex", format);
            }
            return (int)mh$.invokeExact(format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_system(const char *cmd_format, ...)
     * }
     */
    public static class vips_system {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_system");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_system(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_system(const char *cmd_format, ...)
         * }
         */
        public static vips_system makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_system(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment cmd_format, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_system", cmd_format, x1);
                }
                return (int)spreader.invokeExact(cmd_format, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class vips_array_image_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_array_image_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsArrayImage *vips_array_image_new(VipsImage **array, int n)
     * }
     */
    public static FunctionDescriptor vips_array_image_new$descriptor() {
        return vips_array_image_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsArrayImage *vips_array_image_new(VipsImage **array, int n)
     * }
     */
    public static MethodHandle vips_array_image_new$handle() {
        return vips_array_image_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsArrayImage *vips_array_image_new(VipsImage **array, int n)
     * }
     */
    public static MemorySegment vips_array_image_new$address() {
        return vips_array_image_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsArrayImage *vips_array_image_new(VipsImage **array, int n)
     * }
     */
    public static MemorySegment vips_array_image_new(MemorySegment array, int n) {
        var mh$ = vips_array_image_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_array_image_new", array, n);
            }
            return (MemorySegment)mh$.invokeExact(array, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern VipsArrayImage *vips_array_image_newv(int n, ...)
     * }
     */
    public static class vips_array_image_newv {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_array_image_newv");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_array_image_newv(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern VipsArrayImage *vips_array_image_newv(int n, ...)
         * }
         */
        public static vips_array_image_newv makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_array_image_newv(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(int n, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_array_image_newv", n, x1);
                }
                return (MemorySegment)spreader.invokeExact(n, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class vips_array_image_new_from_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_array_image_new_from_string");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsArrayImage *vips_array_image_new_from_string(const char *string, VipsAccess flags)
     * }
     */
    public static FunctionDescriptor vips_array_image_new_from_string$descriptor() {
        return vips_array_image_new_from_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsArrayImage *vips_array_image_new_from_string(const char *string, VipsAccess flags)
     * }
     */
    public static MethodHandle vips_array_image_new_from_string$handle() {
        return vips_array_image_new_from_string.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsArrayImage *vips_array_image_new_from_string(const char *string, VipsAccess flags)
     * }
     */
    public static MemorySegment vips_array_image_new_from_string$address() {
        return vips_array_image_new_from_string.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsArrayImage *vips_array_image_new_from_string(const char *string, VipsAccess flags)
     * }
     */
    public static MemorySegment vips_array_image_new_from_string(MemorySegment string, int flags) {
        var mh$ = vips_array_image_new_from_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_array_image_new_from_string", string, flags);
            }
            return (MemorySegment)mh$.invokeExact(string, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_array_image_empty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_array_image_empty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsArrayImage *vips_array_image_empty()
     * }
     */
    public static FunctionDescriptor vips_array_image_empty$descriptor() {
        return vips_array_image_empty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsArrayImage *vips_array_image_empty()
     * }
     */
    public static MethodHandle vips_array_image_empty$handle() {
        return vips_array_image_empty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsArrayImage *vips_array_image_empty()
     * }
     */
    public static MemorySegment vips_array_image_empty$address() {
        return vips_array_image_empty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsArrayImage *vips_array_image_empty()
     * }
     */
    public static MemorySegment vips_array_image_empty() {
        var mh$ = vips_array_image_empty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_array_image_empty");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_array_image_append {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_array_image_append");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsArrayImage *vips_array_image_append(VipsArrayImage *array, VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_array_image_append$descriptor() {
        return vips_array_image_append.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsArrayImage *vips_array_image_append(VipsArrayImage *array, VipsImage *image)
     * }
     */
    public static MethodHandle vips_array_image_append$handle() {
        return vips_array_image_append.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsArrayImage *vips_array_image_append(VipsArrayImage *array, VipsImage *image)
     * }
     */
    public static MemorySegment vips_array_image_append$address() {
        return vips_array_image_append.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsArrayImage *vips_array_image_append(VipsArrayImage *array, VipsImage *image)
     * }
     */
    public static MemorySegment vips_array_image_append(MemorySegment array, MemorySegment image) {
        var mh$ = vips_array_image_append.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_array_image_append", array, image);
            }
            return (MemorySegment)mh$.invokeExact(array, image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_array_image_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_array_image_get");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsImage **vips_array_image_get(VipsArrayImage *array, int *n)
     * }
     */
    public static FunctionDescriptor vips_array_image_get$descriptor() {
        return vips_array_image_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsImage **vips_array_image_get(VipsArrayImage *array, int *n)
     * }
     */
    public static MethodHandle vips_array_image_get$handle() {
        return vips_array_image_get.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsImage **vips_array_image_get(VipsArrayImage *array, int *n)
     * }
     */
    public static MemorySegment vips_array_image_get$address() {
        return vips_array_image_get.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsImage **vips_array_image_get(VipsArrayImage *array, int *n)
     * }
     */
    public static MemorySegment vips_array_image_get(MemorySegment array, MemorySegment n) {
        var mh$ = vips_array_image_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_array_image_get", array, n);
            }
            return (MemorySegment)mh$.invokeExact(array, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_value_get_array_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_value_get_array_image");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsImage **vips_value_get_array_image(const GValue *value, int *n)
     * }
     */
    public static FunctionDescriptor vips_value_get_array_image$descriptor() {
        return vips_value_get_array_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsImage **vips_value_get_array_image(const GValue *value, int *n)
     * }
     */
    public static MethodHandle vips_value_get_array_image$handle() {
        return vips_value_get_array_image.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsImage **vips_value_get_array_image(const GValue *value, int *n)
     * }
     */
    public static MemorySegment vips_value_get_array_image$address() {
        return vips_value_get_array_image.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsImage **vips_value_get_array_image(const GValue *value, int *n)
     * }
     */
    public static MemorySegment vips_value_get_array_image(MemorySegment value, MemorySegment n) {
        var mh$ = vips_value_get_array_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_value_get_array_image", value, n);
            }
            return (MemorySegment)mh$.invokeExact(value, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_value_set_array_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_value_set_array_image");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_value_set_array_image(GValue *value, int n)
     * }
     */
    public static FunctionDescriptor vips_value_set_array_image$descriptor() {
        return vips_value_set_array_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_value_set_array_image(GValue *value, int n)
     * }
     */
    public static MethodHandle vips_value_set_array_image$handle() {
        return vips_value_set_array_image.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_value_set_array_image(GValue *value, int n)
     * }
     */
    public static MemorySegment vips_value_set_array_image$address() {
        return vips_value_set_array_image.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_value_set_array_image(GValue *value, int n)
     * }
     */
    public static void vips_value_set_array_image(MemorySegment value, int n) {
        var mh$ = vips_value_set_array_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_value_set_array_image", value, n);
            }
            mh$.invokeExact(value, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_reorder_prepare_many {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_reorder_prepare_many");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_reorder_prepare_many(VipsImage *image, VipsRegion **regions, VipsRect *r)
     * }
     */
    public static FunctionDescriptor vips_reorder_prepare_many$descriptor() {
        return vips_reorder_prepare_many.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_reorder_prepare_many(VipsImage *image, VipsRegion **regions, VipsRect *r)
     * }
     */
    public static MethodHandle vips_reorder_prepare_many$handle() {
        return vips_reorder_prepare_many.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_reorder_prepare_many(VipsImage *image, VipsRegion **regions, VipsRect *r)
     * }
     */
    public static MemorySegment vips_reorder_prepare_many$address() {
        return vips_reorder_prepare_many.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_reorder_prepare_many(VipsImage *image, VipsRegion **regions, VipsRect *r)
     * }
     */
    public static int vips_reorder_prepare_many(MemorySegment image, MemorySegment regions, MemorySegment r) {
        var mh$ = vips_reorder_prepare_many.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_reorder_prepare_many", image, regions, r);
            }
            return (int)mh$.invokeExact(image, regions, r);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_reorder_margin_hint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_reorder_margin_hint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_reorder_margin_hint(VipsImage *image, int margin)
     * }
     */
    public static FunctionDescriptor vips_reorder_margin_hint$descriptor() {
        return vips_reorder_margin_hint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_reorder_margin_hint(VipsImage *image, int margin)
     * }
     */
    public static MethodHandle vips_reorder_margin_hint$handle() {
        return vips_reorder_margin_hint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_reorder_margin_hint(VipsImage *image, int margin)
     * }
     */
    public static MemorySegment vips_reorder_margin_hint$address() {
        return vips_reorder_margin_hint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_reorder_margin_hint(VipsImage *image, int margin)
     * }
     */
    public static void vips_reorder_margin_hint(MemorySegment image, int margin) {
        var mh$ = vips_reorder_margin_hint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_reorder_margin_hint", image, margin);
            }
            mh$.invokeExact(image, margin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_free_buffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_free_buffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_image_free_buffer(VipsImage *image, void *buffer)
     * }
     */
    public static FunctionDescriptor vips_image_free_buffer$descriptor() {
        return vips_image_free_buffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_image_free_buffer(VipsImage *image, void *buffer)
     * }
     */
    public static MethodHandle vips_image_free_buffer$handle() {
        return vips_image_free_buffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_image_free_buffer(VipsImage *image, void *buffer)
     * }
     */
    public static MemorySegment vips_image_free_buffer$address() {
        return vips_image_free_buffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_image_free_buffer(VipsImage *image, void *buffer)
     * }
     */
    public static void vips_image_free_buffer(MemorySegment image, MemorySegment buffer) {
        var mh$ = vips_image_free_buffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_free_buffer", image, buffer);
            }
            mh$.invokeExact(image, buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_malloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_LONG
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_malloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *vips_malloc(VipsObject *object, size_t size)
     * }
     */
    public static FunctionDescriptor vips_malloc$descriptor() {
        return vips_malloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *vips_malloc(VipsObject *object, size_t size)
     * }
     */
    public static MethodHandle vips_malloc$handle() {
        return vips_malloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *vips_malloc(VipsObject *object, size_t size)
     * }
     */
    public static MemorySegment vips_malloc$address() {
        return vips_malloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *vips_malloc(VipsObject *object, size_t size)
     * }
     */
    public static MemorySegment vips_malloc(MemorySegment object, long size) {
        var mh$ = vips_malloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_malloc", object, size);
            }
            return (MemorySegment)mh$.invokeExact(object, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_strdup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_strdup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *vips_strdup(VipsObject *object, const char *str)
     * }
     */
    public static FunctionDescriptor vips_strdup$descriptor() {
        return vips_strdup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *vips_strdup(VipsObject *object, const char *str)
     * }
     */
    public static MethodHandle vips_strdup$handle() {
        return vips_strdup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *vips_strdup(VipsObject *object, const char *str)
     * }
     */
    public static MemorySegment vips_strdup$address() {
        return vips_strdup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *vips_strdup(VipsObject *object, const char *str)
     * }
     */
    public static MemorySegment vips_strdup(MemorySegment object, MemorySegment str) {
        var mh$ = vips_strdup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_strdup", object, str);
            }
            return (MemorySegment)mh$.invokeExact(object, str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_tracked_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_tracked_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_tracked_free(void *s)
     * }
     */
    public static FunctionDescriptor vips_tracked_free$descriptor() {
        return vips_tracked_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_tracked_free(void *s)
     * }
     */
    public static MethodHandle vips_tracked_free$handle() {
        return vips_tracked_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_tracked_free(void *s)
     * }
     */
    public static MemorySegment vips_tracked_free$address() {
        return vips_tracked_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_tracked_free(void *s)
     * }
     */
    public static void vips_tracked_free(MemorySegment s) {
        var mh$ = vips_tracked_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_tracked_free", s);
            }
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_tracked_aligned_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_tracked_aligned_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_tracked_aligned_free(void *s)
     * }
     */
    public static FunctionDescriptor vips_tracked_aligned_free$descriptor() {
        return vips_tracked_aligned_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_tracked_aligned_free(void *s)
     * }
     */
    public static MethodHandle vips_tracked_aligned_free$handle() {
        return vips_tracked_aligned_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_tracked_aligned_free(void *s)
     * }
     */
    public static MemorySegment vips_tracked_aligned_free$address() {
        return vips_tracked_aligned_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_tracked_aligned_free(void *s)
     * }
     */
    public static void vips_tracked_aligned_free(MemorySegment s) {
        var mh$ = vips_tracked_aligned_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_tracked_aligned_free", s);
            }
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_tracked_malloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_LONG
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_tracked_malloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *vips_tracked_malloc(size_t size)
     * }
     */
    public static FunctionDescriptor vips_tracked_malloc$descriptor() {
        return vips_tracked_malloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *vips_tracked_malloc(size_t size)
     * }
     */
    public static MethodHandle vips_tracked_malloc$handle() {
        return vips_tracked_malloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *vips_tracked_malloc(size_t size)
     * }
     */
    public static MemorySegment vips_tracked_malloc$address() {
        return vips_tracked_malloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *vips_tracked_malloc(size_t size)
     * }
     */
    public static MemorySegment vips_tracked_malloc(long size) {
        var mh$ = vips_tracked_malloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_tracked_malloc", size);
            }
            return (MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_tracked_aligned_alloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_LONG,
            vips_h.C_LONG
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_tracked_aligned_alloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *vips_tracked_aligned_alloc(size_t size, size_t align)
     * }
     */
    public static FunctionDescriptor vips_tracked_aligned_alloc$descriptor() {
        return vips_tracked_aligned_alloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *vips_tracked_aligned_alloc(size_t size, size_t align)
     * }
     */
    public static MethodHandle vips_tracked_aligned_alloc$handle() {
        return vips_tracked_aligned_alloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *vips_tracked_aligned_alloc(size_t size, size_t align)
     * }
     */
    public static MemorySegment vips_tracked_aligned_alloc$address() {
        return vips_tracked_aligned_alloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *vips_tracked_aligned_alloc(size_t size, size_t align)
     * }
     */
    public static MemorySegment vips_tracked_aligned_alloc(long size, long align) {
        var mh$ = vips_tracked_aligned_alloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_tracked_aligned_alloc", size, align);
            }
            return (MemorySegment)mh$.invokeExact(size, align);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_tracked_get_mem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_tracked_get_mem");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t vips_tracked_get_mem()
     * }
     */
    public static FunctionDescriptor vips_tracked_get_mem$descriptor() {
        return vips_tracked_get_mem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t vips_tracked_get_mem()
     * }
     */
    public static MethodHandle vips_tracked_get_mem$handle() {
        return vips_tracked_get_mem.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern size_t vips_tracked_get_mem()
     * }
     */
    public static MemorySegment vips_tracked_get_mem$address() {
        return vips_tracked_get_mem.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern size_t vips_tracked_get_mem()
     * }
     */
    public static long vips_tracked_get_mem() {
        var mh$ = vips_tracked_get_mem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_tracked_get_mem");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_tracked_get_mem_highwater {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_tracked_get_mem_highwater");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t vips_tracked_get_mem_highwater()
     * }
     */
    public static FunctionDescriptor vips_tracked_get_mem_highwater$descriptor() {
        return vips_tracked_get_mem_highwater.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t vips_tracked_get_mem_highwater()
     * }
     */
    public static MethodHandle vips_tracked_get_mem_highwater$handle() {
        return vips_tracked_get_mem_highwater.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern size_t vips_tracked_get_mem_highwater()
     * }
     */
    public static MemorySegment vips_tracked_get_mem_highwater$address() {
        return vips_tracked_get_mem_highwater.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern size_t vips_tracked_get_mem_highwater()
     * }
     */
    public static long vips_tracked_get_mem_highwater() {
        var mh$ = vips_tracked_get_mem_highwater.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_tracked_get_mem_highwater");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_tracked_get_allocs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_tracked_get_allocs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_tracked_get_allocs()
     * }
     */
    public static FunctionDescriptor vips_tracked_get_allocs$descriptor() {
        return vips_tracked_get_allocs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_tracked_get_allocs()
     * }
     */
    public static MethodHandle vips_tracked_get_allocs$handle() {
        return vips_tracked_get_allocs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_tracked_get_allocs()
     * }
     */
    public static MemorySegment vips_tracked_get_allocs$address() {
        return vips_tracked_get_allocs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_tracked_get_allocs()
     * }
     */
    public static int vips_tracked_get_allocs() {
        var mh$ = vips_tracked_get_allocs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_tracked_get_allocs");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_tracked_open {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_INT,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_tracked_open");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_tracked_open(const char *pathname, int flags, int mode)
     * }
     */
    public static FunctionDescriptor vips_tracked_open$descriptor() {
        return vips_tracked_open.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_tracked_open(const char *pathname, int flags, int mode)
     * }
     */
    public static MethodHandle vips_tracked_open$handle() {
        return vips_tracked_open.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_tracked_open(const char *pathname, int flags, int mode)
     * }
     */
    public static MemorySegment vips_tracked_open$address() {
        return vips_tracked_open.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_tracked_open(const char *pathname, int flags, int mode)
     * }
     */
    public static int vips_tracked_open(MemorySegment pathname, int flags, int mode) {
        var mh$ = vips_tracked_open.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_tracked_open", pathname, flags, mode);
            }
            return (int)mh$.invokeExact(pathname, flags, mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_tracked_close {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_tracked_close");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_tracked_close(int fd)
     * }
     */
    public static FunctionDescriptor vips_tracked_close$descriptor() {
        return vips_tracked_close.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_tracked_close(int fd)
     * }
     */
    public static MethodHandle vips_tracked_close$handle() {
        return vips_tracked_close.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_tracked_close(int fd)
     * }
     */
    public static MemorySegment vips_tracked_close$address() {
        return vips_tracked_close.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_tracked_close(int fd)
     * }
     */
    public static int vips_tracked_close(int fd) {
        var mh$ = vips_tracked_close.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_tracked_close", fd);
            }
            return (int)mh$.invokeExact(fd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_tracked_get_files {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_tracked_get_files");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_tracked_get_files()
     * }
     */
    public static FunctionDescriptor vips_tracked_get_files$descriptor() {
        return vips_tracked_get_files.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_tracked_get_files()
     * }
     */
    public static MethodHandle vips_tracked_get_files$handle() {
        return vips_tracked_get_files.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_tracked_get_files()
     * }
     */
    public static MemorySegment vips_tracked_get_files$address() {
        return vips_tracked_get_files.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_tracked_get_files()
     * }
     */
    public static int vips_tracked_get_files() {
        var mh$ = vips_tracked_get_files.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_tracked_get_files");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_error_buffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_error_buffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *vips_error_buffer()
     * }
     */
    public static FunctionDescriptor vips_error_buffer$descriptor() {
        return vips_error_buffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *vips_error_buffer()
     * }
     */
    public static MethodHandle vips_error_buffer$handle() {
        return vips_error_buffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *vips_error_buffer()
     * }
     */
    public static MemorySegment vips_error_buffer$address() {
        return vips_error_buffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *vips_error_buffer()
     * }
     */
    public static MemorySegment vips_error_buffer() {
        var mh$ = vips_error_buffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_error_buffer");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_error_buffer_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_error_buffer_copy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *vips_error_buffer_copy()
     * }
     */
    public static FunctionDescriptor vips_error_buffer_copy$descriptor() {
        return vips_error_buffer_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *vips_error_buffer_copy()
     * }
     */
    public static MethodHandle vips_error_buffer_copy$handle() {
        return vips_error_buffer_copy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *vips_error_buffer_copy()
     * }
     */
    public static MemorySegment vips_error_buffer_copy$address() {
        return vips_error_buffer_copy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *vips_error_buffer_copy()
     * }
     */
    public static MemorySegment vips_error_buffer_copy() {
        var mh$ = vips_error_buffer_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_error_buffer_copy");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_error_clear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_error_clear");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_error_clear()
     * }
     */
    public static FunctionDescriptor vips_error_clear$descriptor() {
        return vips_error_clear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_error_clear()
     * }
     */
    public static MethodHandle vips_error_clear$handle() {
        return vips_error_clear.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_error_clear()
     * }
     */
    public static MemorySegment vips_error_clear$address() {
        return vips_error_clear.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_error_clear()
     * }
     */
    public static void vips_error_clear() {
        var mh$ = vips_error_clear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_error_clear");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_error_freeze {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_error_freeze");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_error_freeze()
     * }
     */
    public static FunctionDescriptor vips_error_freeze$descriptor() {
        return vips_error_freeze.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_error_freeze()
     * }
     */
    public static MethodHandle vips_error_freeze$handle() {
        return vips_error_freeze.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_error_freeze()
     * }
     */
    public static MemorySegment vips_error_freeze$address() {
        return vips_error_freeze.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_error_freeze()
     * }
     */
    public static void vips_error_freeze() {
        var mh$ = vips_error_freeze.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_error_freeze");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_error_thaw {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_error_thaw");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_error_thaw()
     * }
     */
    public static FunctionDescriptor vips_error_thaw$descriptor() {
        return vips_error_thaw.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_error_thaw()
     * }
     */
    public static MethodHandle vips_error_thaw$handle() {
        return vips_error_thaw.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_error_thaw()
     * }
     */
    public static MemorySegment vips_error_thaw$address() {
        return vips_error_thaw.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_error_thaw()
     * }
     */
    public static void vips_error_thaw() {
        var mh$ = vips_error_thaw.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_error_thaw");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void vips_error(const char *domain, const char *fmt, ...)
     * }
     */
    public static class vips_error {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_error");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_error(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void vips_error(const char *domain, const char *fmt, ...)
         * }
         */
        public static vips_error makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_error(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment domain, MemorySegment fmt, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_error", domain, fmt, x2);
                }
                spreader.invokeExact(domain, fmt, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class vips_verror {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_verror");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_verror(const char *domain, const char *fmt, va_list ap)
     * }
     */
    public static FunctionDescriptor vips_verror$descriptor() {
        return vips_verror.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_verror(const char *domain, const char *fmt, va_list ap)
     * }
     */
    public static MethodHandle vips_verror$handle() {
        return vips_verror.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_verror(const char *domain, const char *fmt, va_list ap)
     * }
     */
    public static MemorySegment vips_verror$address() {
        return vips_verror.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_verror(const char *domain, const char *fmt, va_list ap)
     * }
     */
    public static void vips_verror(MemorySegment domain, MemorySegment fmt, MemorySegment ap) {
        var mh$ = vips_verror.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_verror", domain, fmt, ap);
            }
            mh$.invokeExact(domain, fmt, ap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void vips_error_system(int err, const char *domain, const char *fmt, ...)
     * }
     */
    public static class vips_error_system {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_error_system");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_error_system(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void vips_error_system(int err, const char *domain, const char *fmt, ...)
         * }
         */
        public static vips_error_system makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_error_system(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(int err, MemorySegment domain, MemorySegment fmt, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_error_system", err, domain, fmt, x3);
                }
                spreader.invokeExact(err, domain, fmt, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class vips_verror_system {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_verror_system");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_verror_system(int err, const char *domain, const char *fmt, va_list ap)
     * }
     */
    public static FunctionDescriptor vips_verror_system$descriptor() {
        return vips_verror_system.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_verror_system(int err, const char *domain, const char *fmt, va_list ap)
     * }
     */
    public static MethodHandle vips_verror_system$handle() {
        return vips_verror_system.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_verror_system(int err, const char *domain, const char *fmt, va_list ap)
     * }
     */
    public static MemorySegment vips_verror_system$address() {
        return vips_verror_system.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_verror_system(int err, const char *domain, const char *fmt, va_list ap)
     * }
     */
    public static void vips_verror_system(int err, MemorySegment domain, MemorySegment fmt, MemorySegment ap) {
        var mh$ = vips_verror_system.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_verror_system", err, domain, fmt, ap);
            }
            mh$.invokeExact(err, domain, fmt, ap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_error_g {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_error_g");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_error_g(GError **error)
     * }
     */
    public static FunctionDescriptor vips_error_g$descriptor() {
        return vips_error_g.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_error_g(GError **error)
     * }
     */
    public static MethodHandle vips_error_g$handle() {
        return vips_error_g.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_error_g(GError **error)
     * }
     */
    public static MemorySegment vips_error_g$address() {
        return vips_error_g.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_error_g(GError **error)
     * }
     */
    public static void vips_error_g(MemorySegment error) {
        var mh$ = vips_error_g.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_error_g", error);
            }
            mh$.invokeExact(error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_g_error {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_g_error");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_g_error(GError **error)
     * }
     */
    public static FunctionDescriptor vips_g_error$descriptor() {
        return vips_g_error.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_g_error(GError **error)
     * }
     */
    public static MethodHandle vips_g_error$handle() {
        return vips_g_error.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_g_error(GError **error)
     * }
     */
    public static MemorySegment vips_g_error$address() {
        return vips_g_error.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_g_error(GError **error)
     * }
     */
    public static void vips_g_error(MemorySegment error) {
        var mh$ = vips_g_error.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_g_error", error);
            }
            mh$.invokeExact(error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void vips_error_exit(const char *fmt, ...)
     * }
     */
    public static class vips_error_exit {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_error_exit");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_error_exit(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void vips_error_exit(const char *fmt, ...)
         * }
         */
        public static vips_error_exit makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_error_exit(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment fmt, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_error_exit", fmt, x1);
                }
                spreader.invokeExact(fmt, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class vips_check_uncoded {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_check_uncoded");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_check_uncoded(const char *domain, VipsImage *im)
     * }
     */
    public static FunctionDescriptor vips_check_uncoded$descriptor() {
        return vips_check_uncoded.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_check_uncoded(const char *domain, VipsImage *im)
     * }
     */
    public static MethodHandle vips_check_uncoded$handle() {
        return vips_check_uncoded.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_check_uncoded(const char *domain, VipsImage *im)
     * }
     */
    public static MemorySegment vips_check_uncoded$address() {
        return vips_check_uncoded.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_check_uncoded(const char *domain, VipsImage *im)
     * }
     */
    public static int vips_check_uncoded(MemorySegment domain, MemorySegment im) {
        var mh$ = vips_check_uncoded.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_check_uncoded", domain, im);
            }
            return (int)mh$.invokeExact(domain, im);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_check_coding {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_check_coding");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_check_coding(const char *domain, VipsImage *im, VipsCoding coding)
     * }
     */
    public static FunctionDescriptor vips_check_coding$descriptor() {
        return vips_check_coding.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_check_coding(const char *domain, VipsImage *im, VipsCoding coding)
     * }
     */
    public static MethodHandle vips_check_coding$handle() {
        return vips_check_coding.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_check_coding(const char *domain, VipsImage *im, VipsCoding coding)
     * }
     */
    public static MemorySegment vips_check_coding$address() {
        return vips_check_coding.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_check_coding(const char *domain, VipsImage *im, VipsCoding coding)
     * }
     */
    public static int vips_check_coding(MemorySegment domain, MemorySegment im, int coding) {
        var mh$ = vips_check_coding.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_check_coding", domain, im, coding);
            }
            return (int)mh$.invokeExact(domain, im, coding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_check_coding_known {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_check_coding_known");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_check_coding_known(const char *domain, VipsImage *im)
     * }
     */
    public static FunctionDescriptor vips_check_coding_known$descriptor() {
        return vips_check_coding_known.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_check_coding_known(const char *domain, VipsImage *im)
     * }
     */
    public static MethodHandle vips_check_coding_known$handle() {
        return vips_check_coding_known.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_check_coding_known(const char *domain, VipsImage *im)
     * }
     */
    public static MemorySegment vips_check_coding_known$address() {
        return vips_check_coding_known.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_check_coding_known(const char *domain, VipsImage *im)
     * }
     */
    public static int vips_check_coding_known(MemorySegment domain, MemorySegment im) {
        var mh$ = vips_check_coding_known.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_check_coding_known", domain, im);
            }
            return (int)mh$.invokeExact(domain, im);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_check_coding_noneorlabq {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_check_coding_noneorlabq");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_check_coding_noneorlabq(const char *domain, VipsImage *im)
     * }
     */
    public static FunctionDescriptor vips_check_coding_noneorlabq$descriptor() {
        return vips_check_coding_noneorlabq.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_check_coding_noneorlabq(const char *domain, VipsImage *im)
     * }
     */
    public static MethodHandle vips_check_coding_noneorlabq$handle() {
        return vips_check_coding_noneorlabq.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_check_coding_noneorlabq(const char *domain, VipsImage *im)
     * }
     */
    public static MemorySegment vips_check_coding_noneorlabq$address() {
        return vips_check_coding_noneorlabq.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_check_coding_noneorlabq(const char *domain, VipsImage *im)
     * }
     */
    public static int vips_check_coding_noneorlabq(MemorySegment domain, MemorySegment im) {
        var mh$ = vips_check_coding_noneorlabq.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_check_coding_noneorlabq", domain, im);
            }
            return (int)mh$.invokeExact(domain, im);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_check_coding_same {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_check_coding_same");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_check_coding_same(const char *domain, VipsImage *im1, VipsImage *im2)
     * }
     */
    public static FunctionDescriptor vips_check_coding_same$descriptor() {
        return vips_check_coding_same.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_check_coding_same(const char *domain, VipsImage *im1, VipsImage *im2)
     * }
     */
    public static MethodHandle vips_check_coding_same$handle() {
        return vips_check_coding_same.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_check_coding_same(const char *domain, VipsImage *im1, VipsImage *im2)
     * }
     */
    public static MemorySegment vips_check_coding_same$address() {
        return vips_check_coding_same.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_check_coding_same(const char *domain, VipsImage *im1, VipsImage *im2)
     * }
     */
    public static int vips_check_coding_same(MemorySegment domain, MemorySegment im1, MemorySegment im2) {
        var mh$ = vips_check_coding_same.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_check_coding_same", domain, im1, im2);
            }
            return (int)mh$.invokeExact(domain, im1, im2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_check_mono {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_check_mono");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_check_mono(const char *domain, VipsImage *im)
     * }
     */
    public static FunctionDescriptor vips_check_mono$descriptor() {
        return vips_check_mono.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_check_mono(const char *domain, VipsImage *im)
     * }
     */
    public static MethodHandle vips_check_mono$handle() {
        return vips_check_mono.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_check_mono(const char *domain, VipsImage *im)
     * }
     */
    public static MemorySegment vips_check_mono$address() {
        return vips_check_mono.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_check_mono(const char *domain, VipsImage *im)
     * }
     */
    public static int vips_check_mono(MemorySegment domain, MemorySegment im) {
        var mh$ = vips_check_mono.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_check_mono", domain, im);
            }
            return (int)mh$.invokeExact(domain, im);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_check_bands {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_check_bands");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_check_bands(const char *domain, VipsImage *im, int bands)
     * }
     */
    public static FunctionDescriptor vips_check_bands$descriptor() {
        return vips_check_bands.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_check_bands(const char *domain, VipsImage *im, int bands)
     * }
     */
    public static MethodHandle vips_check_bands$handle() {
        return vips_check_bands.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_check_bands(const char *domain, VipsImage *im, int bands)
     * }
     */
    public static MemorySegment vips_check_bands$address() {
        return vips_check_bands.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_check_bands(const char *domain, VipsImage *im, int bands)
     * }
     */
    public static int vips_check_bands(MemorySegment domain, MemorySegment im, int bands) {
        var mh$ = vips_check_bands.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_check_bands", domain, im, bands);
            }
            return (int)mh$.invokeExact(domain, im, bands);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_check_bands_1or3 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_check_bands_1or3");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_check_bands_1or3(const char *domain, VipsImage *im)
     * }
     */
    public static FunctionDescriptor vips_check_bands_1or3$descriptor() {
        return vips_check_bands_1or3.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_check_bands_1or3(const char *domain, VipsImage *im)
     * }
     */
    public static MethodHandle vips_check_bands_1or3$handle() {
        return vips_check_bands_1or3.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_check_bands_1or3(const char *domain, VipsImage *im)
     * }
     */
    public static MemorySegment vips_check_bands_1or3$address() {
        return vips_check_bands_1or3.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_check_bands_1or3(const char *domain, VipsImage *im)
     * }
     */
    public static int vips_check_bands_1or3(MemorySegment domain, MemorySegment im) {
        var mh$ = vips_check_bands_1or3.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_check_bands_1or3", domain, im);
            }
            return (int)mh$.invokeExact(domain, im);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_check_bands_atleast {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_check_bands_atleast");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_check_bands_atleast(const char *domain, VipsImage *im, int bands)
     * }
     */
    public static FunctionDescriptor vips_check_bands_atleast$descriptor() {
        return vips_check_bands_atleast.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_check_bands_atleast(const char *domain, VipsImage *im, int bands)
     * }
     */
    public static MethodHandle vips_check_bands_atleast$handle() {
        return vips_check_bands_atleast.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_check_bands_atleast(const char *domain, VipsImage *im, int bands)
     * }
     */
    public static MemorySegment vips_check_bands_atleast$address() {
        return vips_check_bands_atleast.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_check_bands_atleast(const char *domain, VipsImage *im, int bands)
     * }
     */
    public static int vips_check_bands_atleast(MemorySegment domain, MemorySegment im, int bands) {
        var mh$ = vips_check_bands_atleast.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_check_bands_atleast", domain, im, bands);
            }
            return (int)mh$.invokeExact(domain, im, bands);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_check_bands_1orn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_check_bands_1orn");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_check_bands_1orn(const char *domain, VipsImage *im1, VipsImage *im2)
     * }
     */
    public static FunctionDescriptor vips_check_bands_1orn$descriptor() {
        return vips_check_bands_1orn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_check_bands_1orn(const char *domain, VipsImage *im1, VipsImage *im2)
     * }
     */
    public static MethodHandle vips_check_bands_1orn$handle() {
        return vips_check_bands_1orn.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_check_bands_1orn(const char *domain, VipsImage *im1, VipsImage *im2)
     * }
     */
    public static MemorySegment vips_check_bands_1orn$address() {
        return vips_check_bands_1orn.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_check_bands_1orn(const char *domain, VipsImage *im1, VipsImage *im2)
     * }
     */
    public static int vips_check_bands_1orn(MemorySegment domain, MemorySegment im1, MemorySegment im2) {
        var mh$ = vips_check_bands_1orn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_check_bands_1orn", domain, im1, im2);
            }
            return (int)mh$.invokeExact(domain, im1, im2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_check_bands_1orn_unary {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_check_bands_1orn_unary");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_check_bands_1orn_unary(const char *domain, VipsImage *im, int n)
     * }
     */
    public static FunctionDescriptor vips_check_bands_1orn_unary$descriptor() {
        return vips_check_bands_1orn_unary.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_check_bands_1orn_unary(const char *domain, VipsImage *im, int n)
     * }
     */
    public static MethodHandle vips_check_bands_1orn_unary$handle() {
        return vips_check_bands_1orn_unary.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_check_bands_1orn_unary(const char *domain, VipsImage *im, int n)
     * }
     */
    public static MemorySegment vips_check_bands_1orn_unary$address() {
        return vips_check_bands_1orn_unary.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_check_bands_1orn_unary(const char *domain, VipsImage *im, int n)
     * }
     */
    public static int vips_check_bands_1orn_unary(MemorySegment domain, MemorySegment im, int n) {
        var mh$ = vips_check_bands_1orn_unary.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_check_bands_1orn_unary", domain, im, n);
            }
            return (int)mh$.invokeExact(domain, im, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_check_bands_same {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_check_bands_same");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_check_bands_same(const char *domain, VipsImage *im1, VipsImage *im2)
     * }
     */
    public static FunctionDescriptor vips_check_bands_same$descriptor() {
        return vips_check_bands_same.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_check_bands_same(const char *domain, VipsImage *im1, VipsImage *im2)
     * }
     */
    public static MethodHandle vips_check_bands_same$handle() {
        return vips_check_bands_same.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_check_bands_same(const char *domain, VipsImage *im1, VipsImage *im2)
     * }
     */
    public static MemorySegment vips_check_bands_same$address() {
        return vips_check_bands_same.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_check_bands_same(const char *domain, VipsImage *im1, VipsImage *im2)
     * }
     */
    public static int vips_check_bands_same(MemorySegment domain, MemorySegment im1, MemorySegment im2) {
        var mh$ = vips_check_bands_same.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_check_bands_same", domain, im1, im2);
            }
            return (int)mh$.invokeExact(domain, im1, im2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_check_bandno {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_check_bandno");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_check_bandno(const char *domain, VipsImage *im, int bandno)
     * }
     */
    public static FunctionDescriptor vips_check_bandno$descriptor() {
        return vips_check_bandno.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_check_bandno(const char *domain, VipsImage *im, int bandno)
     * }
     */
    public static MethodHandle vips_check_bandno$handle() {
        return vips_check_bandno.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_check_bandno(const char *domain, VipsImage *im, int bandno)
     * }
     */
    public static MemorySegment vips_check_bandno$address() {
        return vips_check_bandno.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_check_bandno(const char *domain, VipsImage *im, int bandno)
     * }
     */
    public static int vips_check_bandno(MemorySegment domain, MemorySegment im, int bandno) {
        var mh$ = vips_check_bandno.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_check_bandno", domain, im, bandno);
            }
            return (int)mh$.invokeExact(domain, im, bandno);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_check_int {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_check_int");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_check_int(const char *domain, VipsImage *im)
     * }
     */
    public static FunctionDescriptor vips_check_int$descriptor() {
        return vips_check_int.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_check_int(const char *domain, VipsImage *im)
     * }
     */
    public static MethodHandle vips_check_int$handle() {
        return vips_check_int.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_check_int(const char *domain, VipsImage *im)
     * }
     */
    public static MemorySegment vips_check_int$address() {
        return vips_check_int.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_check_int(const char *domain, VipsImage *im)
     * }
     */
    public static int vips_check_int(MemorySegment domain, MemorySegment im) {
        var mh$ = vips_check_int.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_check_int", domain, im);
            }
            return (int)mh$.invokeExact(domain, im);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_check_uint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_check_uint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_check_uint(const char *domain, VipsImage *im)
     * }
     */
    public static FunctionDescriptor vips_check_uint$descriptor() {
        return vips_check_uint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_check_uint(const char *domain, VipsImage *im)
     * }
     */
    public static MethodHandle vips_check_uint$handle() {
        return vips_check_uint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_check_uint(const char *domain, VipsImage *im)
     * }
     */
    public static MemorySegment vips_check_uint$address() {
        return vips_check_uint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_check_uint(const char *domain, VipsImage *im)
     * }
     */
    public static int vips_check_uint(MemorySegment domain, MemorySegment im) {
        var mh$ = vips_check_uint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_check_uint", domain, im);
            }
            return (int)mh$.invokeExact(domain, im);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_check_uintorf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_check_uintorf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_check_uintorf(const char *domain, VipsImage *im)
     * }
     */
    public static FunctionDescriptor vips_check_uintorf$descriptor() {
        return vips_check_uintorf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_check_uintorf(const char *domain, VipsImage *im)
     * }
     */
    public static MethodHandle vips_check_uintorf$handle() {
        return vips_check_uintorf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_check_uintorf(const char *domain, VipsImage *im)
     * }
     */
    public static MemorySegment vips_check_uintorf$address() {
        return vips_check_uintorf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_check_uintorf(const char *domain, VipsImage *im)
     * }
     */
    public static int vips_check_uintorf(MemorySegment domain, MemorySegment im) {
        var mh$ = vips_check_uintorf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_check_uintorf", domain, im);
            }
            return (int)mh$.invokeExact(domain, im);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_check_noncomplex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_check_noncomplex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_check_noncomplex(const char *domain, VipsImage *im)
     * }
     */
    public static FunctionDescriptor vips_check_noncomplex$descriptor() {
        return vips_check_noncomplex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_check_noncomplex(const char *domain, VipsImage *im)
     * }
     */
    public static MethodHandle vips_check_noncomplex$handle() {
        return vips_check_noncomplex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_check_noncomplex(const char *domain, VipsImage *im)
     * }
     */
    public static MemorySegment vips_check_noncomplex$address() {
        return vips_check_noncomplex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_check_noncomplex(const char *domain, VipsImage *im)
     * }
     */
    public static int vips_check_noncomplex(MemorySegment domain, MemorySegment im) {
        var mh$ = vips_check_noncomplex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_check_noncomplex", domain, im);
            }
            return (int)mh$.invokeExact(domain, im);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_check_complex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_check_complex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_check_complex(const char *domain, VipsImage *im)
     * }
     */
    public static FunctionDescriptor vips_check_complex$descriptor() {
        return vips_check_complex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_check_complex(const char *domain, VipsImage *im)
     * }
     */
    public static MethodHandle vips_check_complex$handle() {
        return vips_check_complex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_check_complex(const char *domain, VipsImage *im)
     * }
     */
    public static MemorySegment vips_check_complex$address() {
        return vips_check_complex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_check_complex(const char *domain, VipsImage *im)
     * }
     */
    public static int vips_check_complex(MemorySegment domain, MemorySegment im) {
        var mh$ = vips_check_complex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_check_complex", domain, im);
            }
            return (int)mh$.invokeExact(domain, im);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_check_twocomponents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_check_twocomponents");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_check_twocomponents(const char *domain, VipsImage *im)
     * }
     */
    public static FunctionDescriptor vips_check_twocomponents$descriptor() {
        return vips_check_twocomponents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_check_twocomponents(const char *domain, VipsImage *im)
     * }
     */
    public static MethodHandle vips_check_twocomponents$handle() {
        return vips_check_twocomponents.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_check_twocomponents(const char *domain, VipsImage *im)
     * }
     */
    public static MemorySegment vips_check_twocomponents$address() {
        return vips_check_twocomponents.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_check_twocomponents(const char *domain, VipsImage *im)
     * }
     */
    public static int vips_check_twocomponents(MemorySegment domain, MemorySegment im) {
        var mh$ = vips_check_twocomponents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_check_twocomponents", domain, im);
            }
            return (int)mh$.invokeExact(domain, im);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_check_format {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_check_format");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_check_format(const char *domain, VipsImage *im, VipsBandFormat fmt)
     * }
     */
    public static FunctionDescriptor vips_check_format$descriptor() {
        return vips_check_format.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_check_format(const char *domain, VipsImage *im, VipsBandFormat fmt)
     * }
     */
    public static MethodHandle vips_check_format$handle() {
        return vips_check_format.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_check_format(const char *domain, VipsImage *im, VipsBandFormat fmt)
     * }
     */
    public static MemorySegment vips_check_format$address() {
        return vips_check_format.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_check_format(const char *domain, VipsImage *im, VipsBandFormat fmt)
     * }
     */
    public static int vips_check_format(MemorySegment domain, MemorySegment im, int fmt) {
        var mh$ = vips_check_format.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_check_format", domain, im, fmt);
            }
            return (int)mh$.invokeExact(domain, im, fmt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_check_u8or16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_check_u8or16");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_check_u8or16(const char *domain, VipsImage *im)
     * }
     */
    public static FunctionDescriptor vips_check_u8or16$descriptor() {
        return vips_check_u8or16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_check_u8or16(const char *domain, VipsImage *im)
     * }
     */
    public static MethodHandle vips_check_u8or16$handle() {
        return vips_check_u8or16.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_check_u8or16(const char *domain, VipsImage *im)
     * }
     */
    public static MemorySegment vips_check_u8or16$address() {
        return vips_check_u8or16.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_check_u8or16(const char *domain, VipsImage *im)
     * }
     */
    public static int vips_check_u8or16(MemorySegment domain, MemorySegment im) {
        var mh$ = vips_check_u8or16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_check_u8or16", domain, im);
            }
            return (int)mh$.invokeExact(domain, im);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_check_8or16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_check_8or16");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_check_8or16(const char *domain, VipsImage *im)
     * }
     */
    public static FunctionDescriptor vips_check_8or16$descriptor() {
        return vips_check_8or16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_check_8or16(const char *domain, VipsImage *im)
     * }
     */
    public static MethodHandle vips_check_8or16$handle() {
        return vips_check_8or16.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_check_8or16(const char *domain, VipsImage *im)
     * }
     */
    public static MemorySegment vips_check_8or16$address() {
        return vips_check_8or16.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_check_8or16(const char *domain, VipsImage *im)
     * }
     */
    public static int vips_check_8or16(MemorySegment domain, MemorySegment im) {
        var mh$ = vips_check_8or16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_check_8or16", domain, im);
            }
            return (int)mh$.invokeExact(domain, im);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_check_u8or16orf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_check_u8or16orf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_check_u8or16orf(const char *domain, VipsImage *im)
     * }
     */
    public static FunctionDescriptor vips_check_u8or16orf$descriptor() {
        return vips_check_u8or16orf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_check_u8or16orf(const char *domain, VipsImage *im)
     * }
     */
    public static MethodHandle vips_check_u8or16orf$handle() {
        return vips_check_u8or16orf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_check_u8or16orf(const char *domain, VipsImage *im)
     * }
     */
    public static MemorySegment vips_check_u8or16orf$address() {
        return vips_check_u8or16orf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_check_u8or16orf(const char *domain, VipsImage *im)
     * }
     */
    public static int vips_check_u8or16orf(MemorySegment domain, MemorySegment im) {
        var mh$ = vips_check_u8or16orf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_check_u8or16orf", domain, im);
            }
            return (int)mh$.invokeExact(domain, im);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_check_format_same {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_check_format_same");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_check_format_same(const char *domain, VipsImage *im1, VipsImage *im2)
     * }
     */
    public static FunctionDescriptor vips_check_format_same$descriptor() {
        return vips_check_format_same.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_check_format_same(const char *domain, VipsImage *im1, VipsImage *im2)
     * }
     */
    public static MethodHandle vips_check_format_same$handle() {
        return vips_check_format_same.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_check_format_same(const char *domain, VipsImage *im1, VipsImage *im2)
     * }
     */
    public static MemorySegment vips_check_format_same$address() {
        return vips_check_format_same.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_check_format_same(const char *domain, VipsImage *im1, VipsImage *im2)
     * }
     */
    public static int vips_check_format_same(MemorySegment domain, MemorySegment im1, MemorySegment im2) {
        var mh$ = vips_check_format_same.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_check_format_same", domain, im1, im2);
            }
            return (int)mh$.invokeExact(domain, im1, im2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_check_size_same {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_check_size_same");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_check_size_same(const char *domain, VipsImage *im1, VipsImage *im2)
     * }
     */
    public static FunctionDescriptor vips_check_size_same$descriptor() {
        return vips_check_size_same.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_check_size_same(const char *domain, VipsImage *im1, VipsImage *im2)
     * }
     */
    public static MethodHandle vips_check_size_same$handle() {
        return vips_check_size_same.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_check_size_same(const char *domain, VipsImage *im1, VipsImage *im2)
     * }
     */
    public static MemorySegment vips_check_size_same$address() {
        return vips_check_size_same.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_check_size_same(const char *domain, VipsImage *im1, VipsImage *im2)
     * }
     */
    public static int vips_check_size_same(MemorySegment domain, MemorySegment im1, MemorySegment im2) {
        var mh$ = vips_check_size_same.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_check_size_same", domain, im1, im2);
            }
            return (int)mh$.invokeExact(domain, im1, im2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_check_oddsquare {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_check_oddsquare");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_check_oddsquare(const char *domain, VipsImage *im)
     * }
     */
    public static FunctionDescriptor vips_check_oddsquare$descriptor() {
        return vips_check_oddsquare.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_check_oddsquare(const char *domain, VipsImage *im)
     * }
     */
    public static MethodHandle vips_check_oddsquare$handle() {
        return vips_check_oddsquare.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_check_oddsquare(const char *domain, VipsImage *im)
     * }
     */
    public static MemorySegment vips_check_oddsquare$address() {
        return vips_check_oddsquare.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_check_oddsquare(const char *domain, VipsImage *im)
     * }
     */
    public static int vips_check_oddsquare(MemorySegment domain, MemorySegment im) {
        var mh$ = vips_check_oddsquare.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_check_oddsquare", domain, im);
            }
            return (int)mh$.invokeExact(domain, im);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_check_vector_length {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_INT,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_check_vector_length");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_check_vector_length(const char *domain, int n, int len)
     * }
     */
    public static FunctionDescriptor vips_check_vector_length$descriptor() {
        return vips_check_vector_length.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_check_vector_length(const char *domain, int n, int len)
     * }
     */
    public static MethodHandle vips_check_vector_length$handle() {
        return vips_check_vector_length.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_check_vector_length(const char *domain, int n, int len)
     * }
     */
    public static MemorySegment vips_check_vector_length$address() {
        return vips_check_vector_length.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_check_vector_length(const char *domain, int n, int len)
     * }
     */
    public static int vips_check_vector_length(MemorySegment domain, int n, int len) {
        var mh$ = vips_check_vector_length.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_check_vector_length", domain, n, len);
            }
            return (int)mh$.invokeExact(domain, n, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_check_vector {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_check_vector");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_check_vector(const char *domain, int n, VipsImage *im)
     * }
     */
    public static FunctionDescriptor vips_check_vector$descriptor() {
        return vips_check_vector.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_check_vector(const char *domain, int n, VipsImage *im)
     * }
     */
    public static MethodHandle vips_check_vector$handle() {
        return vips_check_vector.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_check_vector(const char *domain, int n, VipsImage *im)
     * }
     */
    public static MemorySegment vips_check_vector$address() {
        return vips_check_vector.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_check_vector(const char *domain, int n, VipsImage *im)
     * }
     */
    public static int vips_check_vector(MemorySegment domain, int n, MemorySegment im) {
        var mh$ = vips_check_vector.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_check_vector", domain, n, im);
            }
            return (int)mh$.invokeExact(domain, n, im);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_check_hist {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_check_hist");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_check_hist(const char *domain, VipsImage *im)
     * }
     */
    public static FunctionDescriptor vips_check_hist$descriptor() {
        return vips_check_hist.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_check_hist(const char *domain, VipsImage *im)
     * }
     */
    public static MethodHandle vips_check_hist$handle() {
        return vips_check_hist.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_check_hist(const char *domain, VipsImage *im)
     * }
     */
    public static MemorySegment vips_check_hist$address() {
        return vips_check_hist.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_check_hist(const char *domain, VipsImage *im)
     * }
     */
    public static int vips_check_hist(MemorySegment domain, MemorySegment im) {
        var mh$ = vips_check_hist.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_check_hist", domain, im);
            }
            return (int)mh$.invokeExact(domain, im);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_check_matrix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_check_matrix");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_check_matrix(const char *domain, VipsImage *im, VipsImage **out)
     * }
     */
    public static FunctionDescriptor vips_check_matrix$descriptor() {
        return vips_check_matrix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_check_matrix(const char *domain, VipsImage *im, VipsImage **out)
     * }
     */
    public static MethodHandle vips_check_matrix$handle() {
        return vips_check_matrix.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_check_matrix(const char *domain, VipsImage *im, VipsImage **out)
     * }
     */
    public static MemorySegment vips_check_matrix$address() {
        return vips_check_matrix.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_check_matrix(const char *domain, VipsImage *im, VipsImage **out)
     * }
     */
    public static int vips_check_matrix(MemorySegment domain, MemorySegment im, MemorySegment out) {
        var mh$ = vips_check_matrix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_check_matrix", domain, im, out);
            }
            return (int)mh$.invokeExact(domain, im, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_check_separable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_check_separable");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_check_separable(const char *domain, VipsImage *im)
     * }
     */
    public static FunctionDescriptor vips_check_separable$descriptor() {
        return vips_check_separable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_check_separable(const char *domain, VipsImage *im)
     * }
     */
    public static MethodHandle vips_check_separable$handle() {
        return vips_check_separable.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_check_separable(const char *domain, VipsImage *im)
     * }
     */
    public static MemorySegment vips_check_separable$address() {
        return vips_check_separable.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_check_separable(const char *domain, VipsImage *im)
     * }
     */
    public static int vips_check_separable(MemorySegment domain, MemorySegment im) {
        var mh$ = vips_check_separable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_check_separable", domain, im);
            }
            return (int)mh$.invokeExact(domain, im);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_check_precision_intfloat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_check_precision_intfloat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_check_precision_intfloat(const char *domain, VipsPrecision precision)
     * }
     */
    public static FunctionDescriptor vips_check_precision_intfloat$descriptor() {
        return vips_check_precision_intfloat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_check_precision_intfloat(const char *domain, VipsPrecision precision)
     * }
     */
    public static MethodHandle vips_check_precision_intfloat$handle() {
        return vips_check_precision_intfloat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_check_precision_intfloat(const char *domain, VipsPrecision precision)
     * }
     */
    public static MemorySegment vips_check_precision_intfloat$address() {
        return vips_check_precision_intfloat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_check_precision_intfloat(const char *domain, VipsPrecision precision)
     * }
     */
    public static int vips_check_precision_intfloat(MemorySegment domain, int precision) {
        var mh$ = vips_check_precision_intfloat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_check_precision_intfloat", domain, precision);
            }
            return (int)mh$.invokeExact(domain, precision);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VIPS_FORMAT_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FORMAT_NONE = 0
     * }
     */
    public static int VIPS_FORMAT_NONE() {
        return VIPS_FORMAT_NONE;
    }
    private static final int VIPS_FORMAT_PARTIAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FORMAT_PARTIAL = 1
     * }
     */
    public static int VIPS_FORMAT_PARTIAL() {
        return VIPS_FORMAT_PARTIAL;
    }
    private static final int VIPS_FORMAT_BIGENDIAN = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FORMAT_BIGENDIAN = 2
     * }
     */
    public static int VIPS_FORMAT_BIGENDIAN() {
        return VIPS_FORMAT_BIGENDIAN;
    }

    private static class vips_format_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_format_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_format_get_type()
     * }
     */
    public static FunctionDescriptor vips_format_get_type$descriptor() {
        return vips_format_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_format_get_type()
     * }
     */
    public static MethodHandle vips_format_get_type$handle() {
        return vips_format_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_format_get_type()
     * }
     */
    public static MemorySegment vips_format_get_type$address() {
        return vips_format_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_format_get_type()
     * }
     */
    public static long vips_format_get_type() {
        var mh$ = vips_format_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_format_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_format_map {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_format_map");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *vips_format_map(VipsSListMap2Fn fn, void *a, void *b)
     * }
     */
    public static FunctionDescriptor vips_format_map$descriptor() {
        return vips_format_map.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *vips_format_map(VipsSListMap2Fn fn, void *a, void *b)
     * }
     */
    public static MethodHandle vips_format_map$handle() {
        return vips_format_map.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *vips_format_map(VipsSListMap2Fn fn, void *a, void *b)
     * }
     */
    public static MemorySegment vips_format_map$address() {
        return vips_format_map.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *vips_format_map(VipsSListMap2Fn fn, void *a, void *b)
     * }
     */
    public static MemorySegment vips_format_map(MemorySegment fn, MemorySegment a, MemorySegment b) {
        var mh$ = vips_format_map.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_format_map", fn, a, b);
            }
            return (MemorySegment)mh$.invokeExact(fn, a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_format_for_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_format_for_file");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsFormatClass *vips_format_for_file(const char *filename)
     * }
     */
    public static FunctionDescriptor vips_format_for_file$descriptor() {
        return vips_format_for_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsFormatClass *vips_format_for_file(const char *filename)
     * }
     */
    public static MethodHandle vips_format_for_file$handle() {
        return vips_format_for_file.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsFormatClass *vips_format_for_file(const char *filename)
     * }
     */
    public static MemorySegment vips_format_for_file$address() {
        return vips_format_for_file.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsFormatClass *vips_format_for_file(const char *filename)
     * }
     */
    public static MemorySegment vips_format_for_file(MemorySegment filename) {
        var mh$ = vips_format_for_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_format_for_file", filename);
            }
            return (MemorySegment)mh$.invokeExact(filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_format_for_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_format_for_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsFormatClass *vips_format_for_name(const char *filename)
     * }
     */
    public static FunctionDescriptor vips_format_for_name$descriptor() {
        return vips_format_for_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsFormatClass *vips_format_for_name(const char *filename)
     * }
     */
    public static MethodHandle vips_format_for_name$handle() {
        return vips_format_for_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsFormatClass *vips_format_for_name(const char *filename)
     * }
     */
    public static MemorySegment vips_format_for_name$address() {
        return vips_format_for_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsFormatClass *vips_format_for_name(const char *filename)
     * }
     */
    public static MemorySegment vips_format_for_name(MemorySegment filename) {
        var mh$ = vips_format_for_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_format_for_name", filename);
            }
            return (MemorySegment)mh$.invokeExact(filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_format_get_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_format_get_flags");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsFormatFlags vips_format_get_flags(VipsFormatClass *format, const char *filename)
     * }
     */
    public static FunctionDescriptor vips_format_get_flags$descriptor() {
        return vips_format_get_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsFormatFlags vips_format_get_flags(VipsFormatClass *format, const char *filename)
     * }
     */
    public static MethodHandle vips_format_get_flags$handle() {
        return vips_format_get_flags.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsFormatFlags vips_format_get_flags(VipsFormatClass *format, const char *filename)
     * }
     */
    public static MemorySegment vips_format_get_flags$address() {
        return vips_format_get_flags.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsFormatFlags vips_format_get_flags(VipsFormatClass *format, const char *filename)
     * }
     */
    public static int vips_format_get_flags(MemorySegment format, MemorySegment filename) {
        var mh$ = vips_format_get_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_format_get_flags", format, filename);
            }
            return (int)mh$.invokeExact(format, filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_format_read {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_format_read");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_format_read(const char *filename, VipsImage *out)
     * }
     */
    public static FunctionDescriptor vips_format_read$descriptor() {
        return vips_format_read.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_format_read(const char *filename, VipsImage *out)
     * }
     */
    public static MethodHandle vips_format_read$handle() {
        return vips_format_read.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_format_read(const char *filename, VipsImage *out)
     * }
     */
    public static MemorySegment vips_format_read$address() {
        return vips_format_read.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_format_read(const char *filename, VipsImage *out)
     * }
     */
    public static int vips_format_read(MemorySegment filename, MemorySegment out) {
        var mh$ = vips_format_read.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_format_read", filename, out);
            }
            return (int)mh$.invokeExact(filename, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_format_write {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_format_write");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_format_write(VipsImage *in, const char *filename)
     * }
     */
    public static FunctionDescriptor vips_format_write$descriptor() {
        return vips_format_write.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_format_write(VipsImage *in, const char *filename)
     * }
     */
    public static MethodHandle vips_format_write$handle() {
        return vips_format_write.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_format_write(VipsImage *in, const char *filename)
     * }
     */
    public static MemorySegment vips_format_write$address() {
        return vips_format_write.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_format_write(VipsImage *in, const char *filename)
     * }
     */
    public static int vips_format_write(MemorySegment in, MemorySegment filename) {
        var mh$ = vips_format_write.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_format_write", in, filename);
            }
            return (int)mh$.invokeExact(in, filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_sink_disc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_sink_disc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_sink_disc(VipsImage *im, VipsRegionWrite write_fn, void *a)
     * }
     */
    public static FunctionDescriptor vips_sink_disc$descriptor() {
        return vips_sink_disc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_sink_disc(VipsImage *im, VipsRegionWrite write_fn, void *a)
     * }
     */
    public static MethodHandle vips_sink_disc$handle() {
        return vips_sink_disc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_sink_disc(VipsImage *im, VipsRegionWrite write_fn, void *a)
     * }
     */
    public static MemorySegment vips_sink_disc$address() {
        return vips_sink_disc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_sink_disc(VipsImage *im, VipsRegionWrite write_fn, void *a)
     * }
     */
    public static int vips_sink_disc(MemorySegment im, MemorySegment write_fn, MemorySegment a) {
        var mh$ = vips_sink_disc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_sink_disc", im, write_fn, a);
            }
            return (int)mh$.invokeExact(im, write_fn, a);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_sink {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_sink");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_sink(VipsImage *im, VipsStartFn start_fn, VipsGenerateFn generate_fn, VipsStopFn stop_fn, void *a, void *b)
     * }
     */
    public static FunctionDescriptor vips_sink$descriptor() {
        return vips_sink.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_sink(VipsImage *im, VipsStartFn start_fn, VipsGenerateFn generate_fn, VipsStopFn stop_fn, void *a, void *b)
     * }
     */
    public static MethodHandle vips_sink$handle() {
        return vips_sink.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_sink(VipsImage *im, VipsStartFn start_fn, VipsGenerateFn generate_fn, VipsStopFn stop_fn, void *a, void *b)
     * }
     */
    public static MemorySegment vips_sink$address() {
        return vips_sink.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_sink(VipsImage *im, VipsStartFn start_fn, VipsGenerateFn generate_fn, VipsStopFn stop_fn, void *a, void *b)
     * }
     */
    public static int vips_sink(MemorySegment im, MemorySegment start_fn, MemorySegment generate_fn, MemorySegment stop_fn, MemorySegment a, MemorySegment b) {
        var mh$ = vips_sink.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_sink", im, start_fn, generate_fn, stop_fn, a, b);
            }
            return (int)mh$.invokeExact(im, start_fn, generate_fn, stop_fn, a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_sink_tile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_INT,
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_sink_tile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_sink_tile(VipsImage *im, int tile_width, int tile_height, VipsStartFn start_fn, VipsGenerateFn generate_fn, VipsStopFn stop_fn, void *a, void *b)
     * }
     */
    public static FunctionDescriptor vips_sink_tile$descriptor() {
        return vips_sink_tile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_sink_tile(VipsImage *im, int tile_width, int tile_height, VipsStartFn start_fn, VipsGenerateFn generate_fn, VipsStopFn stop_fn, void *a, void *b)
     * }
     */
    public static MethodHandle vips_sink_tile$handle() {
        return vips_sink_tile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_sink_tile(VipsImage *im, int tile_width, int tile_height, VipsStartFn start_fn, VipsGenerateFn generate_fn, VipsStopFn stop_fn, void *a, void *b)
     * }
     */
    public static MemorySegment vips_sink_tile$address() {
        return vips_sink_tile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_sink_tile(VipsImage *im, int tile_width, int tile_height, VipsStartFn start_fn, VipsGenerateFn generate_fn, VipsStopFn stop_fn, void *a, void *b)
     * }
     */
    public static int vips_sink_tile(MemorySegment im, int tile_width, int tile_height, MemorySegment start_fn, MemorySegment generate_fn, MemorySegment stop_fn, MemorySegment a, MemorySegment b) {
        var mh$ = vips_sink_tile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_sink_tile", im, tile_width, tile_height, start_fn, generate_fn, stop_fn, a, b);
            }
            return (int)mh$.invokeExact(im, tile_width, tile_height, start_fn, generate_fn, stop_fn, a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_sink_screen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_INT,
            vips_h.C_INT,
            vips_h.C_INT,
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_sink_screen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_sink_screen(VipsImage *in, VipsImage *out, VipsImage *mask, int tile_width, int tile_height, int max_tiles, int priority, VipsSinkNotify notify_fn, void *a)
     * }
     */
    public static FunctionDescriptor vips_sink_screen$descriptor() {
        return vips_sink_screen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_sink_screen(VipsImage *in, VipsImage *out, VipsImage *mask, int tile_width, int tile_height, int max_tiles, int priority, VipsSinkNotify notify_fn, void *a)
     * }
     */
    public static MethodHandle vips_sink_screen$handle() {
        return vips_sink_screen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_sink_screen(VipsImage *in, VipsImage *out, VipsImage *mask, int tile_width, int tile_height, int max_tiles, int priority, VipsSinkNotify notify_fn, void *a)
     * }
     */
    public static MemorySegment vips_sink_screen$address() {
        return vips_sink_screen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_sink_screen(VipsImage *in, VipsImage *out, VipsImage *mask, int tile_width, int tile_height, int max_tiles, int priority, VipsSinkNotify notify_fn, void *a)
     * }
     */
    public static int vips_sink_screen(MemorySegment in, MemorySegment out, MemorySegment mask, int tile_width, int tile_height, int max_tiles, int priority, MemorySegment notify_fn, MemorySegment a) {
        var mh$ = vips_sink_screen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_sink_screen", in, out, mask, tile_width, tile_height, max_tiles, priority, notify_fn, a);
            }
            return (int)mh$.invokeExact(in, out, mask, tile_width, tile_height, max_tiles, priority, notify_fn, a);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_sink_memory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_sink_memory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_sink_memory(VipsImage *im)
     * }
     */
    public static FunctionDescriptor vips_sink_memory$descriptor() {
        return vips_sink_memory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_sink_memory(VipsImage *im)
     * }
     */
    public static MethodHandle vips_sink_memory$handle() {
        return vips_sink_memory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_sink_memory(VipsImage *im)
     * }
     */
    public static MemorySegment vips_sink_memory$address() {
        return vips_sink_memory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_sink_memory(VipsImage *im)
     * }
     */
    public static int vips_sink_memory(MemorySegment im) {
        var mh$ = vips_sink_memory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_sink_memory", im);
            }
            return (int)mh$.invokeExact(im);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_start_one {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_start_one");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *vips_start_one(VipsImage *out, void *a, void *b)
     * }
     */
    public static FunctionDescriptor vips_start_one$descriptor() {
        return vips_start_one.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *vips_start_one(VipsImage *out, void *a, void *b)
     * }
     */
    public static MethodHandle vips_start_one$handle() {
        return vips_start_one.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *vips_start_one(VipsImage *out, void *a, void *b)
     * }
     */
    public static MemorySegment vips_start_one$address() {
        return vips_start_one.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *vips_start_one(VipsImage *out, void *a, void *b)
     * }
     */
    public static MemorySegment vips_start_one(MemorySegment out, MemorySegment a, MemorySegment b) {
        var mh$ = vips_start_one.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_start_one", out, a, b);
            }
            return (MemorySegment)mh$.invokeExact(out, a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_stop_one {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_stop_one");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_stop_one(void *seq, void *a, void *b)
     * }
     */
    public static FunctionDescriptor vips_stop_one$descriptor() {
        return vips_stop_one.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_stop_one(void *seq, void *a, void *b)
     * }
     */
    public static MethodHandle vips_stop_one$handle() {
        return vips_stop_one.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_stop_one(void *seq, void *a, void *b)
     * }
     */
    public static MemorySegment vips_stop_one$address() {
        return vips_stop_one.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_stop_one(void *seq, void *a, void *b)
     * }
     */
    public static int vips_stop_one(MemorySegment seq, MemorySegment a, MemorySegment b) {
        var mh$ = vips_stop_one.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_stop_one", seq, a, b);
            }
            return (int)mh$.invokeExact(seq, a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_start_many {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_start_many");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *vips_start_many(VipsImage *out, void *a, void *b)
     * }
     */
    public static FunctionDescriptor vips_start_many$descriptor() {
        return vips_start_many.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *vips_start_many(VipsImage *out, void *a, void *b)
     * }
     */
    public static MethodHandle vips_start_many$handle() {
        return vips_start_many.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *vips_start_many(VipsImage *out, void *a, void *b)
     * }
     */
    public static MemorySegment vips_start_many$address() {
        return vips_start_many.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *vips_start_many(VipsImage *out, void *a, void *b)
     * }
     */
    public static MemorySegment vips_start_many(MemorySegment out, MemorySegment a, MemorySegment b) {
        var mh$ = vips_start_many.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_start_many", out, a, b);
            }
            return (MemorySegment)mh$.invokeExact(out, a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_stop_many {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_stop_many");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_stop_many(void *seq, void *a, void *b)
     * }
     */
    public static FunctionDescriptor vips_stop_many$descriptor() {
        return vips_stop_many.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_stop_many(void *seq, void *a, void *b)
     * }
     */
    public static MethodHandle vips_stop_many$handle() {
        return vips_stop_many.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_stop_many(void *seq, void *a, void *b)
     * }
     */
    public static MemorySegment vips_stop_many$address() {
        return vips_stop_many.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_stop_many(void *seq, void *a, void *b)
     * }
     */
    public static int vips_stop_many(MemorySegment seq, MemorySegment a, MemorySegment b) {
        var mh$ = vips_stop_many.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_stop_many", seq, a, b);
            }
            return (int)mh$.invokeExact(seq, a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern VipsImage **vips_allocate_input_array(VipsImage *out, ...)
     * }
     */
    public static class vips_allocate_input_array {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_allocate_input_array");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_allocate_input_array(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern VipsImage **vips_allocate_input_array(VipsImage *out, ...)
         * }
         */
        public static vips_allocate_input_array makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_allocate_input_array(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment out, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_allocate_input_array", out, x1);
                }
                return (MemorySegment)spreader.invokeExact(out, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class vips_image_generate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_generate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_generate(VipsImage *image, VipsStartFn start_fn, VipsGenerateFn generate_fn, VipsStopFn stop_fn, void *a, void *b)
     * }
     */
    public static FunctionDescriptor vips_image_generate$descriptor() {
        return vips_image_generate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_generate(VipsImage *image, VipsStartFn start_fn, VipsGenerateFn generate_fn, VipsStopFn stop_fn, void *a, void *b)
     * }
     */
    public static MethodHandle vips_image_generate$handle() {
        return vips_image_generate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_generate(VipsImage *image, VipsStartFn start_fn, VipsGenerateFn generate_fn, VipsStopFn stop_fn, void *a, void *b)
     * }
     */
    public static MemorySegment vips_image_generate$address() {
        return vips_image_generate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_generate(VipsImage *image, VipsStartFn start_fn, VipsGenerateFn generate_fn, VipsStopFn stop_fn, void *a, void *b)
     * }
     */
    public static int vips_image_generate(MemorySegment image, MemorySegment start_fn, MemorySegment generate_fn, MemorySegment stop_fn, MemorySegment a, MemorySegment b) {
        var mh$ = vips_image_generate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_generate", image, start_fn, generate_fn, stop_fn, a, b);
            }
            return (int)mh$.invokeExact(image, start_fn, generate_fn, stop_fn, a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_pipeline_array {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_pipeline_array");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_pipeline_array(VipsImage *image, VipsDemandStyle hint, VipsImage **in)
     * }
     */
    public static FunctionDescriptor vips_image_pipeline_array$descriptor() {
        return vips_image_pipeline_array.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_pipeline_array(VipsImage *image, VipsDemandStyle hint, VipsImage **in)
     * }
     */
    public static MethodHandle vips_image_pipeline_array$handle() {
        return vips_image_pipeline_array.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_pipeline_array(VipsImage *image, VipsDemandStyle hint, VipsImage **in)
     * }
     */
    public static MemorySegment vips_image_pipeline_array$address() {
        return vips_image_pipeline_array.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_pipeline_array(VipsImage *image, VipsDemandStyle hint, VipsImage **in)
     * }
     */
    public static int vips_image_pipeline_array(MemorySegment image, int hint, MemorySegment in) {
        var mh$ = vips_image_pipeline_array.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_pipeline_array", image, hint, in);
            }
            return (int)mh$.invokeExact(image, hint, in);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_image_pipelinev(VipsImage *image, VipsDemandStyle hint, ...)
     * }
     */
    public static class vips_image_pipelinev {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_pipelinev");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_image_pipelinev(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_image_pipelinev(VipsImage *image, VipsDemandStyle hint, ...)
         * }
         */
        public static vips_image_pipelinev makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_image_pipelinev(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment image, int hint, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_image_pipelinev", image, hint, x2);
                }
                return (int)spreader.invokeExact(image, hint, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class vips_interpolate_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_interpolate_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_interpolate_get_type()
     * }
     */
    public static FunctionDescriptor vips_interpolate_get_type$descriptor() {
        return vips_interpolate_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_interpolate_get_type()
     * }
     */
    public static MethodHandle vips_interpolate_get_type$handle() {
        return vips_interpolate_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_interpolate_get_type()
     * }
     */
    public static MemorySegment vips_interpolate_get_type$address() {
        return vips_interpolate_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_interpolate_get_type()
     * }
     */
    public static long vips_interpolate_get_type() {
        var mh$ = vips_interpolate_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_interpolate_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_interpolate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_DOUBLE,
            vips_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_interpolate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_interpolate(VipsInterpolate *interpolate, void *out, VipsRegion *in, double x, double y)
     * }
     */
    public static FunctionDescriptor vips_interpolate$descriptor() {
        return vips_interpolate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_interpolate(VipsInterpolate *interpolate, void *out, VipsRegion *in, double x, double y)
     * }
     */
    public static MethodHandle vips_interpolate$handle() {
        return vips_interpolate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_interpolate(VipsInterpolate *interpolate, void *out, VipsRegion *in, double x, double y)
     * }
     */
    public static MemorySegment vips_interpolate$address() {
        return vips_interpolate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_interpolate(VipsInterpolate *interpolate, void *out, VipsRegion *in, double x, double y)
     * }
     */
    public static void vips_interpolate(MemorySegment interpolate, MemorySegment out, MemorySegment in, double x, double y) {
        var mh$ = vips_interpolate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_interpolate", interpolate, out, in, x, y);
            }
            mh$.invokeExact(interpolate, out, in, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_interpolate_get_method {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_interpolate_get_method");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsInterpolateMethod vips_interpolate_get_method(VipsInterpolate *interpolate)
     * }
     */
    public static FunctionDescriptor vips_interpolate_get_method$descriptor() {
        return vips_interpolate_get_method.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsInterpolateMethod vips_interpolate_get_method(VipsInterpolate *interpolate)
     * }
     */
    public static MethodHandle vips_interpolate_get_method$handle() {
        return vips_interpolate_get_method.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsInterpolateMethod vips_interpolate_get_method(VipsInterpolate *interpolate)
     * }
     */
    public static MemorySegment vips_interpolate_get_method$address() {
        return vips_interpolate_get_method.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsInterpolateMethod vips_interpolate_get_method(VipsInterpolate *interpolate)
     * }
     */
    public static MemorySegment vips_interpolate_get_method(MemorySegment interpolate) {
        var mh$ = vips_interpolate_get_method.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_interpolate_get_method", interpolate);
            }
            return (MemorySegment)mh$.invokeExact(interpolate);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_interpolate_get_window_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_interpolate_get_window_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_interpolate_get_window_size(VipsInterpolate *interpolate)
     * }
     */
    public static FunctionDescriptor vips_interpolate_get_window_size$descriptor() {
        return vips_interpolate_get_window_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_interpolate_get_window_size(VipsInterpolate *interpolate)
     * }
     */
    public static MethodHandle vips_interpolate_get_window_size$handle() {
        return vips_interpolate_get_window_size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_interpolate_get_window_size(VipsInterpolate *interpolate)
     * }
     */
    public static MemorySegment vips_interpolate_get_window_size$address() {
        return vips_interpolate_get_window_size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_interpolate_get_window_size(VipsInterpolate *interpolate)
     * }
     */
    public static int vips_interpolate_get_window_size(MemorySegment interpolate) {
        var mh$ = vips_interpolate_get_window_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_interpolate_get_window_size", interpolate);
            }
            return (int)mh$.invokeExact(interpolate);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_interpolate_get_window_offset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_interpolate_get_window_offset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_interpolate_get_window_offset(VipsInterpolate *interpolate)
     * }
     */
    public static FunctionDescriptor vips_interpolate_get_window_offset$descriptor() {
        return vips_interpolate_get_window_offset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_interpolate_get_window_offset(VipsInterpolate *interpolate)
     * }
     */
    public static MethodHandle vips_interpolate_get_window_offset$handle() {
        return vips_interpolate_get_window_offset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_interpolate_get_window_offset(VipsInterpolate *interpolate)
     * }
     */
    public static MemorySegment vips_interpolate_get_window_offset$address() {
        return vips_interpolate_get_window_offset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_interpolate_get_window_offset(VipsInterpolate *interpolate)
     * }
     */
    public static int vips_interpolate_get_window_offset(MemorySegment interpolate) {
        var mh$ = vips_interpolate_get_window_offset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_interpolate_get_window_offset", interpolate);
            }
            return (int)mh$.invokeExact(interpolate);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_interpolate_nearest_static {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_interpolate_nearest_static");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsInterpolate *vips_interpolate_nearest_static()
     * }
     */
    public static FunctionDescriptor vips_interpolate_nearest_static$descriptor() {
        return vips_interpolate_nearest_static.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsInterpolate *vips_interpolate_nearest_static()
     * }
     */
    public static MethodHandle vips_interpolate_nearest_static$handle() {
        return vips_interpolate_nearest_static.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsInterpolate *vips_interpolate_nearest_static()
     * }
     */
    public static MemorySegment vips_interpolate_nearest_static$address() {
        return vips_interpolate_nearest_static.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsInterpolate *vips_interpolate_nearest_static()
     * }
     */
    public static MemorySegment vips_interpolate_nearest_static() {
        var mh$ = vips_interpolate_nearest_static.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_interpolate_nearest_static");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_interpolate_bilinear_static {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_interpolate_bilinear_static");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsInterpolate *vips_interpolate_bilinear_static()
     * }
     */
    public static FunctionDescriptor vips_interpolate_bilinear_static$descriptor() {
        return vips_interpolate_bilinear_static.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsInterpolate *vips_interpolate_bilinear_static()
     * }
     */
    public static MethodHandle vips_interpolate_bilinear_static$handle() {
        return vips_interpolate_bilinear_static.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsInterpolate *vips_interpolate_bilinear_static()
     * }
     */
    public static MemorySegment vips_interpolate_bilinear_static$address() {
        return vips_interpolate_bilinear_static.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsInterpolate *vips_interpolate_bilinear_static()
     * }
     */
    public static MemorySegment vips_interpolate_bilinear_static() {
        var mh$ = vips_interpolate_bilinear_static.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_interpolate_bilinear_static");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_interpolate_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_interpolate_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsInterpolate *vips_interpolate_new(const char *nickname)
     * }
     */
    public static FunctionDescriptor vips_interpolate_new$descriptor() {
        return vips_interpolate_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsInterpolate *vips_interpolate_new(const char *nickname)
     * }
     */
    public static MethodHandle vips_interpolate_new$handle() {
        return vips_interpolate_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsInterpolate *vips_interpolate_new(const char *nickname)
     * }
     */
    public static MemorySegment vips_interpolate_new$address() {
        return vips_interpolate_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsInterpolate *vips_interpolate_new(const char *nickname)
     * }
     */
    public static MemorySegment vips_interpolate_new(MemorySegment nickname) {
        var mh$ = vips_interpolate_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_interpolate_new", nickname);
            }
            return (MemorySegment)mh$.invokeExact(nickname);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_g_mutex_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_g_mutex_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GMutex *vips_g_mutex_new()
     * }
     */
    public static FunctionDescriptor vips_g_mutex_new$descriptor() {
        return vips_g_mutex_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GMutex *vips_g_mutex_new()
     * }
     */
    public static MethodHandle vips_g_mutex_new$handle() {
        return vips_g_mutex_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GMutex *vips_g_mutex_new()
     * }
     */
    public static MemorySegment vips_g_mutex_new$address() {
        return vips_g_mutex_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GMutex *vips_g_mutex_new()
     * }
     */
    public static MemorySegment vips_g_mutex_new() {
        var mh$ = vips_g_mutex_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_g_mutex_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_g_mutex_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_g_mutex_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_g_mutex_free(GMutex *)
     * }
     */
    public static FunctionDescriptor vips_g_mutex_free$descriptor() {
        return vips_g_mutex_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_g_mutex_free(GMutex *)
     * }
     */
    public static MethodHandle vips_g_mutex_free$handle() {
        return vips_g_mutex_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_g_mutex_free(GMutex *)
     * }
     */
    public static MemorySegment vips_g_mutex_free$address() {
        return vips_g_mutex_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_g_mutex_free(GMutex *)
     * }
     */
    public static void vips_g_mutex_free(MemorySegment x0) {
        var mh$ = vips_g_mutex_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_g_mutex_free", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_g_cond_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_g_cond_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GCond *vips_g_cond_new()
     * }
     */
    public static FunctionDescriptor vips_g_cond_new$descriptor() {
        return vips_g_cond_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GCond *vips_g_cond_new()
     * }
     */
    public static MethodHandle vips_g_cond_new$handle() {
        return vips_g_cond_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GCond *vips_g_cond_new()
     * }
     */
    public static MemorySegment vips_g_cond_new$address() {
        return vips_g_cond_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GCond *vips_g_cond_new()
     * }
     */
    public static MemorySegment vips_g_cond_new() {
        var mh$ = vips_g_cond_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_g_cond_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_g_cond_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_g_cond_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_g_cond_free(GCond *)
     * }
     */
    public static FunctionDescriptor vips_g_cond_free$descriptor() {
        return vips_g_cond_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_g_cond_free(GCond *)
     * }
     */
    public static MethodHandle vips_g_cond_free$handle() {
        return vips_g_cond_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_g_cond_free(GCond *)
     * }
     */
    public static MemorySegment vips_g_cond_free$address() {
        return vips_g_cond_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_g_cond_free(GCond *)
     * }
     */
    public static void vips_g_cond_free(MemorySegment x0) {
        var mh$ = vips_g_cond_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_g_cond_free", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_g_thread_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_g_thread_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GThread *vips_g_thread_new(const char *, GThreadFunc, gpointer)
     * }
     */
    public static FunctionDescriptor vips_g_thread_new$descriptor() {
        return vips_g_thread_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GThread *vips_g_thread_new(const char *, GThreadFunc, gpointer)
     * }
     */
    public static MethodHandle vips_g_thread_new$handle() {
        return vips_g_thread_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GThread *vips_g_thread_new(const char *, GThreadFunc, gpointer)
     * }
     */
    public static MemorySegment vips_g_thread_new$address() {
        return vips_g_thread_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GThread *vips_g_thread_new(const char *, GThreadFunc, gpointer)
     * }
     */
    public static MemorySegment vips_g_thread_new(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = vips_g_thread_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_g_thread_new", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_thread_isvips {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_thread_isvips");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_thread_isvips()
     * }
     */
    public static FunctionDescriptor vips_thread_isvips$descriptor() {
        return vips_thread_isvips.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_thread_isvips()
     * }
     */
    public static MethodHandle vips_thread_isvips$handle() {
        return vips_thread_isvips.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_thread_isvips()
     * }
     */
    public static MemorySegment vips_thread_isvips$address() {
        return vips_thread_isvips.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_thread_isvips()
     * }
     */
    public static int vips_thread_isvips() {
        var mh$ = vips_thread_isvips.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_thread_isvips");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_thread_execute {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_thread_execute");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_thread_execute(const char *domain, GFunc func, gpointer data)
     * }
     */
    public static FunctionDescriptor vips_thread_execute$descriptor() {
        return vips_thread_execute.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_thread_execute(const char *domain, GFunc func, gpointer data)
     * }
     */
    public static MethodHandle vips_thread_execute$handle() {
        return vips_thread_execute.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_thread_execute(const char *domain, GFunc func, gpointer data)
     * }
     */
    public static MemorySegment vips_thread_execute$address() {
        return vips_thread_execute.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_thread_execute(const char *domain, GFunc func, gpointer data)
     * }
     */
    public static int vips_thread_execute(MemorySegment domain, MemorySegment func, MemorySegment data) {
        var mh$ = vips_thread_execute.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_thread_execute", domain, func, data);
            }
            return (int)mh$.invokeExact(domain, func, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_threadset_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_threadset_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VipsThreadset *vips_threadset_new(int max_threads)
     * }
     */
    public static FunctionDescriptor vips_threadset_new$descriptor() {
        return vips_threadset_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VipsThreadset *vips_threadset_new(int max_threads)
     * }
     */
    public static MethodHandle vips_threadset_new$handle() {
        return vips_threadset_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * VipsThreadset *vips_threadset_new(int max_threads)
     * }
     */
    public static MemorySegment vips_threadset_new$address() {
        return vips_threadset_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * VipsThreadset *vips_threadset_new(int max_threads)
     * }
     */
    public static MemorySegment vips_threadset_new(int max_threads) {
        var mh$ = vips_threadset_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_threadset_new", max_threads);
            }
            return (MemorySegment)mh$.invokeExact(max_threads);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_threadset_run {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_threadset_run");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int vips_threadset_run(VipsThreadset *set, const char *domain, GFunc func, gpointer data)
     * }
     */
    public static FunctionDescriptor vips_threadset_run$descriptor() {
        return vips_threadset_run.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int vips_threadset_run(VipsThreadset *set, const char *domain, GFunc func, gpointer data)
     * }
     */
    public static MethodHandle vips_threadset_run$handle() {
        return vips_threadset_run.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int vips_threadset_run(VipsThreadset *set, const char *domain, GFunc func, gpointer data)
     * }
     */
    public static MemorySegment vips_threadset_run$address() {
        return vips_threadset_run.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int vips_threadset_run(VipsThreadset *set, const char *domain, GFunc func, gpointer data)
     * }
     */
    public static int vips_threadset_run(MemorySegment set, MemorySegment domain, MemorySegment func, MemorySegment data) {
        var mh$ = vips_threadset_run.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_threadset_run", set, domain, func, data);
            }
            return (int)mh$.invokeExact(set, domain, func, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_threadset_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_threadset_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vips_threadset_free(VipsThreadset *set)
     * }
     */
    public static FunctionDescriptor vips_threadset_free$descriptor() {
        return vips_threadset_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vips_threadset_free(VipsThreadset *set)
     * }
     */
    public static MethodHandle vips_threadset_free$handle() {
        return vips_threadset_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void vips_threadset_free(VipsThreadset *set)
     * }
     */
    public static MemorySegment vips_threadset_free$address() {
        return vips_threadset_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void vips_threadset_free(VipsThreadset *set)
     * }
     */
    public static void vips_threadset_free(MemorySegment set) {
        var mh$ = vips_threadset_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_threadset_free", set);
            }
            mh$.invokeExact(set);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_semaphore_up {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_semaphore_up");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_semaphore_up(VipsSemaphore *s)
     * }
     */
    public static FunctionDescriptor vips_semaphore_up$descriptor() {
        return vips_semaphore_up.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_semaphore_up(VipsSemaphore *s)
     * }
     */
    public static MethodHandle vips_semaphore_up$handle() {
        return vips_semaphore_up.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_semaphore_up(VipsSemaphore *s)
     * }
     */
    public static MemorySegment vips_semaphore_up$address() {
        return vips_semaphore_up.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_semaphore_up(VipsSemaphore *s)
     * }
     */
    public static int vips_semaphore_up(MemorySegment s) {
        var mh$ = vips_semaphore_up.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_semaphore_up", s);
            }
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_semaphore_upn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_semaphore_upn");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_semaphore_upn(VipsSemaphore *s, int n)
     * }
     */
    public static FunctionDescriptor vips_semaphore_upn$descriptor() {
        return vips_semaphore_upn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_semaphore_upn(VipsSemaphore *s, int n)
     * }
     */
    public static MethodHandle vips_semaphore_upn$handle() {
        return vips_semaphore_upn.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_semaphore_upn(VipsSemaphore *s, int n)
     * }
     */
    public static MemorySegment vips_semaphore_upn$address() {
        return vips_semaphore_upn.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_semaphore_upn(VipsSemaphore *s, int n)
     * }
     */
    public static int vips_semaphore_upn(MemorySegment s, int n) {
        var mh$ = vips_semaphore_upn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_semaphore_upn", s, n);
            }
            return (int)mh$.invokeExact(s, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_semaphore_down {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_semaphore_down");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_semaphore_down(VipsSemaphore *s)
     * }
     */
    public static FunctionDescriptor vips_semaphore_down$descriptor() {
        return vips_semaphore_down.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_semaphore_down(VipsSemaphore *s)
     * }
     */
    public static MethodHandle vips_semaphore_down$handle() {
        return vips_semaphore_down.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_semaphore_down(VipsSemaphore *s)
     * }
     */
    public static MemorySegment vips_semaphore_down$address() {
        return vips_semaphore_down.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_semaphore_down(VipsSemaphore *s)
     * }
     */
    public static int vips_semaphore_down(MemorySegment s) {
        var mh$ = vips_semaphore_down.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_semaphore_down", s);
            }
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_semaphore_downn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_semaphore_downn");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_semaphore_downn(VipsSemaphore *s, int n)
     * }
     */
    public static FunctionDescriptor vips_semaphore_downn$descriptor() {
        return vips_semaphore_downn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_semaphore_downn(VipsSemaphore *s, int n)
     * }
     */
    public static MethodHandle vips_semaphore_downn$handle() {
        return vips_semaphore_downn.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_semaphore_downn(VipsSemaphore *s, int n)
     * }
     */
    public static MemorySegment vips_semaphore_downn$address() {
        return vips_semaphore_downn.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_semaphore_downn(VipsSemaphore *s, int n)
     * }
     */
    public static int vips_semaphore_downn(MemorySegment s, int n) {
        var mh$ = vips_semaphore_downn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_semaphore_downn", s, n);
            }
            return (int)mh$.invokeExact(s, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_semaphore_down_timeout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_semaphore_down_timeout");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_semaphore_down_timeout(VipsSemaphore *s, gint64 timeout)
     * }
     */
    public static FunctionDescriptor vips_semaphore_down_timeout$descriptor() {
        return vips_semaphore_down_timeout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_semaphore_down_timeout(VipsSemaphore *s, gint64 timeout)
     * }
     */
    public static MethodHandle vips_semaphore_down_timeout$handle() {
        return vips_semaphore_down_timeout.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_semaphore_down_timeout(VipsSemaphore *s, gint64 timeout)
     * }
     */
    public static MemorySegment vips_semaphore_down_timeout$address() {
        return vips_semaphore_down_timeout.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_semaphore_down_timeout(VipsSemaphore *s, gint64 timeout)
     * }
     */
    public static int vips_semaphore_down_timeout(MemorySegment s, long timeout) {
        var mh$ = vips_semaphore_down_timeout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_semaphore_down_timeout", s, timeout);
            }
            return (int)mh$.invokeExact(s, timeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_semaphore_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_semaphore_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_semaphore_destroy(VipsSemaphore *s)
     * }
     */
    public static FunctionDescriptor vips_semaphore_destroy$descriptor() {
        return vips_semaphore_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_semaphore_destroy(VipsSemaphore *s)
     * }
     */
    public static MethodHandle vips_semaphore_destroy$handle() {
        return vips_semaphore_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_semaphore_destroy(VipsSemaphore *s)
     * }
     */
    public static MemorySegment vips_semaphore_destroy$address() {
        return vips_semaphore_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_semaphore_destroy(VipsSemaphore *s)
     * }
     */
    public static void vips_semaphore_destroy(MemorySegment s) {
        var mh$ = vips_semaphore_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_semaphore_destroy", s);
            }
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_semaphore_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_semaphore_init");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_semaphore_init(VipsSemaphore *s, int v, char *name)
     * }
     */
    public static FunctionDescriptor vips_semaphore_init$descriptor() {
        return vips_semaphore_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_semaphore_init(VipsSemaphore *s, int v, char *name)
     * }
     */
    public static MethodHandle vips_semaphore_init$handle() {
        return vips_semaphore_init.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_semaphore_init(VipsSemaphore *s, int v, char *name)
     * }
     */
    public static MemorySegment vips_semaphore_init$address() {
        return vips_semaphore_init.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_semaphore_init(VipsSemaphore *s, int v, char *name)
     * }
     */
    public static void vips_semaphore_init(MemorySegment s, int v, MemorySegment name) {
        var mh$ = vips_semaphore_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_semaphore_init", s, v, name);
            }
            mh$.invokeExact(s, v, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_thread_state_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_thread_state_set");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *vips_thread_state_set(VipsObject *object, void *a, void *b)
     * }
     */
    public static FunctionDescriptor vips_thread_state_set$descriptor() {
        return vips_thread_state_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *vips_thread_state_set(VipsObject *object, void *a, void *b)
     * }
     */
    public static MethodHandle vips_thread_state_set$handle() {
        return vips_thread_state_set.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *vips_thread_state_set(VipsObject *object, void *a, void *b)
     * }
     */
    public static MemorySegment vips_thread_state_set$address() {
        return vips_thread_state_set.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *vips_thread_state_set(VipsObject *object, void *a, void *b)
     * }
     */
    public static MemorySegment vips_thread_state_set(MemorySegment object, MemorySegment a, MemorySegment b) {
        var mh$ = vips_thread_state_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_thread_state_set", object, a, b);
            }
            return (MemorySegment)mh$.invokeExact(object, a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_thread_state_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_thread_state_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_thread_state_get_type()
     * }
     */
    public static FunctionDescriptor vips_thread_state_get_type$descriptor() {
        return vips_thread_state_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_thread_state_get_type()
     * }
     */
    public static MethodHandle vips_thread_state_get_type$handle() {
        return vips_thread_state_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_thread_state_get_type()
     * }
     */
    public static MemorySegment vips_thread_state_get_type$address() {
        return vips_thread_state_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_thread_state_get_type()
     * }
     */
    public static long vips_thread_state_get_type() {
        var mh$ = vips_thread_state_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_thread_state_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_thread_state_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_thread_state_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsThreadState *vips_thread_state_new(VipsImage *im, void *a)
     * }
     */
    public static FunctionDescriptor vips_thread_state_new$descriptor() {
        return vips_thread_state_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsThreadState *vips_thread_state_new(VipsImage *im, void *a)
     * }
     */
    public static MethodHandle vips_thread_state_new$handle() {
        return vips_thread_state_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsThreadState *vips_thread_state_new(VipsImage *im, void *a)
     * }
     */
    public static MemorySegment vips_thread_state_new$address() {
        return vips_thread_state_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsThreadState *vips_thread_state_new(VipsImage *im, void *a)
     * }
     */
    public static MemorySegment vips_thread_state_new(MemorySegment im, MemorySegment a) {
        var mh$ = vips_thread_state_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_thread_state_new", im, a);
            }
            return (MemorySegment)mh$.invokeExact(im, a);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_threadpool_run {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_threadpool_run");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_threadpool_run(VipsImage *im, VipsThreadStartFn start, VipsThreadpoolAllocateFn allocate, VipsThreadpoolWorkFn work, VipsThreadpoolProgressFn progress, void *a)
     * }
     */
    public static FunctionDescriptor vips_threadpool_run$descriptor() {
        return vips_threadpool_run.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_threadpool_run(VipsImage *im, VipsThreadStartFn start, VipsThreadpoolAllocateFn allocate, VipsThreadpoolWorkFn work, VipsThreadpoolProgressFn progress, void *a)
     * }
     */
    public static MethodHandle vips_threadpool_run$handle() {
        return vips_threadpool_run.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_threadpool_run(VipsImage *im, VipsThreadStartFn start, VipsThreadpoolAllocateFn allocate, VipsThreadpoolWorkFn work, VipsThreadpoolProgressFn progress, void *a)
     * }
     */
    public static MemorySegment vips_threadpool_run$address() {
        return vips_threadpool_run.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_threadpool_run(VipsImage *im, VipsThreadStartFn start, VipsThreadpoolAllocateFn allocate, VipsThreadpoolWorkFn work, VipsThreadpoolProgressFn progress, void *a)
     * }
     */
    public static int vips_threadpool_run(MemorySegment im, MemorySegment start, MemorySegment allocate, MemorySegment work, MemorySegment progress, MemorySegment a) {
        var mh$ = vips_threadpool_run.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_threadpool_run", im, start, allocate, work, progress, a);
            }
            return (int)mh$.invokeExact(im, start, allocate, work, progress, a);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_get_tile_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_get_tile_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_get_tile_size(VipsImage *im, int *tile_width, int *tile_height, int *n_lines)
     * }
     */
    public static FunctionDescriptor vips_get_tile_size$descriptor() {
        return vips_get_tile_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_get_tile_size(VipsImage *im, int *tile_width, int *tile_height, int *n_lines)
     * }
     */
    public static MethodHandle vips_get_tile_size$handle() {
        return vips_get_tile_size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_get_tile_size(VipsImage *im, int *tile_width, int *tile_height, int *n_lines)
     * }
     */
    public static MemorySegment vips_get_tile_size$address() {
        return vips_get_tile_size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_get_tile_size(VipsImage *im, int *tile_width, int *tile_height, int *n_lines)
     * }
     */
    public static void vips_get_tile_size(MemorySegment im, MemorySegment tile_width, MemorySegment tile_height, MemorySegment n_lines) {
        var mh$ = vips_get_tile_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_get_tile_size", im, tile_width, tile_height, n_lines);
            }
            mh$.invokeExact(im, tile_width, tile_height, n_lines);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_format_sizeof {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG_LONG,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_format_sizeof");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint64 vips_format_sizeof(VipsBandFormat format)
     * }
     */
    public static FunctionDescriptor vips_format_sizeof$descriptor() {
        return vips_format_sizeof.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint64 vips_format_sizeof(VipsBandFormat format)
     * }
     */
    public static MethodHandle vips_format_sizeof$handle() {
        return vips_format_sizeof.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern guint64 vips_format_sizeof(VipsBandFormat format)
     * }
     */
    public static MemorySegment vips_format_sizeof$address() {
        return vips_format_sizeof.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern guint64 vips_format_sizeof(VipsBandFormat format)
     * }
     */
    public static long vips_format_sizeof(int format) {
        var mh$ = vips_format_sizeof.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_format_sizeof", format);
            }
            return (long)mh$.invokeExact(format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_format_sizeof_unsafe {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG_LONG,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_format_sizeof_unsafe");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint64 vips_format_sizeof_unsafe(VipsBandFormat format)
     * }
     */
    public static FunctionDescriptor vips_format_sizeof_unsafe$descriptor() {
        return vips_format_sizeof_unsafe.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint64 vips_format_sizeof_unsafe(VipsBandFormat format)
     * }
     */
    public static MethodHandle vips_format_sizeof_unsafe$handle() {
        return vips_format_sizeof_unsafe.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern guint64 vips_format_sizeof_unsafe(VipsBandFormat format)
     * }
     */
    public static MemorySegment vips_format_sizeof_unsafe$address() {
        return vips_format_sizeof_unsafe.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern guint64 vips_format_sizeof_unsafe(VipsBandFormat format)
     * }
     */
    public static long vips_format_sizeof_unsafe(int format) {
        var mh$ = vips_format_sizeof_unsafe.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_format_sizeof_unsafe", format);
            }
            return (long)mh$.invokeExact(format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_interpretation_max_alpha {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_DOUBLE,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_interpretation_max_alpha");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double vips_interpretation_max_alpha(VipsInterpretation interpretation)
     * }
     */
    public static FunctionDescriptor vips_interpretation_max_alpha$descriptor() {
        return vips_interpretation_max_alpha.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double vips_interpretation_max_alpha(VipsInterpretation interpretation)
     * }
     */
    public static MethodHandle vips_interpretation_max_alpha$handle() {
        return vips_interpretation_max_alpha.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double vips_interpretation_max_alpha(VipsInterpretation interpretation)
     * }
     */
    public static MemorySegment vips_interpretation_max_alpha$address() {
        return vips_interpretation_max_alpha.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double vips_interpretation_max_alpha(VipsInterpretation interpretation)
     * }
     */
    public static double vips_interpretation_max_alpha(int interpretation) {
        var mh$ = vips_interpretation_max_alpha.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_interpretation_max_alpha", interpretation);
            }
            return (double)mh$.invokeExact(interpretation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_get_width");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_get_width(const VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_get_width$descriptor() {
        return vips_image_get_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_get_width(const VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_get_width$handle() {
        return vips_image_get_width.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_get_width(const VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_width$address() {
        return vips_image_get_width.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_get_width(const VipsImage *image)
     * }
     */
    public static int vips_image_get_width(MemorySegment image) {
        var mh$ = vips_image_get_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_width", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_height {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_get_height");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_get_height(const VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_get_height$descriptor() {
        return vips_image_get_height.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_get_height(const VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_get_height$handle() {
        return vips_image_get_height.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_get_height(const VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_height$address() {
        return vips_image_get_height.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_get_height(const VipsImage *image)
     * }
     */
    public static int vips_image_get_height(MemorySegment image) {
        var mh$ = vips_image_get_height.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_height", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_bands {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_get_bands");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_get_bands(const VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_get_bands$descriptor() {
        return vips_image_get_bands.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_get_bands(const VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_get_bands$handle() {
        return vips_image_get_bands.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_get_bands(const VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_bands$address() {
        return vips_image_get_bands.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_get_bands(const VipsImage *image)
     * }
     */
    public static int vips_image_get_bands(MemorySegment image) {
        var mh$ = vips_image_get_bands.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_bands", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_format {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_get_format");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsBandFormat vips_image_get_format(const VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_get_format$descriptor() {
        return vips_image_get_format.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsBandFormat vips_image_get_format(const VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_get_format$handle() {
        return vips_image_get_format.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsBandFormat vips_image_get_format(const VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_format$address() {
        return vips_image_get_format.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsBandFormat vips_image_get_format(const VipsImage *image)
     * }
     */
    public static int vips_image_get_format(MemorySegment image) {
        var mh$ = vips_image_get_format.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_format", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_format_max {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_DOUBLE,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_get_format_max");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double vips_image_get_format_max(VipsBandFormat format)
     * }
     */
    public static FunctionDescriptor vips_image_get_format_max$descriptor() {
        return vips_image_get_format_max.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double vips_image_get_format_max(VipsBandFormat format)
     * }
     */
    public static MethodHandle vips_image_get_format_max$handle() {
        return vips_image_get_format_max.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double vips_image_get_format_max(VipsBandFormat format)
     * }
     */
    public static MemorySegment vips_image_get_format_max$address() {
        return vips_image_get_format_max.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double vips_image_get_format_max(VipsBandFormat format)
     * }
     */
    public static double vips_image_get_format_max(int format) {
        var mh$ = vips_image_get_format_max.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_format_max", format);
            }
            return (double)mh$.invokeExact(format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_guess_format {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_guess_format");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsBandFormat vips_image_guess_format(const VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_guess_format$descriptor() {
        return vips_image_guess_format.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsBandFormat vips_image_guess_format(const VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_guess_format$handle() {
        return vips_image_guess_format.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsBandFormat vips_image_guess_format(const VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_guess_format$address() {
        return vips_image_guess_format.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsBandFormat vips_image_guess_format(const VipsImage *image)
     * }
     */
    public static int vips_image_guess_format(MemorySegment image) {
        var mh$ = vips_image_guess_format.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_guess_format", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_coding {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_get_coding");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsCoding vips_image_get_coding(const VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_get_coding$descriptor() {
        return vips_image_get_coding.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsCoding vips_image_get_coding(const VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_get_coding$handle() {
        return vips_image_get_coding.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsCoding vips_image_get_coding(const VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_coding$address() {
        return vips_image_get_coding.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsCoding vips_image_get_coding(const VipsImage *image)
     * }
     */
    public static int vips_image_get_coding(MemorySegment image) {
        var mh$ = vips_image_get_coding.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_coding", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_interpretation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_get_interpretation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsInterpretation vips_image_get_interpretation(const VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_get_interpretation$descriptor() {
        return vips_image_get_interpretation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsInterpretation vips_image_get_interpretation(const VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_get_interpretation$handle() {
        return vips_image_get_interpretation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsInterpretation vips_image_get_interpretation(const VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_interpretation$address() {
        return vips_image_get_interpretation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsInterpretation vips_image_get_interpretation(const VipsImage *image)
     * }
     */
    public static int vips_image_get_interpretation(MemorySegment image) {
        var mh$ = vips_image_get_interpretation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_interpretation", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_guess_interpretation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_guess_interpretation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsInterpretation vips_image_guess_interpretation(const VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_guess_interpretation$descriptor() {
        return vips_image_guess_interpretation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsInterpretation vips_image_guess_interpretation(const VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_guess_interpretation$handle() {
        return vips_image_guess_interpretation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsInterpretation vips_image_guess_interpretation(const VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_guess_interpretation$address() {
        return vips_image_guess_interpretation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsInterpretation vips_image_guess_interpretation(const VipsImage *image)
     * }
     */
    public static int vips_image_guess_interpretation(MemorySegment image) {
        var mh$ = vips_image_guess_interpretation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_guess_interpretation", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_xres {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_DOUBLE,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_get_xres");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double vips_image_get_xres(const VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_get_xres$descriptor() {
        return vips_image_get_xres.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double vips_image_get_xres(const VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_get_xres$handle() {
        return vips_image_get_xres.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double vips_image_get_xres(const VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_xres$address() {
        return vips_image_get_xres.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double vips_image_get_xres(const VipsImage *image)
     * }
     */
    public static double vips_image_get_xres(MemorySegment image) {
        var mh$ = vips_image_get_xres.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_xres", image);
            }
            return (double)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_yres {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_DOUBLE,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_get_yres");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double vips_image_get_yres(const VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_get_yres$descriptor() {
        return vips_image_get_yres.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double vips_image_get_yres(const VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_get_yres$handle() {
        return vips_image_get_yres.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double vips_image_get_yres(const VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_yres$address() {
        return vips_image_get_yres.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double vips_image_get_yres(const VipsImage *image)
     * }
     */
    public static double vips_image_get_yres(MemorySegment image) {
        var mh$ = vips_image_get_yres.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_yres", image);
            }
            return (double)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_xoffset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_get_xoffset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_get_xoffset(const VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_get_xoffset$descriptor() {
        return vips_image_get_xoffset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_get_xoffset(const VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_get_xoffset$handle() {
        return vips_image_get_xoffset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_get_xoffset(const VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_xoffset$address() {
        return vips_image_get_xoffset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_get_xoffset(const VipsImage *image)
     * }
     */
    public static int vips_image_get_xoffset(MemorySegment image) {
        var mh$ = vips_image_get_xoffset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_xoffset", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_yoffset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_get_yoffset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_get_yoffset(const VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_get_yoffset$descriptor() {
        return vips_image_get_yoffset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_get_yoffset(const VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_get_yoffset$handle() {
        return vips_image_get_yoffset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_get_yoffset(const VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_yoffset$address() {
        return vips_image_get_yoffset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_get_yoffset(const VipsImage *image)
     * }
     */
    public static int vips_image_get_yoffset(MemorySegment image) {
        var mh$ = vips_image_get_yoffset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_yoffset", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_filename {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_get_filename");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *vips_image_get_filename(const VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_get_filename$descriptor() {
        return vips_image_get_filename.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *vips_image_get_filename(const VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_get_filename$handle() {
        return vips_image_get_filename.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *vips_image_get_filename(const VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_filename$address() {
        return vips_image_get_filename.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *vips_image_get_filename(const VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_filename(MemorySegment image) {
        var mh$ = vips_image_get_filename.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_filename", image);
            }
            return (MemorySegment)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_get_mode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *vips_image_get_mode(const VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_get_mode$descriptor() {
        return vips_image_get_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *vips_image_get_mode(const VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_get_mode$handle() {
        return vips_image_get_mode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *vips_image_get_mode(const VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_mode$address() {
        return vips_image_get_mode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *vips_image_get_mode(const VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_mode(MemorySegment image) {
        var mh$ = vips_image_get_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_mode", image);
            }
            return (MemorySegment)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_scale {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_DOUBLE,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_get_scale");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double vips_image_get_scale(const VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_get_scale$descriptor() {
        return vips_image_get_scale.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double vips_image_get_scale(const VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_get_scale$handle() {
        return vips_image_get_scale.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double vips_image_get_scale(const VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_scale$address() {
        return vips_image_get_scale.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double vips_image_get_scale(const VipsImage *image)
     * }
     */
    public static double vips_image_get_scale(MemorySegment image) {
        var mh$ = vips_image_get_scale.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_scale", image);
            }
            return (double)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_offset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_DOUBLE,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_get_offset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double vips_image_get_offset(const VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_get_offset$descriptor() {
        return vips_image_get_offset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double vips_image_get_offset(const VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_get_offset$handle() {
        return vips_image_get_offset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double vips_image_get_offset(const VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_offset$address() {
        return vips_image_get_offset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double vips_image_get_offset(const VipsImage *image)
     * }
     */
    public static double vips_image_get_offset(MemorySegment image) {
        var mh$ = vips_image_get_offset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_offset", image);
            }
            return (double)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_page_height {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_get_page_height");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_get_page_height(VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_get_page_height$descriptor() {
        return vips_image_get_page_height.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_get_page_height(VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_get_page_height$handle() {
        return vips_image_get_page_height.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_get_page_height(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_page_height$address() {
        return vips_image_get_page_height.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_get_page_height(VipsImage *image)
     * }
     */
    public static int vips_image_get_page_height(MemorySegment image) {
        var mh$ = vips_image_get_page_height.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_page_height", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_n_pages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_get_n_pages");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_get_n_pages(VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_get_n_pages$descriptor() {
        return vips_image_get_n_pages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_get_n_pages(VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_get_n_pages$handle() {
        return vips_image_get_n_pages.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_get_n_pages(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_n_pages$address() {
        return vips_image_get_n_pages.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_get_n_pages(VipsImage *image)
     * }
     */
    public static int vips_image_get_n_pages(MemorySegment image) {
        var mh$ = vips_image_get_n_pages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_n_pages", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_n_subifds {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_get_n_subifds");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_get_n_subifds(VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_get_n_subifds$descriptor() {
        return vips_image_get_n_subifds.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_get_n_subifds(VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_get_n_subifds$handle() {
        return vips_image_get_n_subifds.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_get_n_subifds(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_n_subifds$address() {
        return vips_image_get_n_subifds.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_get_n_subifds(VipsImage *image)
     * }
     */
    public static int vips_image_get_n_subifds(MemorySegment image) {
        var mh$ = vips_image_get_n_subifds.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_n_subifds", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_orientation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_get_orientation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_get_orientation(VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_get_orientation$descriptor() {
        return vips_image_get_orientation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_get_orientation(VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_get_orientation$handle() {
        return vips_image_get_orientation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_get_orientation(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_orientation$address() {
        return vips_image_get_orientation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_get_orientation(VipsImage *image)
     * }
     */
    public static int vips_image_get_orientation(MemorySegment image) {
        var mh$ = vips_image_get_orientation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_orientation", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_orientation_swap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_get_orientation_swap");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_image_get_orientation_swap(VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_get_orientation_swap$descriptor() {
        return vips_image_get_orientation_swap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_image_get_orientation_swap(VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_get_orientation_swap$handle() {
        return vips_image_get_orientation_swap.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_image_get_orientation_swap(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_orientation_swap$address() {
        return vips_image_get_orientation_swap.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_image_get_orientation_swap(VipsImage *image)
     * }
     */
    public static int vips_image_get_orientation_swap(MemorySegment image) {
        var mh$ = vips_image_get_orientation_swap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_orientation_swap", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_concurrency {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_get_concurrency");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_get_concurrency(VipsImage *image, int default_concurrency)
     * }
     */
    public static FunctionDescriptor vips_image_get_concurrency$descriptor() {
        return vips_image_get_concurrency.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_get_concurrency(VipsImage *image, int default_concurrency)
     * }
     */
    public static MethodHandle vips_image_get_concurrency$handle() {
        return vips_image_get_concurrency.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_get_concurrency(VipsImage *image, int default_concurrency)
     * }
     */
    public static MemorySegment vips_image_get_concurrency$address() {
        return vips_image_get_concurrency.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_get_concurrency(VipsImage *image, int default_concurrency)
     * }
     */
    public static int vips_image_get_concurrency(MemorySegment image, int default_concurrency) {
        var mh$ = vips_image_get_concurrency.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_concurrency", image, default_concurrency);
            }
            return (int)mh$.invokeExact(image, default_concurrency);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_get_data");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const void *vips_image_get_data(VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_get_data$descriptor() {
        return vips_image_get_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const void *vips_image_get_data(VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_get_data$handle() {
        return vips_image_get_data.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const void *vips_image_get_data(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_data$address() {
        return vips_image_get_data.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const void *vips_image_get_data(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_data(MemorySegment image) {
        var mh$ = vips_image_get_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_data", image);
            }
            return (MemorySegment)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_init_fields {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_INT,
            vips_h.C_INT,
            vips_h.C_INT,
            vips_h.C_INT,
            vips_h.C_INT,
            vips_h.C_INT,
            vips_h.C_DOUBLE,
            vips_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_init_fields");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_image_init_fields(VipsImage *image, int xsize, int ysize, int bands, VipsBandFormat format, VipsCoding coding, VipsInterpretation interpretation, double xres, double yres)
     * }
     */
    public static FunctionDescriptor vips_image_init_fields$descriptor() {
        return vips_image_init_fields.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_image_init_fields(VipsImage *image, int xsize, int ysize, int bands, VipsBandFormat format, VipsCoding coding, VipsInterpretation interpretation, double xres, double yres)
     * }
     */
    public static MethodHandle vips_image_init_fields$handle() {
        return vips_image_init_fields.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_image_init_fields(VipsImage *image, int xsize, int ysize, int bands, VipsBandFormat format, VipsCoding coding, VipsInterpretation interpretation, double xres, double yres)
     * }
     */
    public static MemorySegment vips_image_init_fields$address() {
        return vips_image_init_fields.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_image_init_fields(VipsImage *image, int xsize, int ysize, int bands, VipsBandFormat format, VipsCoding coding, VipsInterpretation interpretation, double xres, double yres)
     * }
     */
    public static void vips_image_init_fields(MemorySegment image, int xsize, int ysize, int bands, int format, int coding, int interpretation, double xres, double yres) {
        var mh$ = vips_image_init_fields.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_init_fields", image, xsize, ysize, bands, format, coding, interpretation, xres, yres);
            }
            mh$.invokeExact(image, xsize, ysize, bands, format, coding, interpretation, xres, yres);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_set");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_image_set(VipsImage *image, const char *name, GValue *value)
     * }
     */
    public static FunctionDescriptor vips_image_set$descriptor() {
        return vips_image_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_image_set(VipsImage *image, const char *name, GValue *value)
     * }
     */
    public static MethodHandle vips_image_set$handle() {
        return vips_image_set.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_image_set(VipsImage *image, const char *name, GValue *value)
     * }
     */
    public static MemorySegment vips_image_set$address() {
        return vips_image_set.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_image_set(VipsImage *image, const char *name, GValue *value)
     * }
     */
    public static void vips_image_set(MemorySegment image, MemorySegment name, MemorySegment value) {
        var mh$ = vips_image_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_set", image, name, value);
            }
            mh$.invokeExact(image, name, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_get");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_get(const VipsImage *image, const char *name, GValue *value_copy)
     * }
     */
    public static FunctionDescriptor vips_image_get$descriptor() {
        return vips_image_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_get(const VipsImage *image, const char *name, GValue *value_copy)
     * }
     */
    public static MethodHandle vips_image_get$handle() {
        return vips_image_get.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_get(const VipsImage *image, const char *name, GValue *value_copy)
     * }
     */
    public static MemorySegment vips_image_get$address() {
        return vips_image_get.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_get(const VipsImage *image, const char *name, GValue *value_copy)
     * }
     */
    public static int vips_image_get(MemorySegment image, MemorySegment name, MemorySegment value_copy) {
        var mh$ = vips_image_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get", image, name, value_copy);
            }
            return (int)mh$.invokeExact(image, name, value_copy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_as_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_get_as_string");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_get_as_string(const VipsImage *image, const char *name, char **out)
     * }
     */
    public static FunctionDescriptor vips_image_get_as_string$descriptor() {
        return vips_image_get_as_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_get_as_string(const VipsImage *image, const char *name, char **out)
     * }
     */
    public static MethodHandle vips_image_get_as_string$handle() {
        return vips_image_get_as_string.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_get_as_string(const VipsImage *image, const char *name, char **out)
     * }
     */
    public static MemorySegment vips_image_get_as_string$address() {
        return vips_image_get_as_string.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_get_as_string(const VipsImage *image, const char *name, char **out)
     * }
     */
    public static int vips_image_get_as_string(MemorySegment image, MemorySegment name, MemorySegment out) {
        var mh$ = vips_image_get_as_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_as_string", image, name, out);
            }
            return (int)mh$.invokeExact(image, name, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_typeof {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_get_typeof");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_image_get_typeof(const VipsImage *image, const char *name)
     * }
     */
    public static FunctionDescriptor vips_image_get_typeof$descriptor() {
        return vips_image_get_typeof.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_image_get_typeof(const VipsImage *image, const char *name)
     * }
     */
    public static MethodHandle vips_image_get_typeof$handle() {
        return vips_image_get_typeof.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_image_get_typeof(const VipsImage *image, const char *name)
     * }
     */
    public static MemorySegment vips_image_get_typeof$address() {
        return vips_image_get_typeof.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_image_get_typeof(const VipsImage *image, const char *name)
     * }
     */
    public static long vips_image_get_typeof(MemorySegment image, MemorySegment name) {
        var mh$ = vips_image_get_typeof.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_typeof", image, name);
            }
            return (long)mh$.invokeExact(image, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_remove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_remove");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_image_remove(VipsImage *image, const char *name)
     * }
     */
    public static FunctionDescriptor vips_image_remove$descriptor() {
        return vips_image_remove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_image_remove(VipsImage *image, const char *name)
     * }
     */
    public static MethodHandle vips_image_remove$handle() {
        return vips_image_remove.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_image_remove(VipsImage *image, const char *name)
     * }
     */
    public static MemorySegment vips_image_remove$address() {
        return vips_image_remove.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_image_remove(VipsImage *image, const char *name)
     * }
     */
    public static int vips_image_remove(MemorySegment image, MemorySegment name) {
        var mh$ = vips_image_remove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_remove", image, name);
            }
            return (int)mh$.invokeExact(image, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_map {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_map");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *vips_image_map(VipsImage *image, VipsImageMapFn fn, void *a)
     * }
     */
    public static FunctionDescriptor vips_image_map$descriptor() {
        return vips_image_map.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *vips_image_map(VipsImage *image, VipsImageMapFn fn, void *a)
     * }
     */
    public static MethodHandle vips_image_map$handle() {
        return vips_image_map.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *vips_image_map(VipsImage *image, VipsImageMapFn fn, void *a)
     * }
     */
    public static MemorySegment vips_image_map$address() {
        return vips_image_map.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *vips_image_map(VipsImage *image, VipsImageMapFn fn, void *a)
     * }
     */
    public static MemorySegment vips_image_map(MemorySegment image, MemorySegment fn, MemorySegment a) {
        var mh$ = vips_image_map.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_map", image, fn, a);
            }
            return (MemorySegment)mh$.invokeExact(image, fn, a);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_fields {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_get_fields");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar **vips_image_get_fields(VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_get_fields$descriptor() {
        return vips_image_get_fields.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar **vips_image_get_fields(VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_get_fields$handle() {
        return vips_image_get_fields.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gchar **vips_image_get_fields(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_fields$address() {
        return vips_image_get_fields.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gchar **vips_image_get_fields(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_fields(MemorySegment image) {
        var mh$ = vips_image_get_fields.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_fields", image);
            }
            return (MemorySegment)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_set_area {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_set_area");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_image_set_area(VipsImage *image, const char *name, VipsCallbackFn free_fn, void *data)
     * }
     */
    public static FunctionDescriptor vips_image_set_area$descriptor() {
        return vips_image_set_area.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_image_set_area(VipsImage *image, const char *name, VipsCallbackFn free_fn, void *data)
     * }
     */
    public static MethodHandle vips_image_set_area$handle() {
        return vips_image_set_area.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_image_set_area(VipsImage *image, const char *name, VipsCallbackFn free_fn, void *data)
     * }
     */
    public static MemorySegment vips_image_set_area$address() {
        return vips_image_set_area.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_image_set_area(VipsImage *image, const char *name, VipsCallbackFn free_fn, void *data)
     * }
     */
    public static void vips_image_set_area(MemorySegment image, MemorySegment name, MemorySegment free_fn, MemorySegment data) {
        var mh$ = vips_image_set_area.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_set_area", image, name, free_fn, data);
            }
            mh$.invokeExact(image, name, free_fn, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_area {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_get_area");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_get_area(const VipsImage *image, const char *name, const void **data)
     * }
     */
    public static FunctionDescriptor vips_image_get_area$descriptor() {
        return vips_image_get_area.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_get_area(const VipsImage *image, const char *name, const void **data)
     * }
     */
    public static MethodHandle vips_image_get_area$handle() {
        return vips_image_get_area.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_get_area(const VipsImage *image, const char *name, const void **data)
     * }
     */
    public static MemorySegment vips_image_get_area$address() {
        return vips_image_get_area.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_get_area(const VipsImage *image, const char *name, const void **data)
     * }
     */
    public static int vips_image_get_area(MemorySegment image, MemorySegment name, MemorySegment data) {
        var mh$ = vips_image_get_area.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_area", image, name, data);
            }
            return (int)mh$.invokeExact(image, name, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_set_blob {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_LONG
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_set_blob");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_image_set_blob(VipsImage *image, const char *name, VipsCallbackFn free_fn, const void *data, size_t length)
     * }
     */
    public static FunctionDescriptor vips_image_set_blob$descriptor() {
        return vips_image_set_blob.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_image_set_blob(VipsImage *image, const char *name, VipsCallbackFn free_fn, const void *data, size_t length)
     * }
     */
    public static MethodHandle vips_image_set_blob$handle() {
        return vips_image_set_blob.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_image_set_blob(VipsImage *image, const char *name, VipsCallbackFn free_fn, const void *data, size_t length)
     * }
     */
    public static MemorySegment vips_image_set_blob$address() {
        return vips_image_set_blob.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_image_set_blob(VipsImage *image, const char *name, VipsCallbackFn free_fn, const void *data, size_t length)
     * }
     */
    public static void vips_image_set_blob(MemorySegment image, MemorySegment name, MemorySegment free_fn, MemorySegment data, long length) {
        var mh$ = vips_image_set_blob.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_set_blob", image, name, free_fn, data, length);
            }
            mh$.invokeExact(image, name, free_fn, data, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_set_blob_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_LONG
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_set_blob_copy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_image_set_blob_copy(VipsImage *image, const char *name, const void *data, size_t length)
     * }
     */
    public static FunctionDescriptor vips_image_set_blob_copy$descriptor() {
        return vips_image_set_blob_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_image_set_blob_copy(VipsImage *image, const char *name, const void *data, size_t length)
     * }
     */
    public static MethodHandle vips_image_set_blob_copy$handle() {
        return vips_image_set_blob_copy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_image_set_blob_copy(VipsImage *image, const char *name, const void *data, size_t length)
     * }
     */
    public static MemorySegment vips_image_set_blob_copy$address() {
        return vips_image_set_blob_copy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_image_set_blob_copy(VipsImage *image, const char *name, const void *data, size_t length)
     * }
     */
    public static void vips_image_set_blob_copy(MemorySegment image, MemorySegment name, MemorySegment data, long length) {
        var mh$ = vips_image_set_blob_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_set_blob_copy", image, name, data, length);
            }
            mh$.invokeExact(image, name, data, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_blob {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_get_blob");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_get_blob(const VipsImage *image, const char *name, const void **data, size_t *length)
     * }
     */
    public static FunctionDescriptor vips_image_get_blob$descriptor() {
        return vips_image_get_blob.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_get_blob(const VipsImage *image, const char *name, const void **data, size_t *length)
     * }
     */
    public static MethodHandle vips_image_get_blob$handle() {
        return vips_image_get_blob.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_get_blob(const VipsImage *image, const char *name, const void **data, size_t *length)
     * }
     */
    public static MemorySegment vips_image_get_blob$address() {
        return vips_image_get_blob.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_get_blob(const VipsImage *image, const char *name, const void **data, size_t *length)
     * }
     */
    public static int vips_image_get_blob(MemorySegment image, MemorySegment name, MemorySegment data, MemorySegment length) {
        var mh$ = vips_image_get_blob.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_blob", image, name, data, length);
            }
            return (int)mh$.invokeExact(image, name, data, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_int {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_get_int");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_get_int(const VipsImage *image, const char *name, int *out)
     * }
     */
    public static FunctionDescriptor vips_image_get_int$descriptor() {
        return vips_image_get_int.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_get_int(const VipsImage *image, const char *name, int *out)
     * }
     */
    public static MethodHandle vips_image_get_int$handle() {
        return vips_image_get_int.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_get_int(const VipsImage *image, const char *name, int *out)
     * }
     */
    public static MemorySegment vips_image_get_int$address() {
        return vips_image_get_int.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_get_int(const VipsImage *image, const char *name, int *out)
     * }
     */
    public static int vips_image_get_int(MemorySegment image, MemorySegment name, MemorySegment out) {
        var mh$ = vips_image_get_int.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_int", image, name, out);
            }
            return (int)mh$.invokeExact(image, name, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_set_int {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_set_int");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_image_set_int(VipsImage *image, const char *name, int i)
     * }
     */
    public static FunctionDescriptor vips_image_set_int$descriptor() {
        return vips_image_set_int.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_image_set_int(VipsImage *image, const char *name, int i)
     * }
     */
    public static MethodHandle vips_image_set_int$handle() {
        return vips_image_set_int.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_image_set_int(VipsImage *image, const char *name, int i)
     * }
     */
    public static MemorySegment vips_image_set_int$address() {
        return vips_image_set_int.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_image_set_int(VipsImage *image, const char *name, int i)
     * }
     */
    public static void vips_image_set_int(MemorySegment image, MemorySegment name, int i) {
        var mh$ = vips_image_set_int.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_set_int", image, name, i);
            }
            mh$.invokeExact(image, name, i);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_double {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_get_double");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_get_double(const VipsImage *image, const char *name, double *out)
     * }
     */
    public static FunctionDescriptor vips_image_get_double$descriptor() {
        return vips_image_get_double.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_get_double(const VipsImage *image, const char *name, double *out)
     * }
     */
    public static MethodHandle vips_image_get_double$handle() {
        return vips_image_get_double.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_get_double(const VipsImage *image, const char *name, double *out)
     * }
     */
    public static MemorySegment vips_image_get_double$address() {
        return vips_image_get_double.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_get_double(const VipsImage *image, const char *name, double *out)
     * }
     */
    public static int vips_image_get_double(MemorySegment image, MemorySegment name, MemorySegment out) {
        var mh$ = vips_image_get_double.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_double", image, name, out);
            }
            return (int)mh$.invokeExact(image, name, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_set_double {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_set_double");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_image_set_double(VipsImage *image, const char *name, double d)
     * }
     */
    public static FunctionDescriptor vips_image_set_double$descriptor() {
        return vips_image_set_double.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_image_set_double(VipsImage *image, const char *name, double d)
     * }
     */
    public static MethodHandle vips_image_set_double$handle() {
        return vips_image_set_double.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_image_set_double(VipsImage *image, const char *name, double d)
     * }
     */
    public static MemorySegment vips_image_set_double$address() {
        return vips_image_set_double.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_image_set_double(VipsImage *image, const char *name, double d)
     * }
     */
    public static void vips_image_set_double(MemorySegment image, MemorySegment name, double d) {
        var mh$ = vips_image_set_double.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_set_double", image, name, d);
            }
            mh$.invokeExact(image, name, d);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_get_string");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_get_string(const VipsImage *image, const char *name, const char **out)
     * }
     */
    public static FunctionDescriptor vips_image_get_string$descriptor() {
        return vips_image_get_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_get_string(const VipsImage *image, const char *name, const char **out)
     * }
     */
    public static MethodHandle vips_image_get_string$handle() {
        return vips_image_get_string.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_get_string(const VipsImage *image, const char *name, const char **out)
     * }
     */
    public static MemorySegment vips_image_get_string$address() {
        return vips_image_get_string.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_get_string(const VipsImage *image, const char *name, const char **out)
     * }
     */
    public static int vips_image_get_string(MemorySegment image, MemorySegment name, MemorySegment out) {
        var mh$ = vips_image_get_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_string", image, name, out);
            }
            return (int)mh$.invokeExact(image, name, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_set_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_set_string");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_image_set_string(VipsImage *image, const char *name, const char *str)
     * }
     */
    public static FunctionDescriptor vips_image_set_string$descriptor() {
        return vips_image_set_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_image_set_string(VipsImage *image, const char *name, const char *str)
     * }
     */
    public static MethodHandle vips_image_set_string$handle() {
        return vips_image_set_string.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_image_set_string(VipsImage *image, const char *name, const char *str)
     * }
     */
    public static MemorySegment vips_image_set_string$address() {
        return vips_image_set_string.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_image_set_string(VipsImage *image, const char *name, const char *str)
     * }
     */
    public static void vips_image_set_string(MemorySegment image, MemorySegment name, MemorySegment str) {
        var mh$ = vips_image_set_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_set_string", image, name, str);
            }
            mh$.invokeExact(image, name, str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_print_field {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_print_field");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_image_print_field(const VipsImage *image, const char *name)
     * }
     */
    public static FunctionDescriptor vips_image_print_field$descriptor() {
        return vips_image_print_field.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_image_print_field(const VipsImage *image, const char *name)
     * }
     */
    public static MethodHandle vips_image_print_field$handle() {
        return vips_image_print_field.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_image_print_field(const VipsImage *image, const char *name)
     * }
     */
    public static MemorySegment vips_image_print_field$address() {
        return vips_image_print_field.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_image_print_field(const VipsImage *image, const char *name)
     * }
     */
    public static void vips_image_print_field(MemorySegment image, MemorySegment name) {
        var mh$ = vips_image_print_field.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_print_field", image, name);
            }
            mh$.invokeExact(image, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_get_image");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_get_image(const VipsImage *image, const char *name, VipsImage **out)
     * }
     */
    public static FunctionDescriptor vips_image_get_image$descriptor() {
        return vips_image_get_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_get_image(const VipsImage *image, const char *name, VipsImage **out)
     * }
     */
    public static MethodHandle vips_image_get_image$handle() {
        return vips_image_get_image.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_get_image(const VipsImage *image, const char *name, VipsImage **out)
     * }
     */
    public static MemorySegment vips_image_get_image$address() {
        return vips_image_get_image.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_get_image(const VipsImage *image, const char *name, VipsImage **out)
     * }
     */
    public static int vips_image_get_image(MemorySegment image, MemorySegment name, MemorySegment out) {
        var mh$ = vips_image_get_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_image", image, name, out);
            }
            return (int)mh$.invokeExact(image, name, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_set_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_set_image");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_image_set_image(VipsImage *image, const char *name, VipsImage *im)
     * }
     */
    public static FunctionDescriptor vips_image_set_image$descriptor() {
        return vips_image_set_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_image_set_image(VipsImage *image, const char *name, VipsImage *im)
     * }
     */
    public static MethodHandle vips_image_set_image$handle() {
        return vips_image_set_image.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_image_set_image(VipsImage *image, const char *name, VipsImage *im)
     * }
     */
    public static MemorySegment vips_image_set_image$address() {
        return vips_image_set_image.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_image_set_image(VipsImage *image, const char *name, VipsImage *im)
     * }
     */
    public static void vips_image_set_image(MemorySegment image, MemorySegment name, MemorySegment im) {
        var mh$ = vips_image_set_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_set_image", image, name, im);
            }
            mh$.invokeExact(image, name, im);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_set_array_int {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_set_array_int");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_image_set_array_int(VipsImage *image, const char *name, const int *array, int n)
     * }
     */
    public static FunctionDescriptor vips_image_set_array_int$descriptor() {
        return vips_image_set_array_int.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_image_set_array_int(VipsImage *image, const char *name, const int *array, int n)
     * }
     */
    public static MethodHandle vips_image_set_array_int$handle() {
        return vips_image_set_array_int.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_image_set_array_int(VipsImage *image, const char *name, const int *array, int n)
     * }
     */
    public static MemorySegment vips_image_set_array_int$address() {
        return vips_image_set_array_int.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_image_set_array_int(VipsImage *image, const char *name, const int *array, int n)
     * }
     */
    public static void vips_image_set_array_int(MemorySegment image, MemorySegment name, MemorySegment array, int n) {
        var mh$ = vips_image_set_array_int.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_set_array_int", image, name, array, n);
            }
            mh$.invokeExact(image, name, array, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_array_int {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_get_array_int");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_get_array_int(VipsImage *image, const char *name, int **out, int *n)
     * }
     */
    public static FunctionDescriptor vips_image_get_array_int$descriptor() {
        return vips_image_get_array_int.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_get_array_int(VipsImage *image, const char *name, int **out, int *n)
     * }
     */
    public static MethodHandle vips_image_get_array_int$handle() {
        return vips_image_get_array_int.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_get_array_int(VipsImage *image, const char *name, int **out, int *n)
     * }
     */
    public static MemorySegment vips_image_get_array_int$address() {
        return vips_image_get_array_int.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_get_array_int(VipsImage *image, const char *name, int **out, int *n)
     * }
     */
    public static int vips_image_get_array_int(MemorySegment image, MemorySegment name, MemorySegment out, MemorySegment n) {
        var mh$ = vips_image_get_array_int.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_array_int", image, name, out, n);
            }
            return (int)mh$.invokeExact(image, name, out, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_array_double {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_get_array_double");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_get_array_double(VipsImage *image, const char *name, double **out, int *n)
     * }
     */
    public static FunctionDescriptor vips_image_get_array_double$descriptor() {
        return vips_image_get_array_double.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_get_array_double(VipsImage *image, const char *name, double **out, int *n)
     * }
     */
    public static MethodHandle vips_image_get_array_double$handle() {
        return vips_image_get_array_double.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_get_array_double(VipsImage *image, const char *name, double **out, int *n)
     * }
     */
    public static MemorySegment vips_image_get_array_double$address() {
        return vips_image_get_array_double.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_get_array_double(VipsImage *image, const char *name, double **out, int *n)
     * }
     */
    public static int vips_image_get_array_double(MemorySegment image, MemorySegment name, MemorySegment out, MemorySegment n) {
        var mh$ = vips_image_get_array_double.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_array_double", image, name, out, n);
            }
            return (int)mh$.invokeExact(image, name, out, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_set_array_double {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_set_array_double");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_image_set_array_double(VipsImage *image, const char *name, const double *array, int n)
     * }
     */
    public static FunctionDescriptor vips_image_set_array_double$descriptor() {
        return vips_image_set_array_double.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_image_set_array_double(VipsImage *image, const char *name, const double *array, int n)
     * }
     */
    public static MethodHandle vips_image_set_array_double$handle() {
        return vips_image_set_array_double.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_image_set_array_double(VipsImage *image, const char *name, const double *array, int n)
     * }
     */
    public static MemorySegment vips_image_set_array_double$address() {
        return vips_image_set_array_double.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_image_set_array_double(VipsImage *image, const char *name, const double *array, int n)
     * }
     */
    public static void vips_image_set_array_double(MemorySegment image, MemorySegment name, MemorySegment array, int n) {
        var mh$ = vips_image_set_array_double.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_set_array_double", image, name, array, n);
            }
            mh$.invokeExact(image, name, array, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_image_history_printf(VipsImage *image, const char *format, ...)
     * }
     */
    public static class vips_image_history_printf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_history_printf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_image_history_printf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_image_history_printf(VipsImage *image, const char *format, ...)
         * }
         */
        public static vips_image_history_printf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_image_history_printf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment image, MemorySegment format, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_image_history_printf", image, format, x2);
                }
                return (int)spreader.invokeExact(image, format, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class vips_image_history_args {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_history_args");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_image_history_args(VipsImage *image, const char *name, int argc, char *argv[])
     * }
     */
    public static FunctionDescriptor vips_image_history_args$descriptor() {
        return vips_image_history_args.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_image_history_args(VipsImage *image, const char *name, int argc, char *argv[])
     * }
     */
    public static MethodHandle vips_image_history_args$handle() {
        return vips_image_history_args.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_image_history_args(VipsImage *image, const char *name, int argc, char *argv[])
     * }
     */
    public static MemorySegment vips_image_history_args$address() {
        return vips_image_history_args.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_image_history_args(VipsImage *image, const char *name, int argc, char *argv[])
     * }
     */
    public static int vips_image_history_args(MemorySegment image, MemorySegment name, int argc, MemorySegment argv) {
        var mh$ = vips_image_history_args.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_history_args", image, name, argc, argv);
            }
            return (int)mh$.invokeExact(image, name, argc, argv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_get_history {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_get_history");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *vips_image_get_history(VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_image_get_history$descriptor() {
        return vips_image_get_history.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *vips_image_get_history(VipsImage *image)
     * }
     */
    public static MethodHandle vips_image_get_history$handle() {
        return vips_image_get_history.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *vips_image_get_history(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_history$address() {
        return vips_image_get_history.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *vips_image_get_history(VipsImage *image)
     * }
     */
    public static MemorySegment vips_image_get_history(MemorySegment image) {
        var mh$ = vips_image_get_history.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_get_history", image);
            }
            return (MemorySegment)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VIPS_OPERATION_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_NONE = 0
     * }
     */
    public static int VIPS_OPERATION_NONE() {
        return VIPS_OPERATION_NONE;
    }
    private static final int VIPS_OPERATION_SEQUENTIAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_SEQUENTIAL = 1
     * }
     */
    public static int VIPS_OPERATION_SEQUENTIAL() {
        return VIPS_OPERATION_SEQUENTIAL;
    }
    private static final int VIPS_OPERATION_SEQUENTIAL_UNBUFFERED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_SEQUENTIAL_UNBUFFERED = 2
     * }
     */
    public static int VIPS_OPERATION_SEQUENTIAL_UNBUFFERED() {
        return VIPS_OPERATION_SEQUENTIAL_UNBUFFERED;
    }
    private static final int VIPS_OPERATION_NOCACHE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_NOCACHE = 4
     * }
     */
    public static int VIPS_OPERATION_NOCACHE() {
        return VIPS_OPERATION_NOCACHE;
    }
    private static final int VIPS_OPERATION_DEPRECATED = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_DEPRECATED = 8
     * }
     */
    public static int VIPS_OPERATION_DEPRECATED() {
        return VIPS_OPERATION_DEPRECATED;
    }
    private static final int VIPS_OPERATION_UNTRUSTED = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_UNTRUSTED = 16
     * }
     */
    public static int VIPS_OPERATION_UNTRUSTED() {
        return VIPS_OPERATION_UNTRUSTED;
    }
    private static final int VIPS_OPERATION_BLOCKED = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_BLOCKED = 32
     * }
     */
    public static int VIPS_OPERATION_BLOCKED() {
        return VIPS_OPERATION_BLOCKED;
    }
    private static final int VIPS_OPERATION_REVALIDATE = (int)64L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_REVALIDATE = 64
     * }
     */
    public static int VIPS_OPERATION_REVALIDATE() {
        return VIPS_OPERATION_REVALIDATE;
    }

    private static class vips_operation_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_operation_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_operation_get_type()
     * }
     */
    public static FunctionDescriptor vips_operation_get_type$descriptor() {
        return vips_operation_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_operation_get_type()
     * }
     */
    public static MethodHandle vips_operation_get_type$handle() {
        return vips_operation_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_operation_get_type()
     * }
     */
    public static MemorySegment vips_operation_get_type$address() {
        return vips_operation_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_operation_get_type()
     * }
     */
    public static long vips_operation_get_type() {
        var mh$ = vips_operation_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_operation_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_operation_get_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_operation_get_flags");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsOperationFlags vips_operation_get_flags(VipsOperation *operation)
     * }
     */
    public static FunctionDescriptor vips_operation_get_flags$descriptor() {
        return vips_operation_get_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsOperationFlags vips_operation_get_flags(VipsOperation *operation)
     * }
     */
    public static MethodHandle vips_operation_get_flags$handle() {
        return vips_operation_get_flags.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsOperationFlags vips_operation_get_flags(VipsOperation *operation)
     * }
     */
    public static MemorySegment vips_operation_get_flags$address() {
        return vips_operation_get_flags.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsOperationFlags vips_operation_get_flags(VipsOperation *operation)
     * }
     */
    public static int vips_operation_get_flags(MemorySegment operation) {
        var mh$ = vips_operation_get_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_operation_get_flags", operation);
            }
            return (int)mh$.invokeExact(operation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_operation_class_print_usage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_operation_class_print_usage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_operation_class_print_usage(VipsOperationClass *operation_class)
     * }
     */
    public static FunctionDescriptor vips_operation_class_print_usage$descriptor() {
        return vips_operation_class_print_usage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_operation_class_print_usage(VipsOperationClass *operation_class)
     * }
     */
    public static MethodHandle vips_operation_class_print_usage$handle() {
        return vips_operation_class_print_usage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_operation_class_print_usage(VipsOperationClass *operation_class)
     * }
     */
    public static MemorySegment vips_operation_class_print_usage$address() {
        return vips_operation_class_print_usage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_operation_class_print_usage(VipsOperationClass *operation_class)
     * }
     */
    public static void vips_operation_class_print_usage(MemorySegment operation_class) {
        var mh$ = vips_operation_class_print_usage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_operation_class_print_usage", operation_class);
            }
            mh$.invokeExact(operation_class);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_operation_invalidate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_operation_invalidate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_operation_invalidate(VipsOperation *operation)
     * }
     */
    public static FunctionDescriptor vips_operation_invalidate$descriptor() {
        return vips_operation_invalidate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_operation_invalidate(VipsOperation *operation)
     * }
     */
    public static MethodHandle vips_operation_invalidate$handle() {
        return vips_operation_invalidate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_operation_invalidate(VipsOperation *operation)
     * }
     */
    public static MemorySegment vips_operation_invalidate$address() {
        return vips_operation_invalidate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_operation_invalidate(VipsOperation *operation)
     * }
     */
    public static void vips_operation_invalidate(MemorySegment operation) {
        var mh$ = vips_operation_invalidate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_operation_invalidate", operation);
            }
            mh$.invokeExact(operation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_operation_call_valist {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_operation_call_valist");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_operation_call_valist(VipsOperation *operation, va_list ap)
     * }
     */
    public static FunctionDescriptor vips_operation_call_valist$descriptor() {
        return vips_operation_call_valist.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_operation_call_valist(VipsOperation *operation, va_list ap)
     * }
     */
    public static MethodHandle vips_operation_call_valist$handle() {
        return vips_operation_call_valist.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_operation_call_valist(VipsOperation *operation, va_list ap)
     * }
     */
    public static MemorySegment vips_operation_call_valist$address() {
        return vips_operation_call_valist.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_operation_call_valist(VipsOperation *operation, va_list ap)
     * }
     */
    public static int vips_operation_call_valist(MemorySegment operation, MemorySegment ap) {
        var mh$ = vips_operation_call_valist.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_operation_call_valist", operation, ap);
            }
            return (int)mh$.invokeExact(operation, ap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_operation_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_operation_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsOperation *vips_operation_new(const char *name)
     * }
     */
    public static FunctionDescriptor vips_operation_new$descriptor() {
        return vips_operation_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsOperation *vips_operation_new(const char *name)
     * }
     */
    public static MethodHandle vips_operation_new$handle() {
        return vips_operation_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsOperation *vips_operation_new(const char *name)
     * }
     */
    public static MemorySegment vips_operation_new$address() {
        return vips_operation_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsOperation *vips_operation_new(const char *name)
     * }
     */
    public static MemorySegment vips_operation_new(MemorySegment name) {
        var mh$ = vips_operation_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_operation_new", name);
            }
            return (MemorySegment)mh$.invokeExact(name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_call_required_optional {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_call_required_optional");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_call_required_optional(VipsOperation **operation, va_list required, va_list optional)
     * }
     */
    public static FunctionDescriptor vips_call_required_optional$descriptor() {
        return vips_call_required_optional.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_call_required_optional(VipsOperation **operation, va_list required, va_list optional)
     * }
     */
    public static MethodHandle vips_call_required_optional$handle() {
        return vips_call_required_optional.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_call_required_optional(VipsOperation **operation, va_list required, va_list optional)
     * }
     */
    public static MemorySegment vips_call_required_optional$address() {
        return vips_call_required_optional.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_call_required_optional(VipsOperation **operation, va_list required, va_list optional)
     * }
     */
    public static int vips_call_required_optional(MemorySegment operation, MemorySegment required, MemorySegment optional) {
        var mh$ = vips_call_required_optional.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_call_required_optional", operation, required, optional);
            }
            return (int)mh$.invokeExact(operation, required, optional);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_call(const char *operation_name, ...)
     * }
     */
    public static class vips_call {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_call");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_call(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_call(const char *operation_name, ...)
         * }
         */
        public static vips_call makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_call(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment operation_name, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_call", operation_name, x1);
                }
                return (int)spreader.invokeExact(operation_name, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_call_split(const char *operation_name, va_list optional, ...)
     * }
     */
    public static class vips_call_split {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_call_split");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_call_split(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_call_split(const char *operation_name, va_list optional, ...)
         * }
         */
        public static vips_call_split makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_call_split(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment operation_name, MemorySegment optional, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_call_split", operation_name, optional, x2);
                }
                return (int)spreader.invokeExact(operation_name, optional, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_call_split_option_string(const char *operation_name, const char *option_string, va_list optional, ...)
     * }
     */
    public static class vips_call_split_option_string {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_call_split_option_string");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_call_split_option_string(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_call_split_option_string(const char *operation_name, const char *option_string, va_list optional, ...)
         * }
         */
        public static vips_call_split_option_string makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_call_split_option_string(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment operation_name, MemorySegment option_string, MemorySegment optional, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_call_split_option_string", operation_name, option_string, optional, x3);
                }
                return (int)spreader.invokeExact(operation_name, option_string, optional, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class vips_call_options {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_call_options");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_call_options(GOptionGroup *group, VipsOperation *operation)
     * }
     */
    public static FunctionDescriptor vips_call_options$descriptor() {
        return vips_call_options.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_call_options(GOptionGroup *group, VipsOperation *operation)
     * }
     */
    public static MethodHandle vips_call_options$handle() {
        return vips_call_options.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_call_options(GOptionGroup *group, VipsOperation *operation)
     * }
     */
    public static MemorySegment vips_call_options$address() {
        return vips_call_options.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_call_options(GOptionGroup *group, VipsOperation *operation)
     * }
     */
    public static void vips_call_options(MemorySegment group, MemorySegment operation) {
        var mh$ = vips_call_options.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_call_options", group, operation);
            }
            mh$.invokeExact(group, operation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_call_argv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_call_argv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_call_argv(VipsOperation *operation, int argc, char **argv)
     * }
     */
    public static FunctionDescriptor vips_call_argv$descriptor() {
        return vips_call_argv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_call_argv(VipsOperation *operation, int argc, char **argv)
     * }
     */
    public static MethodHandle vips_call_argv$handle() {
        return vips_call_argv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_call_argv(VipsOperation *operation, int argc, char **argv)
     * }
     */
    public static MemorySegment vips_call_argv$address() {
        return vips_call_argv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_call_argv(VipsOperation *operation, int argc, char **argv)
     * }
     */
    public static int vips_call_argv(MemorySegment operation, int argc, MemorySegment argv) {
        var mh$ = vips_call_argv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_call_argv", operation, argc, argv);
            }
            return (int)mh$.invokeExact(operation, argc, argv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_cache_drop_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_cache_drop_all");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_cache_drop_all()
     * }
     */
    public static FunctionDescriptor vips_cache_drop_all$descriptor() {
        return vips_cache_drop_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_cache_drop_all()
     * }
     */
    public static MethodHandle vips_cache_drop_all$handle() {
        return vips_cache_drop_all.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_cache_drop_all()
     * }
     */
    public static MemorySegment vips_cache_drop_all$address() {
        return vips_cache_drop_all.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_cache_drop_all()
     * }
     */
    public static void vips_cache_drop_all() {
        var mh$ = vips_cache_drop_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_cache_drop_all");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_cache_operation_lookup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_cache_operation_lookup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsOperation *vips_cache_operation_lookup(VipsOperation *operation)
     * }
     */
    public static FunctionDescriptor vips_cache_operation_lookup$descriptor() {
        return vips_cache_operation_lookup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsOperation *vips_cache_operation_lookup(VipsOperation *operation)
     * }
     */
    public static MethodHandle vips_cache_operation_lookup$handle() {
        return vips_cache_operation_lookup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsOperation *vips_cache_operation_lookup(VipsOperation *operation)
     * }
     */
    public static MemorySegment vips_cache_operation_lookup$address() {
        return vips_cache_operation_lookup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsOperation *vips_cache_operation_lookup(VipsOperation *operation)
     * }
     */
    public static MemorySegment vips_cache_operation_lookup(MemorySegment operation) {
        var mh$ = vips_cache_operation_lookup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_cache_operation_lookup", operation);
            }
            return (MemorySegment)mh$.invokeExact(operation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_cache_operation_add {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_cache_operation_add");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_cache_operation_add(VipsOperation *operation)
     * }
     */
    public static FunctionDescriptor vips_cache_operation_add$descriptor() {
        return vips_cache_operation_add.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_cache_operation_add(VipsOperation *operation)
     * }
     */
    public static MethodHandle vips_cache_operation_add$handle() {
        return vips_cache_operation_add.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_cache_operation_add(VipsOperation *operation)
     * }
     */
    public static MemorySegment vips_cache_operation_add$address() {
        return vips_cache_operation_add.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_cache_operation_add(VipsOperation *operation)
     * }
     */
    public static void vips_cache_operation_add(MemorySegment operation) {
        var mh$ = vips_cache_operation_add.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_cache_operation_add", operation);
            }
            mh$.invokeExact(operation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_cache_operation_buildp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_cache_operation_buildp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_cache_operation_buildp(VipsOperation **operation)
     * }
     */
    public static FunctionDescriptor vips_cache_operation_buildp$descriptor() {
        return vips_cache_operation_buildp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_cache_operation_buildp(VipsOperation **operation)
     * }
     */
    public static MethodHandle vips_cache_operation_buildp$handle() {
        return vips_cache_operation_buildp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_cache_operation_buildp(VipsOperation **operation)
     * }
     */
    public static MemorySegment vips_cache_operation_buildp$address() {
        return vips_cache_operation_buildp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_cache_operation_buildp(VipsOperation **operation)
     * }
     */
    public static int vips_cache_operation_buildp(MemorySegment operation) {
        var mh$ = vips_cache_operation_buildp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_cache_operation_buildp", operation);
            }
            return (int)mh$.invokeExact(operation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_cache_operation_build {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_cache_operation_build");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsOperation *vips_cache_operation_build(VipsOperation *operation)
     * }
     */
    public static FunctionDescriptor vips_cache_operation_build$descriptor() {
        return vips_cache_operation_build.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsOperation *vips_cache_operation_build(VipsOperation *operation)
     * }
     */
    public static MethodHandle vips_cache_operation_build$handle() {
        return vips_cache_operation_build.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsOperation *vips_cache_operation_build(VipsOperation *operation)
     * }
     */
    public static MemorySegment vips_cache_operation_build$address() {
        return vips_cache_operation_build.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsOperation *vips_cache_operation_build(VipsOperation *operation)
     * }
     */
    public static MemorySegment vips_cache_operation_build(MemorySegment operation) {
        var mh$ = vips_cache_operation_build.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_cache_operation_build", operation);
            }
            return (MemorySegment)mh$.invokeExact(operation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_cache_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_cache_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_cache_print()
     * }
     */
    public static FunctionDescriptor vips_cache_print$descriptor() {
        return vips_cache_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_cache_print()
     * }
     */
    public static MethodHandle vips_cache_print$handle() {
        return vips_cache_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_cache_print()
     * }
     */
    public static MemorySegment vips_cache_print$address() {
        return vips_cache_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_cache_print()
     * }
     */
    public static void vips_cache_print() {
        var mh$ = vips_cache_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_cache_print");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_cache_set_max {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_cache_set_max");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_cache_set_max(int max)
     * }
     */
    public static FunctionDescriptor vips_cache_set_max$descriptor() {
        return vips_cache_set_max.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_cache_set_max(int max)
     * }
     */
    public static MethodHandle vips_cache_set_max$handle() {
        return vips_cache_set_max.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_cache_set_max(int max)
     * }
     */
    public static MemorySegment vips_cache_set_max$address() {
        return vips_cache_set_max.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_cache_set_max(int max)
     * }
     */
    public static void vips_cache_set_max(int max) {
        var mh$ = vips_cache_set_max.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_cache_set_max", max);
            }
            mh$.invokeExact(max);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_cache_set_max_mem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_LONG
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_cache_set_max_mem");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_cache_set_max_mem(size_t max_mem)
     * }
     */
    public static FunctionDescriptor vips_cache_set_max_mem$descriptor() {
        return vips_cache_set_max_mem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_cache_set_max_mem(size_t max_mem)
     * }
     */
    public static MethodHandle vips_cache_set_max_mem$handle() {
        return vips_cache_set_max_mem.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_cache_set_max_mem(size_t max_mem)
     * }
     */
    public static MemorySegment vips_cache_set_max_mem$address() {
        return vips_cache_set_max_mem.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_cache_set_max_mem(size_t max_mem)
     * }
     */
    public static void vips_cache_set_max_mem(long max_mem) {
        var mh$ = vips_cache_set_max_mem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_cache_set_max_mem", max_mem);
            }
            mh$.invokeExact(max_mem);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_cache_get_max {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_cache_get_max");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_cache_get_max()
     * }
     */
    public static FunctionDescriptor vips_cache_get_max$descriptor() {
        return vips_cache_get_max.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_cache_get_max()
     * }
     */
    public static MethodHandle vips_cache_get_max$handle() {
        return vips_cache_get_max.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_cache_get_max()
     * }
     */
    public static MemorySegment vips_cache_get_max$address() {
        return vips_cache_get_max.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_cache_get_max()
     * }
     */
    public static int vips_cache_get_max() {
        var mh$ = vips_cache_get_max.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_cache_get_max");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_cache_get_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_cache_get_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_cache_get_size()
     * }
     */
    public static FunctionDescriptor vips_cache_get_size$descriptor() {
        return vips_cache_get_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_cache_get_size()
     * }
     */
    public static MethodHandle vips_cache_get_size$handle() {
        return vips_cache_get_size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_cache_get_size()
     * }
     */
    public static MemorySegment vips_cache_get_size$address() {
        return vips_cache_get_size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_cache_get_size()
     * }
     */
    public static int vips_cache_get_size() {
        var mh$ = vips_cache_get_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_cache_get_size");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_cache_get_max_mem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_cache_get_max_mem");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t vips_cache_get_max_mem()
     * }
     */
    public static FunctionDescriptor vips_cache_get_max_mem$descriptor() {
        return vips_cache_get_max_mem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t vips_cache_get_max_mem()
     * }
     */
    public static MethodHandle vips_cache_get_max_mem$handle() {
        return vips_cache_get_max_mem.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern size_t vips_cache_get_max_mem()
     * }
     */
    public static MemorySegment vips_cache_get_max_mem$address() {
        return vips_cache_get_max_mem.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern size_t vips_cache_get_max_mem()
     * }
     */
    public static long vips_cache_get_max_mem() {
        var mh$ = vips_cache_get_max_mem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_cache_get_max_mem");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_cache_get_max_files {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_cache_get_max_files");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_cache_get_max_files()
     * }
     */
    public static FunctionDescriptor vips_cache_get_max_files$descriptor() {
        return vips_cache_get_max_files.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_cache_get_max_files()
     * }
     */
    public static MethodHandle vips_cache_get_max_files$handle() {
        return vips_cache_get_max_files.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_cache_get_max_files()
     * }
     */
    public static MemorySegment vips_cache_get_max_files$address() {
        return vips_cache_get_max_files.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_cache_get_max_files()
     * }
     */
    public static int vips_cache_get_max_files() {
        var mh$ = vips_cache_get_max_files.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_cache_get_max_files");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_cache_set_max_files {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_cache_set_max_files");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_cache_set_max_files(int max_files)
     * }
     */
    public static FunctionDescriptor vips_cache_set_max_files$descriptor() {
        return vips_cache_set_max_files.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_cache_set_max_files(int max_files)
     * }
     */
    public static MethodHandle vips_cache_set_max_files$handle() {
        return vips_cache_set_max_files.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_cache_set_max_files(int max_files)
     * }
     */
    public static MemorySegment vips_cache_set_max_files$address() {
        return vips_cache_set_max_files.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_cache_set_max_files(int max_files)
     * }
     */
    public static void vips_cache_set_max_files(int max_files) {
        var mh$ = vips_cache_set_max_files.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_cache_set_max_files", max_files);
            }
            mh$.invokeExact(max_files);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_cache_set_dump {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_cache_set_dump");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_cache_set_dump(gboolean dump)
     * }
     */
    public static FunctionDescriptor vips_cache_set_dump$descriptor() {
        return vips_cache_set_dump.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_cache_set_dump(gboolean dump)
     * }
     */
    public static MethodHandle vips_cache_set_dump$handle() {
        return vips_cache_set_dump.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_cache_set_dump(gboolean dump)
     * }
     */
    public static MemorySegment vips_cache_set_dump$address() {
        return vips_cache_set_dump.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_cache_set_dump(gboolean dump)
     * }
     */
    public static void vips_cache_set_dump(int dump) {
        var mh$ = vips_cache_set_dump.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_cache_set_dump", dump);
            }
            mh$.invokeExact(dump);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_cache_set_trace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_cache_set_trace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_cache_set_trace(gboolean trace)
     * }
     */
    public static FunctionDescriptor vips_cache_set_trace$descriptor() {
        return vips_cache_set_trace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_cache_set_trace(gboolean trace)
     * }
     */
    public static MethodHandle vips_cache_set_trace$handle() {
        return vips_cache_set_trace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_cache_set_trace(gboolean trace)
     * }
     */
    public static MemorySegment vips_cache_set_trace$address() {
        return vips_cache_set_trace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_cache_set_trace(gboolean trace)
     * }
     */
    public static void vips_cache_set_trace(int trace) {
        var mh$ = vips_cache_set_trace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_cache_set_trace", trace);
            }
            mh$.invokeExact(trace);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_concurrency_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_concurrency_set");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_concurrency_set(int concurrency)
     * }
     */
    public static FunctionDescriptor vips_concurrency_set$descriptor() {
        return vips_concurrency_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_concurrency_set(int concurrency)
     * }
     */
    public static MethodHandle vips_concurrency_set$handle() {
        return vips_concurrency_set.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_concurrency_set(int concurrency)
     * }
     */
    public static MemorySegment vips_concurrency_set$address() {
        return vips_concurrency_set.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_concurrency_set(int concurrency)
     * }
     */
    public static void vips_concurrency_set(int concurrency) {
        var mh$ = vips_concurrency_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_concurrency_set", concurrency);
            }
            mh$.invokeExact(concurrency);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_concurrency_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_concurrency_get");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vips_concurrency_get()
     * }
     */
    public static FunctionDescriptor vips_concurrency_get$descriptor() {
        return vips_concurrency_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vips_concurrency_get()
     * }
     */
    public static MethodHandle vips_concurrency_get$handle() {
        return vips_concurrency_get.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vips_concurrency_get()
     * }
     */
    public static MemorySegment vips_concurrency_get$address() {
        return vips_concurrency_get.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vips_concurrency_get()
     * }
     */
    public static int vips_concurrency_get() {
        var mh$ = vips_concurrency_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_concurrency_get");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_operation_block_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER,
            vips_h.C_INT
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_operation_block_set");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_operation_block_set(const char *name, gboolean state)
     * }
     */
    public static FunctionDescriptor vips_operation_block_set$descriptor() {
        return vips_operation_block_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_operation_block_set(const char *name, gboolean state)
     * }
     */
    public static MethodHandle vips_operation_block_set$handle() {
        return vips_operation_block_set.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_operation_block_set(const char *name, gboolean state)
     * }
     */
    public static MemorySegment vips_operation_block_set$address() {
        return vips_operation_block_set.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_operation_block_set(const char *name, gboolean state)
     * }
     */
    public static void vips_operation_block_set(MemorySegment name, int state) {
        var mh$ = vips_operation_block_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_operation_block_set", name, state);
            }
            mh$.invokeExact(name, state);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_foreign_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_foreign_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_foreign_get_type()
     * }
     */
    public static FunctionDescriptor vips_foreign_get_type$descriptor() {
        return vips_foreign_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_foreign_get_type()
     * }
     */
    public static MethodHandle vips_foreign_get_type$handle() {
        return vips_foreign_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_foreign_get_type()
     * }
     */
    public static MemorySegment vips_foreign_get_type$address() {
        return vips_foreign_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_foreign_get_type()
     * }
     */
    public static long vips_foreign_get_type() {
        var mh$ = vips_foreign_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_foreign_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_foreign_map {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_foreign_map");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *vips_foreign_map(const char *base, VipsSListMap2Fn fn, void *a, void *b)
     * }
     */
    public static FunctionDescriptor vips_foreign_map$descriptor() {
        return vips_foreign_map.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *vips_foreign_map(const char *base, VipsSListMap2Fn fn, void *a, void *b)
     * }
     */
    public static MethodHandle vips_foreign_map$handle() {
        return vips_foreign_map.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *vips_foreign_map(const char *base, VipsSListMap2Fn fn, void *a, void *b)
     * }
     */
    public static MemorySegment vips_foreign_map$address() {
        return vips_foreign_map.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *vips_foreign_map(const char *base, VipsSListMap2Fn fn, void *a, void *b)
     * }
     */
    public static MemorySegment vips_foreign_map(MemorySegment base, MemorySegment fn, MemorySegment a, MemorySegment b) {
        var mh$ = vips_foreign_map.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_foreign_map", base, fn, a, b);
            }
            return (MemorySegment)mh$.invokeExact(base, fn, a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VIPS_FOREIGN_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_NONE = 0
     * }
     */
    public static int VIPS_FOREIGN_NONE() {
        return VIPS_FOREIGN_NONE;
    }
    private static final int VIPS_FOREIGN_PARTIAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_PARTIAL = 1
     * }
     */
    public static int VIPS_FOREIGN_PARTIAL() {
        return VIPS_FOREIGN_PARTIAL;
    }
    private static final int VIPS_FOREIGN_BIGENDIAN = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_BIGENDIAN = 2
     * }
     */
    public static int VIPS_FOREIGN_BIGENDIAN() {
        return VIPS_FOREIGN_BIGENDIAN;
    }
    private static final int VIPS_FOREIGN_SEQUENTIAL = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_SEQUENTIAL = 4
     * }
     */
    public static int VIPS_FOREIGN_SEQUENTIAL() {
        return VIPS_FOREIGN_SEQUENTIAL;
    }
    private static final int VIPS_FOREIGN_ALL = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_ALL = 7
     * }
     */
    public static int VIPS_FOREIGN_ALL() {
        return VIPS_FOREIGN_ALL;
    }
    private static final int VIPS_FAIL_ON_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FAIL_ON_NONE = 0
     * }
     */
    public static int VIPS_FAIL_ON_NONE() {
        return VIPS_FAIL_ON_NONE;
    }
    private static final int VIPS_FAIL_ON_TRUNCATED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FAIL_ON_TRUNCATED = 1
     * }
     */
    public static int VIPS_FAIL_ON_TRUNCATED() {
        return VIPS_FAIL_ON_TRUNCATED;
    }
    private static final int VIPS_FAIL_ON_ERROR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FAIL_ON_ERROR = 2
     * }
     */
    public static int VIPS_FAIL_ON_ERROR() {
        return VIPS_FAIL_ON_ERROR;
    }
    private static final int VIPS_FAIL_ON_WARNING = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FAIL_ON_WARNING = 3
     * }
     */
    public static int VIPS_FAIL_ON_WARNING() {
        return VIPS_FAIL_ON_WARNING;
    }
    private static final int VIPS_FAIL_ON_LAST = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FAIL_ON_LAST = 4
     * }
     */
    public static int VIPS_FAIL_ON_LAST() {
        return VIPS_FAIL_ON_LAST;
    }

    private static class vips_foreign_load_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_foreign_load_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_foreign_load_get_type()
     * }
     */
    public static FunctionDescriptor vips_foreign_load_get_type$descriptor() {
        return vips_foreign_load_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_foreign_load_get_type()
     * }
     */
    public static MethodHandle vips_foreign_load_get_type$handle() {
        return vips_foreign_load_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_foreign_load_get_type()
     * }
     */
    public static MemorySegment vips_foreign_load_get_type$address() {
        return vips_foreign_load_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_foreign_load_get_type()
     * }
     */
    public static long vips_foreign_load_get_type() {
        var mh$ = vips_foreign_load_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_foreign_load_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_foreign_find_load {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_foreign_find_load");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *vips_foreign_find_load(const char *filename)
     * }
     */
    public static FunctionDescriptor vips_foreign_find_load$descriptor() {
        return vips_foreign_find_load.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *vips_foreign_find_load(const char *filename)
     * }
     */
    public static MethodHandle vips_foreign_find_load$handle() {
        return vips_foreign_find_load.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *vips_foreign_find_load(const char *filename)
     * }
     */
    public static MemorySegment vips_foreign_find_load$address() {
        return vips_foreign_find_load.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *vips_foreign_find_load(const char *filename)
     * }
     */
    public static MemorySegment vips_foreign_find_load(MemorySegment filename) {
        var mh$ = vips_foreign_find_load.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_foreign_find_load", filename);
            }
            return (MemorySegment)mh$.invokeExact(filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_foreign_find_load_buffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_LONG
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_foreign_find_load_buffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *vips_foreign_find_load_buffer(const void *data, size_t size)
     * }
     */
    public static FunctionDescriptor vips_foreign_find_load_buffer$descriptor() {
        return vips_foreign_find_load_buffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *vips_foreign_find_load_buffer(const void *data, size_t size)
     * }
     */
    public static MethodHandle vips_foreign_find_load_buffer$handle() {
        return vips_foreign_find_load_buffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *vips_foreign_find_load_buffer(const void *data, size_t size)
     * }
     */
    public static MemorySegment vips_foreign_find_load_buffer$address() {
        return vips_foreign_find_load_buffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *vips_foreign_find_load_buffer(const void *data, size_t size)
     * }
     */
    public static MemorySegment vips_foreign_find_load_buffer(MemorySegment data, long size) {
        var mh$ = vips_foreign_find_load_buffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_foreign_find_load_buffer", data, size);
            }
            return (MemorySegment)mh$.invokeExact(data, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_foreign_find_load_source {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_foreign_find_load_source");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *vips_foreign_find_load_source(VipsSource *source)
     * }
     */
    public static FunctionDescriptor vips_foreign_find_load_source$descriptor() {
        return vips_foreign_find_load_source.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *vips_foreign_find_load_source(VipsSource *source)
     * }
     */
    public static MethodHandle vips_foreign_find_load_source$handle() {
        return vips_foreign_find_load_source.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *vips_foreign_find_load_source(VipsSource *source)
     * }
     */
    public static MemorySegment vips_foreign_find_load_source$address() {
        return vips_foreign_find_load_source.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *vips_foreign_find_load_source(VipsSource *source)
     * }
     */
    public static MemorySegment vips_foreign_find_load_source(MemorySegment source) {
        var mh$ = vips_foreign_find_load_source.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_foreign_find_load_source", source);
            }
            return (MemorySegment)mh$.invokeExact(source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_foreign_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_foreign_flags");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VipsForeignFlags vips_foreign_flags(const char *loader, const char *filename)
     * }
     */
    public static FunctionDescriptor vips_foreign_flags$descriptor() {
        return vips_foreign_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VipsForeignFlags vips_foreign_flags(const char *loader, const char *filename)
     * }
     */
    public static MethodHandle vips_foreign_flags$handle() {
        return vips_foreign_flags.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VipsForeignFlags vips_foreign_flags(const char *loader, const char *filename)
     * }
     */
    public static MemorySegment vips_foreign_flags$address() {
        return vips_foreign_flags.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VipsForeignFlags vips_foreign_flags(const char *loader, const char *filename)
     * }
     */
    public static int vips_foreign_flags(MemorySegment loader, MemorySegment filename) {
        var mh$ = vips_foreign_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_foreign_flags", loader, filename);
            }
            return (int)mh$.invokeExact(loader, filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_foreign_is_a {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_foreign_is_a");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_foreign_is_a(const char *loader, const char *filename)
     * }
     */
    public static FunctionDescriptor vips_foreign_is_a$descriptor() {
        return vips_foreign_is_a.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_foreign_is_a(const char *loader, const char *filename)
     * }
     */
    public static MethodHandle vips_foreign_is_a$handle() {
        return vips_foreign_is_a.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_foreign_is_a(const char *loader, const char *filename)
     * }
     */
    public static MemorySegment vips_foreign_is_a$address() {
        return vips_foreign_is_a.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_foreign_is_a(const char *loader, const char *filename)
     * }
     */
    public static int vips_foreign_is_a(MemorySegment loader, MemorySegment filename) {
        var mh$ = vips_foreign_is_a.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_foreign_is_a", loader, filename);
            }
            return (int)mh$.invokeExact(loader, filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_foreign_is_a_buffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER,
            vips_h.C_LONG
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_foreign_is_a_buffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_foreign_is_a_buffer(const char *loader, const void *data, size_t size)
     * }
     */
    public static FunctionDescriptor vips_foreign_is_a_buffer$descriptor() {
        return vips_foreign_is_a_buffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_foreign_is_a_buffer(const char *loader, const void *data, size_t size)
     * }
     */
    public static MethodHandle vips_foreign_is_a_buffer$handle() {
        return vips_foreign_is_a_buffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_foreign_is_a_buffer(const char *loader, const void *data, size_t size)
     * }
     */
    public static MemorySegment vips_foreign_is_a_buffer$address() {
        return vips_foreign_is_a_buffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_foreign_is_a_buffer(const char *loader, const void *data, size_t size)
     * }
     */
    public static int vips_foreign_is_a_buffer(MemorySegment loader, MemorySegment data, long size) {
        var mh$ = vips_foreign_is_a_buffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_foreign_is_a_buffer", loader, data, size);
            }
            return (int)mh$.invokeExact(loader, data, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_foreign_is_a_source {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_INT,
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_foreign_is_a_source");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean vips_foreign_is_a_source(const char *loader, VipsSource *source)
     * }
     */
    public static FunctionDescriptor vips_foreign_is_a_source$descriptor() {
        return vips_foreign_is_a_source.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean vips_foreign_is_a_source(const char *loader, VipsSource *source)
     * }
     */
    public static MethodHandle vips_foreign_is_a_source$handle() {
        return vips_foreign_is_a_source.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gboolean vips_foreign_is_a_source(const char *loader, VipsSource *source)
     * }
     */
    public static MemorySegment vips_foreign_is_a_source$address() {
        return vips_foreign_is_a_source.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gboolean vips_foreign_is_a_source(const char *loader, VipsSource *source)
     * }
     */
    public static int vips_foreign_is_a_source(MemorySegment loader, MemorySegment source) {
        var mh$ = vips_foreign_is_a_source.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_foreign_is_a_source", loader, source);
            }
            return (int)mh$.invokeExact(loader, source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_foreign_load_invalidate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_foreign_load_invalidate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void vips_foreign_load_invalidate(VipsImage *image)
     * }
     */
    public static FunctionDescriptor vips_foreign_load_invalidate$descriptor() {
        return vips_foreign_load_invalidate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void vips_foreign_load_invalidate(VipsImage *image)
     * }
     */
    public static MethodHandle vips_foreign_load_invalidate$handle() {
        return vips_foreign_load_invalidate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void vips_foreign_load_invalidate(VipsImage *image)
     * }
     */
    public static MemorySegment vips_foreign_load_invalidate$address() {
        return vips_foreign_load_invalidate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void vips_foreign_load_invalidate(VipsImage *image)
     * }
     */
    public static void vips_foreign_load_invalidate(MemorySegment image) {
        var mh$ = vips_foreign_load_invalidate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_foreign_load_invalidate", image);
            }
            mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VIPS_SAVEABLE_MONO = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_SAVEABLE_MONO = 0
     * }
     */
    public static int VIPS_SAVEABLE_MONO() {
        return VIPS_SAVEABLE_MONO;
    }
    private static final int VIPS_SAVEABLE_RGB = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_SAVEABLE_RGB = 1
     * }
     */
    public static int VIPS_SAVEABLE_RGB() {
        return VIPS_SAVEABLE_RGB;
    }
    private static final int VIPS_SAVEABLE_RGBA = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_SAVEABLE_RGBA = 2
     * }
     */
    public static int VIPS_SAVEABLE_RGBA() {
        return VIPS_SAVEABLE_RGBA;
    }
    private static final int VIPS_SAVEABLE_RGBA_ONLY = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_SAVEABLE_RGBA_ONLY = 3
     * }
     */
    public static int VIPS_SAVEABLE_RGBA_ONLY() {
        return VIPS_SAVEABLE_RGBA_ONLY;
    }
    private static final int VIPS_SAVEABLE_RGB_CMYK = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_SAVEABLE_RGB_CMYK = 4
     * }
     */
    public static int VIPS_SAVEABLE_RGB_CMYK() {
        return VIPS_SAVEABLE_RGB_CMYK;
    }
    private static final int VIPS_SAVEABLE_ANY = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_SAVEABLE_ANY = 5
     * }
     */
    public static int VIPS_SAVEABLE_ANY() {
        return VIPS_SAVEABLE_ANY;
    }
    private static final int VIPS_SAVEABLE_LAST = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_SAVEABLE_LAST = 6
     * }
     */
    public static int VIPS_SAVEABLE_LAST() {
        return VIPS_SAVEABLE_LAST;
    }
    private static final int VIPS_FOREIGN_KEEP_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_KEEP_NONE = 0
     * }
     */
    public static int VIPS_FOREIGN_KEEP_NONE() {
        return VIPS_FOREIGN_KEEP_NONE;
    }
    private static final int VIPS_FOREIGN_KEEP_EXIF = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_KEEP_EXIF = 1
     * }
     */
    public static int VIPS_FOREIGN_KEEP_EXIF() {
        return VIPS_FOREIGN_KEEP_EXIF;
    }
    private static final int VIPS_FOREIGN_KEEP_XMP = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_KEEP_XMP = 2
     * }
     */
    public static int VIPS_FOREIGN_KEEP_XMP() {
        return VIPS_FOREIGN_KEEP_XMP;
    }
    private static final int VIPS_FOREIGN_KEEP_IPTC = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_KEEP_IPTC = 4
     * }
     */
    public static int VIPS_FOREIGN_KEEP_IPTC() {
        return VIPS_FOREIGN_KEEP_IPTC;
    }
    private static final int VIPS_FOREIGN_KEEP_ICC = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_KEEP_ICC = 8
     * }
     */
    public static int VIPS_FOREIGN_KEEP_ICC() {
        return VIPS_FOREIGN_KEEP_ICC;
    }
    private static final int VIPS_FOREIGN_KEEP_OTHER = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_KEEP_OTHER = 16
     * }
     */
    public static int VIPS_FOREIGN_KEEP_OTHER() {
        return VIPS_FOREIGN_KEEP_OTHER;
    }
    private static final int VIPS_FOREIGN_KEEP_ALL = (int)31L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_KEEP_ALL = 31
     * }
     */
    public static int VIPS_FOREIGN_KEEP_ALL() {
        return VIPS_FOREIGN_KEEP_ALL;
    }

    private static class vips_foreign_save_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_foreign_save_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_foreign_save_get_type()
     * }
     */
    public static FunctionDescriptor vips_foreign_save_get_type$descriptor() {
        return vips_foreign_save_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_foreign_save_get_type()
     * }
     */
    public static MethodHandle vips_foreign_save_get_type$handle() {
        return vips_foreign_save_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_foreign_save_get_type()
     * }
     */
    public static MemorySegment vips_foreign_save_get_type$address() {
        return vips_foreign_save_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_foreign_save_get_type()
     * }
     */
    public static long vips_foreign_save_get_type() {
        var mh$ = vips_foreign_save_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_foreign_save_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_foreign_find_save {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_foreign_find_save");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *vips_foreign_find_save(const char *filename)
     * }
     */
    public static FunctionDescriptor vips_foreign_find_save$descriptor() {
        return vips_foreign_find_save.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *vips_foreign_find_save(const char *filename)
     * }
     */
    public static MethodHandle vips_foreign_find_save$handle() {
        return vips_foreign_find_save.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *vips_foreign_find_save(const char *filename)
     * }
     */
    public static MemorySegment vips_foreign_find_save$address() {
        return vips_foreign_find_save.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *vips_foreign_find_save(const char *filename)
     * }
     */
    public static MemorySegment vips_foreign_find_save(MemorySegment filename) {
        var mh$ = vips_foreign_find_save.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_foreign_find_save", filename);
            }
            return (MemorySegment)mh$.invokeExact(filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_foreign_get_suffixes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_foreign_get_suffixes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar **vips_foreign_get_suffixes()
     * }
     */
    public static FunctionDescriptor vips_foreign_get_suffixes$descriptor() {
        return vips_foreign_get_suffixes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar **vips_foreign_get_suffixes()
     * }
     */
    public static MethodHandle vips_foreign_get_suffixes$handle() {
        return vips_foreign_get_suffixes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern gchar **vips_foreign_get_suffixes()
     * }
     */
    public static MemorySegment vips_foreign_get_suffixes$address() {
        return vips_foreign_get_suffixes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern gchar **vips_foreign_get_suffixes()
     * }
     */
    public static MemorySegment vips_foreign_get_suffixes() {
        var mh$ = vips_foreign_get_suffixes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_foreign_get_suffixes");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_foreign_find_save_buffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_foreign_find_save_buffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *vips_foreign_find_save_buffer(const char *suffix)
     * }
     */
    public static FunctionDescriptor vips_foreign_find_save_buffer$descriptor() {
        return vips_foreign_find_save_buffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *vips_foreign_find_save_buffer(const char *suffix)
     * }
     */
    public static MethodHandle vips_foreign_find_save_buffer$handle() {
        return vips_foreign_find_save_buffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *vips_foreign_find_save_buffer(const char *suffix)
     * }
     */
    public static MemorySegment vips_foreign_find_save_buffer$address() {
        return vips_foreign_find_save_buffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *vips_foreign_find_save_buffer(const char *suffix)
     * }
     */
    public static MemorySegment vips_foreign_find_save_buffer(MemorySegment suffix) {
        var mh$ = vips_foreign_find_save_buffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_foreign_find_save_buffer", suffix);
            }
            return (MemorySegment)mh$.invokeExact(suffix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_foreign_find_save_target {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_POINTER,
            vips_h.C_POINTER
        );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_foreign_find_save_target");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *vips_foreign_find_save_target(const char *suffix)
     * }
     */
    public static FunctionDescriptor vips_foreign_find_save_target$descriptor() {
        return vips_foreign_find_save_target.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *vips_foreign_find_save_target(const char *suffix)
     * }
     */
    public static MethodHandle vips_foreign_find_save_target$handle() {
        return vips_foreign_find_save_target.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *vips_foreign_find_save_target(const char *suffix)
     * }
     */
    public static MemorySegment vips_foreign_find_save_target$address() {
        return vips_foreign_find_save_target.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *vips_foreign_find_save_target(const char *suffix)
     * }
     */
    public static MemorySegment vips_foreign_find_save_target(MemorySegment suffix) {
        var mh$ = vips_foreign_find_save_target.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_foreign_find_save_target", suffix);
            }
            return (MemorySegment)mh$.invokeExact(suffix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_vipsload(const char *filename, VipsImage **out, ...)
     * }
     */
    public static class vips_vipsload {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_vipsload");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_vipsload(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_vipsload(const char *filename, VipsImage **out, ...)
         * }
         */
        public static vips_vipsload makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_vipsload(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment filename, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_vipsload", filename, out, x2);
                }
                return (int)spreader.invokeExact(filename, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_vipsload_source(VipsSource *source, VipsImage **out, ...)
     * }
     */
    public static class vips_vipsload_source {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_vipsload_source");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_vipsload_source(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_vipsload_source(VipsSource *source, VipsImage **out, ...)
         * }
         */
        public static vips_vipsload_source makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_vipsload_source(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment source, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_vipsload_source", source, out, x2);
                }
                return (int)spreader.invokeExact(source, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_vipssave(VipsImage *in, const char *filename, ...)
     * }
     */
    public static class vips_vipssave {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_vipssave");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_vipssave(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_vipssave(VipsImage *in, const char *filename, ...)
         * }
         */
        public static vips_vipssave makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_vipssave(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment filename, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_vipssave", in, filename, x2);
                }
                return (int)spreader.invokeExact(in, filename, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_vipssave_target(VipsImage *in, VipsTarget *target, ...)
     * }
     */
    public static class vips_vipssave_target {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_vipssave_target");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_vipssave_target(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_vipssave_target(VipsImage *in, VipsTarget *target, ...)
         * }
         */
        public static vips_vipssave_target makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_vipssave_target(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment target, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_vipssave_target", in, target, x2);
                }
                return (int)spreader.invokeExact(in, target, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_openslideload(const char *filename, VipsImage **out, ...)
     * }
     */
    public static class vips_openslideload {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_openslideload");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_openslideload(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_openslideload(const char *filename, VipsImage **out, ...)
         * }
         */
        public static vips_openslideload makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_openslideload(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment filename, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_openslideload", filename, out, x2);
                }
                return (int)spreader.invokeExact(filename, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_openslideload_source(VipsSource *source, VipsImage **out, ...)
     * }
     */
    public static class vips_openslideload_source {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_openslideload_source");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_openslideload_source(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_openslideload_source(VipsSource *source, VipsImage **out, ...)
         * }
         */
        public static vips_openslideload_source makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_openslideload_source(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment source, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_openslideload_source", source, out, x2);
                }
                return (int)spreader.invokeExact(source, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }
    private static final int VIPS_FOREIGN_SUBSAMPLE_AUTO = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_SUBSAMPLE_AUTO = 0
     * }
     */
    public static int VIPS_FOREIGN_SUBSAMPLE_AUTO() {
        return VIPS_FOREIGN_SUBSAMPLE_AUTO;
    }
    private static final int VIPS_FOREIGN_SUBSAMPLE_ON = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_SUBSAMPLE_ON = 1
     * }
     */
    public static int VIPS_FOREIGN_SUBSAMPLE_ON() {
        return VIPS_FOREIGN_SUBSAMPLE_ON;
    }
    private static final int VIPS_FOREIGN_SUBSAMPLE_OFF = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_SUBSAMPLE_OFF = 2
     * }
     */
    public static int VIPS_FOREIGN_SUBSAMPLE_OFF() {
        return VIPS_FOREIGN_SUBSAMPLE_OFF;
    }
    private static final int VIPS_FOREIGN_SUBSAMPLE_LAST = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_SUBSAMPLE_LAST = 3
     * }
     */
    public static int VIPS_FOREIGN_SUBSAMPLE_LAST() {
        return VIPS_FOREIGN_SUBSAMPLE_LAST;
    }
    private static final int VIPS_FOREIGN_JPEG_SUBSAMPLE_AUTO = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_JPEG_SUBSAMPLE_AUTO = 0
     * }
     */
    public static int VIPS_FOREIGN_JPEG_SUBSAMPLE_AUTO() {
        return VIPS_FOREIGN_JPEG_SUBSAMPLE_AUTO;
    }
    private static final int VIPS_FOREIGN_JPEG_SUBSAMPLE_ON = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_JPEG_SUBSAMPLE_ON = 1
     * }
     */
    public static int VIPS_FOREIGN_JPEG_SUBSAMPLE_ON() {
        return VIPS_FOREIGN_JPEG_SUBSAMPLE_ON;
    }
    private static final int VIPS_FOREIGN_JPEG_SUBSAMPLE_OFF = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_JPEG_SUBSAMPLE_OFF = 2
     * }
     */
    public static int VIPS_FOREIGN_JPEG_SUBSAMPLE_OFF() {
        return VIPS_FOREIGN_JPEG_SUBSAMPLE_OFF;
    }
    private static final int VIPS_FOREIGN_JPEG_SUBSAMPLE_LAST = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_JPEG_SUBSAMPLE_LAST = 3
     * }
     */
    public static int VIPS_FOREIGN_JPEG_SUBSAMPLE_LAST() {
        return VIPS_FOREIGN_JPEG_SUBSAMPLE_LAST;
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_jpegload(const char *filename, VipsImage **out, ...)
     * }
     */
    public static class vips_jpegload {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_jpegload");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_jpegload(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_jpegload(const char *filename, VipsImage **out, ...)
         * }
         */
        public static vips_jpegload makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_jpegload(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment filename, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_jpegload", filename, out, x2);
                }
                return (int)spreader.invokeExact(filename, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_jpegload_buffer(void *buf, size_t len, VipsImage **out, ...)
     * }
     */
    public static class vips_jpegload_buffer {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_LONG,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_jpegload_buffer");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_jpegload_buffer(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_jpegload_buffer(void *buf, size_t len, VipsImage **out, ...)
         * }
         */
        public static vips_jpegload_buffer makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_jpegload_buffer(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment buf, long len, MemorySegment out, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_jpegload_buffer", buf, len, out, x3);
                }
                return (int)spreader.invokeExact(buf, len, out, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_jpegload_source(VipsSource *source, VipsImage **out, ...)
     * }
     */
    public static class vips_jpegload_source {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_jpegload_source");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_jpegload_source(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_jpegload_source(VipsSource *source, VipsImage **out, ...)
         * }
         */
        public static vips_jpegload_source makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_jpegload_source(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment source, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_jpegload_source", source, out, x2);
                }
                return (int)spreader.invokeExact(source, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_jpegsave_target(VipsImage *in, VipsTarget *target, ...)
     * }
     */
    public static class vips_jpegsave_target {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_jpegsave_target");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_jpegsave_target(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_jpegsave_target(VipsImage *in, VipsTarget *target, ...)
         * }
         */
        public static vips_jpegsave_target makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_jpegsave_target(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment target, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_jpegsave_target", in, target, x2);
                }
                return (int)spreader.invokeExact(in, target, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_jpegsave(VipsImage *in, const char *filename, ...)
     * }
     */
    public static class vips_jpegsave {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_jpegsave");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_jpegsave(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_jpegsave(VipsImage *in, const char *filename, ...)
         * }
         */
        public static vips_jpegsave makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_jpegsave(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment filename, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_jpegsave", in, filename, x2);
                }
                return (int)spreader.invokeExact(in, filename, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_jpegsave_buffer(VipsImage *in, void **buf, size_t *len, ...)
     * }
     */
    public static class vips_jpegsave_buffer {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_jpegsave_buffer");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_jpegsave_buffer(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_jpegsave_buffer(VipsImage *in, void **buf, size_t *len, ...)
         * }
         */
        public static vips_jpegsave_buffer makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_jpegsave_buffer(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment buf, MemorySegment len, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_jpegsave_buffer", in, buf, len, x3);
                }
                return (int)spreader.invokeExact(in, buf, len, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_jpegsave_mime(VipsImage *in, ...)
     * }
     */
    public static class vips_jpegsave_mime {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_jpegsave_mime");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_jpegsave_mime(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_jpegsave_mime(VipsImage *in, ...)
         * }
         */
        public static vips_jpegsave_mime makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_jpegsave_mime(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_jpegsave_mime", in, x1);
                }
                return (int)spreader.invokeExact(in, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }
    private static final int VIPS_FOREIGN_WEBP_PRESET_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_WEBP_PRESET_DEFAULT = 0
     * }
     */
    public static int VIPS_FOREIGN_WEBP_PRESET_DEFAULT() {
        return VIPS_FOREIGN_WEBP_PRESET_DEFAULT;
    }
    private static final int VIPS_FOREIGN_WEBP_PRESET_PICTURE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_WEBP_PRESET_PICTURE = 1
     * }
     */
    public static int VIPS_FOREIGN_WEBP_PRESET_PICTURE() {
        return VIPS_FOREIGN_WEBP_PRESET_PICTURE;
    }
    private static final int VIPS_FOREIGN_WEBP_PRESET_PHOTO = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_WEBP_PRESET_PHOTO = 2
     * }
     */
    public static int VIPS_FOREIGN_WEBP_PRESET_PHOTO() {
        return VIPS_FOREIGN_WEBP_PRESET_PHOTO;
    }
    private static final int VIPS_FOREIGN_WEBP_PRESET_DRAWING = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_WEBP_PRESET_DRAWING = 3
     * }
     */
    public static int VIPS_FOREIGN_WEBP_PRESET_DRAWING() {
        return VIPS_FOREIGN_WEBP_PRESET_DRAWING;
    }
    private static final int VIPS_FOREIGN_WEBP_PRESET_ICON = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_WEBP_PRESET_ICON = 4
     * }
     */
    public static int VIPS_FOREIGN_WEBP_PRESET_ICON() {
        return VIPS_FOREIGN_WEBP_PRESET_ICON;
    }
    private static final int VIPS_FOREIGN_WEBP_PRESET_TEXT = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_WEBP_PRESET_TEXT = 5
     * }
     */
    public static int VIPS_FOREIGN_WEBP_PRESET_TEXT() {
        return VIPS_FOREIGN_WEBP_PRESET_TEXT;
    }
    private static final int VIPS_FOREIGN_WEBP_PRESET_LAST = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_WEBP_PRESET_LAST = 6
     * }
     */
    public static int VIPS_FOREIGN_WEBP_PRESET_LAST() {
        return VIPS_FOREIGN_WEBP_PRESET_LAST;
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_webpload_source(VipsSource *source, VipsImage **out, ...)
     * }
     */
    public static class vips_webpload_source {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_webpload_source");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_webpload_source(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_webpload_source(VipsSource *source, VipsImage **out, ...)
         * }
         */
        public static vips_webpload_source makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_webpload_source(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment source, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_webpload_source", source, out, x2);
                }
                return (int)spreader.invokeExact(source, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_webpload(const char *filename, VipsImage **out, ...)
     * }
     */
    public static class vips_webpload {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_webpload");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_webpload(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_webpload(const char *filename, VipsImage **out, ...)
         * }
         */
        public static vips_webpload makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_webpload(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment filename, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_webpload", filename, out, x2);
                }
                return (int)spreader.invokeExact(filename, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_webpload_buffer(void *buf, size_t len, VipsImage **out, ...)
     * }
     */
    public static class vips_webpload_buffer {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_LONG,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_webpload_buffer");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_webpload_buffer(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_webpload_buffer(void *buf, size_t len, VipsImage **out, ...)
         * }
         */
        public static vips_webpload_buffer makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_webpload_buffer(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment buf, long len, MemorySegment out, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_webpload_buffer", buf, len, out, x3);
                }
                return (int)spreader.invokeExact(buf, len, out, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_webpsave_target(VipsImage *in, VipsTarget *target, ...)
     * }
     */
    public static class vips_webpsave_target {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_webpsave_target");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_webpsave_target(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_webpsave_target(VipsImage *in, VipsTarget *target, ...)
         * }
         */
        public static vips_webpsave_target makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_webpsave_target(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment target, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_webpsave_target", in, target, x2);
                }
                return (int)spreader.invokeExact(in, target, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_webpsave(VipsImage *in, const char *filename, ...)
     * }
     */
    public static class vips_webpsave {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_webpsave");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_webpsave(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_webpsave(VipsImage *in, const char *filename, ...)
         * }
         */
        public static vips_webpsave makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_webpsave(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment filename, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_webpsave", in, filename, x2);
                }
                return (int)spreader.invokeExact(in, filename, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_webpsave_buffer(VipsImage *in, void **buf, size_t *len, ...)
     * }
     */
    public static class vips_webpsave_buffer {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_webpsave_buffer");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_webpsave_buffer(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_webpsave_buffer(VipsImage *in, void **buf, size_t *len, ...)
         * }
         */
        public static vips_webpsave_buffer makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_webpsave_buffer(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment buf, MemorySegment len, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_webpsave_buffer", in, buf, len, x3);
                }
                return (int)spreader.invokeExact(in, buf, len, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_webpsave_mime(VipsImage *in, ...)
     * }
     */
    public static class vips_webpsave_mime {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_webpsave_mime");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_webpsave_mime(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_webpsave_mime(VipsImage *in, ...)
         * }
         */
        public static vips_webpsave_mime makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_webpsave_mime(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_webpsave_mime", in, x1);
                }
                return (int)spreader.invokeExact(in, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }
    private static final int VIPS_FOREIGN_TIFF_COMPRESSION_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_TIFF_COMPRESSION_NONE = 0
     * }
     */
    public static int VIPS_FOREIGN_TIFF_COMPRESSION_NONE() {
        return VIPS_FOREIGN_TIFF_COMPRESSION_NONE;
    }
    private static final int VIPS_FOREIGN_TIFF_COMPRESSION_JPEG = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_TIFF_COMPRESSION_JPEG = 1
     * }
     */
    public static int VIPS_FOREIGN_TIFF_COMPRESSION_JPEG() {
        return VIPS_FOREIGN_TIFF_COMPRESSION_JPEG;
    }
    private static final int VIPS_FOREIGN_TIFF_COMPRESSION_DEFLATE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_TIFF_COMPRESSION_DEFLATE = 2
     * }
     */
    public static int VIPS_FOREIGN_TIFF_COMPRESSION_DEFLATE() {
        return VIPS_FOREIGN_TIFF_COMPRESSION_DEFLATE;
    }
    private static final int VIPS_FOREIGN_TIFF_COMPRESSION_PACKBITS = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_TIFF_COMPRESSION_PACKBITS = 3
     * }
     */
    public static int VIPS_FOREIGN_TIFF_COMPRESSION_PACKBITS() {
        return VIPS_FOREIGN_TIFF_COMPRESSION_PACKBITS;
    }
    private static final int VIPS_FOREIGN_TIFF_COMPRESSION_CCITTFAX4 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_TIFF_COMPRESSION_CCITTFAX4 = 4
     * }
     */
    public static int VIPS_FOREIGN_TIFF_COMPRESSION_CCITTFAX4() {
        return VIPS_FOREIGN_TIFF_COMPRESSION_CCITTFAX4;
    }
    private static final int VIPS_FOREIGN_TIFF_COMPRESSION_LZW = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_TIFF_COMPRESSION_LZW = 5
     * }
     */
    public static int VIPS_FOREIGN_TIFF_COMPRESSION_LZW() {
        return VIPS_FOREIGN_TIFF_COMPRESSION_LZW;
    }
    private static final int VIPS_FOREIGN_TIFF_COMPRESSION_WEBP = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_TIFF_COMPRESSION_WEBP = 6
     * }
     */
    public static int VIPS_FOREIGN_TIFF_COMPRESSION_WEBP() {
        return VIPS_FOREIGN_TIFF_COMPRESSION_WEBP;
    }
    private static final int VIPS_FOREIGN_TIFF_COMPRESSION_ZSTD = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_TIFF_COMPRESSION_ZSTD = 7
     * }
     */
    public static int VIPS_FOREIGN_TIFF_COMPRESSION_ZSTD() {
        return VIPS_FOREIGN_TIFF_COMPRESSION_ZSTD;
    }
    private static final int VIPS_FOREIGN_TIFF_COMPRESSION_JP2K = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_TIFF_COMPRESSION_JP2K = 8
     * }
     */
    public static int VIPS_FOREIGN_TIFF_COMPRESSION_JP2K() {
        return VIPS_FOREIGN_TIFF_COMPRESSION_JP2K;
    }
    private static final int VIPS_FOREIGN_TIFF_COMPRESSION_LAST = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_TIFF_COMPRESSION_LAST = 9
     * }
     */
    public static int VIPS_FOREIGN_TIFF_COMPRESSION_LAST() {
        return VIPS_FOREIGN_TIFF_COMPRESSION_LAST;
    }
    private static final int VIPS_FOREIGN_TIFF_PREDICTOR_NONE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_TIFF_PREDICTOR_NONE = 1
     * }
     */
    public static int VIPS_FOREIGN_TIFF_PREDICTOR_NONE() {
        return VIPS_FOREIGN_TIFF_PREDICTOR_NONE;
    }
    private static final int VIPS_FOREIGN_TIFF_PREDICTOR_HORIZONTAL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_TIFF_PREDICTOR_HORIZONTAL = 2
     * }
     */
    public static int VIPS_FOREIGN_TIFF_PREDICTOR_HORIZONTAL() {
        return VIPS_FOREIGN_TIFF_PREDICTOR_HORIZONTAL;
    }
    private static final int VIPS_FOREIGN_TIFF_PREDICTOR_FLOAT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_TIFF_PREDICTOR_FLOAT = 3
     * }
     */
    public static int VIPS_FOREIGN_TIFF_PREDICTOR_FLOAT() {
        return VIPS_FOREIGN_TIFF_PREDICTOR_FLOAT;
    }
    private static final int VIPS_FOREIGN_TIFF_PREDICTOR_LAST = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_TIFF_PREDICTOR_LAST = 4
     * }
     */
    public static int VIPS_FOREIGN_TIFF_PREDICTOR_LAST() {
        return VIPS_FOREIGN_TIFF_PREDICTOR_LAST;
    }
    private static final int VIPS_FOREIGN_TIFF_RESUNIT_CM = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_TIFF_RESUNIT_CM = 0
     * }
     */
    public static int VIPS_FOREIGN_TIFF_RESUNIT_CM() {
        return VIPS_FOREIGN_TIFF_RESUNIT_CM;
    }
    private static final int VIPS_FOREIGN_TIFF_RESUNIT_INCH = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_TIFF_RESUNIT_INCH = 1
     * }
     */
    public static int VIPS_FOREIGN_TIFF_RESUNIT_INCH() {
        return VIPS_FOREIGN_TIFF_RESUNIT_INCH;
    }
    private static final int VIPS_FOREIGN_TIFF_RESUNIT_LAST = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_TIFF_RESUNIT_LAST = 2
     * }
     */
    public static int VIPS_FOREIGN_TIFF_RESUNIT_LAST() {
        return VIPS_FOREIGN_TIFF_RESUNIT_LAST;
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_tiffload(const char *filename, VipsImage **out, ...)
     * }
     */
    public static class vips_tiffload {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_tiffload");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_tiffload(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_tiffload(const char *filename, VipsImage **out, ...)
         * }
         */
        public static vips_tiffload makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_tiffload(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment filename, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_tiffload", filename, out, x2);
                }
                return (int)spreader.invokeExact(filename, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_tiffload_buffer(void *buf, size_t len, VipsImage **out, ...)
     * }
     */
    public static class vips_tiffload_buffer {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_LONG,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_tiffload_buffer");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_tiffload_buffer(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_tiffload_buffer(void *buf, size_t len, VipsImage **out, ...)
         * }
         */
        public static vips_tiffload_buffer makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_tiffload_buffer(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment buf, long len, MemorySegment out, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_tiffload_buffer", buf, len, out, x3);
                }
                return (int)spreader.invokeExact(buf, len, out, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_tiffload_source(VipsSource *source, VipsImage **out, ...)
     * }
     */
    public static class vips_tiffload_source {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_tiffload_source");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_tiffload_source(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_tiffload_source(VipsSource *source, VipsImage **out, ...)
         * }
         */
        public static vips_tiffload_source makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_tiffload_source(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment source, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_tiffload_source", source, out, x2);
                }
                return (int)spreader.invokeExact(source, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_tiffsave(VipsImage *in, const char *filename, ...)
     * }
     */
    public static class vips_tiffsave {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_tiffsave");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_tiffsave(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_tiffsave(VipsImage *in, const char *filename, ...)
         * }
         */
        public static vips_tiffsave makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_tiffsave(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment filename, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_tiffsave", in, filename, x2);
                }
                return (int)spreader.invokeExact(in, filename, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_tiffsave_buffer(VipsImage *in, void **buf, size_t *len, ...)
     * }
     */
    public static class vips_tiffsave_buffer {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_tiffsave_buffer");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_tiffsave_buffer(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_tiffsave_buffer(VipsImage *in, void **buf, size_t *len, ...)
         * }
         */
        public static vips_tiffsave_buffer makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_tiffsave_buffer(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment buf, MemorySegment len, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_tiffsave_buffer", in, buf, len, x3);
                }
                return (int)spreader.invokeExact(in, buf, len, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_tiffsave_target(VipsImage *in, VipsTarget *target, ...)
     * }
     */
    public static class vips_tiffsave_target {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_tiffsave_target");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_tiffsave_target(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_tiffsave_target(VipsImage *in, VipsTarget *target, ...)
         * }
         */
        public static vips_tiffsave_target makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_tiffsave_target(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment target, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_tiffsave_target", in, target, x2);
                }
                return (int)spreader.invokeExact(in, target, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_openexrload(const char *filename, VipsImage **out, ...)
     * }
     */
    public static class vips_openexrload {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_openexrload");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_openexrload(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_openexrload(const char *filename, VipsImage **out, ...)
         * }
         */
        public static vips_openexrload makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_openexrload(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment filename, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_openexrload", filename, out, x2);
                }
                return (int)spreader.invokeExact(filename, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_fitsload(const char *filename, VipsImage **out, ...)
     * }
     */
    public static class vips_fitsload {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_fitsload");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_fitsload(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_fitsload(const char *filename, VipsImage **out, ...)
         * }
         */
        public static vips_fitsload makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_fitsload(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment filename, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_fitsload", filename, out, x2);
                }
                return (int)spreader.invokeExact(filename, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_fitssave(VipsImage *in, const char *filename, ...)
     * }
     */
    public static class vips_fitssave {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_fitssave");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_fitssave(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_fitssave(VipsImage *in, const char *filename, ...)
         * }
         */
        public static vips_fitssave makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_fitssave(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment filename, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_fitssave", in, filename, x2);
                }
                return (int)spreader.invokeExact(in, filename, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_analyzeload(const char *filename, VipsImage **out, ...)
     * }
     */
    public static class vips_analyzeload {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_analyzeload");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_analyzeload(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_analyzeload(const char *filename, VipsImage **out, ...)
         * }
         */
        public static vips_analyzeload makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_analyzeload(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment filename, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_analyzeload", filename, out, x2);
                }
                return (int)spreader.invokeExact(filename, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_rawload(const char *filename, VipsImage **out, int width, int height, int bands, ...)
     * }
     */
    public static class vips_rawload {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_INT,
                vips_h.C_INT,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_rawload");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_rawload(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_rawload(const char *filename, VipsImage **out, int width, int height, int bands, ...)
         * }
         */
        public static vips_rawload makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_rawload(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment filename, MemorySegment out, int width, int height, int bands, Object... x5) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_rawload", filename, out, width, height, bands, x5);
                }
                return (int)spreader.invokeExact(filename, out, width, height, bands, x5);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_rawsave(VipsImage *in, const char *filename, ...)
     * }
     */
    public static class vips_rawsave {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_rawsave");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_rawsave(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_rawsave(VipsImage *in, const char *filename, ...)
         * }
         */
        public static vips_rawsave makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_rawsave(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment filename, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_rawsave", in, filename, x2);
                }
                return (int)spreader.invokeExact(in, filename, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_rawsave_fd(VipsImage *in, int fd, ...)
     * }
     */
    public static class vips_rawsave_fd {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_INT
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_rawsave_fd");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_rawsave_fd(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_rawsave_fd(VipsImage *in, int fd, ...)
         * }
         */
        public static vips_rawsave_fd makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_rawsave_fd(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, int fd, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_rawsave_fd", in, fd, x2);
                }
                return (int)spreader.invokeExact(in, fd, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_csvload(const char *filename, VipsImage **out, ...)
     * }
     */
    public static class vips_csvload {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_csvload");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_csvload(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_csvload(const char *filename, VipsImage **out, ...)
         * }
         */
        public static vips_csvload makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_csvload(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment filename, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_csvload", filename, out, x2);
                }
                return (int)spreader.invokeExact(filename, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_csvload_source(VipsSource *source, VipsImage **out, ...)
     * }
     */
    public static class vips_csvload_source {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_csvload_source");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_csvload_source(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_csvload_source(VipsSource *source, VipsImage **out, ...)
         * }
         */
        public static vips_csvload_source makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_csvload_source(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment source, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_csvload_source", source, out, x2);
                }
                return (int)spreader.invokeExact(source, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_csvsave(VipsImage *in, const char *filename, ...)
     * }
     */
    public static class vips_csvsave {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_csvsave");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_csvsave(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_csvsave(VipsImage *in, const char *filename, ...)
         * }
         */
        public static vips_csvsave makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_csvsave(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment filename, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_csvsave", in, filename, x2);
                }
                return (int)spreader.invokeExact(in, filename, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_csvsave_target(VipsImage *in, VipsTarget *target, ...)
     * }
     */
    public static class vips_csvsave_target {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_csvsave_target");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_csvsave_target(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_csvsave_target(VipsImage *in, VipsTarget *target, ...)
         * }
         */
        public static vips_csvsave_target makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_csvsave_target(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment target, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_csvsave_target", in, target, x2);
                }
                return (int)spreader.invokeExact(in, target, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_matrixload(const char *filename, VipsImage **out, ...)
     * }
     */
    public static class vips_matrixload {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_matrixload");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_matrixload(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_matrixload(const char *filename, VipsImage **out, ...)
         * }
         */
        public static vips_matrixload makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_matrixload(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment filename, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_matrixload", filename, out, x2);
                }
                return (int)spreader.invokeExact(filename, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_matrixload_source(VipsSource *source, VipsImage **out, ...)
     * }
     */
    public static class vips_matrixload_source {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_matrixload_source");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_matrixload_source(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_matrixload_source(VipsSource *source, VipsImage **out, ...)
         * }
         */
        public static vips_matrixload_source makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_matrixload_source(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment source, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_matrixload_source", source, out, x2);
                }
                return (int)spreader.invokeExact(source, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_matrixsave(VipsImage *in, const char *filename, ...)
     * }
     */
    public static class vips_matrixsave {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_matrixsave");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_matrixsave(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_matrixsave(VipsImage *in, const char *filename, ...)
         * }
         */
        public static vips_matrixsave makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_matrixsave(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment filename, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_matrixsave", in, filename, x2);
                }
                return (int)spreader.invokeExact(in, filename, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_matrixsave_target(VipsImage *in, VipsTarget *target, ...)
     * }
     */
    public static class vips_matrixsave_target {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_matrixsave_target");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_matrixsave_target(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_matrixsave_target(VipsImage *in, VipsTarget *target, ...)
         * }
         */
        public static vips_matrixsave_target makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_matrixsave_target(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment target, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_matrixsave_target", in, target, x2);
                }
                return (int)spreader.invokeExact(in, target, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_matrixprint(VipsImage *in, ...)
     * }
     */
    public static class vips_matrixprint {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_matrixprint");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_matrixprint(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_matrixprint(VipsImage *in, ...)
         * }
         */
        public static vips_matrixprint makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_matrixprint(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_matrixprint", in, x1);
                }
                return (int)spreader.invokeExact(in, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_magickload(const char *filename, VipsImage **out, ...)
     * }
     */
    public static class vips_magickload {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_magickload");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_magickload(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_magickload(const char *filename, VipsImage **out, ...)
         * }
         */
        public static vips_magickload makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_magickload(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment filename, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_magickload", filename, out, x2);
                }
                return (int)spreader.invokeExact(filename, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_magickload_buffer(void *buf, size_t len, VipsImage **out, ...)
     * }
     */
    public static class vips_magickload_buffer {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_LONG,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_magickload_buffer");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_magickload_buffer(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_magickload_buffer(void *buf, size_t len, VipsImage **out, ...)
         * }
         */
        public static vips_magickload_buffer makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_magickload_buffer(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment buf, long len, MemorySegment out, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_magickload_buffer", buf, len, out, x3);
                }
                return (int)spreader.invokeExact(buf, len, out, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_magicksave(VipsImage *in, const char *filename, ...)
     * }
     */
    public static class vips_magicksave {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_magicksave");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_magicksave(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_magicksave(VipsImage *in, const char *filename, ...)
         * }
         */
        public static vips_magicksave makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_magicksave(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment filename, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_magicksave", in, filename, x2);
                }
                return (int)spreader.invokeExact(in, filename, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_magicksave_buffer(VipsImage *in, void **buf, size_t *len, ...)
     * }
     */
    public static class vips_magicksave_buffer {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_magicksave_buffer");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_magicksave_buffer(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_magicksave_buffer(VipsImage *in, void **buf, size_t *len, ...)
         * }
         */
        public static vips_magicksave_buffer makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_magicksave_buffer(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment buf, MemorySegment len, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_magicksave_buffer", in, buf, len, x3);
                }
                return (int)spreader.invokeExact(in, buf, len, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }
    private static final int VIPS_FOREIGN_PNG_FILTER_NONE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_PNG_FILTER_NONE = 8
     * }
     */
    public static int VIPS_FOREIGN_PNG_FILTER_NONE() {
        return VIPS_FOREIGN_PNG_FILTER_NONE;
    }
    private static final int VIPS_FOREIGN_PNG_FILTER_SUB = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_PNG_FILTER_SUB = 16
     * }
     */
    public static int VIPS_FOREIGN_PNG_FILTER_SUB() {
        return VIPS_FOREIGN_PNG_FILTER_SUB;
    }
    private static final int VIPS_FOREIGN_PNG_FILTER_UP = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_PNG_FILTER_UP = 32
     * }
     */
    public static int VIPS_FOREIGN_PNG_FILTER_UP() {
        return VIPS_FOREIGN_PNG_FILTER_UP;
    }
    private static final int VIPS_FOREIGN_PNG_FILTER_AVG = (int)64L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_PNG_FILTER_AVG = 64
     * }
     */
    public static int VIPS_FOREIGN_PNG_FILTER_AVG() {
        return VIPS_FOREIGN_PNG_FILTER_AVG;
    }
    private static final int VIPS_FOREIGN_PNG_FILTER_PAETH = (int)128L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_PNG_FILTER_PAETH = 128
     * }
     */
    public static int VIPS_FOREIGN_PNG_FILTER_PAETH() {
        return VIPS_FOREIGN_PNG_FILTER_PAETH;
    }
    private static final int VIPS_FOREIGN_PNG_FILTER_ALL = (int)248L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_PNG_FILTER_ALL = 248
     * }
     */
    public static int VIPS_FOREIGN_PNG_FILTER_ALL() {
        return VIPS_FOREIGN_PNG_FILTER_ALL;
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_pngload_source(VipsSource *source, VipsImage **out, ...)
     * }
     */
    public static class vips_pngload_source {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_pngload_source");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_pngload_source(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_pngload_source(VipsSource *source, VipsImage **out, ...)
         * }
         */
        public static vips_pngload_source makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_pngload_source(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment source, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_pngload_source", source, out, x2);
                }
                return (int)spreader.invokeExact(source, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_pngload(const char *filename, VipsImage **out, ...)
     * }
     */
    public static class vips_pngload {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_pngload");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_pngload(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_pngload(const char *filename, VipsImage **out, ...)
         * }
         */
        public static vips_pngload makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_pngload(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment filename, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_pngload", filename, out, x2);
                }
                return (int)spreader.invokeExact(filename, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_pngload_buffer(void *buf, size_t len, VipsImage **out, ...)
     * }
     */
    public static class vips_pngload_buffer {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_LONG,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_pngload_buffer");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_pngload_buffer(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_pngload_buffer(void *buf, size_t len, VipsImage **out, ...)
         * }
         */
        public static vips_pngload_buffer makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_pngload_buffer(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment buf, long len, MemorySegment out, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_pngload_buffer", buf, len, out, x3);
                }
                return (int)spreader.invokeExact(buf, len, out, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_pngsave_target(VipsImage *in, VipsTarget *target, ...)
     * }
     */
    public static class vips_pngsave_target {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_pngsave_target");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_pngsave_target(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_pngsave_target(VipsImage *in, VipsTarget *target, ...)
         * }
         */
        public static vips_pngsave_target makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_pngsave_target(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment target, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_pngsave_target", in, target, x2);
                }
                return (int)spreader.invokeExact(in, target, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_pngsave(VipsImage *in, const char *filename, ...)
     * }
     */
    public static class vips_pngsave {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_pngsave");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_pngsave(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_pngsave(VipsImage *in, const char *filename, ...)
         * }
         */
        public static vips_pngsave makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_pngsave(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment filename, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_pngsave", in, filename, x2);
                }
                return (int)spreader.invokeExact(in, filename, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_pngsave_buffer(VipsImage *in, void **buf, size_t *len, ...)
     * }
     */
    public static class vips_pngsave_buffer {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_pngsave_buffer");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_pngsave_buffer(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_pngsave_buffer(VipsImage *in, void **buf, size_t *len, ...)
         * }
         */
        public static vips_pngsave_buffer makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_pngsave_buffer(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment buf, MemorySegment len, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_pngsave_buffer", in, buf, len, x3);
                }
                return (int)spreader.invokeExact(in, buf, len, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }
    private static final int VIPS_FOREIGN_PPM_FORMAT_PBM = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_PPM_FORMAT_PBM = 0
     * }
     */
    public static int VIPS_FOREIGN_PPM_FORMAT_PBM() {
        return VIPS_FOREIGN_PPM_FORMAT_PBM;
    }
    private static final int VIPS_FOREIGN_PPM_FORMAT_PGM = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_PPM_FORMAT_PGM = 1
     * }
     */
    public static int VIPS_FOREIGN_PPM_FORMAT_PGM() {
        return VIPS_FOREIGN_PPM_FORMAT_PGM;
    }
    private static final int VIPS_FOREIGN_PPM_FORMAT_PPM = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_PPM_FORMAT_PPM = 2
     * }
     */
    public static int VIPS_FOREIGN_PPM_FORMAT_PPM() {
        return VIPS_FOREIGN_PPM_FORMAT_PPM;
    }
    private static final int VIPS_FOREIGN_PPM_FORMAT_PFM = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_PPM_FORMAT_PFM = 3
     * }
     */
    public static int VIPS_FOREIGN_PPM_FORMAT_PFM() {
        return VIPS_FOREIGN_PPM_FORMAT_PFM;
    }
    private static final int VIPS_FOREIGN_PPM_FORMAT_PNM = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_PPM_FORMAT_PNM = 4
     * }
     */
    public static int VIPS_FOREIGN_PPM_FORMAT_PNM() {
        return VIPS_FOREIGN_PPM_FORMAT_PNM;
    }
    private static final int VIPS_FOREIGN_PPM_FORMAT_LAST = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_PPM_FORMAT_LAST = 5
     * }
     */
    public static int VIPS_FOREIGN_PPM_FORMAT_LAST() {
        return VIPS_FOREIGN_PPM_FORMAT_LAST;
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_ppmload(const char *filename, VipsImage **out, ...)
     * }
     */
    public static class vips_ppmload {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_ppmload");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_ppmload(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_ppmload(const char *filename, VipsImage **out, ...)
         * }
         */
        public static vips_ppmload makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_ppmload(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment filename, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_ppmload", filename, out, x2);
                }
                return (int)spreader.invokeExact(filename, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_ppmload_source(VipsSource *source, VipsImage **out, ...)
     * }
     */
    public static class vips_ppmload_source {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_ppmload_source");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_ppmload_source(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_ppmload_source(VipsSource *source, VipsImage **out, ...)
         * }
         */
        public static vips_ppmload_source makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_ppmload_source(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment source, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_ppmload_source", source, out, x2);
                }
                return (int)spreader.invokeExact(source, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_ppmsave(VipsImage *in, const char *filename, ...)
     * }
     */
    public static class vips_ppmsave {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_ppmsave");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_ppmsave(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_ppmsave(VipsImage *in, const char *filename, ...)
         * }
         */
        public static vips_ppmsave makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_ppmsave(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment filename, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_ppmsave", in, filename, x2);
                }
                return (int)spreader.invokeExact(in, filename, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_ppmsave_target(VipsImage *in, VipsTarget *target, ...)
     * }
     */
    public static class vips_ppmsave_target {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_ppmsave_target");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_ppmsave_target(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_ppmsave_target(VipsImage *in, VipsTarget *target, ...)
         * }
         */
        public static vips_ppmsave_target makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_ppmsave_target(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment target, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_ppmsave_target", in, target, x2);
                }
                return (int)spreader.invokeExact(in, target, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_matload(const char *filename, VipsImage **out, ...)
     * }
     */
    public static class vips_matload {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_matload");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_matload(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_matload(const char *filename, VipsImage **out, ...)
         * }
         */
        public static vips_matload makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_matload(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment filename, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_matload", filename, out, x2);
                }
                return (int)spreader.invokeExact(filename, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_radload_source(VipsSource *source, VipsImage **out, ...)
     * }
     */
    public static class vips_radload_source {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_radload_source");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_radload_source(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_radload_source(VipsSource *source, VipsImage **out, ...)
         * }
         */
        public static vips_radload_source makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_radload_source(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment source, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_radload_source", source, out, x2);
                }
                return (int)spreader.invokeExact(source, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_radload(const char *filename, VipsImage **out, ...)
     * }
     */
    public static class vips_radload {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_radload");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_radload(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_radload(const char *filename, VipsImage **out, ...)
         * }
         */
        public static vips_radload makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_radload(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment filename, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_radload", filename, out, x2);
                }
                return (int)spreader.invokeExact(filename, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_radload_buffer(void *buf, size_t len, VipsImage **out, ...)
     * }
     */
    public static class vips_radload_buffer {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_LONG,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_radload_buffer");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_radload_buffer(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_radload_buffer(void *buf, size_t len, VipsImage **out, ...)
         * }
         */
        public static vips_radload_buffer makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_radload_buffer(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment buf, long len, MemorySegment out, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_radload_buffer", buf, len, out, x3);
                }
                return (int)spreader.invokeExact(buf, len, out, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_radsave(VipsImage *in, const char *filename, ...)
     * }
     */
    public static class vips_radsave {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_radsave");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_radsave(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_radsave(VipsImage *in, const char *filename, ...)
         * }
         */
        public static vips_radsave makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_radsave(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment filename, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_radsave", in, filename, x2);
                }
                return (int)spreader.invokeExact(in, filename, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_radsave_buffer(VipsImage *in, void **buf, size_t *len, ...)
     * }
     */
    public static class vips_radsave_buffer {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_radsave_buffer");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_radsave_buffer(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_radsave_buffer(VipsImage *in, void **buf, size_t *len, ...)
         * }
         */
        public static vips_radsave_buffer makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_radsave_buffer(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment buf, MemorySegment len, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_radsave_buffer", in, buf, len, x3);
                }
                return (int)spreader.invokeExact(in, buf, len, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_radsave_target(VipsImage *in, VipsTarget *target, ...)
     * }
     */
    public static class vips_radsave_target {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_radsave_target");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_radsave_target(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_radsave_target(VipsImage *in, VipsTarget *target, ...)
         * }
         */
        public static vips_radsave_target makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_radsave_target(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment target, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_radsave_target", in, target, x2);
                }
                return (int)spreader.invokeExact(in, target, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_pdfload(const char *filename, VipsImage **out, ...)
     * }
     */
    public static class vips_pdfload {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_pdfload");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_pdfload(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_pdfload(const char *filename, VipsImage **out, ...)
         * }
         */
        public static vips_pdfload makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_pdfload(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment filename, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_pdfload", filename, out, x2);
                }
                return (int)spreader.invokeExact(filename, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_pdfload_buffer(void *buf, size_t len, VipsImage **out, ...)
     * }
     */
    public static class vips_pdfload_buffer {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_LONG,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_pdfload_buffer");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_pdfload_buffer(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_pdfload_buffer(void *buf, size_t len, VipsImage **out, ...)
         * }
         */
        public static vips_pdfload_buffer makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_pdfload_buffer(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment buf, long len, MemorySegment out, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_pdfload_buffer", buf, len, out, x3);
                }
                return (int)spreader.invokeExact(buf, len, out, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_pdfload_source(VipsSource *source, VipsImage **out, ...)
     * }
     */
    public static class vips_pdfload_source {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_pdfload_source");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_pdfload_source(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_pdfload_source(VipsSource *source, VipsImage **out, ...)
         * }
         */
        public static vips_pdfload_source makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_pdfload_source(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment source, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_pdfload_source", source, out, x2);
                }
                return (int)spreader.invokeExact(source, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_svgload(const char *filename, VipsImage **out, ...)
     * }
     */
    public static class vips_svgload {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_svgload");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_svgload(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_svgload(const char *filename, VipsImage **out, ...)
         * }
         */
        public static vips_svgload makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_svgload(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment filename, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_svgload", filename, out, x2);
                }
                return (int)spreader.invokeExact(filename, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_svgload_buffer(void *buf, size_t len, VipsImage **out, ...)
     * }
     */
    public static class vips_svgload_buffer {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_LONG,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_svgload_buffer");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_svgload_buffer(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_svgload_buffer(void *buf, size_t len, VipsImage **out, ...)
         * }
         */
        public static vips_svgload_buffer makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_svgload_buffer(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment buf, long len, MemorySegment out, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_svgload_buffer", buf, len, out, x3);
                }
                return (int)spreader.invokeExact(buf, len, out, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_svgload_string(const char *str, VipsImage **out, ...)
     * }
     */
    public static class vips_svgload_string {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_svgload_string");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_svgload_string(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_svgload_string(const char *str, VipsImage **out, ...)
         * }
         */
        public static vips_svgload_string makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_svgload_string(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment str, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_svgload_string", str, out, x2);
                }
                return (int)spreader.invokeExact(str, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_svgload_source(VipsSource *source, VipsImage **out, ...)
     * }
     */
    public static class vips_svgload_source {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_svgload_source");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_svgload_source(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_svgload_source(VipsSource *source, VipsImage **out, ...)
         * }
         */
        public static vips_svgload_source makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_svgload_source(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment source, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_svgload_source", source, out, x2);
                }
                return (int)spreader.invokeExact(source, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_gifload(const char *filename, VipsImage **out, ...)
     * }
     */
    public static class vips_gifload {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_gifload");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_gifload(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_gifload(const char *filename, VipsImage **out, ...)
         * }
         */
        public static vips_gifload makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_gifload(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment filename, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_gifload", filename, out, x2);
                }
                return (int)spreader.invokeExact(filename, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_gifload_buffer(void *buf, size_t len, VipsImage **out, ...)
     * }
     */
    public static class vips_gifload_buffer {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_LONG,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_gifload_buffer");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_gifload_buffer(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_gifload_buffer(void *buf, size_t len, VipsImage **out, ...)
         * }
         */
        public static vips_gifload_buffer makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_gifload_buffer(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment buf, long len, MemorySegment out, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_gifload_buffer", buf, len, out, x3);
                }
                return (int)spreader.invokeExact(buf, len, out, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_gifload_source(VipsSource *source, VipsImage **out, ...)
     * }
     */
    public static class vips_gifload_source {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_gifload_source");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_gifload_source(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_gifload_source(VipsSource *source, VipsImage **out, ...)
         * }
         */
        public static vips_gifload_source makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_gifload_source(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment source, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_gifload_source", source, out, x2);
                }
                return (int)spreader.invokeExact(source, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_gifsave(VipsImage *in, const char *filename, ...)
     * }
     */
    public static class vips_gifsave {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_gifsave");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_gifsave(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_gifsave(VipsImage *in, const char *filename, ...)
         * }
         */
        public static vips_gifsave makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_gifsave(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment filename, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_gifsave", in, filename, x2);
                }
                return (int)spreader.invokeExact(in, filename, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_gifsave_buffer(VipsImage *in, void **buf, size_t *len, ...)
     * }
     */
    public static class vips_gifsave_buffer {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_gifsave_buffer");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_gifsave_buffer(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_gifsave_buffer(VipsImage *in, void **buf, size_t *len, ...)
         * }
         */
        public static vips_gifsave_buffer makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_gifsave_buffer(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment buf, MemorySegment len, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_gifsave_buffer", in, buf, len, x3);
                }
                return (int)spreader.invokeExact(in, buf, len, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_gifsave_target(VipsImage *in, VipsTarget *target, ...)
     * }
     */
    public static class vips_gifsave_target {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_gifsave_target");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_gifsave_target(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_gifsave_target(VipsImage *in, VipsTarget *target, ...)
         * }
         */
        public static vips_gifsave_target makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_gifsave_target(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment target, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_gifsave_target", in, target, x2);
                }
                return (int)spreader.invokeExact(in, target, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_heifload(const char *filename, VipsImage **out, ...)
     * }
     */
    public static class vips_heifload {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_heifload");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_heifload(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_heifload(const char *filename, VipsImage **out, ...)
         * }
         */
        public static vips_heifload makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_heifload(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment filename, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_heifload", filename, out, x2);
                }
                return (int)spreader.invokeExact(filename, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_heifload_buffer(void *buf, size_t len, VipsImage **out, ...)
     * }
     */
    public static class vips_heifload_buffer {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_LONG,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_heifload_buffer");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_heifload_buffer(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_heifload_buffer(void *buf, size_t len, VipsImage **out, ...)
         * }
         */
        public static vips_heifload_buffer makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_heifload_buffer(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment buf, long len, MemorySegment out, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_heifload_buffer", buf, len, out, x3);
                }
                return (int)spreader.invokeExact(buf, len, out, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_heifload_source(VipsSource *source, VipsImage **out, ...)
     * }
     */
    public static class vips_heifload_source {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_heifload_source");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_heifload_source(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_heifload_source(VipsSource *source, VipsImage **out, ...)
         * }
         */
        public static vips_heifload_source makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_heifload_source(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment source, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_heifload_source", source, out, x2);
                }
                return (int)spreader.invokeExact(source, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_heifsave(VipsImage *in, const char *filename, ...)
     * }
     */
    public static class vips_heifsave {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_heifsave");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_heifsave(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_heifsave(VipsImage *in, const char *filename, ...)
         * }
         */
        public static vips_heifsave makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_heifsave(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment filename, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_heifsave", in, filename, x2);
                }
                return (int)spreader.invokeExact(in, filename, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_heifsave_buffer(VipsImage *in, void **buf, size_t *len, ...)
     * }
     */
    public static class vips_heifsave_buffer {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_heifsave_buffer");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_heifsave_buffer(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_heifsave_buffer(VipsImage *in, void **buf, size_t *len, ...)
         * }
         */
        public static vips_heifsave_buffer makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_heifsave_buffer(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment buf, MemorySegment len, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_heifsave_buffer", in, buf, len, x3);
                }
                return (int)spreader.invokeExact(in, buf, len, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_heifsave_target(VipsImage *in, VipsTarget *target, ...)
     * }
     */
    public static class vips_heifsave_target {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_heifsave_target");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_heifsave_target(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_heifsave_target(VipsImage *in, VipsTarget *target, ...)
         * }
         */
        public static vips_heifsave_target makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_heifsave_target(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment target, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_heifsave_target", in, target, x2);
                }
                return (int)spreader.invokeExact(in, target, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_niftiload(const char *filename, VipsImage **out, ...)
     * }
     */
    public static class vips_niftiload {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_niftiload");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_niftiload(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_niftiload(const char *filename, VipsImage **out, ...)
         * }
         */
        public static vips_niftiload makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_niftiload(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment filename, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_niftiload", filename, out, x2);
                }
                return (int)spreader.invokeExact(filename, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_niftiload_source(VipsSource *source, VipsImage **out, ...)
     * }
     */
    public static class vips_niftiload_source {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_niftiload_source");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_niftiload_source(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_niftiload_source(VipsSource *source, VipsImage **out, ...)
         * }
         */
        public static vips_niftiload_source makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_niftiload_source(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment source, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_niftiload_source", source, out, x2);
                }
                return (int)spreader.invokeExact(source, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_niftisave(VipsImage *in, const char *filename, ...)
     * }
     */
    public static class vips_niftisave {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_niftisave");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_niftisave(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_niftisave(VipsImage *in, const char *filename, ...)
         * }
         */
        public static vips_niftisave makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_niftisave(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment filename, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_niftisave", in, filename, x2);
                }
                return (int)spreader.invokeExact(in, filename, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_jp2kload(const char *filename, VipsImage **out, ...)
     * }
     */
    public static class vips_jp2kload {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_jp2kload");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_jp2kload(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_jp2kload(const char *filename, VipsImage **out, ...)
         * }
         */
        public static vips_jp2kload makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_jp2kload(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment filename, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_jp2kload", filename, out, x2);
                }
                return (int)spreader.invokeExact(filename, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_jp2kload_buffer(void *buf, size_t len, VipsImage **out, ...)
     * }
     */
    public static class vips_jp2kload_buffer {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_LONG,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_jp2kload_buffer");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_jp2kload_buffer(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_jp2kload_buffer(void *buf, size_t len, VipsImage **out, ...)
         * }
         */
        public static vips_jp2kload_buffer makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_jp2kload_buffer(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment buf, long len, MemorySegment out, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_jp2kload_buffer", buf, len, out, x3);
                }
                return (int)spreader.invokeExact(buf, len, out, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_jp2kload_source(VipsSource *source, VipsImage **out, ...)
     * }
     */
    public static class vips_jp2kload_source {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_jp2kload_source");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_jp2kload_source(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_jp2kload_source(VipsSource *source, VipsImage **out, ...)
         * }
         */
        public static vips_jp2kload_source makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_jp2kload_source(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment source, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_jp2kload_source", source, out, x2);
                }
                return (int)spreader.invokeExact(source, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_jp2ksave(VipsImage *in, const char *filename, ...)
     * }
     */
    public static class vips_jp2ksave {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_jp2ksave");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_jp2ksave(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_jp2ksave(VipsImage *in, const char *filename, ...)
         * }
         */
        public static vips_jp2ksave makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_jp2ksave(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment filename, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_jp2ksave", in, filename, x2);
                }
                return (int)spreader.invokeExact(in, filename, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_jp2ksave_buffer(VipsImage *in, void **buf, size_t *len, ...)
     * }
     */
    public static class vips_jp2ksave_buffer {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_jp2ksave_buffer");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_jp2ksave_buffer(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_jp2ksave_buffer(VipsImage *in, void **buf, size_t *len, ...)
         * }
         */
        public static vips_jp2ksave_buffer makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_jp2ksave_buffer(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment buf, MemorySegment len, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_jp2ksave_buffer", in, buf, len, x3);
                }
                return (int)spreader.invokeExact(in, buf, len, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_jp2ksave_target(VipsImage *in, VipsTarget *target, ...)
     * }
     */
    public static class vips_jp2ksave_target {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_jp2ksave_target");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_jp2ksave_target(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_jp2ksave_target(VipsImage *in, VipsTarget *target, ...)
         * }
         */
        public static vips_jp2ksave_target makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_jp2ksave_target(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment target, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_jp2ksave_target", in, target, x2);
                }
                return (int)spreader.invokeExact(in, target, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_jxlload_source(VipsSource *source, VipsImage **out, ...)
     * }
     */
    public static class vips_jxlload_source {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_jxlload_source");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_jxlload_source(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_jxlload_source(VipsSource *source, VipsImage **out, ...)
         * }
         */
        public static vips_jxlload_source makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_jxlload_source(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment source, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_jxlload_source", source, out, x2);
                }
                return (int)spreader.invokeExact(source, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_jxlload_buffer(void *buf, size_t len, VipsImage **out, ...)
     * }
     */
    public static class vips_jxlload_buffer {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_LONG,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_jxlload_buffer");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_jxlload_buffer(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_jxlload_buffer(void *buf, size_t len, VipsImage **out, ...)
         * }
         */
        public static vips_jxlload_buffer makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_jxlload_buffer(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment buf, long len, MemorySegment out, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_jxlload_buffer", buf, len, out, x3);
                }
                return (int)spreader.invokeExact(buf, len, out, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_jxlload(const char *filename, VipsImage **out, ...)
     * }
     */
    public static class vips_jxlload {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_jxlload");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_jxlload(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_jxlload(const char *filename, VipsImage **out, ...)
         * }
         */
        public static vips_jxlload makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_jxlload(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment filename, MemorySegment out, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_jxlload", filename, out, x2);
                }
                return (int)spreader.invokeExact(filename, out, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_jxlsave(VipsImage *in, const char *filename, ...)
     * }
     */
    public static class vips_jxlsave {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_jxlsave");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_jxlsave(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_jxlsave(VipsImage *in, const char *filename, ...)
         * }
         */
        public static vips_jxlsave makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_jxlsave(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment filename, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_jxlsave", in, filename, x2);
                }
                return (int)spreader.invokeExact(in, filename, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_jxlsave_buffer(VipsImage *in, void **buf, size_t *len, ...)
     * }
     */
    public static class vips_jxlsave_buffer {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_jxlsave_buffer");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_jxlsave_buffer(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_jxlsave_buffer(VipsImage *in, void **buf, size_t *len, ...)
         * }
         */
        public static vips_jxlsave_buffer makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_jxlsave_buffer(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment buf, MemorySegment len, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_jxlsave_buffer", in, buf, len, x3);
                }
                return (int)spreader.invokeExact(in, buf, len, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_jxlsave_target(VipsImage *in, VipsTarget *target, ...)
     * }
     */
    public static class vips_jxlsave_target {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_jxlsave_target");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_jxlsave_target(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_jxlsave_target(VipsImage *in, VipsTarget *target, ...)
         * }
         */
        public static vips_jxlsave_target makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_jxlsave_target(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment target, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_jxlsave_target", in, target, x2);
                }
                return (int)spreader.invokeExact(in, target, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }
    private static final int VIPS_FOREIGN_DZ_LAYOUT_DZ = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_DZ_LAYOUT_DZ = 0
     * }
     */
    public static int VIPS_FOREIGN_DZ_LAYOUT_DZ() {
        return VIPS_FOREIGN_DZ_LAYOUT_DZ;
    }
    private static final int VIPS_FOREIGN_DZ_LAYOUT_ZOOMIFY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_DZ_LAYOUT_ZOOMIFY = 1
     * }
     */
    public static int VIPS_FOREIGN_DZ_LAYOUT_ZOOMIFY() {
        return VIPS_FOREIGN_DZ_LAYOUT_ZOOMIFY;
    }
    private static final int VIPS_FOREIGN_DZ_LAYOUT_GOOGLE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_DZ_LAYOUT_GOOGLE = 2
     * }
     */
    public static int VIPS_FOREIGN_DZ_LAYOUT_GOOGLE() {
        return VIPS_FOREIGN_DZ_LAYOUT_GOOGLE;
    }
    private static final int VIPS_FOREIGN_DZ_LAYOUT_IIIF = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_DZ_LAYOUT_IIIF = 3
     * }
     */
    public static int VIPS_FOREIGN_DZ_LAYOUT_IIIF() {
        return VIPS_FOREIGN_DZ_LAYOUT_IIIF;
    }
    private static final int VIPS_FOREIGN_DZ_LAYOUT_IIIF3 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_DZ_LAYOUT_IIIF3 = 4
     * }
     */
    public static int VIPS_FOREIGN_DZ_LAYOUT_IIIF3() {
        return VIPS_FOREIGN_DZ_LAYOUT_IIIF3;
    }
    private static final int VIPS_FOREIGN_DZ_LAYOUT_LAST = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_DZ_LAYOUT_LAST = 5
     * }
     */
    public static int VIPS_FOREIGN_DZ_LAYOUT_LAST() {
        return VIPS_FOREIGN_DZ_LAYOUT_LAST;
    }
    private static final int VIPS_FOREIGN_DZ_DEPTH_ONEPIXEL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_DZ_DEPTH_ONEPIXEL = 0
     * }
     */
    public static int VIPS_FOREIGN_DZ_DEPTH_ONEPIXEL() {
        return VIPS_FOREIGN_DZ_DEPTH_ONEPIXEL;
    }
    private static final int VIPS_FOREIGN_DZ_DEPTH_ONETILE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_DZ_DEPTH_ONETILE = 1
     * }
     */
    public static int VIPS_FOREIGN_DZ_DEPTH_ONETILE() {
        return VIPS_FOREIGN_DZ_DEPTH_ONETILE;
    }
    private static final int VIPS_FOREIGN_DZ_DEPTH_ONE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_DZ_DEPTH_ONE = 2
     * }
     */
    public static int VIPS_FOREIGN_DZ_DEPTH_ONE() {
        return VIPS_FOREIGN_DZ_DEPTH_ONE;
    }
    private static final int VIPS_FOREIGN_DZ_DEPTH_LAST = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_DZ_DEPTH_LAST = 3
     * }
     */
    public static int VIPS_FOREIGN_DZ_DEPTH_LAST() {
        return VIPS_FOREIGN_DZ_DEPTH_LAST;
    }
    private static final int VIPS_FOREIGN_DZ_CONTAINER_FS = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_DZ_CONTAINER_FS = 0
     * }
     */
    public static int VIPS_FOREIGN_DZ_CONTAINER_FS() {
        return VIPS_FOREIGN_DZ_CONTAINER_FS;
    }
    private static final int VIPS_FOREIGN_DZ_CONTAINER_ZIP = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_DZ_CONTAINER_ZIP = 1
     * }
     */
    public static int VIPS_FOREIGN_DZ_CONTAINER_ZIP() {
        return VIPS_FOREIGN_DZ_CONTAINER_ZIP;
    }
    private static final int VIPS_FOREIGN_DZ_CONTAINER_SZI = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_DZ_CONTAINER_SZI = 2
     * }
     */
    public static int VIPS_FOREIGN_DZ_CONTAINER_SZI() {
        return VIPS_FOREIGN_DZ_CONTAINER_SZI;
    }
    private static final int VIPS_FOREIGN_DZ_CONTAINER_LAST = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_DZ_CONTAINER_LAST = 3
     * }
     */
    public static int VIPS_FOREIGN_DZ_CONTAINER_LAST() {
        return VIPS_FOREIGN_DZ_CONTAINER_LAST;
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_dzsave(VipsImage *in, const char *name, ...)
     * }
     */
    public static class vips_dzsave {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_dzsave");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_dzsave(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_dzsave(VipsImage *in, const char *name, ...)
         * }
         */
        public static vips_dzsave makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_dzsave(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment name, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_dzsave", in, name, x2);
                }
                return (int)spreader.invokeExact(in, name, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_dzsave_buffer(VipsImage *in, void **buf, size_t *len, ...)
     * }
     */
    public static class vips_dzsave_buffer {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_dzsave_buffer");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_dzsave_buffer(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_dzsave_buffer(VipsImage *in, void **buf, size_t *len, ...)
         * }
         */
        public static vips_dzsave_buffer makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_dzsave_buffer(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment buf, MemorySegment len, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_dzsave_buffer", in, buf, len, x3);
                }
                return (int)spreader.invokeExact(in, buf, len, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int vips_dzsave_target(VipsImage *in, VipsTarget *target, ...)
     * }
     */
    public static class vips_dzsave_target {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                vips_h.C_INT,
                vips_h.C_POINTER,
                vips_h.C_POINTER
            );
        private static final MemorySegment ADDR = vips_h.findOrThrow("vips_dzsave_target");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private vips_dzsave_target(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int vips_dzsave_target(VipsImage *in, VipsTarget *target, ...)
         * }
         */
        public static vips_dzsave_target makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new vips_dzsave_target(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment in, MemorySegment target, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("vips_dzsave_target", in, target, x2);
                }
                return (int)spreader.invokeExact(in, target, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }
    private static final int VIPS_FOREIGN_HEIF_COMPRESSION_HEVC = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_HEIF_COMPRESSION_HEVC = 1
     * }
     */
    public static int VIPS_FOREIGN_HEIF_COMPRESSION_HEVC() {
        return VIPS_FOREIGN_HEIF_COMPRESSION_HEVC;
    }
    private static final int VIPS_FOREIGN_HEIF_COMPRESSION_AVC = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_HEIF_COMPRESSION_AVC = 2
     * }
     */
    public static int VIPS_FOREIGN_HEIF_COMPRESSION_AVC() {
        return VIPS_FOREIGN_HEIF_COMPRESSION_AVC;
    }
    private static final int VIPS_FOREIGN_HEIF_COMPRESSION_JPEG = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_HEIF_COMPRESSION_JPEG = 3
     * }
     */
    public static int VIPS_FOREIGN_HEIF_COMPRESSION_JPEG() {
        return VIPS_FOREIGN_HEIF_COMPRESSION_JPEG;
    }
    private static final int VIPS_FOREIGN_HEIF_COMPRESSION_AV1 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_HEIF_COMPRESSION_AV1 = 4
     * }
     */
    public static int VIPS_FOREIGN_HEIF_COMPRESSION_AV1() {
        return VIPS_FOREIGN_HEIF_COMPRESSION_AV1;
    }
    private static final int VIPS_FOREIGN_HEIF_COMPRESSION_LAST = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_HEIF_COMPRESSION_LAST = 5
     * }
     */
    public static int VIPS_FOREIGN_HEIF_COMPRESSION_LAST() {
        return VIPS_FOREIGN_HEIF_COMPRESSION_LAST;
    }
    private static final int VIPS_FOREIGN_HEIF_ENCODER_AUTO = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_HEIF_ENCODER_AUTO = 0
     * }
     */
    public static int VIPS_FOREIGN_HEIF_ENCODER_AUTO() {
        return VIPS_FOREIGN_HEIF_ENCODER_AUTO;
    }
    private static final int VIPS_FOREIGN_HEIF_ENCODER_AOM = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_HEIF_ENCODER_AOM = 1
     * }
     */
    public static int VIPS_FOREIGN_HEIF_ENCODER_AOM() {
        return VIPS_FOREIGN_HEIF_ENCODER_AOM;
    }
    private static final int VIPS_FOREIGN_HEIF_ENCODER_RAV1E = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_HEIF_ENCODER_RAV1E = 2
     * }
     */
    public static int VIPS_FOREIGN_HEIF_ENCODER_RAV1E() {
        return VIPS_FOREIGN_HEIF_ENCODER_RAV1E;
    }
    private static final int VIPS_FOREIGN_HEIF_ENCODER_SVT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_HEIF_ENCODER_SVT = 3
     * }
     */
    public static int VIPS_FOREIGN_HEIF_ENCODER_SVT() {
        return VIPS_FOREIGN_HEIF_ENCODER_SVT;
    }
    private static final int VIPS_FOREIGN_HEIF_ENCODER_X265 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_HEIF_ENCODER_X265 = 4
     * }
     */
    public static int VIPS_FOREIGN_HEIF_ENCODER_X265() {
        return VIPS_FOREIGN_HEIF_ENCODER_X265;
    }
    private static final int VIPS_FOREIGN_HEIF_ENCODER_LAST = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_FOREIGN_HEIF_ENCODER_LAST = 5
     * }
     */
    public static int VIPS_FOREIGN_HEIF_ENCODER_LAST() {
        return VIPS_FOREIGN_HEIF_ENCODER_LAST;
    }

    private static class vips_operation_math_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_operation_math_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_operation_math_get_type()
     * }
     */
    public static FunctionDescriptor vips_operation_math_get_type$descriptor() {
        return vips_operation_math_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_operation_math_get_type()
     * }
     */
    public static MethodHandle vips_operation_math_get_type$handle() {
        return vips_operation_math_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_operation_math_get_type()
     * }
     */
    public static MemorySegment vips_operation_math_get_type$address() {
        return vips_operation_math_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_operation_math_get_type()
     * }
     */
    public static long vips_operation_math_get_type() {
        var mh$ = vips_operation_math_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_operation_math_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_operation_math2_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_operation_math2_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_operation_math2_get_type()
     * }
     */
    public static FunctionDescriptor vips_operation_math2_get_type$descriptor() {
        return vips_operation_math2_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_operation_math2_get_type()
     * }
     */
    public static MethodHandle vips_operation_math2_get_type$handle() {
        return vips_operation_math2_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_operation_math2_get_type()
     * }
     */
    public static MemorySegment vips_operation_math2_get_type$address() {
        return vips_operation_math2_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_operation_math2_get_type()
     * }
     */
    public static long vips_operation_math2_get_type() {
        var mh$ = vips_operation_math2_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_operation_math2_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_operation_round_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_operation_round_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_operation_round_get_type()
     * }
     */
    public static FunctionDescriptor vips_operation_round_get_type$descriptor() {
        return vips_operation_round_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_operation_round_get_type()
     * }
     */
    public static MethodHandle vips_operation_round_get_type$handle() {
        return vips_operation_round_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_operation_round_get_type()
     * }
     */
    public static MemorySegment vips_operation_round_get_type$address() {
        return vips_operation_round_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_operation_round_get_type()
     * }
     */
    public static long vips_operation_round_get_type() {
        var mh$ = vips_operation_round_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_operation_round_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_operation_relational_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_operation_relational_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_operation_relational_get_type()
     * }
     */
    public static FunctionDescriptor vips_operation_relational_get_type$descriptor() {
        return vips_operation_relational_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_operation_relational_get_type()
     * }
     */
    public static MethodHandle vips_operation_relational_get_type$handle() {
        return vips_operation_relational_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_operation_relational_get_type()
     * }
     */
    public static MemorySegment vips_operation_relational_get_type$address() {
        return vips_operation_relational_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_operation_relational_get_type()
     * }
     */
    public static long vips_operation_relational_get_type() {
        var mh$ = vips_operation_relational_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_operation_relational_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_operation_boolean_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_operation_boolean_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_operation_boolean_get_type()
     * }
     */
    public static FunctionDescriptor vips_operation_boolean_get_type$descriptor() {
        return vips_operation_boolean_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_operation_boolean_get_type()
     * }
     */
    public static MethodHandle vips_operation_boolean_get_type$handle() {
        return vips_operation_boolean_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_operation_boolean_get_type()
     * }
     */
    public static MemorySegment vips_operation_boolean_get_type$address() {
        return vips_operation_boolean_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_operation_boolean_get_type()
     * }
     */
    public static long vips_operation_boolean_get_type() {
        var mh$ = vips_operation_boolean_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_operation_boolean_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_operation_complex_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_operation_complex_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_operation_complex_get_type()
     * }
     */
    public static FunctionDescriptor vips_operation_complex_get_type$descriptor() {
        return vips_operation_complex_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_operation_complex_get_type()
     * }
     */
    public static MethodHandle vips_operation_complex_get_type$handle() {
        return vips_operation_complex_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_operation_complex_get_type()
     * }
     */
    public static MemorySegment vips_operation_complex_get_type$address() {
        return vips_operation_complex_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_operation_complex_get_type()
     * }
     */
    public static long vips_operation_complex_get_type() {
        var mh$ = vips_operation_complex_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_operation_complex_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_operation_complex2_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_operation_complex2_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_operation_complex2_get_type()
     * }
     */
    public static FunctionDescriptor vips_operation_complex2_get_type$descriptor() {
        return vips_operation_complex2_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_operation_complex2_get_type()
     * }
     */
    public static MethodHandle vips_operation_complex2_get_type$handle() {
        return vips_operation_complex2_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_operation_complex2_get_type()
     * }
     */
    public static MemorySegment vips_operation_complex2_get_type$address() {
        return vips_operation_complex2_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_operation_complex2_get_type()
     * }
     */
    public static long vips_operation_complex2_get_type() {
        var mh$ = vips_operation_complex2_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_operation_complex2_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_operation_complexget_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_operation_complexget_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_operation_complexget_get_type()
     * }
     */
    public static FunctionDescriptor vips_operation_complexget_get_type$descriptor() {
        return vips_operation_complexget_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_operation_complexget_get_type()
     * }
     */
    public static MethodHandle vips_operation_complexget_get_type$handle() {
        return vips_operation_complexget_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_operation_complexget_get_type()
     * }
     */
    public static MemorySegment vips_operation_complexget_get_type$address() {
        return vips_operation_complexget_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_operation_complexget_get_type()
     * }
     */
    public static long vips_operation_complexget_get_type() {
        var mh$ = vips_operation_complexget_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_operation_complexget_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_precision_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_precision_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_precision_get_type()
     * }
     */
    public static FunctionDescriptor vips_precision_get_type$descriptor() {
        return vips_precision_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_precision_get_type()
     * }
     */
    public static MethodHandle vips_precision_get_type$handle() {
        return vips_precision_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_precision_get_type()
     * }
     */
    public static MemorySegment vips_precision_get_type$address() {
        return vips_precision_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_precision_get_type()
     * }
     */
    public static long vips_precision_get_type() {
        var mh$ = vips_precision_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_precision_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_intent_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_intent_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_intent_get_type()
     * }
     */
    public static FunctionDescriptor vips_intent_get_type$descriptor() {
        return vips_intent_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_intent_get_type()
     * }
     */
    public static MethodHandle vips_intent_get_type$handle() {
        return vips_intent_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_intent_get_type()
     * }
     */
    public static MemorySegment vips_intent_get_type$address() {
        return vips_intent_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_intent_get_type()
     * }
     */
    public static long vips_intent_get_type() {
        var mh$ = vips_intent_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_intent_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_pcs_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_pcs_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_pcs_get_type()
     * }
     */
    public static FunctionDescriptor vips_pcs_get_type$descriptor() {
        return vips_pcs_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_pcs_get_type()
     * }
     */
    public static MethodHandle vips_pcs_get_type$handle() {
        return vips_pcs_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_pcs_get_type()
     * }
     */
    public static MemorySegment vips_pcs_get_type$address() {
        return vips_pcs_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_pcs_get_type()
     * }
     */
    public static long vips_pcs_get_type() {
        var mh$ = vips_pcs_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_pcs_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_extend_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_extend_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_extend_get_type()
     * }
     */
    public static FunctionDescriptor vips_extend_get_type$descriptor() {
        return vips_extend_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_extend_get_type()
     * }
     */
    public static MethodHandle vips_extend_get_type$handle() {
        return vips_extend_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_extend_get_type()
     * }
     */
    public static MemorySegment vips_extend_get_type$address() {
        return vips_extend_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_extend_get_type()
     * }
     */
    public static long vips_extend_get_type() {
        var mh$ = vips_extend_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_extend_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_compass_direction_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_compass_direction_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_compass_direction_get_type()
     * }
     */
    public static FunctionDescriptor vips_compass_direction_get_type$descriptor() {
        return vips_compass_direction_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_compass_direction_get_type()
     * }
     */
    public static MethodHandle vips_compass_direction_get_type$handle() {
        return vips_compass_direction_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_compass_direction_get_type()
     * }
     */
    public static MemorySegment vips_compass_direction_get_type$address() {
        return vips_compass_direction_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_compass_direction_get_type()
     * }
     */
    public static long vips_compass_direction_get_type() {
        var mh$ = vips_compass_direction_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_compass_direction_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_direction_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_direction_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_direction_get_type()
     * }
     */
    public static FunctionDescriptor vips_direction_get_type$descriptor() {
        return vips_direction_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_direction_get_type()
     * }
     */
    public static MethodHandle vips_direction_get_type$handle() {
        return vips_direction_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_direction_get_type()
     * }
     */
    public static MemorySegment vips_direction_get_type$address() {
        return vips_direction_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_direction_get_type()
     * }
     */
    public static long vips_direction_get_type() {
        var mh$ = vips_direction_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_direction_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_align_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_align_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_align_get_type()
     * }
     */
    public static FunctionDescriptor vips_align_get_type$descriptor() {
        return vips_align_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_align_get_type()
     * }
     */
    public static MethodHandle vips_align_get_type$handle() {
        return vips_align_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_align_get_type()
     * }
     */
    public static MemorySegment vips_align_get_type$address() {
        return vips_align_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_align_get_type()
     * }
     */
    public static long vips_align_get_type() {
        var mh$ = vips_align_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_align_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_angle_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_angle_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_angle_get_type()
     * }
     */
    public static FunctionDescriptor vips_angle_get_type$descriptor() {
        return vips_angle_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_angle_get_type()
     * }
     */
    public static MethodHandle vips_angle_get_type$handle() {
        return vips_angle_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_angle_get_type()
     * }
     */
    public static MemorySegment vips_angle_get_type$address() {
        return vips_angle_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_angle_get_type()
     * }
     */
    public static long vips_angle_get_type() {
        var mh$ = vips_angle_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_angle_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_angle45_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_angle45_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_angle45_get_type()
     * }
     */
    public static FunctionDescriptor vips_angle45_get_type$descriptor() {
        return vips_angle45_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_angle45_get_type()
     * }
     */
    public static MethodHandle vips_angle45_get_type$handle() {
        return vips_angle45_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_angle45_get_type()
     * }
     */
    public static MemorySegment vips_angle45_get_type$address() {
        return vips_angle45_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_angle45_get_type()
     * }
     */
    public static long vips_angle45_get_type() {
        var mh$ = vips_angle45_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_angle45_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_interesting_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_interesting_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_interesting_get_type()
     * }
     */
    public static FunctionDescriptor vips_interesting_get_type$descriptor() {
        return vips_interesting_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_interesting_get_type()
     * }
     */
    public static MethodHandle vips_interesting_get_type$handle() {
        return vips_interesting_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_interesting_get_type()
     * }
     */
    public static MemorySegment vips_interesting_get_type$address() {
        return vips_interesting_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_interesting_get_type()
     * }
     */
    public static long vips_interesting_get_type() {
        var mh$ = vips_interesting_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_interesting_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_blend_mode_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_blend_mode_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_blend_mode_get_type()
     * }
     */
    public static FunctionDescriptor vips_blend_mode_get_type$descriptor() {
        return vips_blend_mode_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_blend_mode_get_type()
     * }
     */
    public static MethodHandle vips_blend_mode_get_type$handle() {
        return vips_blend_mode_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_blend_mode_get_type()
     * }
     */
    public static MemorySegment vips_blend_mode_get_type$address() {
        return vips_blend_mode_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_blend_mode_get_type()
     * }
     */
    public static long vips_blend_mode_get_type() {
        var mh$ = vips_blend_mode_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_blend_mode_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_combine_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_combine_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_combine_get_type()
     * }
     */
    public static FunctionDescriptor vips_combine_get_type$descriptor() {
        return vips_combine_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_combine_get_type()
     * }
     */
    public static MethodHandle vips_combine_get_type$handle() {
        return vips_combine_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_combine_get_type()
     * }
     */
    public static MemorySegment vips_combine_get_type$address() {
        return vips_combine_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_combine_get_type()
     * }
     */
    public static long vips_combine_get_type() {
        var mh$ = vips_combine_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_combine_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_text_wrap_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_text_wrap_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_text_wrap_get_type()
     * }
     */
    public static FunctionDescriptor vips_text_wrap_get_type$descriptor() {
        return vips_text_wrap_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_text_wrap_get_type()
     * }
     */
    public static MethodHandle vips_text_wrap_get_type$handle() {
        return vips_text_wrap_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_text_wrap_get_type()
     * }
     */
    public static MemorySegment vips_text_wrap_get_type$address() {
        return vips_text_wrap_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_text_wrap_get_type()
     * }
     */
    public static long vips_text_wrap_get_type() {
        var mh$ = vips_text_wrap_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_text_wrap_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_combine_mode_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_combine_mode_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_combine_mode_get_type()
     * }
     */
    public static FunctionDescriptor vips_combine_mode_get_type$descriptor() {
        return vips_combine_mode_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_combine_mode_get_type()
     * }
     */
    public static MethodHandle vips_combine_mode_get_type$handle() {
        return vips_combine_mode_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_combine_mode_get_type()
     * }
     */
    public static MemorySegment vips_combine_mode_get_type$address() {
        return vips_combine_mode_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_combine_mode_get_type()
     * }
     */
    public static long vips_combine_mode_get_type() {
        var mh$ = vips_combine_mode_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_combine_mode_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_foreign_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_foreign_flags_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_foreign_flags_get_type()
     * }
     */
    public static FunctionDescriptor vips_foreign_flags_get_type$descriptor() {
        return vips_foreign_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_foreign_flags_get_type()
     * }
     */
    public static MethodHandle vips_foreign_flags_get_type$handle() {
        return vips_foreign_flags_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_foreign_flags_get_type()
     * }
     */
    public static MemorySegment vips_foreign_flags_get_type$address() {
        return vips_foreign_flags_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_foreign_flags_get_type()
     * }
     */
    public static long vips_foreign_flags_get_type() {
        var mh$ = vips_foreign_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_foreign_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_fail_on_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_fail_on_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_fail_on_get_type()
     * }
     */
    public static FunctionDescriptor vips_fail_on_get_type$descriptor() {
        return vips_fail_on_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_fail_on_get_type()
     * }
     */
    public static MethodHandle vips_fail_on_get_type$handle() {
        return vips_fail_on_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_fail_on_get_type()
     * }
     */
    public static MemorySegment vips_fail_on_get_type$address() {
        return vips_fail_on_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_fail_on_get_type()
     * }
     */
    public static long vips_fail_on_get_type() {
        var mh$ = vips_fail_on_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_fail_on_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_saveable_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_saveable_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_saveable_get_type()
     * }
     */
    public static FunctionDescriptor vips_saveable_get_type$descriptor() {
        return vips_saveable_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_saveable_get_type()
     * }
     */
    public static MethodHandle vips_saveable_get_type$handle() {
        return vips_saveable_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_saveable_get_type()
     * }
     */
    public static MemorySegment vips_saveable_get_type$address() {
        return vips_saveable_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_saveable_get_type()
     * }
     */
    public static long vips_saveable_get_type() {
        var mh$ = vips_saveable_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_saveable_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_foreign_keep_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_foreign_keep_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_foreign_keep_get_type()
     * }
     */
    public static FunctionDescriptor vips_foreign_keep_get_type$descriptor() {
        return vips_foreign_keep_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_foreign_keep_get_type()
     * }
     */
    public static MethodHandle vips_foreign_keep_get_type$handle() {
        return vips_foreign_keep_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_foreign_keep_get_type()
     * }
     */
    public static MemorySegment vips_foreign_keep_get_type$address() {
        return vips_foreign_keep_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_foreign_keep_get_type()
     * }
     */
    public static long vips_foreign_keep_get_type() {
        var mh$ = vips_foreign_keep_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_foreign_keep_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_foreign_subsample_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_foreign_subsample_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_foreign_subsample_get_type()
     * }
     */
    public static FunctionDescriptor vips_foreign_subsample_get_type$descriptor() {
        return vips_foreign_subsample_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_foreign_subsample_get_type()
     * }
     */
    public static MethodHandle vips_foreign_subsample_get_type$handle() {
        return vips_foreign_subsample_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_foreign_subsample_get_type()
     * }
     */
    public static MemorySegment vips_foreign_subsample_get_type$address() {
        return vips_foreign_subsample_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_foreign_subsample_get_type()
     * }
     */
    public static long vips_foreign_subsample_get_type() {
        var mh$ = vips_foreign_subsample_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_foreign_subsample_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_foreign_jpeg_subsample_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_foreign_jpeg_subsample_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_foreign_jpeg_subsample_get_type()
     * }
     */
    public static FunctionDescriptor vips_foreign_jpeg_subsample_get_type$descriptor() {
        return vips_foreign_jpeg_subsample_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_foreign_jpeg_subsample_get_type()
     * }
     */
    public static MethodHandle vips_foreign_jpeg_subsample_get_type$handle() {
        return vips_foreign_jpeg_subsample_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_foreign_jpeg_subsample_get_type()
     * }
     */
    public static MemorySegment vips_foreign_jpeg_subsample_get_type$address() {
        return vips_foreign_jpeg_subsample_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_foreign_jpeg_subsample_get_type()
     * }
     */
    public static long vips_foreign_jpeg_subsample_get_type() {
        var mh$ = vips_foreign_jpeg_subsample_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_foreign_jpeg_subsample_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_foreign_webp_preset_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_foreign_webp_preset_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_foreign_webp_preset_get_type()
     * }
     */
    public static FunctionDescriptor vips_foreign_webp_preset_get_type$descriptor() {
        return vips_foreign_webp_preset_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_foreign_webp_preset_get_type()
     * }
     */
    public static MethodHandle vips_foreign_webp_preset_get_type$handle() {
        return vips_foreign_webp_preset_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_foreign_webp_preset_get_type()
     * }
     */
    public static MemorySegment vips_foreign_webp_preset_get_type$address() {
        return vips_foreign_webp_preset_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_foreign_webp_preset_get_type()
     * }
     */
    public static long vips_foreign_webp_preset_get_type() {
        var mh$ = vips_foreign_webp_preset_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_foreign_webp_preset_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_foreign_tiff_compression_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_foreign_tiff_compression_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_foreign_tiff_compression_get_type()
     * }
     */
    public static FunctionDescriptor vips_foreign_tiff_compression_get_type$descriptor() {
        return vips_foreign_tiff_compression_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_foreign_tiff_compression_get_type()
     * }
     */
    public static MethodHandle vips_foreign_tiff_compression_get_type$handle() {
        return vips_foreign_tiff_compression_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_foreign_tiff_compression_get_type()
     * }
     */
    public static MemorySegment vips_foreign_tiff_compression_get_type$address() {
        return vips_foreign_tiff_compression_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_foreign_tiff_compression_get_type()
     * }
     */
    public static long vips_foreign_tiff_compression_get_type() {
        var mh$ = vips_foreign_tiff_compression_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_foreign_tiff_compression_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_foreign_tiff_predictor_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_foreign_tiff_predictor_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_foreign_tiff_predictor_get_type()
     * }
     */
    public static FunctionDescriptor vips_foreign_tiff_predictor_get_type$descriptor() {
        return vips_foreign_tiff_predictor_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_foreign_tiff_predictor_get_type()
     * }
     */
    public static MethodHandle vips_foreign_tiff_predictor_get_type$handle() {
        return vips_foreign_tiff_predictor_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_foreign_tiff_predictor_get_type()
     * }
     */
    public static MemorySegment vips_foreign_tiff_predictor_get_type$address() {
        return vips_foreign_tiff_predictor_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_foreign_tiff_predictor_get_type()
     * }
     */
    public static long vips_foreign_tiff_predictor_get_type() {
        var mh$ = vips_foreign_tiff_predictor_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_foreign_tiff_predictor_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_foreign_tiff_resunit_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_foreign_tiff_resunit_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_foreign_tiff_resunit_get_type()
     * }
     */
    public static FunctionDescriptor vips_foreign_tiff_resunit_get_type$descriptor() {
        return vips_foreign_tiff_resunit_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_foreign_tiff_resunit_get_type()
     * }
     */
    public static MethodHandle vips_foreign_tiff_resunit_get_type$handle() {
        return vips_foreign_tiff_resunit_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_foreign_tiff_resunit_get_type()
     * }
     */
    public static MemorySegment vips_foreign_tiff_resunit_get_type$address() {
        return vips_foreign_tiff_resunit_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_foreign_tiff_resunit_get_type()
     * }
     */
    public static long vips_foreign_tiff_resunit_get_type() {
        var mh$ = vips_foreign_tiff_resunit_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_foreign_tiff_resunit_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_foreign_png_filter_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_foreign_png_filter_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_foreign_png_filter_get_type()
     * }
     */
    public static FunctionDescriptor vips_foreign_png_filter_get_type$descriptor() {
        return vips_foreign_png_filter_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_foreign_png_filter_get_type()
     * }
     */
    public static MethodHandle vips_foreign_png_filter_get_type$handle() {
        return vips_foreign_png_filter_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_foreign_png_filter_get_type()
     * }
     */
    public static MemorySegment vips_foreign_png_filter_get_type$address() {
        return vips_foreign_png_filter_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_foreign_png_filter_get_type()
     * }
     */
    public static long vips_foreign_png_filter_get_type() {
        var mh$ = vips_foreign_png_filter_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_foreign_png_filter_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_foreign_ppm_format_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_foreign_ppm_format_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_foreign_ppm_format_get_type()
     * }
     */
    public static FunctionDescriptor vips_foreign_ppm_format_get_type$descriptor() {
        return vips_foreign_ppm_format_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_foreign_ppm_format_get_type()
     * }
     */
    public static MethodHandle vips_foreign_ppm_format_get_type$handle() {
        return vips_foreign_ppm_format_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_foreign_ppm_format_get_type()
     * }
     */
    public static MemorySegment vips_foreign_ppm_format_get_type$address() {
        return vips_foreign_ppm_format_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_foreign_ppm_format_get_type()
     * }
     */
    public static long vips_foreign_ppm_format_get_type() {
        var mh$ = vips_foreign_ppm_format_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_foreign_ppm_format_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_foreign_dz_layout_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_foreign_dz_layout_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_foreign_dz_layout_get_type()
     * }
     */
    public static FunctionDescriptor vips_foreign_dz_layout_get_type$descriptor() {
        return vips_foreign_dz_layout_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_foreign_dz_layout_get_type()
     * }
     */
    public static MethodHandle vips_foreign_dz_layout_get_type$handle() {
        return vips_foreign_dz_layout_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_foreign_dz_layout_get_type()
     * }
     */
    public static MemorySegment vips_foreign_dz_layout_get_type$address() {
        return vips_foreign_dz_layout_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_foreign_dz_layout_get_type()
     * }
     */
    public static long vips_foreign_dz_layout_get_type() {
        var mh$ = vips_foreign_dz_layout_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_foreign_dz_layout_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_foreign_dz_depth_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_foreign_dz_depth_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_foreign_dz_depth_get_type()
     * }
     */
    public static FunctionDescriptor vips_foreign_dz_depth_get_type$descriptor() {
        return vips_foreign_dz_depth_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_foreign_dz_depth_get_type()
     * }
     */
    public static MethodHandle vips_foreign_dz_depth_get_type$handle() {
        return vips_foreign_dz_depth_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_foreign_dz_depth_get_type()
     * }
     */
    public static MemorySegment vips_foreign_dz_depth_get_type$address() {
        return vips_foreign_dz_depth_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_foreign_dz_depth_get_type()
     * }
     */
    public static long vips_foreign_dz_depth_get_type() {
        var mh$ = vips_foreign_dz_depth_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_foreign_dz_depth_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_foreign_dz_container_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_foreign_dz_container_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_foreign_dz_container_get_type()
     * }
     */
    public static FunctionDescriptor vips_foreign_dz_container_get_type$descriptor() {
        return vips_foreign_dz_container_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_foreign_dz_container_get_type()
     * }
     */
    public static MethodHandle vips_foreign_dz_container_get_type$handle() {
        return vips_foreign_dz_container_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_foreign_dz_container_get_type()
     * }
     */
    public static MemorySegment vips_foreign_dz_container_get_type$address() {
        return vips_foreign_dz_container_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_foreign_dz_container_get_type()
     * }
     */
    public static long vips_foreign_dz_container_get_type() {
        var mh$ = vips_foreign_dz_container_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_foreign_dz_container_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_foreign_heif_compression_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_foreign_heif_compression_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_foreign_heif_compression_get_type()
     * }
     */
    public static FunctionDescriptor vips_foreign_heif_compression_get_type$descriptor() {
        return vips_foreign_heif_compression_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_foreign_heif_compression_get_type()
     * }
     */
    public static MethodHandle vips_foreign_heif_compression_get_type$handle() {
        return vips_foreign_heif_compression_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_foreign_heif_compression_get_type()
     * }
     */
    public static MemorySegment vips_foreign_heif_compression_get_type$address() {
        return vips_foreign_heif_compression_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_foreign_heif_compression_get_type()
     * }
     */
    public static long vips_foreign_heif_compression_get_type() {
        var mh$ = vips_foreign_heif_compression_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_foreign_heif_compression_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_foreign_heif_encoder_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_foreign_heif_encoder_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_foreign_heif_encoder_get_type()
     * }
     */
    public static FunctionDescriptor vips_foreign_heif_encoder_get_type$descriptor() {
        return vips_foreign_heif_encoder_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_foreign_heif_encoder_get_type()
     * }
     */
    public static MethodHandle vips_foreign_heif_encoder_get_type$handle() {
        return vips_foreign_heif_encoder_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_foreign_heif_encoder_get_type()
     * }
     */
    public static MemorySegment vips_foreign_heif_encoder_get_type$address() {
        return vips_foreign_heif_encoder_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_foreign_heif_encoder_get_type()
     * }
     */
    public static long vips_foreign_heif_encoder_get_type() {
        var mh$ = vips_foreign_heif_encoder_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_foreign_heif_encoder_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_demand_style_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_demand_style_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_demand_style_get_type()
     * }
     */
    public static FunctionDescriptor vips_demand_style_get_type$descriptor() {
        return vips_demand_style_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_demand_style_get_type()
     * }
     */
    public static MethodHandle vips_demand_style_get_type$handle() {
        return vips_demand_style_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_demand_style_get_type()
     * }
     */
    public static MemorySegment vips_demand_style_get_type$address() {
        return vips_demand_style_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_demand_style_get_type()
     * }
     */
    public static long vips_demand_style_get_type() {
        var mh$ = vips_demand_style_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_demand_style_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_image_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_image_type_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_image_type_get_type()
     * }
     */
    public static FunctionDescriptor vips_image_type_get_type$descriptor() {
        return vips_image_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_image_type_get_type()
     * }
     */
    public static MethodHandle vips_image_type_get_type$handle() {
        return vips_image_type_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_image_type_get_type()
     * }
     */
    public static MemorySegment vips_image_type_get_type$address() {
        return vips_image_type_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_image_type_get_type()
     * }
     */
    public static long vips_image_type_get_type() {
        var mh$ = vips_image_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_image_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_interpretation_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_interpretation_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_interpretation_get_type()
     * }
     */
    public static FunctionDescriptor vips_interpretation_get_type$descriptor() {
        return vips_interpretation_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_interpretation_get_type()
     * }
     */
    public static MethodHandle vips_interpretation_get_type$handle() {
        return vips_interpretation_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_interpretation_get_type()
     * }
     */
    public static MemorySegment vips_interpretation_get_type$address() {
        return vips_interpretation_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_interpretation_get_type()
     * }
     */
    public static long vips_interpretation_get_type() {
        var mh$ = vips_interpretation_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_interpretation_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_band_format_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_band_format_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_band_format_get_type()
     * }
     */
    public static FunctionDescriptor vips_band_format_get_type$descriptor() {
        return vips_band_format_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_band_format_get_type()
     * }
     */
    public static MethodHandle vips_band_format_get_type$handle() {
        return vips_band_format_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_band_format_get_type()
     * }
     */
    public static MemorySegment vips_band_format_get_type$address() {
        return vips_band_format_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_band_format_get_type()
     * }
     */
    public static long vips_band_format_get_type() {
        var mh$ = vips_band_format_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_band_format_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_coding_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_coding_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_coding_get_type()
     * }
     */
    public static FunctionDescriptor vips_coding_get_type$descriptor() {
        return vips_coding_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_coding_get_type()
     * }
     */
    public static MethodHandle vips_coding_get_type$handle() {
        return vips_coding_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_coding_get_type()
     * }
     */
    public static MemorySegment vips_coding_get_type$address() {
        return vips_coding_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_coding_get_type()
     * }
     */
    public static long vips_coding_get_type() {
        var mh$ = vips_coding_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_coding_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_access_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_access_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_access_get_type()
     * }
     */
    public static FunctionDescriptor vips_access_get_type$descriptor() {
        return vips_access_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_access_get_type()
     * }
     */
    public static MethodHandle vips_access_get_type$handle() {
        return vips_access_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_access_get_type()
     * }
     */
    public static MemorySegment vips_access_get_type$address() {
        return vips_access_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_access_get_type()
     * }
     */
    public static long vips_access_get_type() {
        var mh$ = vips_access_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_access_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_operation_morphology_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_operation_morphology_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_operation_morphology_get_type()
     * }
     */
    public static FunctionDescriptor vips_operation_morphology_get_type$descriptor() {
        return vips_operation_morphology_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_operation_morphology_get_type()
     * }
     */
    public static MethodHandle vips_operation_morphology_get_type$handle() {
        return vips_operation_morphology_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_operation_morphology_get_type()
     * }
     */
    public static MemorySegment vips_operation_morphology_get_type$address() {
        return vips_operation_morphology_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_operation_morphology_get_type()
     * }
     */
    public static long vips_operation_morphology_get_type() {
        var mh$ = vips_operation_morphology_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_operation_morphology_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_argument_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_argument_flags_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_argument_flags_get_type()
     * }
     */
    public static FunctionDescriptor vips_argument_flags_get_type$descriptor() {
        return vips_argument_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_argument_flags_get_type()
     * }
     */
    public static MethodHandle vips_argument_flags_get_type$handle() {
        return vips_argument_flags_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_argument_flags_get_type()
     * }
     */
    public static MemorySegment vips_argument_flags_get_type$address() {
        return vips_argument_flags_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_argument_flags_get_type()
     * }
     */
    public static long vips_argument_flags_get_type() {
        var mh$ = vips_argument_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_argument_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_operation_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_operation_flags_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_operation_flags_get_type()
     * }
     */
    public static FunctionDescriptor vips_operation_flags_get_type$descriptor() {
        return vips_operation_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_operation_flags_get_type()
     * }
     */
    public static MethodHandle vips_operation_flags_get_type$handle() {
        return vips_operation_flags_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_operation_flags_get_type()
     * }
     */
    public static MemorySegment vips_operation_flags_get_type$address() {
        return vips_operation_flags_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_operation_flags_get_type()
     * }
     */
    public static long vips_operation_flags_get_type() {
        var mh$ = vips_operation_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_operation_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_region_shrink_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_region_shrink_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_region_shrink_get_type()
     * }
     */
    public static FunctionDescriptor vips_region_shrink_get_type$descriptor() {
        return vips_region_shrink_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_region_shrink_get_type()
     * }
     */
    public static MethodHandle vips_region_shrink_get_type$handle() {
        return vips_region_shrink_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_region_shrink_get_type()
     * }
     */
    public static MemorySegment vips_region_shrink_get_type$address() {
        return vips_region_shrink_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_region_shrink_get_type()
     * }
     */
    public static long vips_region_shrink_get_type() {
        var mh$ = vips_region_shrink_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_region_shrink_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_kernel_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_kernel_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_kernel_get_type()
     * }
     */
    public static FunctionDescriptor vips_kernel_get_type$descriptor() {
        return vips_kernel_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_kernel_get_type()
     * }
     */
    public static MethodHandle vips_kernel_get_type$handle() {
        return vips_kernel_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_kernel_get_type()
     * }
     */
    public static MemorySegment vips_kernel_get_type$address() {
        return vips_kernel_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_kernel_get_type()
     * }
     */
    public static long vips_kernel_get_type() {
        var mh$ = vips_kernel_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_kernel_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_size_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_size_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_size_get_type()
     * }
     */
    public static FunctionDescriptor vips_size_get_type$descriptor() {
        return vips_size_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_size_get_type()
     * }
     */
    public static MethodHandle vips_size_get_type$handle() {
        return vips_size_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_size_get_type()
     * }
     */
    public static MemorySegment vips_size_get_type$address() {
        return vips_size_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_size_get_type()
     * }
     */
    public static long vips_size_get_type() {
        var mh$ = vips_size_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_size_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vips_token_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vips_h.C_LONG    );

        public static final MemorySegment ADDR = vips_h.findOrThrow("vips_token_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType vips_token_get_type()
     * }
     */
    public static FunctionDescriptor vips_token_get_type$descriptor() {
        return vips_token_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType vips_token_get_type()
     * }
     */
    public static MethodHandle vips_token_get_type$handle() {
        return vips_token_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GType vips_token_get_type()
     * }
     */
    public static MemorySegment vips_token_get_type$address() {
        return vips_token_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GType vips_token_get_type()
     * }
     */
    public static long vips_token_get_type() {
        var mh$ = vips_token_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vips_token_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VIPS_OPERATION_MATH_SIN = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_MATH_SIN = 0
     * }
     */
    public static int VIPS_OPERATION_MATH_SIN() {
        return VIPS_OPERATION_MATH_SIN;
    }
    private static final int VIPS_OPERATION_MATH_COS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_MATH_COS = 1
     * }
     */
    public static int VIPS_OPERATION_MATH_COS() {
        return VIPS_OPERATION_MATH_COS;
    }
    private static final int VIPS_OPERATION_MATH_TAN = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_MATH_TAN = 2
     * }
     */
    public static int VIPS_OPERATION_MATH_TAN() {
        return VIPS_OPERATION_MATH_TAN;
    }
    private static final int VIPS_OPERATION_MATH_ASIN = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_MATH_ASIN = 3
     * }
     */
    public static int VIPS_OPERATION_MATH_ASIN() {
        return VIPS_OPERATION_MATH_ASIN;
    }
    private static final int VIPS_OPERATION_MATH_ACOS = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_MATH_ACOS = 4
     * }
     */
    public static int VIPS_OPERATION_MATH_ACOS() {
        return VIPS_OPERATION_MATH_ACOS;
    }
    private static final int VIPS_OPERATION_MATH_ATAN = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_MATH_ATAN = 5
     * }
     */
    public static int VIPS_OPERATION_MATH_ATAN() {
        return VIPS_OPERATION_MATH_ATAN;
    }
    private static final int VIPS_OPERATION_MATH_LOG = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_MATH_LOG = 6
     * }
     */
    public static int VIPS_OPERATION_MATH_LOG() {
        return VIPS_OPERATION_MATH_LOG;
    }
    private static final int VIPS_OPERATION_MATH_LOG10 = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_MATH_LOG10 = 7
     * }
     */
    public static int VIPS_OPERATION_MATH_LOG10() {
        return VIPS_OPERATION_MATH_LOG10;
    }
    private static final int VIPS_OPERATION_MATH_EXP = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_MATH_EXP = 8
     * }
     */
    public static int VIPS_OPERATION_MATH_EXP() {
        return VIPS_OPERATION_MATH_EXP;
    }
    private static final int VIPS_OPERATION_MATH_EXP10 = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_MATH_EXP10 = 9
     * }
     */
    public static int VIPS_OPERATION_MATH_EXP10() {
        return VIPS_OPERATION_MATH_EXP10;
    }
    private static final int VIPS_OPERATION_MATH_SINH = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_MATH_SINH = 10
     * }
     */
    public static int VIPS_OPERATION_MATH_SINH() {
        return VIPS_OPERATION_MATH_SINH;
    }
    private static final int VIPS_OPERATION_MATH_COSH = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_MATH_COSH = 11
     * }
     */
    public static int VIPS_OPERATION_MATH_COSH() {
        return VIPS_OPERATION_MATH_COSH;
    }
    private static final int VIPS_OPERATION_MATH_TANH = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_MATH_TANH = 12
     * }
     */
    public static int VIPS_OPERATION_MATH_TANH() {
        return VIPS_OPERATION_MATH_TANH;
    }
    private static final int VIPS_OPERATION_MATH_ASINH = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_MATH_ASINH = 13
     * }
     */
    public static int VIPS_OPERATION_MATH_ASINH() {
        return VIPS_OPERATION_MATH_ASINH;
    }
    private static final int VIPS_OPERATION_MATH_ACOSH = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_MATH_ACOSH = 14
     * }
     */
    public static int VIPS_OPERATION_MATH_ACOSH() {
        return VIPS_OPERATION_MATH_ACOSH;
    }
    private static final int VIPS_OPERATION_MATH_ATANH = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_MATH_ATANH = 15
     * }
     */
    public static int VIPS_OPERATION_MATH_ATANH() {
        return VIPS_OPERATION_MATH_ATANH;
    }
    private static final int VIPS_OPERATION_MATH_LAST = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_MATH_LAST = 16
     * }
     */
    public static int VIPS_OPERATION_MATH_LAST() {
        return VIPS_OPERATION_MATH_LAST;
    }
    private static final int VIPS_OPERATION_MATH2_POW = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_MATH2_POW = 0
     * }
     */
    public static int VIPS_OPERATION_MATH2_POW() {
        return VIPS_OPERATION_MATH2_POW;
    }
    private static final int VIPS_OPERATION_MATH2_WOP = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_MATH2_WOP = 1
     * }
     */
    public static int VIPS_OPERATION_MATH2_WOP() {
        return VIPS_OPERATION_MATH2_WOP;
    }
    private static final int VIPS_OPERATION_MATH2_ATAN2 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_MATH2_ATAN2 = 2
     * }
     */
    public static int VIPS_OPERATION_MATH2_ATAN2() {
        return VIPS_OPERATION_MATH2_ATAN2;
    }
    private static final int VIPS_OPERATION_MATH2_LAST = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_MATH2_LAST = 3
     * }
     */
    public static int VIPS_OPERATION_MATH2_LAST() {
        return VIPS_OPERATION_MATH2_LAST;
    }
    private static final int VIPS_OPERATION_ROUND_RINT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_ROUND_RINT = 0
     * }
     */
    public static int VIPS_OPERATION_ROUND_RINT() {
        return VIPS_OPERATION_ROUND_RINT;
    }
    private static final int VIPS_OPERATION_ROUND_CEIL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_ROUND_CEIL = 1
     * }
     */
    public static int VIPS_OPERATION_ROUND_CEIL() {
        return VIPS_OPERATION_ROUND_CEIL;
    }
    private static final int VIPS_OPERATION_ROUND_FLOOR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_ROUND_FLOOR = 2
     * }
     */
    public static int VIPS_OPERATION_ROUND_FLOOR() {
        return VIPS_OPERATION_ROUND_FLOOR;
    }
    private static final int VIPS_OPERATION_ROUND_LAST = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_ROUND_LAST = 3
     * }
     */
    public static int VIPS_OPERATION_ROUND_LAST() {
        return VIPS_OPERATION_ROUND_LAST;
    }
    private static final int VIPS_OPERATION_RELATIONAL_EQUAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_RELATIONAL_EQUAL = 0
     * }
     */
    public static int VIPS_OPERATION_RELATIONAL_EQUAL() {
        return VIPS_OPERATION_RELATIONAL_EQUAL;
    }
    private static final int VIPS_OPERATION_RELATIONAL_NOTEQ = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_RELATIONAL_NOTEQ = 1
     * }
     */
    public static int VIPS_OPERATION_RELATIONAL_NOTEQ() {
        return VIPS_OPERATION_RELATIONAL_NOTEQ;
    }
    private static final int VIPS_OPERATION_RELATIONAL_LESS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_RELATIONAL_LESS = 2
     * }
     */
    public static int VIPS_OPERATION_RELATIONAL_LESS() {
        return VIPS_OPERATION_RELATIONAL_LESS;
    }
    private static final int VIPS_OPERATION_RELATIONAL_LESSEQ = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_RELATIONAL_LESSEQ = 3
     * }
     */
    public static int VIPS_OPERATION_RELATIONAL_LESSEQ() {
        return VIPS_OPERATION_RELATIONAL_LESSEQ;
    }
    private static final int VIPS_OPERATION_RELATIONAL_MORE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_RELATIONAL_MORE = 4
     * }
     */
    public static int VIPS_OPERATION_RELATIONAL_MORE() {
        return VIPS_OPERATION_RELATIONAL_MORE;
    }
    private static final int VIPS_OPERATION_RELATIONAL_MOREEQ = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_RELATIONAL_MOREEQ = 5
     * }
     */
    public static int VIPS_OPERATION_RELATIONAL_MOREEQ() {
        return VIPS_OPERATION_RELATIONAL_MOREEQ;
    }
    private static final int VIPS_OPERATION_RELATIONAL_LAST = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_RELATIONAL_LAST = 6
     * }
     */
    public static int VIPS_OPERATION_RELATIONAL_LAST() {
        return VIPS_OPERATION_RELATIONAL_LAST;
    }
    private static final int VIPS_OPERATION_BOOLEAN_AND = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_BOOLEAN_AND = 0
     * }
     */
    public static int VIPS_OPERATION_BOOLEAN_AND() {
        return VIPS_OPERATION_BOOLEAN_AND;
    }
    private static final int VIPS_OPERATION_BOOLEAN_OR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_BOOLEAN_OR = 1
     * }
     */
    public static int VIPS_OPERATION_BOOLEAN_OR() {
        return VIPS_OPERATION_BOOLEAN_OR;
    }
    private static final int VIPS_OPERATION_BOOLEAN_EOR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_BOOLEAN_EOR = 2
     * }
     */
    public static int VIPS_OPERATION_BOOLEAN_EOR() {
        return VIPS_OPERATION_BOOLEAN_EOR;
    }
    private static final int VIPS_OPERATION_BOOLEAN_LSHIFT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_BOOLEAN_LSHIFT = 3
     * }
     */
    public static int VIPS_OPERATION_BOOLEAN_LSHIFT() {
        return VIPS_OPERATION_BOOLEAN_LSHIFT;
    }
    private static final int VIPS_OPERATION_BOOLEAN_RSHIFT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_BOOLEAN_RSHIFT = 4
     * }
     */
    public static int VIPS_OPERATION_BOOLEAN_RSHIFT() {
        return VIPS_OPERATION_BOOLEAN_RSHIFT;
    }
    private static final int VIPS_OPERATION_BOOLEAN_LAST = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_BOOLEAN_LAST = 5
     * }
     */
    public static int VIPS_OPERATION_BOOLEAN_LAST() {
        return VIPS_OPERATION_BOOLEAN_LAST;
    }
    private static final int VIPS_OPERATION_COMPLEX_POLAR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_COMPLEX_POLAR = 0
     * }
     */
    public static int VIPS_OPERATION_COMPLEX_POLAR() {
        return VIPS_OPERATION_COMPLEX_POLAR;
    }
    private static final int VIPS_OPERATION_COMPLEX_RECT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_COMPLEX_RECT = 1
     * }
     */
    public static int VIPS_OPERATION_COMPLEX_RECT() {
        return VIPS_OPERATION_COMPLEX_RECT;
    }
    private static final int VIPS_OPERATION_COMPLEX_CONJ = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_COMPLEX_CONJ = 2
     * }
     */
    public static int VIPS_OPERATION_COMPLEX_CONJ() {
        return VIPS_OPERATION_COMPLEX_CONJ;
    }
    private static final int VIPS_OPERATION_COMPLEX_LAST = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_COMPLEX_LAST = 3
     * }
     */
    public static int VIPS_OPERATION_COMPLEX_LAST() {
        return VIPS_OPERATION_COMPLEX_LAST;
    }
    private static final int VIPS_OPERATION_COMPLEX2_CROSS_PHASE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_COMPLEX2_CROSS_PHASE = 0
     * }
     */
    public static int VIPS_OPERATION_COMPLEX2_CROSS_PHASE() {
        return VIPS_OPERATION_COMPLEX2_CROSS_PHASE;
    }
    private static final int VIPS_OPERATION_COMPLEX2_LAST = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_COMPLEX2_LAST = 1
     * }
     */
    public static int VIPS_OPERATION_COMPLEX2_LAST() {
        return VIPS_OPERATION_COMPLEX2_LAST;
    }
    private static final int VIPS_OPERATION_COMPLEXGET_REAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_COMPLEXGET_REAL = 0
     * }
     */
    public static int VIPS_OPERATION_COMPLEXGET_REAL() {
        return VIPS_OPERATION_COMPLEXGET_REAL;
    }
    private static final int VIPS_OPERATION_COMPLEXGET_IMAG = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VIPS_OPERATION_COMPLEXGET_IMAG = 1
     * }
     */
    public static int VIPS_OPERATION_COMPLEXGET_IMAG() {
        return VIPS_OPERATION_COMPLEXGET_IMAG;
    }
}

