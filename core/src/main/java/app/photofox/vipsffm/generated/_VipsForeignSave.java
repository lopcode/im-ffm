// Generated by jextract

package app.photofox.vipsffm.generated;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _VipsForeignSave {
 *     VipsForeign parent_object;
 *     gboolean strip;
 *     VipsForeignKeep keep;
 *     char *profile;
 *     VipsArrayDouble *background;
 *     int page_height;
 *     VipsImage *in;
 *     VipsImage *ready;
 * }
 * }
 */
public class _VipsForeignSave {

    _VipsForeignSave() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _VipsForeign.layout().withName("parent_object"),
        vips_h.C_INT.withName("strip"),
        vips_h.C_INT.withName("keep"),
        vips_h.C_POINTER.withName("profile"),
        vips_h.C_POINTER.withName("background"),
        vips_h.C_INT.withName("page_height"),
        MemoryLayout.paddingLayout(4),
        vips_h.C_POINTER.withName("in"),
        vips_h.C_POINTER.withName("ready")
    ).withName("_VipsForeignSave");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout parent_object$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("parent_object"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VipsForeign parent_object
     * }
     */
    public static final GroupLayout parent_object$layout() {
        return parent_object$LAYOUT;
    }

    private static final long parent_object$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VipsForeign parent_object
     * }
     */
    public static final long parent_object$offset() {
        return parent_object$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VipsForeign parent_object
     * }
     */
    public static MemorySegment parent_object(MemorySegment struct) {
        return struct.asSlice(parent_object$OFFSET, parent_object$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VipsForeign parent_object
     * }
     */
    public static void parent_object(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, parent_object$OFFSET, parent_object$LAYOUT.byteSize());
    }

    private static final OfInt strip$LAYOUT = (OfInt)$LAYOUT.select(groupElement("strip"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean strip
     * }
     */
    public static final OfInt strip$layout() {
        return strip$LAYOUT;
    }

    private static final long strip$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean strip
     * }
     */
    public static final long strip$offset() {
        return strip$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean strip
     * }
     */
    public static int strip(MemorySegment struct) {
        return struct.get(strip$LAYOUT, strip$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean strip
     * }
     */
    public static void strip(MemorySegment struct, int fieldValue) {
        struct.set(strip$LAYOUT, strip$OFFSET, fieldValue);
    }

    private static final OfInt keep$LAYOUT = (OfInt)$LAYOUT.select(groupElement("keep"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VipsForeignKeep keep
     * }
     */
    public static final OfInt keep$layout() {
        return keep$LAYOUT;
    }

    private static final long keep$OFFSET = 100;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VipsForeignKeep keep
     * }
     */
    public static final long keep$offset() {
        return keep$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VipsForeignKeep keep
     * }
     */
    public static int keep(MemorySegment struct) {
        return struct.get(keep$LAYOUT, keep$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VipsForeignKeep keep
     * }
     */
    public static void keep(MemorySegment struct, int fieldValue) {
        struct.set(keep$LAYOUT, keep$OFFSET, fieldValue);
    }

    private static final AddressLayout profile$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("profile"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *profile
     * }
     */
    public static final AddressLayout profile$layout() {
        return profile$LAYOUT;
    }

    private static final long profile$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *profile
     * }
     */
    public static final long profile$offset() {
        return profile$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *profile
     * }
     */
    public static MemorySegment profile(MemorySegment struct) {
        return struct.get(profile$LAYOUT, profile$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *profile
     * }
     */
    public static void profile(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(profile$LAYOUT, profile$OFFSET, fieldValue);
    }

    private static final AddressLayout background$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("background"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VipsArrayDouble *background
     * }
     */
    public static final AddressLayout background$layout() {
        return background$LAYOUT;
    }

    private static final long background$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VipsArrayDouble *background
     * }
     */
    public static final long background$offset() {
        return background$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VipsArrayDouble *background
     * }
     */
    public static MemorySegment background(MemorySegment struct) {
        return struct.get(background$LAYOUT, background$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VipsArrayDouble *background
     * }
     */
    public static void background(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(background$LAYOUT, background$OFFSET, fieldValue);
    }

    private static final OfInt page_height$LAYOUT = (OfInt)$LAYOUT.select(groupElement("page_height"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int page_height
     * }
     */
    public static final OfInt page_height$layout() {
        return page_height$LAYOUT;
    }

    private static final long page_height$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int page_height
     * }
     */
    public static final long page_height$offset() {
        return page_height$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int page_height
     * }
     */
    public static int page_height(MemorySegment struct) {
        return struct.get(page_height$LAYOUT, page_height$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int page_height
     * }
     */
    public static void page_height(MemorySegment struct, int fieldValue) {
        struct.set(page_height$LAYOUT, page_height$OFFSET, fieldValue);
    }

    private static final AddressLayout in$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("in"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VipsImage *in
     * }
     */
    public static final AddressLayout in$layout() {
        return in$LAYOUT;
    }

    private static final long in$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VipsImage *in
     * }
     */
    public static final long in$offset() {
        return in$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VipsImage *in
     * }
     */
    public static MemorySegment in(MemorySegment struct) {
        return struct.get(in$LAYOUT, in$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VipsImage *in
     * }
     */
    public static void in(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(in$LAYOUT, in$OFFSET, fieldValue);
    }

    private static final AddressLayout ready$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ready"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VipsImage *ready
     * }
     */
    public static final AddressLayout ready$layout() {
        return ready$LAYOUT;
    }

    private static final long ready$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VipsImage *ready
     * }
     */
    public static final long ready$offset() {
        return ready$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VipsImage *ready
     * }
     */
    public static MemorySegment ready(MemorySegment struct) {
        return struct.get(ready$LAYOUT, ready$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VipsImage *ready
     * }
     */
    public static void ready(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ready$LAYOUT, ready$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

