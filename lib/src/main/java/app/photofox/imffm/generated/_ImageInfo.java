// Generated by jextract

package app.photofox.imffm.generated;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _ImageInfo {
 *     CompressionType compression;
 *     OrientationType orientation;
 *     MagickBooleanType temporary;
 *     MagickBooleanType adjoin;
 *     MagickBooleanType affirm;
 *     MagickBooleanType antialias;
 *     char *size;
 *     char *extract;
 *     char *page;
 *     char *scenes;
 *     size_t scene;
 *     size_t number_scenes;
 *     size_t depth;
 *     InterlaceType interlace;
 *     EndianType endian;
 *     ResolutionType units;
 *     size_t quality;
 *     char *sampling_factor;
 *     char *server_name;
 *     char *font;
 *     char *texture;
 *     char *density;
 *     double pointsize;
 *     double fuzz;
 *     PixelInfo alpha_color;
 *     PixelInfo background_color;
 *     PixelInfo border_color;
 *     PixelInfo transparent_color;
 *     MagickBooleanType dither;
 *     MagickBooleanType monochrome;
 *     ColorspaceType colorspace;
 *     CompositeOperator compose;
 *     ImageType type;
 *     MagickBooleanType ping;
 *     MagickBooleanType verbose;
 *     ChannelType channel;
 *     void *options;
 *     void *profile;
 *     MagickBooleanType synchronize;
 *     MagickProgressMonitor progress_monitor;
 *     void *client_data;
 *     void *cache;
 *     StreamHandler stream;
 *     FILE *file;
 *     void *blob;
 *     size_t length;
 *     char magick[4096];
 *     char unique[4096];
 *     char filename[4096];
 *     MagickBooleanType debug;
 *     size_t signature;
 *     CustomStreamInfo *custom_stream;
 *     PixelInfo matte_color;
 * }
 * }
 */
public class _ImageInfo {

    _ImageInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MagickWand_h.C_INT.withName("compression"),
        MagickWand_h.C_INT.withName("orientation"),
        MagickWand_h.C_INT.withName("temporary"),
        MagickWand_h.C_INT.withName("adjoin"),
        MagickWand_h.C_INT.withName("affirm"),
        MagickWand_h.C_INT.withName("antialias"),
        MagickWand_h.C_POINTER.withName("size"),
        MagickWand_h.C_POINTER.withName("extract"),
        MagickWand_h.C_POINTER.withName("page"),
        MagickWand_h.C_POINTER.withName("scenes"),
        MagickWand_h.C_LONG.withName("scene"),
        MagickWand_h.C_LONG.withName("number_scenes"),
        MagickWand_h.C_LONG.withName("depth"),
        MagickWand_h.C_INT.withName("interlace"),
        MagickWand_h.C_INT.withName("endian"),
        MagickWand_h.C_INT.withName("units"),
        MemoryLayout.paddingLayout(4),
        MagickWand_h.C_LONG.withName("quality"),
        MagickWand_h.C_POINTER.withName("sampling_factor"),
        MagickWand_h.C_POINTER.withName("server_name"),
        MagickWand_h.C_POINTER.withName("font"),
        MagickWand_h.C_POINTER.withName("texture"),
        MagickWand_h.C_POINTER.withName("density"),
        MagickWand_h.C_DOUBLE.withName("pointsize"),
        MagickWand_h.C_DOUBLE.withName("fuzz"),
        _PixelInfo.layout().withName("alpha_color"),
        _PixelInfo.layout().withName("background_color"),
        _PixelInfo.layout().withName("border_color"),
        _PixelInfo.layout().withName("transparent_color"),
        MagickWand_h.C_INT.withName("dither"),
        MagickWand_h.C_INT.withName("monochrome"),
        MagickWand_h.C_INT.withName("colorspace"),
        MagickWand_h.C_INT.withName("compose"),
        MagickWand_h.C_INT.withName("type"),
        MagickWand_h.C_INT.withName("ping"),
        MagickWand_h.C_INT.withName("verbose"),
        MagickWand_h.C_INT.withName("channel"),
        MagickWand_h.C_POINTER.withName("options"),
        MagickWand_h.C_POINTER.withName("profile"),
        MagickWand_h.C_INT.withName("synchronize"),
        MemoryLayout.paddingLayout(4),
        MagickWand_h.C_POINTER.withName("progress_monitor"),
        MagickWand_h.C_POINTER.withName("client_data"),
        MagickWand_h.C_POINTER.withName("cache"),
        MagickWand_h.C_POINTER.withName("stream"),
        MagickWand_h.C_POINTER.withName("file"),
        MagickWand_h.C_POINTER.withName("blob"),
        MagickWand_h.C_LONG.withName("length"),
        MemoryLayout.sequenceLayout(4096, MagickWand_h.C_CHAR).withName("magick"),
        MemoryLayout.sequenceLayout(4096, MagickWand_h.C_CHAR).withName("unique"),
        MemoryLayout.sequenceLayout(4096, MagickWand_h.C_CHAR).withName("filename"),
        MagickWand_h.C_INT.withName("debug"),
        MemoryLayout.paddingLayout(4),
        MagickWand_h.C_LONG.withName("signature"),
        MagickWand_h.C_POINTER.withName("custom_stream"),
        _PixelInfo.layout().withName("matte_color")
    ).withName("_ImageInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt compression$LAYOUT = (OfInt)$LAYOUT.select(groupElement("compression"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CompressionType compression
     * }
     */
    public static final OfInt compression$layout() {
        return compression$LAYOUT;
    }

    private static final long compression$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CompressionType compression
     * }
     */
    public static final long compression$offset() {
        return compression$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CompressionType compression
     * }
     */
    public static int compression(MemorySegment struct) {
        return struct.get(compression$LAYOUT, compression$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CompressionType compression
     * }
     */
    public static void compression(MemorySegment struct, int fieldValue) {
        struct.set(compression$LAYOUT, compression$OFFSET, fieldValue);
    }

    private static final OfInt orientation$LAYOUT = (OfInt)$LAYOUT.select(groupElement("orientation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OrientationType orientation
     * }
     */
    public static final OfInt orientation$layout() {
        return orientation$LAYOUT;
    }

    private static final long orientation$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OrientationType orientation
     * }
     */
    public static final long orientation$offset() {
        return orientation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OrientationType orientation
     * }
     */
    public static int orientation(MemorySegment struct) {
        return struct.get(orientation$LAYOUT, orientation$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OrientationType orientation
     * }
     */
    public static void orientation(MemorySegment struct, int fieldValue) {
        struct.set(orientation$LAYOUT, orientation$OFFSET, fieldValue);
    }

    private static final OfInt temporary$LAYOUT = (OfInt)$LAYOUT.select(groupElement("temporary"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * MagickBooleanType temporary
     * }
     */
    public static final OfInt temporary$layout() {
        return temporary$LAYOUT;
    }

    private static final long temporary$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * MagickBooleanType temporary
     * }
     */
    public static final long temporary$offset() {
        return temporary$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * MagickBooleanType temporary
     * }
     */
    public static int temporary(MemorySegment struct) {
        return struct.get(temporary$LAYOUT, temporary$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * MagickBooleanType temporary
     * }
     */
    public static void temporary(MemorySegment struct, int fieldValue) {
        struct.set(temporary$LAYOUT, temporary$OFFSET, fieldValue);
    }

    private static final OfInt adjoin$LAYOUT = (OfInt)$LAYOUT.select(groupElement("adjoin"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * MagickBooleanType adjoin
     * }
     */
    public static final OfInt adjoin$layout() {
        return adjoin$LAYOUT;
    }

    private static final long adjoin$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * MagickBooleanType adjoin
     * }
     */
    public static final long adjoin$offset() {
        return adjoin$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * MagickBooleanType adjoin
     * }
     */
    public static int adjoin(MemorySegment struct) {
        return struct.get(adjoin$LAYOUT, adjoin$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * MagickBooleanType adjoin
     * }
     */
    public static void adjoin(MemorySegment struct, int fieldValue) {
        struct.set(adjoin$LAYOUT, adjoin$OFFSET, fieldValue);
    }

    private static final OfInt affirm$LAYOUT = (OfInt)$LAYOUT.select(groupElement("affirm"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * MagickBooleanType affirm
     * }
     */
    public static final OfInt affirm$layout() {
        return affirm$LAYOUT;
    }

    private static final long affirm$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * MagickBooleanType affirm
     * }
     */
    public static final long affirm$offset() {
        return affirm$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * MagickBooleanType affirm
     * }
     */
    public static int affirm(MemorySegment struct) {
        return struct.get(affirm$LAYOUT, affirm$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * MagickBooleanType affirm
     * }
     */
    public static void affirm(MemorySegment struct, int fieldValue) {
        struct.set(affirm$LAYOUT, affirm$OFFSET, fieldValue);
    }

    private static final OfInt antialias$LAYOUT = (OfInt)$LAYOUT.select(groupElement("antialias"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * MagickBooleanType antialias
     * }
     */
    public static final OfInt antialias$layout() {
        return antialias$LAYOUT;
    }

    private static final long antialias$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * MagickBooleanType antialias
     * }
     */
    public static final long antialias$offset() {
        return antialias$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * MagickBooleanType antialias
     * }
     */
    public static int antialias(MemorySegment struct) {
        return struct.get(antialias$LAYOUT, antialias$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * MagickBooleanType antialias
     * }
     */
    public static void antialias(MemorySegment struct, int fieldValue) {
        struct.set(antialias$LAYOUT, antialias$OFFSET, fieldValue);
    }

    private static final AddressLayout size$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *size
     * }
     */
    public static final AddressLayout size$layout() {
        return size$LAYOUT;
    }

    private static final long size$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *size
     * }
     */
    public static final long size$offset() {
        return size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *size
     * }
     */
    public static MemorySegment size(MemorySegment struct) {
        return struct.get(size$LAYOUT, size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *size
     * }
     */
    public static void size(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(size$LAYOUT, size$OFFSET, fieldValue);
    }

    private static final AddressLayout extract$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("extract"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *extract
     * }
     */
    public static final AddressLayout extract$layout() {
        return extract$LAYOUT;
    }

    private static final long extract$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *extract
     * }
     */
    public static final long extract$offset() {
        return extract$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *extract
     * }
     */
    public static MemorySegment extract(MemorySegment struct) {
        return struct.get(extract$LAYOUT, extract$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *extract
     * }
     */
    public static void extract(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(extract$LAYOUT, extract$OFFSET, fieldValue);
    }

    private static final AddressLayout page$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("page"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *page
     * }
     */
    public static final AddressLayout page$layout() {
        return page$LAYOUT;
    }

    private static final long page$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *page
     * }
     */
    public static final long page$offset() {
        return page$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *page
     * }
     */
    public static MemorySegment page(MemorySegment struct) {
        return struct.get(page$LAYOUT, page$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *page
     * }
     */
    public static void page(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(page$LAYOUT, page$OFFSET, fieldValue);
    }

    private static final AddressLayout scenes$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("scenes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *scenes
     * }
     */
    public static final AddressLayout scenes$layout() {
        return scenes$LAYOUT;
    }

    private static final long scenes$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *scenes
     * }
     */
    public static final long scenes$offset() {
        return scenes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *scenes
     * }
     */
    public static MemorySegment scenes(MemorySegment struct) {
        return struct.get(scenes$LAYOUT, scenes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *scenes
     * }
     */
    public static void scenes(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(scenes$LAYOUT, scenes$OFFSET, fieldValue);
    }

    private static final OfLong scene$LAYOUT = (OfLong)$LAYOUT.select(groupElement("scene"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t scene
     * }
     */
    public static final OfLong scene$layout() {
        return scene$LAYOUT;
    }

    private static final long scene$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t scene
     * }
     */
    public static final long scene$offset() {
        return scene$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t scene
     * }
     */
    public static long scene(MemorySegment struct) {
        return struct.get(scene$LAYOUT, scene$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t scene
     * }
     */
    public static void scene(MemorySegment struct, long fieldValue) {
        struct.set(scene$LAYOUT, scene$OFFSET, fieldValue);
    }

    private static final OfLong number_scenes$LAYOUT = (OfLong)$LAYOUT.select(groupElement("number_scenes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t number_scenes
     * }
     */
    public static final OfLong number_scenes$layout() {
        return number_scenes$LAYOUT;
    }

    private static final long number_scenes$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t number_scenes
     * }
     */
    public static final long number_scenes$offset() {
        return number_scenes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t number_scenes
     * }
     */
    public static long number_scenes(MemorySegment struct) {
        return struct.get(number_scenes$LAYOUT, number_scenes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t number_scenes
     * }
     */
    public static void number_scenes(MemorySegment struct, long fieldValue) {
        struct.set(number_scenes$LAYOUT, number_scenes$OFFSET, fieldValue);
    }

    private static final OfLong depth$LAYOUT = (OfLong)$LAYOUT.select(groupElement("depth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t depth
     * }
     */
    public static final OfLong depth$layout() {
        return depth$LAYOUT;
    }

    private static final long depth$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t depth
     * }
     */
    public static final long depth$offset() {
        return depth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t depth
     * }
     */
    public static long depth(MemorySegment struct) {
        return struct.get(depth$LAYOUT, depth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t depth
     * }
     */
    public static void depth(MemorySegment struct, long fieldValue) {
        struct.set(depth$LAYOUT, depth$OFFSET, fieldValue);
    }

    private static final OfInt interlace$LAYOUT = (OfInt)$LAYOUT.select(groupElement("interlace"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * InterlaceType interlace
     * }
     */
    public static final OfInt interlace$layout() {
        return interlace$LAYOUT;
    }

    private static final long interlace$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * InterlaceType interlace
     * }
     */
    public static final long interlace$offset() {
        return interlace$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * InterlaceType interlace
     * }
     */
    public static int interlace(MemorySegment struct) {
        return struct.get(interlace$LAYOUT, interlace$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * InterlaceType interlace
     * }
     */
    public static void interlace(MemorySegment struct, int fieldValue) {
        struct.set(interlace$LAYOUT, interlace$OFFSET, fieldValue);
    }

    private static final OfInt endian$LAYOUT = (OfInt)$LAYOUT.select(groupElement("endian"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * EndianType endian
     * }
     */
    public static final OfInt endian$layout() {
        return endian$LAYOUT;
    }

    private static final long endian$OFFSET = 84;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * EndianType endian
     * }
     */
    public static final long endian$offset() {
        return endian$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * EndianType endian
     * }
     */
    public static int endian(MemorySegment struct) {
        return struct.get(endian$LAYOUT, endian$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * EndianType endian
     * }
     */
    public static void endian(MemorySegment struct, int fieldValue) {
        struct.set(endian$LAYOUT, endian$OFFSET, fieldValue);
    }

    private static final OfInt units$LAYOUT = (OfInt)$LAYOUT.select(groupElement("units"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ResolutionType units
     * }
     */
    public static final OfInt units$layout() {
        return units$LAYOUT;
    }

    private static final long units$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ResolutionType units
     * }
     */
    public static final long units$offset() {
        return units$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ResolutionType units
     * }
     */
    public static int units(MemorySegment struct) {
        return struct.get(units$LAYOUT, units$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ResolutionType units
     * }
     */
    public static void units(MemorySegment struct, int fieldValue) {
        struct.set(units$LAYOUT, units$OFFSET, fieldValue);
    }

    private static final OfLong quality$LAYOUT = (OfLong)$LAYOUT.select(groupElement("quality"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t quality
     * }
     */
    public static final OfLong quality$layout() {
        return quality$LAYOUT;
    }

    private static final long quality$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t quality
     * }
     */
    public static final long quality$offset() {
        return quality$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t quality
     * }
     */
    public static long quality(MemorySegment struct) {
        return struct.get(quality$LAYOUT, quality$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t quality
     * }
     */
    public static void quality(MemorySegment struct, long fieldValue) {
        struct.set(quality$LAYOUT, quality$OFFSET, fieldValue);
    }

    private static final AddressLayout sampling_factor$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("sampling_factor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *sampling_factor
     * }
     */
    public static final AddressLayout sampling_factor$layout() {
        return sampling_factor$LAYOUT;
    }

    private static final long sampling_factor$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *sampling_factor
     * }
     */
    public static final long sampling_factor$offset() {
        return sampling_factor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *sampling_factor
     * }
     */
    public static MemorySegment sampling_factor(MemorySegment struct) {
        return struct.get(sampling_factor$LAYOUT, sampling_factor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *sampling_factor
     * }
     */
    public static void sampling_factor(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(sampling_factor$LAYOUT, sampling_factor$OFFSET, fieldValue);
    }

    private static final AddressLayout server_name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("server_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *server_name
     * }
     */
    public static final AddressLayout server_name$layout() {
        return server_name$LAYOUT;
    }

    private static final long server_name$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *server_name
     * }
     */
    public static final long server_name$offset() {
        return server_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *server_name
     * }
     */
    public static MemorySegment server_name(MemorySegment struct) {
        return struct.get(server_name$LAYOUT, server_name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *server_name
     * }
     */
    public static void server_name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(server_name$LAYOUT, server_name$OFFSET, fieldValue);
    }

    private static final AddressLayout font$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("font"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *font
     * }
     */
    public static final AddressLayout font$layout() {
        return font$LAYOUT;
    }

    private static final long font$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *font
     * }
     */
    public static final long font$offset() {
        return font$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *font
     * }
     */
    public static MemorySegment font(MemorySegment struct) {
        return struct.get(font$LAYOUT, font$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *font
     * }
     */
    public static void font(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(font$LAYOUT, font$OFFSET, fieldValue);
    }

    private static final AddressLayout texture$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("texture"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *texture
     * }
     */
    public static final AddressLayout texture$layout() {
        return texture$LAYOUT;
    }

    private static final long texture$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *texture
     * }
     */
    public static final long texture$offset() {
        return texture$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *texture
     * }
     */
    public static MemorySegment texture(MemorySegment struct) {
        return struct.get(texture$LAYOUT, texture$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *texture
     * }
     */
    public static void texture(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(texture$LAYOUT, texture$OFFSET, fieldValue);
    }

    private static final AddressLayout density$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("density"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *density
     * }
     */
    public static final AddressLayout density$layout() {
        return density$LAYOUT;
    }

    private static final long density$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *density
     * }
     */
    public static final long density$offset() {
        return density$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *density
     * }
     */
    public static MemorySegment density(MemorySegment struct) {
        return struct.get(density$LAYOUT, density$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *density
     * }
     */
    public static void density(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(density$LAYOUT, density$OFFSET, fieldValue);
    }

    private static final OfDouble pointsize$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("pointsize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double pointsize
     * }
     */
    public static final OfDouble pointsize$layout() {
        return pointsize$LAYOUT;
    }

    private static final long pointsize$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double pointsize
     * }
     */
    public static final long pointsize$offset() {
        return pointsize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double pointsize
     * }
     */
    public static double pointsize(MemorySegment struct) {
        return struct.get(pointsize$LAYOUT, pointsize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double pointsize
     * }
     */
    public static void pointsize(MemorySegment struct, double fieldValue) {
        struct.set(pointsize$LAYOUT, pointsize$OFFSET, fieldValue);
    }

    private static final OfDouble fuzz$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("fuzz"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double fuzz
     * }
     */
    public static final OfDouble fuzz$layout() {
        return fuzz$LAYOUT;
    }

    private static final long fuzz$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double fuzz
     * }
     */
    public static final long fuzz$offset() {
        return fuzz$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double fuzz
     * }
     */
    public static double fuzz(MemorySegment struct) {
        return struct.get(fuzz$LAYOUT, fuzz$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double fuzz
     * }
     */
    public static void fuzz(MemorySegment struct, double fieldValue) {
        struct.set(fuzz$LAYOUT, fuzz$OFFSET, fieldValue);
    }

    private static final GroupLayout alpha_color$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("alpha_color"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PixelInfo alpha_color
     * }
     */
    public static final GroupLayout alpha_color$layout() {
        return alpha_color$LAYOUT;
    }

    private static final long alpha_color$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PixelInfo alpha_color
     * }
     */
    public static final long alpha_color$offset() {
        return alpha_color$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PixelInfo alpha_color
     * }
     */
    public static MemorySegment alpha_color(MemorySegment struct) {
        return struct.asSlice(alpha_color$OFFSET, alpha_color$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PixelInfo alpha_color
     * }
     */
    public static void alpha_color(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, alpha_color$OFFSET, alpha_color$LAYOUT.byteSize());
    }

    private static final GroupLayout background_color$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("background_color"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PixelInfo background_color
     * }
     */
    public static final GroupLayout background_color$layout() {
        return background_color$LAYOUT;
    }

    private static final long background_color$OFFSET = 248;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PixelInfo background_color
     * }
     */
    public static final long background_color$offset() {
        return background_color$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PixelInfo background_color
     * }
     */
    public static MemorySegment background_color(MemorySegment struct) {
        return struct.asSlice(background_color$OFFSET, background_color$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PixelInfo background_color
     * }
     */
    public static void background_color(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, background_color$OFFSET, background_color$LAYOUT.byteSize());
    }

    private static final GroupLayout border_color$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("border_color"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PixelInfo border_color
     * }
     */
    public static final GroupLayout border_color$layout() {
        return border_color$LAYOUT;
    }

    private static final long border_color$OFFSET = 336;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PixelInfo border_color
     * }
     */
    public static final long border_color$offset() {
        return border_color$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PixelInfo border_color
     * }
     */
    public static MemorySegment border_color(MemorySegment struct) {
        return struct.asSlice(border_color$OFFSET, border_color$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PixelInfo border_color
     * }
     */
    public static void border_color(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, border_color$OFFSET, border_color$LAYOUT.byteSize());
    }

    private static final GroupLayout transparent_color$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("transparent_color"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PixelInfo transparent_color
     * }
     */
    public static final GroupLayout transparent_color$layout() {
        return transparent_color$LAYOUT;
    }

    private static final long transparent_color$OFFSET = 424;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PixelInfo transparent_color
     * }
     */
    public static final long transparent_color$offset() {
        return transparent_color$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PixelInfo transparent_color
     * }
     */
    public static MemorySegment transparent_color(MemorySegment struct) {
        return struct.asSlice(transparent_color$OFFSET, transparent_color$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PixelInfo transparent_color
     * }
     */
    public static void transparent_color(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, transparent_color$OFFSET, transparent_color$LAYOUT.byteSize());
    }

    private static final OfInt dither$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dither"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * MagickBooleanType dither
     * }
     */
    public static final OfInt dither$layout() {
        return dither$LAYOUT;
    }

    private static final long dither$OFFSET = 512;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * MagickBooleanType dither
     * }
     */
    public static final long dither$offset() {
        return dither$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * MagickBooleanType dither
     * }
     */
    public static int dither(MemorySegment struct) {
        return struct.get(dither$LAYOUT, dither$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * MagickBooleanType dither
     * }
     */
    public static void dither(MemorySegment struct, int fieldValue) {
        struct.set(dither$LAYOUT, dither$OFFSET, fieldValue);
    }

    private static final OfInt monochrome$LAYOUT = (OfInt)$LAYOUT.select(groupElement("monochrome"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * MagickBooleanType monochrome
     * }
     */
    public static final OfInt monochrome$layout() {
        return monochrome$LAYOUT;
    }

    private static final long monochrome$OFFSET = 516;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * MagickBooleanType monochrome
     * }
     */
    public static final long monochrome$offset() {
        return monochrome$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * MagickBooleanType monochrome
     * }
     */
    public static int monochrome(MemorySegment struct) {
        return struct.get(monochrome$LAYOUT, monochrome$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * MagickBooleanType monochrome
     * }
     */
    public static void monochrome(MemorySegment struct, int fieldValue) {
        struct.set(monochrome$LAYOUT, monochrome$OFFSET, fieldValue);
    }

    private static final OfInt colorspace$LAYOUT = (OfInt)$LAYOUT.select(groupElement("colorspace"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ColorspaceType colorspace
     * }
     */
    public static final OfInt colorspace$layout() {
        return colorspace$LAYOUT;
    }

    private static final long colorspace$OFFSET = 520;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ColorspaceType colorspace
     * }
     */
    public static final long colorspace$offset() {
        return colorspace$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ColorspaceType colorspace
     * }
     */
    public static int colorspace(MemorySegment struct) {
        return struct.get(colorspace$LAYOUT, colorspace$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ColorspaceType colorspace
     * }
     */
    public static void colorspace(MemorySegment struct, int fieldValue) {
        struct.set(colorspace$LAYOUT, colorspace$OFFSET, fieldValue);
    }

    private static final OfInt compose$LAYOUT = (OfInt)$LAYOUT.select(groupElement("compose"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CompositeOperator compose
     * }
     */
    public static final OfInt compose$layout() {
        return compose$LAYOUT;
    }

    private static final long compose$OFFSET = 524;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CompositeOperator compose
     * }
     */
    public static final long compose$offset() {
        return compose$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CompositeOperator compose
     * }
     */
    public static int compose(MemorySegment struct) {
        return struct.get(compose$LAYOUT, compose$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CompositeOperator compose
     * }
     */
    public static void compose(MemorySegment struct, int fieldValue) {
        struct.set(compose$LAYOUT, compose$OFFSET, fieldValue);
    }

    private static final OfInt type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImageType type
     * }
     */
    public static final OfInt type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 528;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImageType type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImageType type
     * }
     */
    public static int type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImageType type
     * }
     */
    public static void type(MemorySegment struct, int fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final OfInt ping$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ping"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * MagickBooleanType ping
     * }
     */
    public static final OfInt ping$layout() {
        return ping$LAYOUT;
    }

    private static final long ping$OFFSET = 532;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * MagickBooleanType ping
     * }
     */
    public static final long ping$offset() {
        return ping$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * MagickBooleanType ping
     * }
     */
    public static int ping(MemorySegment struct) {
        return struct.get(ping$LAYOUT, ping$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * MagickBooleanType ping
     * }
     */
    public static void ping(MemorySegment struct, int fieldValue) {
        struct.set(ping$LAYOUT, ping$OFFSET, fieldValue);
    }

    private static final OfInt verbose$LAYOUT = (OfInt)$LAYOUT.select(groupElement("verbose"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * MagickBooleanType verbose
     * }
     */
    public static final OfInt verbose$layout() {
        return verbose$LAYOUT;
    }

    private static final long verbose$OFFSET = 536;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * MagickBooleanType verbose
     * }
     */
    public static final long verbose$offset() {
        return verbose$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * MagickBooleanType verbose
     * }
     */
    public static int verbose(MemorySegment struct) {
        return struct.get(verbose$LAYOUT, verbose$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * MagickBooleanType verbose
     * }
     */
    public static void verbose(MemorySegment struct, int fieldValue) {
        struct.set(verbose$LAYOUT, verbose$OFFSET, fieldValue);
    }

    private static final OfInt channel$LAYOUT = (OfInt)$LAYOUT.select(groupElement("channel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ChannelType channel
     * }
     */
    public static final OfInt channel$layout() {
        return channel$LAYOUT;
    }

    private static final long channel$OFFSET = 540;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ChannelType channel
     * }
     */
    public static final long channel$offset() {
        return channel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ChannelType channel
     * }
     */
    public static int channel(MemorySegment struct) {
        return struct.get(channel$LAYOUT, channel$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ChannelType channel
     * }
     */
    public static void channel(MemorySegment struct, int fieldValue) {
        struct.set(channel$LAYOUT, channel$OFFSET, fieldValue);
    }

    private static final AddressLayout options$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("options"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *options
     * }
     */
    public static final AddressLayout options$layout() {
        return options$LAYOUT;
    }

    private static final long options$OFFSET = 544;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *options
     * }
     */
    public static final long options$offset() {
        return options$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *options
     * }
     */
    public static MemorySegment options(MemorySegment struct) {
        return struct.get(options$LAYOUT, options$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *options
     * }
     */
    public static void options(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(options$LAYOUT, options$OFFSET, fieldValue);
    }

    private static final AddressLayout profile$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("profile"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *profile
     * }
     */
    public static final AddressLayout profile$layout() {
        return profile$LAYOUT;
    }

    private static final long profile$OFFSET = 552;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *profile
     * }
     */
    public static final long profile$offset() {
        return profile$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *profile
     * }
     */
    public static MemorySegment profile(MemorySegment struct) {
        return struct.get(profile$LAYOUT, profile$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *profile
     * }
     */
    public static void profile(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(profile$LAYOUT, profile$OFFSET, fieldValue);
    }

    private static final OfInt synchronize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("synchronize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * MagickBooleanType synchronize
     * }
     */
    public static final OfInt synchronize$layout() {
        return synchronize$LAYOUT;
    }

    private static final long synchronize$OFFSET = 560;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * MagickBooleanType synchronize
     * }
     */
    public static final long synchronize$offset() {
        return synchronize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * MagickBooleanType synchronize
     * }
     */
    public static int synchronize(MemorySegment struct) {
        return struct.get(synchronize$LAYOUT, synchronize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * MagickBooleanType synchronize
     * }
     */
    public static void synchronize(MemorySegment struct, int fieldValue) {
        struct.set(synchronize$LAYOUT, synchronize$OFFSET, fieldValue);
    }

    private static final AddressLayout progress_monitor$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("progress_monitor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * MagickProgressMonitor progress_monitor
     * }
     */
    public static final AddressLayout progress_monitor$layout() {
        return progress_monitor$LAYOUT;
    }

    private static final long progress_monitor$OFFSET = 568;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * MagickProgressMonitor progress_monitor
     * }
     */
    public static final long progress_monitor$offset() {
        return progress_monitor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * MagickProgressMonitor progress_monitor
     * }
     */
    public static MemorySegment progress_monitor(MemorySegment struct) {
        return struct.get(progress_monitor$LAYOUT, progress_monitor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * MagickProgressMonitor progress_monitor
     * }
     */
    public static void progress_monitor(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(progress_monitor$LAYOUT, progress_monitor$OFFSET, fieldValue);
    }

    private static final AddressLayout client_data$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("client_data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *client_data
     * }
     */
    public static final AddressLayout client_data$layout() {
        return client_data$LAYOUT;
    }

    private static final long client_data$OFFSET = 576;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *client_data
     * }
     */
    public static final long client_data$offset() {
        return client_data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *client_data
     * }
     */
    public static MemorySegment client_data(MemorySegment struct) {
        return struct.get(client_data$LAYOUT, client_data$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *client_data
     * }
     */
    public static void client_data(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(client_data$LAYOUT, client_data$OFFSET, fieldValue);
    }

    private static final AddressLayout cache$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("cache"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *cache
     * }
     */
    public static final AddressLayout cache$layout() {
        return cache$LAYOUT;
    }

    private static final long cache$OFFSET = 584;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *cache
     * }
     */
    public static final long cache$offset() {
        return cache$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *cache
     * }
     */
    public static MemorySegment cache(MemorySegment struct) {
        return struct.get(cache$LAYOUT, cache$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *cache
     * }
     */
    public static void cache(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(cache$LAYOUT, cache$OFFSET, fieldValue);
    }

    private static final AddressLayout stream$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("stream"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StreamHandler stream
     * }
     */
    public static final AddressLayout stream$layout() {
        return stream$LAYOUT;
    }

    private static final long stream$OFFSET = 592;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StreamHandler stream
     * }
     */
    public static final long stream$offset() {
        return stream$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StreamHandler stream
     * }
     */
    public static MemorySegment stream(MemorySegment struct) {
        return struct.get(stream$LAYOUT, stream$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StreamHandler stream
     * }
     */
    public static void stream(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(stream$LAYOUT, stream$OFFSET, fieldValue);
    }

    private static final AddressLayout file$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("file"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FILE *file
     * }
     */
    public static final AddressLayout file$layout() {
        return file$LAYOUT;
    }

    private static final long file$OFFSET = 600;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FILE *file
     * }
     */
    public static final long file$offset() {
        return file$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FILE *file
     * }
     */
    public static MemorySegment file(MemorySegment struct) {
        return struct.get(file$LAYOUT, file$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FILE *file
     * }
     */
    public static void file(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(file$LAYOUT, file$OFFSET, fieldValue);
    }

    private static final AddressLayout blob$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("blob"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *blob
     * }
     */
    public static final AddressLayout blob$layout() {
        return blob$LAYOUT;
    }

    private static final long blob$OFFSET = 608;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *blob
     * }
     */
    public static final long blob$offset() {
        return blob$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *blob
     * }
     */
    public static MemorySegment blob(MemorySegment struct) {
        return struct.get(blob$LAYOUT, blob$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *blob
     * }
     */
    public static void blob(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(blob$LAYOUT, blob$OFFSET, fieldValue);
    }

    private static final OfLong length$LAYOUT = (OfLong)$LAYOUT.select(groupElement("length"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t length
     * }
     */
    public static final OfLong length$layout() {
        return length$LAYOUT;
    }

    private static final long length$OFFSET = 616;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t length
     * }
     */
    public static final long length$offset() {
        return length$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t length
     * }
     */
    public static long length(MemorySegment struct) {
        return struct.get(length$LAYOUT, length$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t length
     * }
     */
    public static void length(MemorySegment struct, long fieldValue) {
        struct.set(length$LAYOUT, length$OFFSET, fieldValue);
    }

    private static final SequenceLayout magick$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("magick"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char magick[4096]
     * }
     */
    public static final SequenceLayout magick$layout() {
        return magick$LAYOUT;
    }

    private static final long magick$OFFSET = 624;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char magick[4096]
     * }
     */
    public static final long magick$offset() {
        return magick$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char magick[4096]
     * }
     */
    public static MemorySegment magick(MemorySegment struct) {
        return struct.asSlice(magick$OFFSET, magick$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char magick[4096]
     * }
     */
    public static void magick(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, magick$OFFSET, magick$LAYOUT.byteSize());
    }

    private static long[] magick$DIMS = { 4096 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char magick[4096]
     * }
     */
    public static long[] magick$dimensions() {
        return magick$DIMS;
    }
    private static final VarHandle magick$ELEM_HANDLE = magick$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char magick[4096]
     * }
     */
    public static byte magick(MemorySegment struct, long index0) {
        return (byte)magick$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char magick[4096]
     * }
     */
    public static void magick(MemorySegment struct, long index0, byte fieldValue) {
        magick$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout unique$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("unique"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char unique[4096]
     * }
     */
    public static final SequenceLayout unique$layout() {
        return unique$LAYOUT;
    }

    private static final long unique$OFFSET = 4720;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char unique[4096]
     * }
     */
    public static final long unique$offset() {
        return unique$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char unique[4096]
     * }
     */
    public static MemorySegment unique(MemorySegment struct) {
        return struct.asSlice(unique$OFFSET, unique$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char unique[4096]
     * }
     */
    public static void unique(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, unique$OFFSET, unique$LAYOUT.byteSize());
    }

    private static long[] unique$DIMS = { 4096 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char unique[4096]
     * }
     */
    public static long[] unique$dimensions() {
        return unique$DIMS;
    }
    private static final VarHandle unique$ELEM_HANDLE = unique$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char unique[4096]
     * }
     */
    public static byte unique(MemorySegment struct, long index0) {
        return (byte)unique$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char unique[4096]
     * }
     */
    public static void unique(MemorySegment struct, long index0, byte fieldValue) {
        unique$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout filename$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("filename"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char filename[4096]
     * }
     */
    public static final SequenceLayout filename$layout() {
        return filename$LAYOUT;
    }

    private static final long filename$OFFSET = 8816;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char filename[4096]
     * }
     */
    public static final long filename$offset() {
        return filename$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char filename[4096]
     * }
     */
    public static MemorySegment filename(MemorySegment struct) {
        return struct.asSlice(filename$OFFSET, filename$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char filename[4096]
     * }
     */
    public static void filename(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, filename$OFFSET, filename$LAYOUT.byteSize());
    }

    private static long[] filename$DIMS = { 4096 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char filename[4096]
     * }
     */
    public static long[] filename$dimensions() {
        return filename$DIMS;
    }
    private static final VarHandle filename$ELEM_HANDLE = filename$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char filename[4096]
     * }
     */
    public static byte filename(MemorySegment struct, long index0) {
        return (byte)filename$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char filename[4096]
     * }
     */
    public static void filename(MemorySegment struct, long index0, byte fieldValue) {
        filename$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt debug$LAYOUT = (OfInt)$LAYOUT.select(groupElement("debug"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * MagickBooleanType debug
     * }
     */
    public static final OfInt debug$layout() {
        return debug$LAYOUT;
    }

    private static final long debug$OFFSET = 12912;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * MagickBooleanType debug
     * }
     */
    public static final long debug$offset() {
        return debug$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * MagickBooleanType debug
     * }
     */
    public static int debug(MemorySegment struct) {
        return struct.get(debug$LAYOUT, debug$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * MagickBooleanType debug
     * }
     */
    public static void debug(MemorySegment struct, int fieldValue) {
        struct.set(debug$LAYOUT, debug$OFFSET, fieldValue);
    }

    private static final OfLong signature$LAYOUT = (OfLong)$LAYOUT.select(groupElement("signature"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t signature
     * }
     */
    public static final OfLong signature$layout() {
        return signature$LAYOUT;
    }

    private static final long signature$OFFSET = 12920;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t signature
     * }
     */
    public static final long signature$offset() {
        return signature$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t signature
     * }
     */
    public static long signature(MemorySegment struct) {
        return struct.get(signature$LAYOUT, signature$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t signature
     * }
     */
    public static void signature(MemorySegment struct, long fieldValue) {
        struct.set(signature$LAYOUT, signature$OFFSET, fieldValue);
    }

    private static final AddressLayout custom_stream$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("custom_stream"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CustomStreamInfo *custom_stream
     * }
     */
    public static final AddressLayout custom_stream$layout() {
        return custom_stream$LAYOUT;
    }

    private static final long custom_stream$OFFSET = 12928;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CustomStreamInfo *custom_stream
     * }
     */
    public static final long custom_stream$offset() {
        return custom_stream$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CustomStreamInfo *custom_stream
     * }
     */
    public static MemorySegment custom_stream(MemorySegment struct) {
        return struct.get(custom_stream$LAYOUT, custom_stream$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CustomStreamInfo *custom_stream
     * }
     */
    public static void custom_stream(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(custom_stream$LAYOUT, custom_stream$OFFSET, fieldValue);
    }

    private static final GroupLayout matte_color$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("matte_color"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PixelInfo matte_color
     * }
     */
    public static final GroupLayout matte_color$layout() {
        return matte_color$LAYOUT;
    }

    private static final long matte_color$OFFSET = 12936;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PixelInfo matte_color
     * }
     */
    public static final long matte_color$offset() {
        return matte_color$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PixelInfo matte_color
     * }
     */
    public static MemorySegment matte_color(MemorySegment struct) {
        return struct.asSlice(matte_color$OFFSET, matte_color$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PixelInfo matte_color
     * }
     */
    public static void matte_color(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, matte_color$OFFSET, matte_color$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

