// Generated by jextract

package app.photofox.imffm.generated;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class MagickWand_h {

    MagickWand_h() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.libraryLookup(System.mapLibraryName("MagickWand-7.Q16HDRI"), LIBRARY_ARENA)
            .or(SymbolLookup.loaderLookup())
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;
    private static final int LanczosFilter = (int)22L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.LanczosFilter = 22
     * }
     */
    public static int LanczosFilter() {
        return LanczosFilter;
    }

    private static class MagickGetFilename {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetFilename");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *MagickGetFilename(const MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetFilename$descriptor() {
        return MagickGetFilename.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *MagickGetFilename(const MagickWand *)
     * }
     */
    public static MethodHandle MagickGetFilename$handle() {
        return MagickGetFilename.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *MagickGetFilename(const MagickWand *)
     * }
     */
    public static MemorySegment MagickGetFilename$address() {
        return MagickGetFilename.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *MagickGetFilename(const MagickWand *)
     * }
     */
    public static MemorySegment MagickGetFilename(MemorySegment x0) {
        var mh$ = MagickGetFilename.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetFilename", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetFormat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetFormat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *MagickGetFormat(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetFormat$descriptor() {
        return MagickGetFormat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *MagickGetFormat(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetFormat$handle() {
        return MagickGetFormat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *MagickGetFormat(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetFormat$address() {
        return MagickGetFormat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *MagickGetFormat(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetFormat(MemorySegment x0) {
        var mh$ = MagickGetFormat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetFormat", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetFont {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetFont");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *MagickGetFont(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetFont$descriptor() {
        return MagickGetFont.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *MagickGetFont(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetFont$handle() {
        return MagickGetFont.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *MagickGetFont(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetFont$address() {
        return MagickGetFont.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *MagickGetFont(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetFont(MemorySegment x0) {
        var mh$ = MagickGetFont.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetFont", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetHomeURL {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER    );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetHomeURL");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *MagickGetHomeURL()
     * }
     */
    public static FunctionDescriptor MagickGetHomeURL$descriptor() {
        return MagickGetHomeURL.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *MagickGetHomeURL()
     * }
     */
    public static MethodHandle MagickGetHomeURL$handle() {
        return MagickGetHomeURL.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *MagickGetHomeURL()
     * }
     */
    public static MemorySegment MagickGetHomeURL$address() {
        return MagickGetHomeURL.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *MagickGetHomeURL()
     * }
     */
    public static MemorySegment MagickGetHomeURL() {
        var mh$ = MagickGetHomeURL.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetHomeURL");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageArtifact {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageArtifact");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *MagickGetImageArtifact(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickGetImageArtifact$descriptor() {
        return MagickGetImageArtifact.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *MagickGetImageArtifact(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickGetImageArtifact$handle() {
        return MagickGetImageArtifact.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *MagickGetImageArtifact(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickGetImageArtifact$address() {
        return MagickGetImageArtifact.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *MagickGetImageArtifact(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickGetImageArtifact(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickGetImageArtifact.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageArtifact", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageArtifacts {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageArtifacts");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char **MagickGetImageArtifacts(MagickWand *, const char *, size_t *)
     * }
     */
    public static FunctionDescriptor MagickGetImageArtifacts$descriptor() {
        return MagickGetImageArtifacts.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char **MagickGetImageArtifacts(MagickWand *, const char *, size_t *)
     * }
     */
    public static MethodHandle MagickGetImageArtifacts$handle() {
        return MagickGetImageArtifacts.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char **MagickGetImageArtifacts(MagickWand *, const char *, size_t *)
     * }
     */
    public static MemorySegment MagickGetImageArtifacts$address() {
        return MagickGetImageArtifacts.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char **MagickGetImageArtifacts(MagickWand *, const char *, size_t *)
     * }
     */
    public static MemorySegment MagickGetImageArtifacts(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = MagickGetImageArtifacts.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageArtifacts", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageProfiles {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageProfiles");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char **MagickGetImageProfiles(MagickWand *, const char *, size_t *)
     * }
     */
    public static FunctionDescriptor MagickGetImageProfiles$descriptor() {
        return MagickGetImageProfiles.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char **MagickGetImageProfiles(MagickWand *, const char *, size_t *)
     * }
     */
    public static MethodHandle MagickGetImageProfiles$handle() {
        return MagickGetImageProfiles.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char **MagickGetImageProfiles(MagickWand *, const char *, size_t *)
     * }
     */
    public static MemorySegment MagickGetImageProfiles$address() {
        return MagickGetImageProfiles.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char **MagickGetImageProfiles(MagickWand *, const char *, size_t *)
     * }
     */
    public static MemorySegment MagickGetImageProfiles(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = MagickGetImageProfiles.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageProfiles", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageProperty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *MagickGetImageProperty(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickGetImageProperty$descriptor() {
        return MagickGetImageProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *MagickGetImageProperty(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickGetImageProperty$handle() {
        return MagickGetImageProperty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *MagickGetImageProperty(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickGetImageProperty$address() {
        return MagickGetImageProperty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *MagickGetImageProperty(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickGetImageProperty(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickGetImageProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageProperty", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageProperties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageProperties");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char **MagickGetImageProperties(MagickWand *, const char *, size_t *)
     * }
     */
    public static FunctionDescriptor MagickGetImageProperties$descriptor() {
        return MagickGetImageProperties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char **MagickGetImageProperties(MagickWand *, const char *, size_t *)
     * }
     */
    public static MethodHandle MagickGetImageProperties$handle() {
        return MagickGetImageProperties.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char **MagickGetImageProperties(MagickWand *, const char *, size_t *)
     * }
     */
    public static MemorySegment MagickGetImageProperties$address() {
        return MagickGetImageProperties.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char **MagickGetImageProperties(MagickWand *, const char *, size_t *)
     * }
     */
    public static MemorySegment MagickGetImageProperties(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = MagickGetImageProperties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageProperties", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetOption {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetOption");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *MagickGetOption(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickGetOption$descriptor() {
        return MagickGetOption.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *MagickGetOption(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickGetOption$handle() {
        return MagickGetOption.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *MagickGetOption(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickGetOption$address() {
        return MagickGetOption.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *MagickGetOption(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickGetOption(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickGetOption.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetOption", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetOptions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetOptions");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char **MagickGetOptions(MagickWand *, const char *, size_t *)
     * }
     */
    public static FunctionDescriptor MagickGetOptions$descriptor() {
        return MagickGetOptions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char **MagickGetOptions(MagickWand *, const char *, size_t *)
     * }
     */
    public static MethodHandle MagickGetOptions$handle() {
        return MagickGetOptions.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char **MagickGetOptions(MagickWand *, const char *, size_t *)
     * }
     */
    public static MemorySegment MagickGetOptions$address() {
        return MagickGetOptions.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char **MagickGetOptions(MagickWand *, const char *, size_t *)
     * }
     */
    public static MemorySegment MagickGetOptions(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = MagickGetOptions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetOptions", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickQueryConfigureOption {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickQueryConfigureOption");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *MagickQueryConfigureOption(const char *)
     * }
     */
    public static FunctionDescriptor MagickQueryConfigureOption$descriptor() {
        return MagickQueryConfigureOption.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *MagickQueryConfigureOption(const char *)
     * }
     */
    public static MethodHandle MagickQueryConfigureOption$handle() {
        return MagickQueryConfigureOption.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *MagickQueryConfigureOption(const char *)
     * }
     */
    public static MemorySegment MagickQueryConfigureOption$address() {
        return MagickQueryConfigureOption.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *MagickQueryConfigureOption(const char *)
     * }
     */
    public static MemorySegment MagickQueryConfigureOption(MemorySegment x0) {
        var mh$ = MagickQueryConfigureOption.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickQueryConfigureOption", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickQueryConfigureOptions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickQueryConfigureOptions");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char **MagickQueryConfigureOptions(const char *, size_t *)
     * }
     */
    public static FunctionDescriptor MagickQueryConfigureOptions$descriptor() {
        return MagickQueryConfigureOptions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char **MagickQueryConfigureOptions(const char *, size_t *)
     * }
     */
    public static MethodHandle MagickQueryConfigureOptions$handle() {
        return MagickQueryConfigureOptions.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char **MagickQueryConfigureOptions(const char *, size_t *)
     * }
     */
    public static MemorySegment MagickQueryConfigureOptions$address() {
        return MagickQueryConfigureOptions.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char **MagickQueryConfigureOptions(const char *, size_t *)
     * }
     */
    public static MemorySegment MagickQueryConfigureOptions(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickQueryConfigureOptions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickQueryConfigureOptions", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickQueryFonts {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickQueryFonts");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char **MagickQueryFonts(const char *, size_t *)
     * }
     */
    public static FunctionDescriptor MagickQueryFonts$descriptor() {
        return MagickQueryFonts.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char **MagickQueryFonts(const char *, size_t *)
     * }
     */
    public static MethodHandle MagickQueryFonts$handle() {
        return MagickQueryFonts.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char **MagickQueryFonts(const char *, size_t *)
     * }
     */
    public static MemorySegment MagickQueryFonts$address() {
        return MagickQueryFonts.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char **MagickQueryFonts(const char *, size_t *)
     * }
     */
    public static MemorySegment MagickQueryFonts(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickQueryFonts.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickQueryFonts", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickQueryFormats {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickQueryFormats");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char **MagickQueryFormats(const char *, size_t *)
     * }
     */
    public static FunctionDescriptor MagickQueryFormats$descriptor() {
        return MagickQueryFormats.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char **MagickQueryFormats(const char *, size_t *)
     * }
     */
    public static MethodHandle MagickQueryFormats$handle() {
        return MagickQueryFormats.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char **MagickQueryFormats(const char *, size_t *)
     * }
     */
    public static MemorySegment MagickQueryFormats$address() {
        return MagickQueryFormats.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char **MagickQueryFormats(const char *, size_t *)
     * }
     */
    public static MemorySegment MagickQueryFormats(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickQueryFormats.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickQueryFormats", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetColorspace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetColorspace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ColorspaceType MagickGetColorspace(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetColorspace$descriptor() {
        return MagickGetColorspace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ColorspaceType MagickGetColorspace(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetColorspace$handle() {
        return MagickGetColorspace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ColorspaceType MagickGetColorspace(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetColorspace$address() {
        return MagickGetColorspace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ColorspaceType MagickGetColorspace(MagickWand *)
     * }
     */
    public static int MagickGetColorspace(MemorySegment x0) {
        var mh$ = MagickGetColorspace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetColorspace", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetCompression {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetCompression");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern CompressionType MagickGetCompression(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetCompression$descriptor() {
        return MagickGetCompression.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern CompressionType MagickGetCompression(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetCompression$handle() {
        return MagickGetCompression.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern CompressionType MagickGetCompression(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetCompression$address() {
        return MagickGetCompression.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern CompressionType MagickGetCompression(MagickWand *)
     * }
     */
    public static int MagickGetCompression(MemorySegment x0) {
        var mh$ = MagickGetCompression.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetCompression", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetCopyright {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER    );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetCopyright");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *MagickGetCopyright()
     * }
     */
    public static FunctionDescriptor MagickGetCopyright$descriptor() {
        return MagickGetCopyright.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *MagickGetCopyright()
     * }
     */
    public static MethodHandle MagickGetCopyright$handle() {
        return MagickGetCopyright.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *MagickGetCopyright()
     * }
     */
    public static MemorySegment MagickGetCopyright$address() {
        return MagickGetCopyright.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *MagickGetCopyright()
     * }
     */
    public static MemorySegment MagickGetCopyright() {
        var mh$ = MagickGetCopyright.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetCopyright");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetPackageName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER    );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetPackageName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *MagickGetPackageName()
     * }
     */
    public static FunctionDescriptor MagickGetPackageName$descriptor() {
        return MagickGetPackageName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *MagickGetPackageName()
     * }
     */
    public static MethodHandle MagickGetPackageName$handle() {
        return MagickGetPackageName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *MagickGetPackageName()
     * }
     */
    public static MemorySegment MagickGetPackageName$address() {
        return MagickGetPackageName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *MagickGetPackageName()
     * }
     */
    public static MemorySegment MagickGetPackageName() {
        var mh$ = MagickGetPackageName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetPackageName");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetQuantumDepth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetQuantumDepth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *MagickGetQuantumDepth(size_t *)
     * }
     */
    public static FunctionDescriptor MagickGetQuantumDepth$descriptor() {
        return MagickGetQuantumDepth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *MagickGetQuantumDepth(size_t *)
     * }
     */
    public static MethodHandle MagickGetQuantumDepth$handle() {
        return MagickGetQuantumDepth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *MagickGetQuantumDepth(size_t *)
     * }
     */
    public static MemorySegment MagickGetQuantumDepth$address() {
        return MagickGetQuantumDepth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *MagickGetQuantumDepth(size_t *)
     * }
     */
    public static MemorySegment MagickGetQuantumDepth(MemorySegment x0) {
        var mh$ = MagickGetQuantumDepth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetQuantumDepth", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetQuantumRange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetQuantumRange");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *MagickGetQuantumRange(size_t *)
     * }
     */
    public static FunctionDescriptor MagickGetQuantumRange$descriptor() {
        return MagickGetQuantumRange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *MagickGetQuantumRange(size_t *)
     * }
     */
    public static MethodHandle MagickGetQuantumRange$handle() {
        return MagickGetQuantumRange.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *MagickGetQuantumRange(size_t *)
     * }
     */
    public static MemorySegment MagickGetQuantumRange$address() {
        return MagickGetQuantumRange.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *MagickGetQuantumRange(size_t *)
     * }
     */
    public static MemorySegment MagickGetQuantumRange(MemorySegment x0) {
        var mh$ = MagickGetQuantumRange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetQuantumRange", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetReleaseDate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER    );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetReleaseDate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *MagickGetReleaseDate()
     * }
     */
    public static FunctionDescriptor MagickGetReleaseDate$descriptor() {
        return MagickGetReleaseDate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *MagickGetReleaseDate()
     * }
     */
    public static MethodHandle MagickGetReleaseDate$handle() {
        return MagickGetReleaseDate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *MagickGetReleaseDate()
     * }
     */
    public static MemorySegment MagickGetReleaseDate$address() {
        return MagickGetReleaseDate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *MagickGetReleaseDate()
     * }
     */
    public static MemorySegment MagickGetReleaseDate() {
        var mh$ = MagickGetReleaseDate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetReleaseDate");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetVersion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetVersion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *MagickGetVersion(size_t *)
     * }
     */
    public static FunctionDescriptor MagickGetVersion$descriptor() {
        return MagickGetVersion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *MagickGetVersion(size_t *)
     * }
     */
    public static MethodHandle MagickGetVersion$handle() {
        return MagickGetVersion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *MagickGetVersion(size_t *)
     * }
     */
    public static MemorySegment MagickGetVersion$address() {
        return MagickGetVersion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *MagickGetVersion(size_t *)
     * }
     */
    public static MemorySegment MagickGetVersion(MemorySegment x0) {
        var mh$ = MagickGetVersion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetVersion", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetPointsize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetPointsize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double MagickGetPointsize(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetPointsize$descriptor() {
        return MagickGetPointsize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double MagickGetPointsize(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetPointsize$handle() {
        return MagickGetPointsize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double MagickGetPointsize(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetPointsize$address() {
        return MagickGetPointsize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double MagickGetPointsize(MagickWand *)
     * }
     */
    public static double MagickGetPointsize(MemorySegment x0) {
        var mh$ = MagickGetPointsize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetPointsize", x0);
            }
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetSamplingFactors {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetSamplingFactors");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double *MagickGetSamplingFactors(MagickWand *, size_t *)
     * }
     */
    public static FunctionDescriptor MagickGetSamplingFactors$descriptor() {
        return MagickGetSamplingFactors.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double *MagickGetSamplingFactors(MagickWand *, size_t *)
     * }
     */
    public static MethodHandle MagickGetSamplingFactors$handle() {
        return MagickGetSamplingFactors.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double *MagickGetSamplingFactors(MagickWand *, size_t *)
     * }
     */
    public static MemorySegment MagickGetSamplingFactors$address() {
        return MagickGetSamplingFactors.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double *MagickGetSamplingFactors(MagickWand *, size_t *)
     * }
     */
    public static MemorySegment MagickGetSamplingFactors(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickGetSamplingFactors.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetSamplingFactors", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickQueryFontMetrics {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickQueryFontMetrics");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double *MagickQueryFontMetrics(MagickWand *, const DrawingWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickQueryFontMetrics$descriptor() {
        return MagickQueryFontMetrics.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double *MagickQueryFontMetrics(MagickWand *, const DrawingWand *, const char *)
     * }
     */
    public static MethodHandle MagickQueryFontMetrics$handle() {
        return MagickQueryFontMetrics.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double *MagickQueryFontMetrics(MagickWand *, const DrawingWand *, const char *)
     * }
     */
    public static MemorySegment MagickQueryFontMetrics$address() {
        return MagickQueryFontMetrics.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double *MagickQueryFontMetrics(MagickWand *, const DrawingWand *, const char *)
     * }
     */
    public static MemorySegment MagickQueryFontMetrics(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = MagickQueryFontMetrics.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickQueryFontMetrics", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickQueryMultilineFontMetrics {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickQueryMultilineFontMetrics");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double *MagickQueryMultilineFontMetrics(MagickWand *, const DrawingWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickQueryMultilineFontMetrics$descriptor() {
        return MagickQueryMultilineFontMetrics.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double *MagickQueryMultilineFontMetrics(MagickWand *, const DrawingWand *, const char *)
     * }
     */
    public static MethodHandle MagickQueryMultilineFontMetrics$handle() {
        return MagickQueryMultilineFontMetrics.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double *MagickQueryMultilineFontMetrics(MagickWand *, const DrawingWand *, const char *)
     * }
     */
    public static MemorySegment MagickQueryMultilineFontMetrics$address() {
        return MagickQueryMultilineFontMetrics.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double *MagickQueryMultilineFontMetrics(MagickWand *, const DrawingWand *, const char *)
     * }
     */
    public static MemorySegment MagickQueryMultilineFontMetrics(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = MagickQueryMultilineFontMetrics.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickQueryMultilineFontMetrics", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetFilter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetFilter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern FilterType MagickGetFilter(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetFilter$descriptor() {
        return MagickGetFilter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern FilterType MagickGetFilter(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetFilter$handle() {
        return MagickGetFilter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern FilterType MagickGetFilter(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetFilter$address() {
        return MagickGetFilter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern FilterType MagickGetFilter(MagickWand *)
     * }
     */
    public static int MagickGetFilter(MemorySegment x0) {
        var mh$ = MagickGetFilter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetFilter", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetGravity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetGravity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GravityType MagickGetGravity(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetGravity$descriptor() {
        return MagickGetGravity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GravityType MagickGetGravity(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetGravity$handle() {
        return MagickGetGravity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GravityType MagickGetGravity(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetGravity$address() {
        return MagickGetGravity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GravityType MagickGetGravity(MagickWand *)
     * }
     */
    public static int MagickGetGravity(MemorySegment x0) {
        var mh$ = MagickGetGravity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetGravity", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImageType MagickGetType(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetType$descriptor() {
        return MagickGetType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImageType MagickGetType(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetType$handle() {
        return MagickGetType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImageType MagickGetType(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetType$address() {
        return MagickGetType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImageType MagickGetType(MagickWand *)
     * }
     */
    public static int MagickGetType(MemorySegment x0) {
        var mh$ = MagickGetType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetType", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetInterlaceScheme {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetInterlaceScheme");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern InterlaceType MagickGetInterlaceScheme(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetInterlaceScheme$descriptor() {
        return MagickGetInterlaceScheme.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern InterlaceType MagickGetInterlaceScheme(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetInterlaceScheme$handle() {
        return MagickGetInterlaceScheme.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern InterlaceType MagickGetInterlaceScheme(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetInterlaceScheme$address() {
        return MagickGetInterlaceScheme.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern InterlaceType MagickGetInterlaceScheme(MagickWand *)
     * }
     */
    public static int MagickGetInterlaceScheme(MemorySegment x0) {
        var mh$ = MagickGetInterlaceScheme.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetInterlaceScheme", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetInterpolateMethod {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetInterpolateMethod");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PixelInterpolateMethod MagickGetInterpolateMethod(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetInterpolateMethod$descriptor() {
        return MagickGetInterpolateMethod.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PixelInterpolateMethod MagickGetInterpolateMethod(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetInterpolateMethod$handle() {
        return MagickGetInterpolateMethod.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern PixelInterpolateMethod MagickGetInterpolateMethod(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetInterpolateMethod$address() {
        return MagickGetInterpolateMethod.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern PixelInterpolateMethod MagickGetInterpolateMethod(MagickWand *)
     * }
     */
    public static int MagickGetInterpolateMethod(MemorySegment x0) {
        var mh$ = MagickGetInterpolateMethod.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetInterpolateMethod", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetOrientation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetOrientation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern OrientationType MagickGetOrientation(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetOrientation$descriptor() {
        return MagickGetOrientation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern OrientationType MagickGetOrientation(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetOrientation$handle() {
        return MagickGetOrientation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern OrientationType MagickGetOrientation(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetOrientation$address() {
        return MagickGetOrientation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern OrientationType MagickGetOrientation(MagickWand *)
     * }
     */
    public static int MagickGetOrientation(MemorySegment x0) {
        var mh$ = MagickGetOrientation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetOrientation", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDeleteImageArtifact {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickDeleteImageArtifact");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickDeleteImageArtifact(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickDeleteImageArtifact$descriptor() {
        return MagickDeleteImageArtifact.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickDeleteImageArtifact(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickDeleteImageArtifact$handle() {
        return MagickDeleteImageArtifact.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickDeleteImageArtifact(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickDeleteImageArtifact$address() {
        return MagickDeleteImageArtifact.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickDeleteImageArtifact(MagickWand *, const char *)
     * }
     */
    public static int MagickDeleteImageArtifact(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickDeleteImageArtifact.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDeleteImageArtifact", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDeleteImageProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickDeleteImageProperty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickDeleteImageProperty(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickDeleteImageProperty$descriptor() {
        return MagickDeleteImageProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickDeleteImageProperty(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickDeleteImageProperty$handle() {
        return MagickDeleteImageProperty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickDeleteImageProperty(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickDeleteImageProperty$address() {
        return MagickDeleteImageProperty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickDeleteImageProperty(MagickWand *, const char *)
     * }
     */
    public static int MagickDeleteImageProperty(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickDeleteImageProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDeleteImageProperty", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDeleteOption {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickDeleteOption");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickDeleteOption(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickDeleteOption$descriptor() {
        return MagickDeleteOption.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickDeleteOption(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickDeleteOption$handle() {
        return MagickDeleteOption.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickDeleteOption(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickDeleteOption$address() {
        return MagickDeleteOption.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickDeleteOption(MagickWand *, const char *)
     * }
     */
    public static int MagickDeleteOption(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickDeleteOption.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDeleteOption", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetAntialias {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetAntialias");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetAntialias(const MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetAntialias$descriptor() {
        return MagickGetAntialias.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetAntialias(const MagickWand *)
     * }
     */
    public static MethodHandle MagickGetAntialias$handle() {
        return MagickGetAntialias.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetAntialias(const MagickWand *)
     * }
     */
    public static MemorySegment MagickGetAntialias$address() {
        return MagickGetAntialias.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetAntialias(const MagickWand *)
     * }
     */
    public static int MagickGetAntialias(MemorySegment x0) {
        var mh$ = MagickGetAntialias.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetAntialias", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetPage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetPage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetPage(const MagickWand *, size_t *, size_t *, ssize_t *, ssize_t *)
     * }
     */
    public static FunctionDescriptor MagickGetPage$descriptor() {
        return MagickGetPage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetPage(const MagickWand *, size_t *, size_t *, ssize_t *, ssize_t *)
     * }
     */
    public static MethodHandle MagickGetPage$handle() {
        return MagickGetPage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetPage(const MagickWand *, size_t *, size_t *, ssize_t *, ssize_t *)
     * }
     */
    public static MemorySegment MagickGetPage$address() {
        return MagickGetPage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetPage(const MagickWand *, size_t *, size_t *, ssize_t *, ssize_t *)
     * }
     */
    public static int MagickGetPage(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = MagickGetPage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetPage", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetResolution {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetResolution");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetResolution(const MagickWand *, double *, double *)
     * }
     */
    public static FunctionDescriptor MagickGetResolution$descriptor() {
        return MagickGetResolution.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetResolution(const MagickWand *, double *, double *)
     * }
     */
    public static MethodHandle MagickGetResolution$handle() {
        return MagickGetResolution.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetResolution(const MagickWand *, double *, double *)
     * }
     */
    public static MemorySegment MagickGetResolution$address() {
        return MagickGetResolution.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetResolution(const MagickWand *, double *, double *)
     * }
     */
    public static int MagickGetResolution(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = MagickGetResolution.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetResolution", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetSize(const MagickWand *, size_t *, size_t *)
     * }
     */
    public static FunctionDescriptor MagickGetSize$descriptor() {
        return MagickGetSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetSize(const MagickWand *, size_t *, size_t *)
     * }
     */
    public static MethodHandle MagickGetSize$handle() {
        return MagickGetSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetSize(const MagickWand *, size_t *, size_t *)
     * }
     */
    public static MemorySegment MagickGetSize$address() {
        return MagickGetSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetSize(const MagickWand *, size_t *, size_t *)
     * }
     */
    public static int MagickGetSize(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = MagickGetSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetSize", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetSizeOffset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetSizeOffset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetSizeOffset(const MagickWand *, ssize_t *)
     * }
     */
    public static FunctionDescriptor MagickGetSizeOffset$descriptor() {
        return MagickGetSizeOffset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetSizeOffset(const MagickWand *, ssize_t *)
     * }
     */
    public static MethodHandle MagickGetSizeOffset$handle() {
        return MagickGetSizeOffset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetSizeOffset(const MagickWand *, ssize_t *)
     * }
     */
    public static MemorySegment MagickGetSizeOffset$address() {
        return MagickGetSizeOffset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetSizeOffset(const MagickWand *, ssize_t *)
     * }
     */
    public static int MagickGetSizeOffset(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickGetSizeOffset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetSizeOffset", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickProfileImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickProfileImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickProfileImage(MagickWand *, const char *, const void *, const size_t)
     * }
     */
    public static FunctionDescriptor MagickProfileImage$descriptor() {
        return MagickProfileImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickProfileImage(MagickWand *, const char *, const void *, const size_t)
     * }
     */
    public static MethodHandle MagickProfileImage$handle() {
        return MagickProfileImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickProfileImage(MagickWand *, const char *, const void *, const size_t)
     * }
     */
    public static MemorySegment MagickProfileImage$address() {
        return MagickProfileImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickProfileImage(MagickWand *, const char *, const void *, const size_t)
     * }
     */
    public static int MagickProfileImage(MemorySegment x0, MemorySegment x1, MemorySegment x2, long x3) {
        var mh$ = MagickProfileImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickProfileImage", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetAntialias {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetAntialias");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetAntialias(MagickWand *, const MagickBooleanType)
     * }
     */
    public static FunctionDescriptor MagickSetAntialias$descriptor() {
        return MagickSetAntialias.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetAntialias(MagickWand *, const MagickBooleanType)
     * }
     */
    public static MethodHandle MagickSetAntialias$handle() {
        return MagickSetAntialias.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetAntialias(MagickWand *, const MagickBooleanType)
     * }
     */
    public static MemorySegment MagickSetAntialias$address() {
        return MagickSetAntialias.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetAntialias(MagickWand *, const MagickBooleanType)
     * }
     */
    public static int MagickSetAntialias(MemorySegment x0, int x1) {
        var mh$ = MagickSetAntialias.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetAntialias", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetBackgroundColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetBackgroundColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetBackgroundColor(MagickWand *, const PixelWand *)
     * }
     */
    public static FunctionDescriptor MagickSetBackgroundColor$descriptor() {
        return MagickSetBackgroundColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetBackgroundColor(MagickWand *, const PixelWand *)
     * }
     */
    public static MethodHandle MagickSetBackgroundColor$handle() {
        return MagickSetBackgroundColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetBackgroundColor(MagickWand *, const PixelWand *)
     * }
     */
    public static MemorySegment MagickSetBackgroundColor$address() {
        return MagickSetBackgroundColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetBackgroundColor(MagickWand *, const PixelWand *)
     * }
     */
    public static int MagickSetBackgroundColor(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickSetBackgroundColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetBackgroundColor", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetColorspace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetColorspace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetColorspace(MagickWand *, const ColorspaceType)
     * }
     */
    public static FunctionDescriptor MagickSetColorspace$descriptor() {
        return MagickSetColorspace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetColorspace(MagickWand *, const ColorspaceType)
     * }
     */
    public static MethodHandle MagickSetColorspace$handle() {
        return MagickSetColorspace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetColorspace(MagickWand *, const ColorspaceType)
     * }
     */
    public static MemorySegment MagickSetColorspace$address() {
        return MagickSetColorspace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetColorspace(MagickWand *, const ColorspaceType)
     * }
     */
    public static int MagickSetColorspace(MemorySegment x0, int x1) {
        var mh$ = MagickSetColorspace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetColorspace", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetCompression {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetCompression");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetCompression(MagickWand *, const CompressionType)
     * }
     */
    public static FunctionDescriptor MagickSetCompression$descriptor() {
        return MagickSetCompression.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetCompression(MagickWand *, const CompressionType)
     * }
     */
    public static MethodHandle MagickSetCompression$handle() {
        return MagickSetCompression.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetCompression(MagickWand *, const CompressionType)
     * }
     */
    public static MemorySegment MagickSetCompression$address() {
        return MagickSetCompression.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetCompression(MagickWand *, const CompressionType)
     * }
     */
    public static int MagickSetCompression(MemorySegment x0, int x1) {
        var mh$ = MagickSetCompression.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetCompression", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetCompressionQuality {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetCompressionQuality");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetCompressionQuality(MagickWand *, const size_t)
     * }
     */
    public static FunctionDescriptor MagickSetCompressionQuality$descriptor() {
        return MagickSetCompressionQuality.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetCompressionQuality(MagickWand *, const size_t)
     * }
     */
    public static MethodHandle MagickSetCompressionQuality$handle() {
        return MagickSetCompressionQuality.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetCompressionQuality(MagickWand *, const size_t)
     * }
     */
    public static MemorySegment MagickSetCompressionQuality$address() {
        return MagickSetCompressionQuality.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetCompressionQuality(MagickWand *, const size_t)
     * }
     */
    public static int MagickSetCompressionQuality(MemorySegment x0, long x1) {
        var mh$ = MagickSetCompressionQuality.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetCompressionQuality", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetDepth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetDepth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetDepth(MagickWand *, const size_t)
     * }
     */
    public static FunctionDescriptor MagickSetDepth$descriptor() {
        return MagickSetDepth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetDepth(MagickWand *, const size_t)
     * }
     */
    public static MethodHandle MagickSetDepth$handle() {
        return MagickSetDepth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetDepth(MagickWand *, const size_t)
     * }
     */
    public static MemorySegment MagickSetDepth$address() {
        return MagickSetDepth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetDepth(MagickWand *, const size_t)
     * }
     */
    public static int MagickSetDepth(MemorySegment x0, long x1) {
        var mh$ = MagickSetDepth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetDepth", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetExtract {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetExtract");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetExtract(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickSetExtract$descriptor() {
        return MagickSetExtract.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetExtract(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickSetExtract$handle() {
        return MagickSetExtract.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetExtract(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickSetExtract$address() {
        return MagickSetExtract.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetExtract(MagickWand *, const char *)
     * }
     */
    public static int MagickSetExtract(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickSetExtract.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetExtract", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetFilename {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetFilename");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetFilename(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickSetFilename$descriptor() {
        return MagickSetFilename.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetFilename(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickSetFilename$handle() {
        return MagickSetFilename.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetFilename(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickSetFilename$address() {
        return MagickSetFilename.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetFilename(MagickWand *, const char *)
     * }
     */
    public static int MagickSetFilename(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickSetFilename.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetFilename", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetFilter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetFilter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetFilter(MagickWand *, const FilterType)
     * }
     */
    public static FunctionDescriptor MagickSetFilter$descriptor() {
        return MagickSetFilter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetFilter(MagickWand *, const FilterType)
     * }
     */
    public static MethodHandle MagickSetFilter$handle() {
        return MagickSetFilter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetFilter(MagickWand *, const FilterType)
     * }
     */
    public static MemorySegment MagickSetFilter$address() {
        return MagickSetFilter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetFilter(MagickWand *, const FilterType)
     * }
     */
    public static int MagickSetFilter(MemorySegment x0, int x1) {
        var mh$ = MagickSetFilter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetFilter", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetFormat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetFormat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetFormat(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickSetFormat$descriptor() {
        return MagickSetFormat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetFormat(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickSetFormat$handle() {
        return MagickSetFormat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetFormat(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickSetFormat$address() {
        return MagickSetFormat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetFormat(MagickWand *, const char *)
     * }
     */
    public static int MagickSetFormat(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickSetFormat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetFormat", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetFont {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetFont");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetFont(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickSetFont$descriptor() {
        return MagickSetFont.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetFont(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickSetFont$handle() {
        return MagickSetFont.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetFont(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickSetFont$address() {
        return MagickSetFont.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetFont(MagickWand *, const char *)
     * }
     */
    public static int MagickSetFont(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickSetFont.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetFont", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetGravity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetGravity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetGravity(MagickWand *, const GravityType)
     * }
     */
    public static FunctionDescriptor MagickSetGravity$descriptor() {
        return MagickSetGravity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetGravity(MagickWand *, const GravityType)
     * }
     */
    public static MethodHandle MagickSetGravity$handle() {
        return MagickSetGravity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetGravity(MagickWand *, const GravityType)
     * }
     */
    public static MemorySegment MagickSetGravity$address() {
        return MagickSetGravity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetGravity(MagickWand *, const GravityType)
     * }
     */
    public static int MagickSetGravity(MemorySegment x0, int x1) {
        var mh$ = MagickSetGravity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetGravity", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageArtifact {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetImageArtifact");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageArtifact(MagickWand *, const char *, const char *)
     * }
     */
    public static FunctionDescriptor MagickSetImageArtifact$descriptor() {
        return MagickSetImageArtifact.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageArtifact(MagickWand *, const char *, const char *)
     * }
     */
    public static MethodHandle MagickSetImageArtifact$handle() {
        return MagickSetImageArtifact.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageArtifact(MagickWand *, const char *, const char *)
     * }
     */
    public static MemorySegment MagickSetImageArtifact$address() {
        return MagickSetImageArtifact.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageArtifact(MagickWand *, const char *, const char *)
     * }
     */
    public static int MagickSetImageArtifact(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = MagickSetImageArtifact.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageArtifact", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageProfile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetImageProfile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageProfile(MagickWand *, const char *, const void *, const size_t)
     * }
     */
    public static FunctionDescriptor MagickSetImageProfile$descriptor() {
        return MagickSetImageProfile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageProfile(MagickWand *, const char *, const void *, const size_t)
     * }
     */
    public static MethodHandle MagickSetImageProfile$handle() {
        return MagickSetImageProfile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageProfile(MagickWand *, const char *, const void *, const size_t)
     * }
     */
    public static MemorySegment MagickSetImageProfile$address() {
        return MagickSetImageProfile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageProfile(MagickWand *, const char *, const void *, const size_t)
     * }
     */
    public static int MagickSetImageProfile(MemorySegment x0, MemorySegment x1, MemorySegment x2, long x3) {
        var mh$ = MagickSetImageProfile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageProfile", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetImageProperty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageProperty(MagickWand *, const char *, const char *)
     * }
     */
    public static FunctionDescriptor MagickSetImageProperty$descriptor() {
        return MagickSetImageProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageProperty(MagickWand *, const char *, const char *)
     * }
     */
    public static MethodHandle MagickSetImageProperty$handle() {
        return MagickSetImageProperty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageProperty(MagickWand *, const char *, const char *)
     * }
     */
    public static MemorySegment MagickSetImageProperty$address() {
        return MagickSetImageProperty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageProperty(MagickWand *, const char *, const char *)
     * }
     */
    public static int MagickSetImageProperty(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = MagickSetImageProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageProperty", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetInterlaceScheme {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetInterlaceScheme");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetInterlaceScheme(MagickWand *, const InterlaceType)
     * }
     */
    public static FunctionDescriptor MagickSetInterlaceScheme$descriptor() {
        return MagickSetInterlaceScheme.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetInterlaceScheme(MagickWand *, const InterlaceType)
     * }
     */
    public static MethodHandle MagickSetInterlaceScheme$handle() {
        return MagickSetInterlaceScheme.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetInterlaceScheme(MagickWand *, const InterlaceType)
     * }
     */
    public static MemorySegment MagickSetInterlaceScheme$address() {
        return MagickSetInterlaceScheme.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetInterlaceScheme(MagickWand *, const InterlaceType)
     * }
     */
    public static int MagickSetInterlaceScheme(MemorySegment x0, int x1) {
        var mh$ = MagickSetInterlaceScheme.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetInterlaceScheme", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetInterpolateMethod {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetInterpolateMethod");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetInterpolateMethod(MagickWand *, const PixelInterpolateMethod)
     * }
     */
    public static FunctionDescriptor MagickSetInterpolateMethod$descriptor() {
        return MagickSetInterpolateMethod.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetInterpolateMethod(MagickWand *, const PixelInterpolateMethod)
     * }
     */
    public static MethodHandle MagickSetInterpolateMethod$handle() {
        return MagickSetInterpolateMethod.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetInterpolateMethod(MagickWand *, const PixelInterpolateMethod)
     * }
     */
    public static MemorySegment MagickSetInterpolateMethod$address() {
        return MagickSetInterpolateMethod.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetInterpolateMethod(MagickWand *, const PixelInterpolateMethod)
     * }
     */
    public static int MagickSetInterpolateMethod(MemorySegment x0, int x1) {
        var mh$ = MagickSetInterpolateMethod.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetInterpolateMethod", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetOption {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetOption");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetOption(MagickWand *, const char *, const char *)
     * }
     */
    public static FunctionDescriptor MagickSetOption$descriptor() {
        return MagickSetOption.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetOption(MagickWand *, const char *, const char *)
     * }
     */
    public static MethodHandle MagickSetOption$handle() {
        return MagickSetOption.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetOption(MagickWand *, const char *, const char *)
     * }
     */
    public static MemorySegment MagickSetOption$address() {
        return MagickSetOption.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetOption(MagickWand *, const char *, const char *)
     * }
     */
    public static int MagickSetOption(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = MagickSetOption.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetOption", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetOrientation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetOrientation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetOrientation(MagickWand *, const OrientationType)
     * }
     */
    public static FunctionDescriptor MagickSetOrientation$descriptor() {
        return MagickSetOrientation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetOrientation(MagickWand *, const OrientationType)
     * }
     */
    public static MethodHandle MagickSetOrientation$handle() {
        return MagickSetOrientation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetOrientation(MagickWand *, const OrientationType)
     * }
     */
    public static MemorySegment MagickSetOrientation$address() {
        return MagickSetOrientation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetOrientation(MagickWand *, const OrientationType)
     * }
     */
    public static int MagickSetOrientation(MemorySegment x0, int x1) {
        var mh$ = MagickSetOrientation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetOrientation", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetPage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetPage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetPage(MagickWand *, const size_t, const size_t, const ssize_t, const ssize_t)
     * }
     */
    public static FunctionDescriptor MagickSetPage$descriptor() {
        return MagickSetPage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetPage(MagickWand *, const size_t, const size_t, const ssize_t, const ssize_t)
     * }
     */
    public static MethodHandle MagickSetPage$handle() {
        return MagickSetPage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetPage(MagickWand *, const size_t, const size_t, const ssize_t, const ssize_t)
     * }
     */
    public static MemorySegment MagickSetPage$address() {
        return MagickSetPage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetPage(MagickWand *, const size_t, const size_t, const ssize_t, const ssize_t)
     * }
     */
    public static int MagickSetPage(MemorySegment x0, long x1, long x2, long x3, long x4) {
        var mh$ = MagickSetPage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetPage", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetPassphrase {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetPassphrase");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetPassphrase(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickSetPassphrase$descriptor() {
        return MagickSetPassphrase.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetPassphrase(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickSetPassphrase$handle() {
        return MagickSetPassphrase.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetPassphrase(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickSetPassphrase$address() {
        return MagickSetPassphrase.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetPassphrase(MagickWand *, const char *)
     * }
     */
    public static int MagickSetPassphrase(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickSetPassphrase.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetPassphrase", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetPointsize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetPointsize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetPointsize(MagickWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickSetPointsize$descriptor() {
        return MagickSetPointsize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetPointsize(MagickWand *, const double)
     * }
     */
    public static MethodHandle MagickSetPointsize$handle() {
        return MagickSetPointsize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetPointsize(MagickWand *, const double)
     * }
     */
    public static MemorySegment MagickSetPointsize$address() {
        return MagickSetPointsize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetPointsize(MagickWand *, const double)
     * }
     */
    public static int MagickSetPointsize(MemorySegment x0, double x1) {
        var mh$ = MagickSetPointsize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetPointsize", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetResolution {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetResolution");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetResolution(MagickWand *, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickSetResolution$descriptor() {
        return MagickSetResolution.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetResolution(MagickWand *, const double, const double)
     * }
     */
    public static MethodHandle MagickSetResolution$handle() {
        return MagickSetResolution.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetResolution(MagickWand *, const double, const double)
     * }
     */
    public static MemorySegment MagickSetResolution$address() {
        return MagickSetResolution.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetResolution(MagickWand *, const double, const double)
     * }
     */
    public static int MagickSetResolution(MemorySegment x0, double x1, double x2) {
        var mh$ = MagickSetResolution.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetResolution", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetResourceLimit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_INT,
            MagickWand_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetResourceLimit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetResourceLimit(const ResourceType type, const MagickSizeType limit)
     * }
     */
    public static FunctionDescriptor MagickSetResourceLimit$descriptor() {
        return MagickSetResourceLimit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetResourceLimit(const ResourceType type, const MagickSizeType limit)
     * }
     */
    public static MethodHandle MagickSetResourceLimit$handle() {
        return MagickSetResourceLimit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetResourceLimit(const ResourceType type, const MagickSizeType limit)
     * }
     */
    public static MemorySegment MagickSetResourceLimit$address() {
        return MagickSetResourceLimit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetResourceLimit(const ResourceType type, const MagickSizeType limit)
     * }
     */
    public static int MagickSetResourceLimit(int type, long limit) {
        var mh$ = MagickSetResourceLimit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetResourceLimit", type, limit);
            }
            return (int)mh$.invokeExact(type, limit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetSamplingFactors {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetSamplingFactors");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetSamplingFactors(MagickWand *, const size_t, const double *)
     * }
     */
    public static FunctionDescriptor MagickSetSamplingFactors$descriptor() {
        return MagickSetSamplingFactors.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetSamplingFactors(MagickWand *, const size_t, const double *)
     * }
     */
    public static MethodHandle MagickSetSamplingFactors$handle() {
        return MagickSetSamplingFactors.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetSamplingFactors(MagickWand *, const size_t, const double *)
     * }
     */
    public static MemorySegment MagickSetSamplingFactors$address() {
        return MagickSetSamplingFactors.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetSamplingFactors(MagickWand *, const size_t, const double *)
     * }
     */
    public static int MagickSetSamplingFactors(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = MagickSetSamplingFactors.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetSamplingFactors", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetSecurityPolicy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetSecurityPolicy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetSecurityPolicy(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickSetSecurityPolicy$descriptor() {
        return MagickSetSecurityPolicy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetSecurityPolicy(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickSetSecurityPolicy$handle() {
        return MagickSetSecurityPolicy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetSecurityPolicy(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickSetSecurityPolicy$address() {
        return MagickSetSecurityPolicy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetSecurityPolicy(MagickWand *, const char *)
     * }
     */
    public static int MagickSetSecurityPolicy(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickSetSecurityPolicy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetSecurityPolicy", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetSize(MagickWand *, const size_t, const size_t)
     * }
     */
    public static FunctionDescriptor MagickSetSize$descriptor() {
        return MagickSetSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetSize(MagickWand *, const size_t, const size_t)
     * }
     */
    public static MethodHandle MagickSetSize$handle() {
        return MagickSetSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetSize(MagickWand *, const size_t, const size_t)
     * }
     */
    public static MemorySegment MagickSetSize$address() {
        return MagickSetSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetSize(MagickWand *, const size_t, const size_t)
     * }
     */
    public static int MagickSetSize(MemorySegment x0, long x1, long x2) {
        var mh$ = MagickSetSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetSize", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetSizeOffset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetSizeOffset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetSizeOffset(MagickWand *, const size_t, const size_t, const ssize_t)
     * }
     */
    public static FunctionDescriptor MagickSetSizeOffset$descriptor() {
        return MagickSetSizeOffset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetSizeOffset(MagickWand *, const size_t, const size_t, const ssize_t)
     * }
     */
    public static MethodHandle MagickSetSizeOffset$handle() {
        return MagickSetSizeOffset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetSizeOffset(MagickWand *, const size_t, const size_t, const ssize_t)
     * }
     */
    public static MemorySegment MagickSetSizeOffset$address() {
        return MagickSetSizeOffset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetSizeOffset(MagickWand *, const size_t, const size_t, const ssize_t)
     * }
     */
    public static int MagickSetSizeOffset(MemorySegment x0, long x1, long x2, long x3) {
        var mh$ = MagickSetSizeOffset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetSizeOffset", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetProgressMonitor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetProgressMonitor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickProgressMonitor MagickSetProgressMonitor(MagickWand *, const MagickProgressMonitor, void *)
     * }
     */
    public static FunctionDescriptor MagickSetProgressMonitor$descriptor() {
        return MagickSetProgressMonitor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickProgressMonitor MagickSetProgressMonitor(MagickWand *, const MagickProgressMonitor, void *)
     * }
     */
    public static MethodHandle MagickSetProgressMonitor$handle() {
        return MagickSetProgressMonitor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickProgressMonitor MagickSetProgressMonitor(MagickWand *, const MagickProgressMonitor, void *)
     * }
     */
    public static MemorySegment MagickSetProgressMonitor$address() {
        return MagickSetProgressMonitor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickProgressMonitor MagickSetProgressMonitor(MagickWand *, const MagickProgressMonitor, void *)
     * }
     */
    public static MemorySegment MagickSetProgressMonitor(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = MagickSetProgressMonitor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetProgressMonitor", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetResource {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_LONG_LONG,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetResource");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickSizeType MagickGetResource(const ResourceType)
     * }
     */
    public static FunctionDescriptor MagickGetResource$descriptor() {
        return MagickGetResource.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickSizeType MagickGetResource(const ResourceType)
     * }
     */
    public static MethodHandle MagickGetResource$handle() {
        return MagickGetResource.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickSizeType MagickGetResource(const ResourceType)
     * }
     */
    public static MemorySegment MagickGetResource$address() {
        return MagickGetResource.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickSizeType MagickGetResource(const ResourceType)
     * }
     */
    public static long MagickGetResource(int x0) {
        var mh$ = MagickGetResource.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetResource", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetResourceLimit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_LONG_LONG,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetResourceLimit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickSizeType MagickGetResourceLimit(const ResourceType)
     * }
     */
    public static FunctionDescriptor MagickGetResourceLimit$descriptor() {
        return MagickGetResourceLimit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickSizeType MagickGetResourceLimit(const ResourceType)
     * }
     */
    public static MethodHandle MagickGetResourceLimit$handle() {
        return MagickGetResourceLimit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickSizeType MagickGetResourceLimit(const ResourceType)
     * }
     */
    public static MemorySegment MagickGetResourceLimit$address() {
        return MagickGetResourceLimit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickSizeType MagickGetResourceLimit(const ResourceType)
     * }
     */
    public static long MagickGetResourceLimit(int x0) {
        var mh$ = MagickGetResourceLimit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetResourceLimit", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetBackgroundColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetBackgroundColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PixelWand *MagickGetBackgroundColor(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetBackgroundColor$descriptor() {
        return MagickGetBackgroundColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PixelWand *MagickGetBackgroundColor(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetBackgroundColor$handle() {
        return MagickGetBackgroundColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern PixelWand *MagickGetBackgroundColor(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetBackgroundColor$address() {
        return MagickGetBackgroundColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern PixelWand *MagickGetBackgroundColor(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetBackgroundColor(MemorySegment x0) {
        var mh$ = MagickGetBackgroundColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetBackgroundColor", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetCompressionQuality {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_LONG,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetCompressionQuality");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t MagickGetCompressionQuality(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetCompressionQuality$descriptor() {
        return MagickGetCompressionQuality.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t MagickGetCompressionQuality(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetCompressionQuality$handle() {
        return MagickGetCompressionQuality.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern size_t MagickGetCompressionQuality(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetCompressionQuality$address() {
        return MagickGetCompressionQuality.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern size_t MagickGetCompressionQuality(MagickWand *)
     * }
     */
    public static long MagickGetCompressionQuality(MemorySegment x0) {
        var mh$ = MagickGetCompressionQuality.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetCompressionQuality", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageProfile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageProfile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned char *MagickGetImageProfile(MagickWand *, const char *, size_t *)
     * }
     */
    public static FunctionDescriptor MagickGetImageProfile$descriptor() {
        return MagickGetImageProfile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned char *MagickGetImageProfile(MagickWand *, const char *, size_t *)
     * }
     */
    public static MethodHandle MagickGetImageProfile$handle() {
        return MagickGetImageProfile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned char *MagickGetImageProfile(MagickWand *, const char *, size_t *)
     * }
     */
    public static MemorySegment MagickGetImageProfile$address() {
        return MagickGetImageProfile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned char *MagickGetImageProfile(MagickWand *, const char *, size_t *)
     * }
     */
    public static MemorySegment MagickGetImageProfile(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = MagickGetImageProfile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageProfile", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickRemoveImageProfile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickRemoveImageProfile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned char *MagickRemoveImageProfile(MagickWand *, const char *, size_t *)
     * }
     */
    public static FunctionDescriptor MagickRemoveImageProfile$descriptor() {
        return MagickRemoveImageProfile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned char *MagickRemoveImageProfile(MagickWand *, const char *, size_t *)
     * }
     */
    public static MethodHandle MagickRemoveImageProfile$handle() {
        return MagickRemoveImageProfile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned char *MagickRemoveImageProfile(MagickWand *, const char *, size_t *)
     * }
     */
    public static MemorySegment MagickRemoveImageProfile$address() {
        return MagickRemoveImageProfile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned char *MagickRemoveImageProfile(MagickWand *, const char *, size_t *)
     * }
     */
    public static MemorySegment MagickRemoveImageProfile(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = MagickRemoveImageProfile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickRemoveImageProfile", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetSeed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MagickWand_h.C_LONG
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetSeed");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickSetSeed(const unsigned long)
     * }
     */
    public static FunctionDescriptor MagickSetSeed$descriptor() {
        return MagickSetSeed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickSetSeed(const unsigned long)
     * }
     */
    public static MethodHandle MagickSetSeed$handle() {
        return MagickSetSeed.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickSetSeed(const unsigned long)
     * }
     */
    public static MemorySegment MagickSetSeed$address() {
        return MagickSetSeed.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickSetSeed(const unsigned long)
     * }
     */
    public static void MagickSetSeed(long x0) {
        var mh$ = MagickSetSeed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetSeed", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageFeatures {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageFeatures");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ChannelFeatures *MagickGetImageFeatures(MagickWand *, const size_t)
     * }
     */
    public static FunctionDescriptor MagickGetImageFeatures$descriptor() {
        return MagickGetImageFeatures.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ChannelFeatures *MagickGetImageFeatures(MagickWand *, const size_t)
     * }
     */
    public static MethodHandle MagickGetImageFeatures$handle() {
        return MagickGetImageFeatures.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ChannelFeatures *MagickGetImageFeatures(MagickWand *, const size_t)
     * }
     */
    public static MemorySegment MagickGetImageFeatures$address() {
        return MagickGetImageFeatures.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ChannelFeatures *MagickGetImageFeatures(MagickWand *, const size_t)
     * }
     */
    public static MemorySegment MagickGetImageFeatures(MemorySegment x0, long x1) {
        var mh$ = MagickGetImageFeatures.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageFeatures", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageChannelMask {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetImageChannelMask");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ChannelType MagickSetImageChannelMask(MagickWand *, const ChannelType)
     * }
     */
    public static FunctionDescriptor MagickSetImageChannelMask$descriptor() {
        return MagickSetImageChannelMask.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ChannelType MagickSetImageChannelMask(MagickWand *, const ChannelType)
     * }
     */
    public static MethodHandle MagickSetImageChannelMask$handle() {
        return MagickSetImageChannelMask.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ChannelType MagickSetImageChannelMask(MagickWand *, const ChannelType)
     * }
     */
    public static MemorySegment MagickSetImageChannelMask$address() {
        return MagickSetImageChannelMask.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ChannelType MagickSetImageChannelMask(MagickWand *, const ChannelType)
     * }
     */
    public static int MagickSetImageChannelMask(MemorySegment x0, int x1) {
        var mh$ = MagickSetImageChannelMask.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageChannelMask", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageStatistics {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageStatistics");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ChannelStatistics *MagickGetImageStatistics(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageStatistics$descriptor() {
        return MagickGetImageStatistics.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ChannelStatistics *MagickGetImageStatistics(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageStatistics$handle() {
        return MagickGetImageStatistics.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ChannelStatistics *MagickGetImageStatistics(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageStatistics$address() {
        return MagickGetImageStatistics.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ChannelStatistics *MagickGetImageStatistics(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageStatistics(MemorySegment x0) {
        var mh$ = MagickGetImageStatistics.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageStatistics", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageFilename {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageFilename");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *MagickGetImageFilename(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageFilename$descriptor() {
        return MagickGetImageFilename.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *MagickGetImageFilename(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageFilename$handle() {
        return MagickGetImageFilename.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *MagickGetImageFilename(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageFilename$address() {
        return MagickGetImageFilename.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *MagickGetImageFilename(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageFilename(MemorySegment x0) {
        var mh$ = MagickGetImageFilename.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageFilename", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageFormat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageFormat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *MagickGetImageFormat(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageFormat$descriptor() {
        return MagickGetImageFormat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *MagickGetImageFormat(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageFormat$handle() {
        return MagickGetImageFormat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *MagickGetImageFormat(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageFormat$address() {
        return MagickGetImageFormat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *MagickGetImageFormat(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageFormat(MemorySegment x0) {
        var mh$ = MagickGetImageFormat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageFormat", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageSignature {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageSignature");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *MagickGetImageSignature(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageSignature$descriptor() {
        return MagickGetImageSignature.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *MagickGetImageSignature(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageSignature$handle() {
        return MagickGetImageSignature.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *MagickGetImageSignature(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageSignature$address() {
        return MagickGetImageSignature.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *MagickGetImageSignature(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageSignature(MemorySegment x0) {
        var mh$ = MagickGetImageSignature.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageSignature", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickIdentifyImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickIdentifyImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *MagickIdentifyImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickIdentifyImage$descriptor() {
        return MagickIdentifyImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *MagickIdentifyImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickIdentifyImage$handle() {
        return MagickIdentifyImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *MagickIdentifyImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickIdentifyImage$address() {
        return MagickIdentifyImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *MagickIdentifyImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickIdentifyImage(MemorySegment x0) {
        var mh$ = MagickIdentifyImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickIdentifyImage", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageColorspace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageColorspace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ColorspaceType MagickGetImageColorspace(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageColorspace$descriptor() {
        return MagickGetImageColorspace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ColorspaceType MagickGetImageColorspace(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageColorspace$handle() {
        return MagickGetImageColorspace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ColorspaceType MagickGetImageColorspace(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageColorspace$address() {
        return MagickGetImageColorspace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ColorspaceType MagickGetImageColorspace(MagickWand *)
     * }
     */
    public static int MagickGetImageColorspace(MemorySegment x0) {
        var mh$ = MagickGetImageColorspace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageColorspace", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageCompose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageCompose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern CompositeOperator MagickGetImageCompose(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageCompose$descriptor() {
        return MagickGetImageCompose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern CompositeOperator MagickGetImageCompose(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageCompose$handle() {
        return MagickGetImageCompose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern CompositeOperator MagickGetImageCompose(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageCompose$address() {
        return MagickGetImageCompose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern CompositeOperator MagickGetImageCompose(MagickWand *)
     * }
     */
    public static int MagickGetImageCompose(MemorySegment x0) {
        var mh$ = MagickGetImageCompose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageCompose", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageCompression {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageCompression");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern CompressionType MagickGetImageCompression(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageCompression$descriptor() {
        return MagickGetImageCompression.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern CompressionType MagickGetImageCompression(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageCompression$handle() {
        return MagickGetImageCompression.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern CompressionType MagickGetImageCompression(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageCompression$address() {
        return MagickGetImageCompression.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern CompressionType MagickGetImageCompression(MagickWand *)
     * }
     */
    public static int MagickGetImageCompression(MemorySegment x0) {
        var mh$ = MagickGetImageCompression.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageCompression", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageDispose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageDispose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern DisposeType MagickGetImageDispose(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageDispose$descriptor() {
        return MagickGetImageDispose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern DisposeType MagickGetImageDispose(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageDispose$handle() {
        return MagickGetImageDispose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern DisposeType MagickGetImageDispose(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageDispose$address() {
        return MagickGetImageDispose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern DisposeType MagickGetImageDispose(MagickWand *)
     * }
     */
    public static int MagickGetImageDispose(MemorySegment x0) {
        var mh$ = MagickGetImageDispose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageDispose", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageDistortions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageDistortions");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double *MagickGetImageDistortions(MagickWand *, const MagickWand *, const MetricType)
     * }
     */
    public static FunctionDescriptor MagickGetImageDistortions$descriptor() {
        return MagickGetImageDistortions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double *MagickGetImageDistortions(MagickWand *, const MagickWand *, const MetricType)
     * }
     */
    public static MethodHandle MagickGetImageDistortions$handle() {
        return MagickGetImageDistortions.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double *MagickGetImageDistortions(MagickWand *, const MagickWand *, const MetricType)
     * }
     */
    public static MemorySegment MagickGetImageDistortions$address() {
        return MagickGetImageDistortions.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double *MagickGetImageDistortions(MagickWand *, const MagickWand *, const MetricType)
     * }
     */
    public static MemorySegment MagickGetImageDistortions(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = MagickGetImageDistortions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageDistortions", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageFuzz {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageFuzz");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double MagickGetImageFuzz(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageFuzz$descriptor() {
        return MagickGetImageFuzz.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double MagickGetImageFuzz(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageFuzz$handle() {
        return MagickGetImageFuzz.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double MagickGetImageFuzz(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageFuzz$address() {
        return MagickGetImageFuzz.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double MagickGetImageFuzz(MagickWand *)
     * }
     */
    public static double MagickGetImageFuzz(MemorySegment x0) {
        var mh$ = MagickGetImageFuzz.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageFuzz", x0);
            }
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageGamma {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageGamma");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double MagickGetImageGamma(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageGamma$descriptor() {
        return MagickGetImageGamma.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double MagickGetImageGamma(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageGamma$handle() {
        return MagickGetImageGamma.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double MagickGetImageGamma(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageGamma$address() {
        return MagickGetImageGamma.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double MagickGetImageGamma(MagickWand *)
     * }
     */
    public static double MagickGetImageGamma(MemorySegment x0) {
        var mh$ = MagickGetImageGamma.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageGamma", x0);
            }
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageTotalInkDensity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageTotalInkDensity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double MagickGetImageTotalInkDensity(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageTotalInkDensity$descriptor() {
        return MagickGetImageTotalInkDensity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double MagickGetImageTotalInkDensity(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageTotalInkDensity$handle() {
        return MagickGetImageTotalInkDensity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double MagickGetImageTotalInkDensity(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageTotalInkDensity$address() {
        return MagickGetImageTotalInkDensity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double MagickGetImageTotalInkDensity(MagickWand *)
     * }
     */
    public static double MagickGetImageTotalInkDensity(MemorySegment x0) {
        var mh$ = MagickGetImageTotalInkDensity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageTotalInkDensity", x0);
            }
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageEndian {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageEndian");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern EndianType MagickGetImageEndian(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageEndian$descriptor() {
        return MagickGetImageEndian.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern EndianType MagickGetImageEndian(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageEndian$handle() {
        return MagickGetImageEndian.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern EndianType MagickGetImageEndian(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageEndian$address() {
        return MagickGetImageEndian.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern EndianType MagickGetImageEndian(MagickWand *)
     * }
     */
    public static int MagickGetImageEndian(MemorySegment x0) {
        var mh$ = MagickGetImageEndian.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageEndian", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageFilter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageFilter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern FilterType MagickGetImageFilter(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageFilter$descriptor() {
        return MagickGetImageFilter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern FilterType MagickGetImageFilter(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageFilter$handle() {
        return MagickGetImageFilter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern FilterType MagickGetImageFilter(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageFilter$address() {
        return MagickGetImageFilter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern FilterType MagickGetImageFilter(MagickWand *)
     * }
     */
    public static int MagickGetImageFilter(MemorySegment x0) {
        var mh$ = MagickGetImageFilter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageFilter", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageGravity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageGravity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GravityType MagickGetImageGravity(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageGravity$descriptor() {
        return MagickGetImageGravity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GravityType MagickGetImageGravity(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageGravity$handle() {
        return MagickGetImageGravity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GravityType MagickGetImageGravity(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageGravity$address() {
        return MagickGetImageGravity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GravityType MagickGetImageGravity(MagickWand *)
     * }
     */
    public static int MagickGetImageGravity(MemorySegment x0) {
        var mh$ = MagickGetImageGravity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageGravity", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDestroyImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickDestroyImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Image *MagickDestroyImage(Image *)
     * }
     */
    public static FunctionDescriptor MagickDestroyImage$descriptor() {
        return MagickDestroyImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Image *MagickDestroyImage(Image *)
     * }
     */
    public static MethodHandle MagickDestroyImage$handle() {
        return MagickDestroyImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern Image *MagickDestroyImage(Image *)
     * }
     */
    public static MemorySegment MagickDestroyImage$address() {
        return MagickDestroyImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern Image *MagickDestroyImage(Image *)
     * }
     */
    public static MemorySegment MagickDestroyImage(MemorySegment x0) {
        var mh$ = MagickDestroyImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDestroyImage", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetImageFromMagickWand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("GetImageFromMagickWand");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Image *GetImageFromMagickWand(const MagickWand *)
     * }
     */
    public static FunctionDescriptor GetImageFromMagickWand$descriptor() {
        return GetImageFromMagickWand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Image *GetImageFromMagickWand(const MagickWand *)
     * }
     */
    public static MethodHandle GetImageFromMagickWand$handle() {
        return GetImageFromMagickWand.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern Image *GetImageFromMagickWand(const MagickWand *)
     * }
     */
    public static MemorySegment GetImageFromMagickWand$address() {
        return GetImageFromMagickWand.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern Image *GetImageFromMagickWand(const MagickWand *)
     * }
     */
    public static MemorySegment GetImageFromMagickWand(MemorySegment x0) {
        var mh$ = GetImageFromMagickWand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetImageFromMagickWand", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImageType MagickGetImageType(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageType$descriptor() {
        return MagickGetImageType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImageType MagickGetImageType(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageType$handle() {
        return MagickGetImageType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImageType MagickGetImageType(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageType$address() {
        return MagickGetImageType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImageType MagickGetImageType(MagickWand *)
     * }
     */
    public static int MagickGetImageType(MemorySegment x0) {
        var mh$ = MagickGetImageType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageType", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickIdentifyImageType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickIdentifyImageType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImageType MagickIdentifyImageType(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickIdentifyImageType$descriptor() {
        return MagickIdentifyImageType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImageType MagickIdentifyImageType(MagickWand *)
     * }
     */
    public static MethodHandle MagickIdentifyImageType$handle() {
        return MagickIdentifyImageType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImageType MagickIdentifyImageType(MagickWand *)
     * }
     */
    public static MemorySegment MagickIdentifyImageType$address() {
        return MagickIdentifyImageType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImageType MagickIdentifyImageType(MagickWand *)
     * }
     */
    public static int MagickIdentifyImageType(MemorySegment x0) {
        var mh$ = MagickIdentifyImageType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickIdentifyImageType", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageInterlaceScheme {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageInterlaceScheme");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern InterlaceType MagickGetImageInterlaceScheme(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageInterlaceScheme$descriptor() {
        return MagickGetImageInterlaceScheme.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern InterlaceType MagickGetImageInterlaceScheme(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageInterlaceScheme$handle() {
        return MagickGetImageInterlaceScheme.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern InterlaceType MagickGetImageInterlaceScheme(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageInterlaceScheme$address() {
        return MagickGetImageInterlaceScheme.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern InterlaceType MagickGetImageInterlaceScheme(MagickWand *)
     * }
     */
    public static int MagickGetImageInterlaceScheme(MemorySegment x0) {
        var mh$ = MagickGetImageInterlaceScheme.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageInterlaceScheme", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageInterpolateMethod {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageInterpolateMethod");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PixelInterpolateMethod MagickGetImageInterpolateMethod(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageInterpolateMethod$descriptor() {
        return MagickGetImageInterpolateMethod.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PixelInterpolateMethod MagickGetImageInterpolateMethod(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageInterpolateMethod$handle() {
        return MagickGetImageInterpolateMethod.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern PixelInterpolateMethod MagickGetImageInterpolateMethod(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageInterpolateMethod$address() {
        return MagickGetImageInterpolateMethod.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern PixelInterpolateMethod MagickGetImageInterpolateMethod(MagickWand *)
     * }
     */
    public static int MagickGetImageInterpolateMethod(MemorySegment x0) {
        var mh$ = MagickGetImageInterpolateMethod.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageInterpolateMethod", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickAdaptiveBlurImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickAdaptiveBlurImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAdaptiveBlurImage(MagickWand *, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickAdaptiveBlurImage$descriptor() {
        return MagickAdaptiveBlurImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAdaptiveBlurImage(MagickWand *, const double, const double)
     * }
     */
    public static MethodHandle MagickAdaptiveBlurImage$handle() {
        return MagickAdaptiveBlurImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAdaptiveBlurImage(MagickWand *, const double, const double)
     * }
     */
    public static MemorySegment MagickAdaptiveBlurImage$address() {
        return MagickAdaptiveBlurImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAdaptiveBlurImage(MagickWand *, const double, const double)
     * }
     */
    public static int MagickAdaptiveBlurImage(MemorySegment x0, double x1, double x2) {
        var mh$ = MagickAdaptiveBlurImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickAdaptiveBlurImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickAdaptiveResizeImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickAdaptiveResizeImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAdaptiveResizeImage(MagickWand *, const size_t, const size_t)
     * }
     */
    public static FunctionDescriptor MagickAdaptiveResizeImage$descriptor() {
        return MagickAdaptiveResizeImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAdaptiveResizeImage(MagickWand *, const size_t, const size_t)
     * }
     */
    public static MethodHandle MagickAdaptiveResizeImage$handle() {
        return MagickAdaptiveResizeImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAdaptiveResizeImage(MagickWand *, const size_t, const size_t)
     * }
     */
    public static MemorySegment MagickAdaptiveResizeImage$address() {
        return MagickAdaptiveResizeImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAdaptiveResizeImage(MagickWand *, const size_t, const size_t)
     * }
     */
    public static int MagickAdaptiveResizeImage(MemorySegment x0, long x1, long x2) {
        var mh$ = MagickAdaptiveResizeImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickAdaptiveResizeImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickAdaptiveSharpenImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickAdaptiveSharpenImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAdaptiveSharpenImage(MagickWand *, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickAdaptiveSharpenImage$descriptor() {
        return MagickAdaptiveSharpenImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAdaptiveSharpenImage(MagickWand *, const double, const double)
     * }
     */
    public static MethodHandle MagickAdaptiveSharpenImage$handle() {
        return MagickAdaptiveSharpenImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAdaptiveSharpenImage(MagickWand *, const double, const double)
     * }
     */
    public static MemorySegment MagickAdaptiveSharpenImage$address() {
        return MagickAdaptiveSharpenImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAdaptiveSharpenImage(MagickWand *, const double, const double)
     * }
     */
    public static int MagickAdaptiveSharpenImage(MemorySegment x0, double x1, double x2) {
        var mh$ = MagickAdaptiveSharpenImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickAdaptiveSharpenImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickAdaptiveThresholdImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickAdaptiveThresholdImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAdaptiveThresholdImage(MagickWand *, const size_t, const size_t, const double)
     * }
     */
    public static FunctionDescriptor MagickAdaptiveThresholdImage$descriptor() {
        return MagickAdaptiveThresholdImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAdaptiveThresholdImage(MagickWand *, const size_t, const size_t, const double)
     * }
     */
    public static MethodHandle MagickAdaptiveThresholdImage$handle() {
        return MagickAdaptiveThresholdImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAdaptiveThresholdImage(MagickWand *, const size_t, const size_t, const double)
     * }
     */
    public static MemorySegment MagickAdaptiveThresholdImage$address() {
        return MagickAdaptiveThresholdImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAdaptiveThresholdImage(MagickWand *, const size_t, const size_t, const double)
     * }
     */
    public static int MagickAdaptiveThresholdImage(MemorySegment x0, long x1, long x2, double x3) {
        var mh$ = MagickAdaptiveThresholdImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickAdaptiveThresholdImage", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickAddImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickAddImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAddImage(MagickWand *, const MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickAddImage$descriptor() {
        return MagickAddImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAddImage(MagickWand *, const MagickWand *)
     * }
     */
    public static MethodHandle MagickAddImage$handle() {
        return MagickAddImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAddImage(MagickWand *, const MagickWand *)
     * }
     */
    public static MemorySegment MagickAddImage$address() {
        return MagickAddImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAddImage(MagickWand *, const MagickWand *)
     * }
     */
    public static int MagickAddImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickAddImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickAddImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickAddNoiseImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickAddNoiseImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAddNoiseImage(MagickWand *, const NoiseType, const double)
     * }
     */
    public static FunctionDescriptor MagickAddNoiseImage$descriptor() {
        return MagickAddNoiseImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAddNoiseImage(MagickWand *, const NoiseType, const double)
     * }
     */
    public static MethodHandle MagickAddNoiseImage$handle() {
        return MagickAddNoiseImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAddNoiseImage(MagickWand *, const NoiseType, const double)
     * }
     */
    public static MemorySegment MagickAddNoiseImage$address() {
        return MagickAddNoiseImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAddNoiseImage(MagickWand *, const NoiseType, const double)
     * }
     */
    public static int MagickAddNoiseImage(MemorySegment x0, int x1, double x2) {
        var mh$ = MagickAddNoiseImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickAddNoiseImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickAffineTransformImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickAffineTransformImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAffineTransformImage(MagickWand *, const DrawingWand *)
     * }
     */
    public static FunctionDescriptor MagickAffineTransformImage$descriptor() {
        return MagickAffineTransformImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAffineTransformImage(MagickWand *, const DrawingWand *)
     * }
     */
    public static MethodHandle MagickAffineTransformImage$handle() {
        return MagickAffineTransformImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAffineTransformImage(MagickWand *, const DrawingWand *)
     * }
     */
    public static MemorySegment MagickAffineTransformImage$address() {
        return MagickAffineTransformImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAffineTransformImage(MagickWand *, const DrawingWand *)
     * }
     */
    public static int MagickAffineTransformImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickAffineTransformImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickAffineTransformImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickAnnotateImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickAnnotateImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAnnotateImage(MagickWand *, const DrawingWand *, const double, const double, const double, const char *)
     * }
     */
    public static FunctionDescriptor MagickAnnotateImage$descriptor() {
        return MagickAnnotateImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAnnotateImage(MagickWand *, const DrawingWand *, const double, const double, const double, const char *)
     * }
     */
    public static MethodHandle MagickAnnotateImage$handle() {
        return MagickAnnotateImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAnnotateImage(MagickWand *, const DrawingWand *, const double, const double, const double, const char *)
     * }
     */
    public static MemorySegment MagickAnnotateImage$address() {
        return MagickAnnotateImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAnnotateImage(MagickWand *, const DrawingWand *, const double, const double, const double, const char *)
     * }
     */
    public static int MagickAnnotateImage(MemorySegment x0, MemorySegment x1, double x2, double x3, double x4, MemorySegment x5) {
        var mh$ = MagickAnnotateImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickAnnotateImage", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickAnimateImages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickAnimateImages");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAnimateImages(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickAnimateImages$descriptor() {
        return MagickAnimateImages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAnimateImages(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickAnimateImages$handle() {
        return MagickAnimateImages.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAnimateImages(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickAnimateImages$address() {
        return MagickAnimateImages.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAnimateImages(MagickWand *, const char *)
     * }
     */
    public static int MagickAnimateImages(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickAnimateImages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickAnimateImages", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickAutoGammaImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickAutoGammaImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAutoGammaImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickAutoGammaImage$descriptor() {
        return MagickAutoGammaImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAutoGammaImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickAutoGammaImage$handle() {
        return MagickAutoGammaImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAutoGammaImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickAutoGammaImage$address() {
        return MagickAutoGammaImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAutoGammaImage(MagickWand *)
     * }
     */
    public static int MagickAutoGammaImage(MemorySegment x0) {
        var mh$ = MagickAutoGammaImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickAutoGammaImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickAutoLevelImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickAutoLevelImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAutoLevelImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickAutoLevelImage$descriptor() {
        return MagickAutoLevelImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAutoLevelImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickAutoLevelImage$handle() {
        return MagickAutoLevelImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAutoLevelImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickAutoLevelImage$address() {
        return MagickAutoLevelImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAutoLevelImage(MagickWand *)
     * }
     */
    public static int MagickAutoLevelImage(MemorySegment x0) {
        var mh$ = MagickAutoLevelImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickAutoLevelImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickAutoOrientImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickAutoOrientImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAutoOrientImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickAutoOrientImage$descriptor() {
        return MagickAutoOrientImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAutoOrientImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickAutoOrientImage$handle() {
        return MagickAutoOrientImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAutoOrientImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickAutoOrientImage$address() {
        return MagickAutoOrientImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAutoOrientImage(MagickWand *)
     * }
     */
    public static int MagickAutoOrientImage(MemorySegment x0) {
        var mh$ = MagickAutoOrientImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickAutoOrientImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickAutoThresholdImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickAutoThresholdImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAutoThresholdImage(MagickWand *, const AutoThresholdMethod)
     * }
     */
    public static FunctionDescriptor MagickAutoThresholdImage$descriptor() {
        return MagickAutoThresholdImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAutoThresholdImage(MagickWand *, const AutoThresholdMethod)
     * }
     */
    public static MethodHandle MagickAutoThresholdImage$handle() {
        return MagickAutoThresholdImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAutoThresholdImage(MagickWand *, const AutoThresholdMethod)
     * }
     */
    public static MemorySegment MagickAutoThresholdImage$address() {
        return MagickAutoThresholdImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickAutoThresholdImage(MagickWand *, const AutoThresholdMethod)
     * }
     */
    public static int MagickAutoThresholdImage(MemorySegment x0, int x1) {
        var mh$ = MagickAutoThresholdImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickAutoThresholdImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickBilateralBlurImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickBilateralBlurImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickBilateralBlurImage(MagickWand *, const double, const double, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickBilateralBlurImage$descriptor() {
        return MagickBilateralBlurImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickBilateralBlurImage(MagickWand *, const double, const double, const double, const double)
     * }
     */
    public static MethodHandle MagickBilateralBlurImage$handle() {
        return MagickBilateralBlurImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickBilateralBlurImage(MagickWand *, const double, const double, const double, const double)
     * }
     */
    public static MemorySegment MagickBilateralBlurImage$address() {
        return MagickBilateralBlurImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickBilateralBlurImage(MagickWand *, const double, const double, const double, const double)
     * }
     */
    public static int MagickBilateralBlurImage(MemorySegment x0, double x1, double x2, double x3, double x4) {
        var mh$ = MagickBilateralBlurImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickBilateralBlurImage", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickBlackThresholdImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickBlackThresholdImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickBlackThresholdImage(MagickWand *, const PixelWand *)
     * }
     */
    public static FunctionDescriptor MagickBlackThresholdImage$descriptor() {
        return MagickBlackThresholdImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickBlackThresholdImage(MagickWand *, const PixelWand *)
     * }
     */
    public static MethodHandle MagickBlackThresholdImage$handle() {
        return MagickBlackThresholdImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickBlackThresholdImage(MagickWand *, const PixelWand *)
     * }
     */
    public static MemorySegment MagickBlackThresholdImage$address() {
        return MagickBlackThresholdImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickBlackThresholdImage(MagickWand *, const PixelWand *)
     * }
     */
    public static int MagickBlackThresholdImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickBlackThresholdImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickBlackThresholdImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickBlueShiftImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickBlueShiftImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickBlueShiftImage(MagickWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickBlueShiftImage$descriptor() {
        return MagickBlueShiftImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickBlueShiftImage(MagickWand *, const double)
     * }
     */
    public static MethodHandle MagickBlueShiftImage$handle() {
        return MagickBlueShiftImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickBlueShiftImage(MagickWand *, const double)
     * }
     */
    public static MemorySegment MagickBlueShiftImage$address() {
        return MagickBlueShiftImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickBlueShiftImage(MagickWand *, const double)
     * }
     */
    public static int MagickBlueShiftImage(MemorySegment x0, double x1) {
        var mh$ = MagickBlueShiftImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickBlueShiftImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickBlurImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickBlurImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickBlurImage(MagickWand *, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickBlurImage$descriptor() {
        return MagickBlurImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickBlurImage(MagickWand *, const double, const double)
     * }
     */
    public static MethodHandle MagickBlurImage$handle() {
        return MagickBlurImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickBlurImage(MagickWand *, const double, const double)
     * }
     */
    public static MemorySegment MagickBlurImage$address() {
        return MagickBlurImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickBlurImage(MagickWand *, const double, const double)
     * }
     */
    public static int MagickBlurImage(MemorySegment x0, double x1, double x2) {
        var mh$ = MagickBlurImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickBlurImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickBorderImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickBorderImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickBorderImage(MagickWand *, const PixelWand *, const size_t, const size_t, const CompositeOperator compose)
     * }
     */
    public static FunctionDescriptor MagickBorderImage$descriptor() {
        return MagickBorderImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickBorderImage(MagickWand *, const PixelWand *, const size_t, const size_t, const CompositeOperator compose)
     * }
     */
    public static MethodHandle MagickBorderImage$handle() {
        return MagickBorderImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickBorderImage(MagickWand *, const PixelWand *, const size_t, const size_t, const CompositeOperator compose)
     * }
     */
    public static MemorySegment MagickBorderImage$address() {
        return MagickBorderImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickBorderImage(MagickWand *, const PixelWand *, const size_t, const size_t, const CompositeOperator compose)
     * }
     */
    public static int MagickBorderImage(MemorySegment x0, MemorySegment x1, long x2, long x3, int compose) {
        var mh$ = MagickBorderImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickBorderImage", x0, x1, x2, x3, compose);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, compose);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickBrightnessContrastImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickBrightnessContrastImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickBrightnessContrastImage(MagickWand *, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickBrightnessContrastImage$descriptor() {
        return MagickBrightnessContrastImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickBrightnessContrastImage(MagickWand *, const double, const double)
     * }
     */
    public static MethodHandle MagickBrightnessContrastImage$handle() {
        return MagickBrightnessContrastImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickBrightnessContrastImage(MagickWand *, const double, const double)
     * }
     */
    public static MemorySegment MagickBrightnessContrastImage$address() {
        return MagickBrightnessContrastImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickBrightnessContrastImage(MagickWand *, const double, const double)
     * }
     */
    public static int MagickBrightnessContrastImage(MemorySegment x0, double x1, double x2) {
        var mh$ = MagickBrightnessContrastImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickBrightnessContrastImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickCannyEdgeImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickCannyEdgeImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickCannyEdgeImage(MagickWand *, const double, const double, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickCannyEdgeImage$descriptor() {
        return MagickCannyEdgeImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickCannyEdgeImage(MagickWand *, const double, const double, const double, const double)
     * }
     */
    public static MethodHandle MagickCannyEdgeImage$handle() {
        return MagickCannyEdgeImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickCannyEdgeImage(MagickWand *, const double, const double, const double, const double)
     * }
     */
    public static MemorySegment MagickCannyEdgeImage$address() {
        return MagickCannyEdgeImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickCannyEdgeImage(MagickWand *, const double, const double, const double, const double)
     * }
     */
    public static int MagickCannyEdgeImage(MemorySegment x0, double x1, double x2, double x3, double x4) {
        var mh$ = MagickCannyEdgeImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickCannyEdgeImage", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickCharcoalImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickCharcoalImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickCharcoalImage(MagickWand *, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickCharcoalImage$descriptor() {
        return MagickCharcoalImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickCharcoalImage(MagickWand *, const double, const double)
     * }
     */
    public static MethodHandle MagickCharcoalImage$handle() {
        return MagickCharcoalImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickCharcoalImage(MagickWand *, const double, const double)
     * }
     */
    public static MemorySegment MagickCharcoalImage$address() {
        return MagickCharcoalImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickCharcoalImage(MagickWand *, const double, const double)
     * }
     */
    public static int MagickCharcoalImage(MemorySegment x0, double x1, double x2) {
        var mh$ = MagickCharcoalImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickCharcoalImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickChopImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickChopImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickChopImage(MagickWand *, const size_t, const size_t, const ssize_t, const ssize_t)
     * }
     */
    public static FunctionDescriptor MagickChopImage$descriptor() {
        return MagickChopImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickChopImage(MagickWand *, const size_t, const size_t, const ssize_t, const ssize_t)
     * }
     */
    public static MethodHandle MagickChopImage$handle() {
        return MagickChopImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickChopImage(MagickWand *, const size_t, const size_t, const ssize_t, const ssize_t)
     * }
     */
    public static MemorySegment MagickChopImage$address() {
        return MagickChopImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickChopImage(MagickWand *, const size_t, const size_t, const ssize_t, const ssize_t)
     * }
     */
    public static int MagickChopImage(MemorySegment x0, long x1, long x2, long x3, long x4) {
        var mh$ = MagickChopImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickChopImage", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickCLAHEImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickCLAHEImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickCLAHEImage(MagickWand *, const size_t, const size_t, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickCLAHEImage$descriptor() {
        return MagickCLAHEImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickCLAHEImage(MagickWand *, const size_t, const size_t, const double, const double)
     * }
     */
    public static MethodHandle MagickCLAHEImage$handle() {
        return MagickCLAHEImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickCLAHEImage(MagickWand *, const size_t, const size_t, const double, const double)
     * }
     */
    public static MemorySegment MagickCLAHEImage$address() {
        return MagickCLAHEImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickCLAHEImage(MagickWand *, const size_t, const size_t, const double, const double)
     * }
     */
    public static int MagickCLAHEImage(MemorySegment x0, long x1, long x2, double x3, double x4) {
        var mh$ = MagickCLAHEImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickCLAHEImage", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickClampImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickClampImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickClampImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickClampImage$descriptor() {
        return MagickClampImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickClampImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickClampImage$handle() {
        return MagickClampImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickClampImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickClampImage$address() {
        return MagickClampImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickClampImage(MagickWand *)
     * }
     */
    public static int MagickClampImage(MemorySegment x0) {
        var mh$ = MagickClampImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickClampImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickClipImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickClipImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickClipImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickClipImage$descriptor() {
        return MagickClipImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickClipImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickClipImage$handle() {
        return MagickClipImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickClipImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickClipImage$address() {
        return MagickClipImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickClipImage(MagickWand *)
     * }
     */
    public static int MagickClipImage(MemorySegment x0) {
        var mh$ = MagickClipImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickClipImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickClipImagePath {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickClipImagePath");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickClipImagePath(MagickWand *, const char *, const MagickBooleanType)
     * }
     */
    public static FunctionDescriptor MagickClipImagePath$descriptor() {
        return MagickClipImagePath.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickClipImagePath(MagickWand *, const char *, const MagickBooleanType)
     * }
     */
    public static MethodHandle MagickClipImagePath$handle() {
        return MagickClipImagePath.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickClipImagePath(MagickWand *, const char *, const MagickBooleanType)
     * }
     */
    public static MemorySegment MagickClipImagePath$address() {
        return MagickClipImagePath.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickClipImagePath(MagickWand *, const char *, const MagickBooleanType)
     * }
     */
    public static int MagickClipImagePath(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = MagickClipImagePath.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickClipImagePath", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickClutImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickClutImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickClutImage(MagickWand *, const MagickWand *, const PixelInterpolateMethod)
     * }
     */
    public static FunctionDescriptor MagickClutImage$descriptor() {
        return MagickClutImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickClutImage(MagickWand *, const MagickWand *, const PixelInterpolateMethod)
     * }
     */
    public static MethodHandle MagickClutImage$handle() {
        return MagickClutImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickClutImage(MagickWand *, const MagickWand *, const PixelInterpolateMethod)
     * }
     */
    public static MemorySegment MagickClutImage$address() {
        return MagickClutImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickClutImage(MagickWand *, const MagickWand *, const PixelInterpolateMethod)
     * }
     */
    public static int MagickClutImage(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = MagickClutImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickClutImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickColorDecisionListImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickColorDecisionListImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickColorDecisionListImage(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickColorDecisionListImage$descriptor() {
        return MagickColorDecisionListImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickColorDecisionListImage(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickColorDecisionListImage$handle() {
        return MagickColorDecisionListImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickColorDecisionListImage(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickColorDecisionListImage$address() {
        return MagickColorDecisionListImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickColorDecisionListImage(MagickWand *, const char *)
     * }
     */
    public static int MagickColorDecisionListImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickColorDecisionListImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickColorDecisionListImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickColorizeImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickColorizeImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickColorizeImage(MagickWand *, const PixelWand *, const PixelWand *)
     * }
     */
    public static FunctionDescriptor MagickColorizeImage$descriptor() {
        return MagickColorizeImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickColorizeImage(MagickWand *, const PixelWand *, const PixelWand *)
     * }
     */
    public static MethodHandle MagickColorizeImage$handle() {
        return MagickColorizeImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickColorizeImage(MagickWand *, const PixelWand *, const PixelWand *)
     * }
     */
    public static MemorySegment MagickColorizeImage$address() {
        return MagickColorizeImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickColorizeImage(MagickWand *, const PixelWand *, const PixelWand *)
     * }
     */
    public static int MagickColorizeImage(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = MagickColorizeImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickColorizeImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickColorMatrixImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickColorMatrixImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickColorMatrixImage(MagickWand *, const KernelInfo *)
     * }
     */
    public static FunctionDescriptor MagickColorMatrixImage$descriptor() {
        return MagickColorMatrixImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickColorMatrixImage(MagickWand *, const KernelInfo *)
     * }
     */
    public static MethodHandle MagickColorMatrixImage$handle() {
        return MagickColorMatrixImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickColorMatrixImage(MagickWand *, const KernelInfo *)
     * }
     */
    public static MemorySegment MagickColorMatrixImage$address() {
        return MagickColorMatrixImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickColorMatrixImage(MagickWand *, const KernelInfo *)
     * }
     */
    public static int MagickColorMatrixImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickColorMatrixImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickColorMatrixImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickColorThresholdImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickColorThresholdImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickColorThresholdImage(MagickWand *, const PixelWand *, const PixelWand *)
     * }
     */
    public static FunctionDescriptor MagickColorThresholdImage$descriptor() {
        return MagickColorThresholdImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickColorThresholdImage(MagickWand *, const PixelWand *, const PixelWand *)
     * }
     */
    public static MethodHandle MagickColorThresholdImage$handle() {
        return MagickColorThresholdImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickColorThresholdImage(MagickWand *, const PixelWand *, const PixelWand *)
     * }
     */
    public static MemorySegment MagickColorThresholdImage$address() {
        return MagickColorThresholdImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickColorThresholdImage(MagickWand *, const PixelWand *, const PixelWand *)
     * }
     */
    public static int MagickColorThresholdImage(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = MagickColorThresholdImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickColorThresholdImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickCommentImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickCommentImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickCommentImage(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickCommentImage$descriptor() {
        return MagickCommentImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickCommentImage(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickCommentImage$handle() {
        return MagickCommentImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickCommentImage(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickCommentImage$address() {
        return MagickCommentImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickCommentImage(MagickWand *, const char *)
     * }
     */
    public static int MagickCommentImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickCommentImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickCommentImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickCompositeImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT,
            MagickWand_h.C_INT,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickCompositeImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickCompositeImage(MagickWand *, const MagickWand *, const CompositeOperator, const MagickBooleanType, const ssize_t, const ssize_t)
     * }
     */
    public static FunctionDescriptor MagickCompositeImage$descriptor() {
        return MagickCompositeImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickCompositeImage(MagickWand *, const MagickWand *, const CompositeOperator, const MagickBooleanType, const ssize_t, const ssize_t)
     * }
     */
    public static MethodHandle MagickCompositeImage$handle() {
        return MagickCompositeImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickCompositeImage(MagickWand *, const MagickWand *, const CompositeOperator, const MagickBooleanType, const ssize_t, const ssize_t)
     * }
     */
    public static MemorySegment MagickCompositeImage$address() {
        return MagickCompositeImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickCompositeImage(MagickWand *, const MagickWand *, const CompositeOperator, const MagickBooleanType, const ssize_t, const ssize_t)
     * }
     */
    public static int MagickCompositeImage(MemorySegment x0, MemorySegment x1, int x2, int x3, long x4, long x5) {
        var mh$ = MagickCompositeImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickCompositeImage", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickCompositeImageGravity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickCompositeImageGravity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickCompositeImageGravity(MagickWand *, const MagickWand *, const CompositeOperator, const GravityType)
     * }
     */
    public static FunctionDescriptor MagickCompositeImageGravity$descriptor() {
        return MagickCompositeImageGravity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickCompositeImageGravity(MagickWand *, const MagickWand *, const CompositeOperator, const GravityType)
     * }
     */
    public static MethodHandle MagickCompositeImageGravity$handle() {
        return MagickCompositeImageGravity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickCompositeImageGravity(MagickWand *, const MagickWand *, const CompositeOperator, const GravityType)
     * }
     */
    public static MemorySegment MagickCompositeImageGravity$address() {
        return MagickCompositeImageGravity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickCompositeImageGravity(MagickWand *, const MagickWand *, const CompositeOperator, const GravityType)
     * }
     */
    public static int MagickCompositeImageGravity(MemorySegment x0, MemorySegment x1, int x2, int x3) {
        var mh$ = MagickCompositeImageGravity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickCompositeImageGravity", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickCompositeLayers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickCompositeLayers");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickCompositeLayers(MagickWand *, const MagickWand *, const CompositeOperator, const ssize_t, const ssize_t)
     * }
     */
    public static FunctionDescriptor MagickCompositeLayers$descriptor() {
        return MagickCompositeLayers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickCompositeLayers(MagickWand *, const MagickWand *, const CompositeOperator, const ssize_t, const ssize_t)
     * }
     */
    public static MethodHandle MagickCompositeLayers$handle() {
        return MagickCompositeLayers.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickCompositeLayers(MagickWand *, const MagickWand *, const CompositeOperator, const ssize_t, const ssize_t)
     * }
     */
    public static MemorySegment MagickCompositeLayers$address() {
        return MagickCompositeLayers.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickCompositeLayers(MagickWand *, const MagickWand *, const CompositeOperator, const ssize_t, const ssize_t)
     * }
     */
    public static int MagickCompositeLayers(MemorySegment x0, MemorySegment x1, int x2, long x3, long x4) {
        var mh$ = MagickCompositeLayers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickCompositeLayers", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickConnectedComponentsImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickConnectedComponentsImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickConnectedComponentsImage(MagickWand *, const size_t, CCObjectInfo **)
     * }
     */
    public static FunctionDescriptor MagickConnectedComponentsImage$descriptor() {
        return MagickConnectedComponentsImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickConnectedComponentsImage(MagickWand *, const size_t, CCObjectInfo **)
     * }
     */
    public static MethodHandle MagickConnectedComponentsImage$handle() {
        return MagickConnectedComponentsImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickConnectedComponentsImage(MagickWand *, const size_t, CCObjectInfo **)
     * }
     */
    public static MemorySegment MagickConnectedComponentsImage$address() {
        return MagickConnectedComponentsImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickConnectedComponentsImage(MagickWand *, const size_t, CCObjectInfo **)
     * }
     */
    public static int MagickConnectedComponentsImage(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = MagickConnectedComponentsImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickConnectedComponentsImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickConstituteImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickConstituteImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickConstituteImage(MagickWand *, const size_t, const size_t, const char *, const StorageType, const void *)
     * }
     */
    public static FunctionDescriptor MagickConstituteImage$descriptor() {
        return MagickConstituteImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickConstituteImage(MagickWand *, const size_t, const size_t, const char *, const StorageType, const void *)
     * }
     */
    public static MethodHandle MagickConstituteImage$handle() {
        return MagickConstituteImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickConstituteImage(MagickWand *, const size_t, const size_t, const char *, const StorageType, const void *)
     * }
     */
    public static MemorySegment MagickConstituteImage$address() {
        return MagickConstituteImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickConstituteImage(MagickWand *, const size_t, const size_t, const char *, const StorageType, const void *)
     * }
     */
    public static int MagickConstituteImage(MemorySegment x0, long x1, long x2, MemorySegment x3, int x4, MemorySegment x5) {
        var mh$ = MagickConstituteImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickConstituteImage", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickContrastImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickContrastImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickContrastImage(MagickWand *, const MagickBooleanType)
     * }
     */
    public static FunctionDescriptor MagickContrastImage$descriptor() {
        return MagickContrastImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickContrastImage(MagickWand *, const MagickBooleanType)
     * }
     */
    public static MethodHandle MagickContrastImage$handle() {
        return MagickContrastImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickContrastImage(MagickWand *, const MagickBooleanType)
     * }
     */
    public static MemorySegment MagickContrastImage$address() {
        return MagickContrastImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickContrastImage(MagickWand *, const MagickBooleanType)
     * }
     */
    public static int MagickContrastImage(MemorySegment x0, int x1) {
        var mh$ = MagickContrastImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickContrastImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickContrastStretchImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickContrastStretchImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickContrastStretchImage(MagickWand *, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickContrastStretchImage$descriptor() {
        return MagickContrastStretchImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickContrastStretchImage(MagickWand *, const double, const double)
     * }
     */
    public static MethodHandle MagickContrastStretchImage$handle() {
        return MagickContrastStretchImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickContrastStretchImage(MagickWand *, const double, const double)
     * }
     */
    public static MemorySegment MagickContrastStretchImage$address() {
        return MagickContrastStretchImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickContrastStretchImage(MagickWand *, const double, const double)
     * }
     */
    public static int MagickContrastStretchImage(MemorySegment x0, double x1, double x2) {
        var mh$ = MagickContrastStretchImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickContrastStretchImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickConvolveImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickConvolveImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickConvolveImage(MagickWand *, const KernelInfo *)
     * }
     */
    public static FunctionDescriptor MagickConvolveImage$descriptor() {
        return MagickConvolveImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickConvolveImage(MagickWand *, const KernelInfo *)
     * }
     */
    public static MethodHandle MagickConvolveImage$handle() {
        return MagickConvolveImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickConvolveImage(MagickWand *, const KernelInfo *)
     * }
     */
    public static MemorySegment MagickConvolveImage$address() {
        return MagickConvolveImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickConvolveImage(MagickWand *, const KernelInfo *)
     * }
     */
    public static int MagickConvolveImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickConvolveImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickConvolveImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickCropImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickCropImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickCropImage(MagickWand *, const size_t, const size_t, const ssize_t, const ssize_t)
     * }
     */
    public static FunctionDescriptor MagickCropImage$descriptor() {
        return MagickCropImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickCropImage(MagickWand *, const size_t, const size_t, const ssize_t, const ssize_t)
     * }
     */
    public static MethodHandle MagickCropImage$handle() {
        return MagickCropImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickCropImage(MagickWand *, const size_t, const size_t, const ssize_t, const ssize_t)
     * }
     */
    public static MemorySegment MagickCropImage$address() {
        return MagickCropImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickCropImage(MagickWand *, const size_t, const size_t, const ssize_t, const ssize_t)
     * }
     */
    public static int MagickCropImage(MemorySegment x0, long x1, long x2, long x3, long x4) {
        var mh$ = MagickCropImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickCropImage", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickCycleColormapImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickCycleColormapImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickCycleColormapImage(MagickWand *, const ssize_t)
     * }
     */
    public static FunctionDescriptor MagickCycleColormapImage$descriptor() {
        return MagickCycleColormapImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickCycleColormapImage(MagickWand *, const ssize_t)
     * }
     */
    public static MethodHandle MagickCycleColormapImage$handle() {
        return MagickCycleColormapImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickCycleColormapImage(MagickWand *, const ssize_t)
     * }
     */
    public static MemorySegment MagickCycleColormapImage$address() {
        return MagickCycleColormapImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickCycleColormapImage(MagickWand *, const ssize_t)
     * }
     */
    public static int MagickCycleColormapImage(MemorySegment x0, long x1) {
        var mh$ = MagickCycleColormapImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickCycleColormapImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDecipherImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickDecipherImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickDecipherImage(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickDecipherImage$descriptor() {
        return MagickDecipherImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickDecipherImage(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickDecipherImage$handle() {
        return MagickDecipherImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickDecipherImage(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickDecipherImage$address() {
        return MagickDecipherImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickDecipherImage(MagickWand *, const char *)
     * }
     */
    public static int MagickDecipherImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickDecipherImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDecipherImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDeskewImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickDeskewImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickDeskewImage(MagickWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickDeskewImage$descriptor() {
        return MagickDeskewImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickDeskewImage(MagickWand *, const double)
     * }
     */
    public static MethodHandle MagickDeskewImage$handle() {
        return MagickDeskewImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickDeskewImage(MagickWand *, const double)
     * }
     */
    public static MemorySegment MagickDeskewImage$address() {
        return MagickDeskewImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickDeskewImage(MagickWand *, const double)
     * }
     */
    public static int MagickDeskewImage(MemorySegment x0, double x1) {
        var mh$ = MagickDeskewImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDeskewImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDespeckleImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickDespeckleImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickDespeckleImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickDespeckleImage$descriptor() {
        return MagickDespeckleImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickDespeckleImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickDespeckleImage$handle() {
        return MagickDespeckleImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickDespeckleImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickDespeckleImage$address() {
        return MagickDespeckleImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickDespeckleImage(MagickWand *)
     * }
     */
    public static int MagickDespeckleImage(MemorySegment x0) {
        var mh$ = MagickDespeckleImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDespeckleImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDisplayImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickDisplayImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickDisplayImage(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickDisplayImage$descriptor() {
        return MagickDisplayImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickDisplayImage(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickDisplayImage$handle() {
        return MagickDisplayImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickDisplayImage(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickDisplayImage$address() {
        return MagickDisplayImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickDisplayImage(MagickWand *, const char *)
     * }
     */
    public static int MagickDisplayImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickDisplayImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDisplayImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDisplayImages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickDisplayImages");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickDisplayImages(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickDisplayImages$descriptor() {
        return MagickDisplayImages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickDisplayImages(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickDisplayImages$handle() {
        return MagickDisplayImages.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickDisplayImages(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickDisplayImages$address() {
        return MagickDisplayImages.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickDisplayImages(MagickWand *, const char *)
     * }
     */
    public static int MagickDisplayImages(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickDisplayImages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDisplayImages", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDistortImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT,
            MagickWand_h.C_LONG,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickDistortImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickDistortImage(MagickWand *, const DistortMethod, const size_t, const double *, const MagickBooleanType)
     * }
     */
    public static FunctionDescriptor MagickDistortImage$descriptor() {
        return MagickDistortImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickDistortImage(MagickWand *, const DistortMethod, const size_t, const double *, const MagickBooleanType)
     * }
     */
    public static MethodHandle MagickDistortImage$handle() {
        return MagickDistortImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickDistortImage(MagickWand *, const DistortMethod, const size_t, const double *, const MagickBooleanType)
     * }
     */
    public static MemorySegment MagickDistortImage$address() {
        return MagickDistortImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickDistortImage(MagickWand *, const DistortMethod, const size_t, const double *, const MagickBooleanType)
     * }
     */
    public static int MagickDistortImage(MemorySegment x0, int x1, long x2, MemorySegment x3, int x4) {
        var mh$ = MagickDistortImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDistortImage", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickDrawImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickDrawImage(MagickWand *, const DrawingWand *)
     * }
     */
    public static FunctionDescriptor MagickDrawImage$descriptor() {
        return MagickDrawImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickDrawImage(MagickWand *, const DrawingWand *)
     * }
     */
    public static MethodHandle MagickDrawImage$handle() {
        return MagickDrawImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickDrawImage(MagickWand *, const DrawingWand *)
     * }
     */
    public static MemorySegment MagickDrawImage$address() {
        return MagickDrawImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickDrawImage(MagickWand *, const DrawingWand *)
     * }
     */
    public static int MagickDrawImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickDrawImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickEdgeImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickEdgeImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickEdgeImage(MagickWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickEdgeImage$descriptor() {
        return MagickEdgeImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickEdgeImage(MagickWand *, const double)
     * }
     */
    public static MethodHandle MagickEdgeImage$handle() {
        return MagickEdgeImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickEdgeImage(MagickWand *, const double)
     * }
     */
    public static MemorySegment MagickEdgeImage$address() {
        return MagickEdgeImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickEdgeImage(MagickWand *, const double)
     * }
     */
    public static int MagickEdgeImage(MemorySegment x0, double x1) {
        var mh$ = MagickEdgeImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickEdgeImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickEmbossImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickEmbossImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickEmbossImage(MagickWand *, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickEmbossImage$descriptor() {
        return MagickEmbossImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickEmbossImage(MagickWand *, const double, const double)
     * }
     */
    public static MethodHandle MagickEmbossImage$handle() {
        return MagickEmbossImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickEmbossImage(MagickWand *, const double, const double)
     * }
     */
    public static MemorySegment MagickEmbossImage$address() {
        return MagickEmbossImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickEmbossImage(MagickWand *, const double, const double)
     * }
     */
    public static int MagickEmbossImage(MemorySegment x0, double x1, double x2) {
        var mh$ = MagickEmbossImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickEmbossImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickEncipherImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickEncipherImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickEncipherImage(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickEncipherImage$descriptor() {
        return MagickEncipherImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickEncipherImage(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickEncipherImage$handle() {
        return MagickEncipherImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickEncipherImage(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickEncipherImage$address() {
        return MagickEncipherImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickEncipherImage(MagickWand *, const char *)
     * }
     */
    public static int MagickEncipherImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickEncipherImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickEncipherImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickEnhanceImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickEnhanceImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickEnhanceImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickEnhanceImage$descriptor() {
        return MagickEnhanceImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickEnhanceImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickEnhanceImage$handle() {
        return MagickEnhanceImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickEnhanceImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickEnhanceImage$address() {
        return MagickEnhanceImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickEnhanceImage(MagickWand *)
     * }
     */
    public static int MagickEnhanceImage(MemorySegment x0) {
        var mh$ = MagickEnhanceImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickEnhanceImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickEqualizeImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickEqualizeImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickEqualizeImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickEqualizeImage$descriptor() {
        return MagickEqualizeImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickEqualizeImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickEqualizeImage$handle() {
        return MagickEqualizeImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickEqualizeImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickEqualizeImage$address() {
        return MagickEqualizeImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickEqualizeImage(MagickWand *)
     * }
     */
    public static int MagickEqualizeImage(MemorySegment x0) {
        var mh$ = MagickEqualizeImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickEqualizeImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickEvaluateImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickEvaluateImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickEvaluateImage(MagickWand *, const MagickEvaluateOperator, const double)
     * }
     */
    public static FunctionDescriptor MagickEvaluateImage$descriptor() {
        return MagickEvaluateImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickEvaluateImage(MagickWand *, const MagickEvaluateOperator, const double)
     * }
     */
    public static MethodHandle MagickEvaluateImage$handle() {
        return MagickEvaluateImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickEvaluateImage(MagickWand *, const MagickEvaluateOperator, const double)
     * }
     */
    public static MemorySegment MagickEvaluateImage$address() {
        return MagickEvaluateImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickEvaluateImage(MagickWand *, const MagickEvaluateOperator, const double)
     * }
     */
    public static int MagickEvaluateImage(MemorySegment x0, int x1, double x2) {
        var mh$ = MagickEvaluateImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickEvaluateImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickExportImagePixels {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickExportImagePixels");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickExportImagePixels(MagickWand *, const ssize_t, const ssize_t, const size_t, const size_t, const char *, const StorageType, void *)
     * }
     */
    public static FunctionDescriptor MagickExportImagePixels$descriptor() {
        return MagickExportImagePixels.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickExportImagePixels(MagickWand *, const ssize_t, const ssize_t, const size_t, const size_t, const char *, const StorageType, void *)
     * }
     */
    public static MethodHandle MagickExportImagePixels$handle() {
        return MagickExportImagePixels.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickExportImagePixels(MagickWand *, const ssize_t, const ssize_t, const size_t, const size_t, const char *, const StorageType, void *)
     * }
     */
    public static MemorySegment MagickExportImagePixels$address() {
        return MagickExportImagePixels.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickExportImagePixels(MagickWand *, const ssize_t, const ssize_t, const size_t, const size_t, const char *, const StorageType, void *)
     * }
     */
    public static int MagickExportImagePixels(MemorySegment x0, long x1, long x2, long x3, long x4, MemorySegment x5, int x6, MemorySegment x7) {
        var mh$ = MagickExportImagePixels.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickExportImagePixels", x0, x1, x2, x3, x4, x5, x6, x7);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickExtentImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickExtentImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickExtentImage(MagickWand *, const size_t, const size_t, const ssize_t, const ssize_t)
     * }
     */
    public static FunctionDescriptor MagickExtentImage$descriptor() {
        return MagickExtentImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickExtentImage(MagickWand *, const size_t, const size_t, const ssize_t, const ssize_t)
     * }
     */
    public static MethodHandle MagickExtentImage$handle() {
        return MagickExtentImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickExtentImage(MagickWand *, const size_t, const size_t, const ssize_t, const ssize_t)
     * }
     */
    public static MemorySegment MagickExtentImage$address() {
        return MagickExtentImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickExtentImage(MagickWand *, const size_t, const size_t, const ssize_t, const ssize_t)
     * }
     */
    public static int MagickExtentImage(MemorySegment x0, long x1, long x2, long x3, long x4) {
        var mh$ = MagickExtentImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickExtentImage", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickFlipImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickFlipImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickFlipImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickFlipImage$descriptor() {
        return MagickFlipImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickFlipImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickFlipImage$handle() {
        return MagickFlipImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickFlipImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickFlipImage$address() {
        return MagickFlipImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickFlipImage(MagickWand *)
     * }
     */
    public static int MagickFlipImage(MemorySegment x0) {
        var mh$ = MagickFlipImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickFlipImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickFloodfillPaintImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickFloodfillPaintImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickFloodfillPaintImage(MagickWand *, const PixelWand *, const double, const PixelWand *, const ssize_t, const ssize_t, const MagickBooleanType)
     * }
     */
    public static FunctionDescriptor MagickFloodfillPaintImage$descriptor() {
        return MagickFloodfillPaintImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickFloodfillPaintImage(MagickWand *, const PixelWand *, const double, const PixelWand *, const ssize_t, const ssize_t, const MagickBooleanType)
     * }
     */
    public static MethodHandle MagickFloodfillPaintImage$handle() {
        return MagickFloodfillPaintImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickFloodfillPaintImage(MagickWand *, const PixelWand *, const double, const PixelWand *, const ssize_t, const ssize_t, const MagickBooleanType)
     * }
     */
    public static MemorySegment MagickFloodfillPaintImage$address() {
        return MagickFloodfillPaintImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickFloodfillPaintImage(MagickWand *, const PixelWand *, const double, const PixelWand *, const ssize_t, const ssize_t, const MagickBooleanType)
     * }
     */
    public static int MagickFloodfillPaintImage(MemorySegment x0, MemorySegment x1, double x2, MemorySegment x3, long x4, long x5, int x6) {
        var mh$ = MagickFloodfillPaintImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickFloodfillPaintImage", x0, x1, x2, x3, x4, x5, x6);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickFlopImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickFlopImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickFlopImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickFlopImage$descriptor() {
        return MagickFlopImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickFlopImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickFlopImage$handle() {
        return MagickFlopImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickFlopImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickFlopImage$address() {
        return MagickFlopImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickFlopImage(MagickWand *)
     * }
     */
    public static int MagickFlopImage(MemorySegment x0) {
        var mh$ = MagickFlopImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickFlopImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickForwardFourierTransformImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickForwardFourierTransformImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickForwardFourierTransformImage(MagickWand *, const MagickBooleanType)
     * }
     */
    public static FunctionDescriptor MagickForwardFourierTransformImage$descriptor() {
        return MagickForwardFourierTransformImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickForwardFourierTransformImage(MagickWand *, const MagickBooleanType)
     * }
     */
    public static MethodHandle MagickForwardFourierTransformImage$handle() {
        return MagickForwardFourierTransformImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickForwardFourierTransformImage(MagickWand *, const MagickBooleanType)
     * }
     */
    public static MemorySegment MagickForwardFourierTransformImage$address() {
        return MagickForwardFourierTransformImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickForwardFourierTransformImage(MagickWand *, const MagickBooleanType)
     * }
     */
    public static int MagickForwardFourierTransformImage(MemorySegment x0, int x1) {
        var mh$ = MagickForwardFourierTransformImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickForwardFourierTransformImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickFrameImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickFrameImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickFrameImage(MagickWand *, const PixelWand *, const size_t, const size_t, const ssize_t, const ssize_t, const CompositeOperator)
     * }
     */
    public static FunctionDescriptor MagickFrameImage$descriptor() {
        return MagickFrameImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickFrameImage(MagickWand *, const PixelWand *, const size_t, const size_t, const ssize_t, const ssize_t, const CompositeOperator)
     * }
     */
    public static MethodHandle MagickFrameImage$handle() {
        return MagickFrameImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickFrameImage(MagickWand *, const PixelWand *, const size_t, const size_t, const ssize_t, const ssize_t, const CompositeOperator)
     * }
     */
    public static MemorySegment MagickFrameImage$address() {
        return MagickFrameImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickFrameImage(MagickWand *, const PixelWand *, const size_t, const size_t, const ssize_t, const ssize_t, const CompositeOperator)
     * }
     */
    public static int MagickFrameImage(MemorySegment x0, MemorySegment x1, long x2, long x3, long x4, long x5, int x6) {
        var mh$ = MagickFrameImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickFrameImage", x0, x1, x2, x3, x4, x5, x6);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickFunctionImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT,
            MagickWand_h.C_LONG,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickFunctionImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickFunctionImage(MagickWand *, const MagickFunction, const size_t, const double *)
     * }
     */
    public static FunctionDescriptor MagickFunctionImage$descriptor() {
        return MagickFunctionImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickFunctionImage(MagickWand *, const MagickFunction, const size_t, const double *)
     * }
     */
    public static MethodHandle MagickFunctionImage$handle() {
        return MagickFunctionImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickFunctionImage(MagickWand *, const MagickFunction, const size_t, const double *)
     * }
     */
    public static MemorySegment MagickFunctionImage$address() {
        return MagickFunctionImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickFunctionImage(MagickWand *, const MagickFunction, const size_t, const double *)
     * }
     */
    public static int MagickFunctionImage(MemorySegment x0, int x1, long x2, MemorySegment x3) {
        var mh$ = MagickFunctionImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickFunctionImage", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGammaImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGammaImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGammaImage(MagickWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickGammaImage$descriptor() {
        return MagickGammaImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGammaImage(MagickWand *, const double)
     * }
     */
    public static MethodHandle MagickGammaImage$handle() {
        return MagickGammaImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGammaImage(MagickWand *, const double)
     * }
     */
    public static MemorySegment MagickGammaImage$address() {
        return MagickGammaImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGammaImage(MagickWand *, const double)
     * }
     */
    public static int MagickGammaImage(MemorySegment x0, double x1) {
        var mh$ = MagickGammaImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGammaImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGaussianBlurImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGaussianBlurImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGaussianBlurImage(MagickWand *, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickGaussianBlurImage$descriptor() {
        return MagickGaussianBlurImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGaussianBlurImage(MagickWand *, const double, const double)
     * }
     */
    public static MethodHandle MagickGaussianBlurImage$handle() {
        return MagickGaussianBlurImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGaussianBlurImage(MagickWand *, const double, const double)
     * }
     */
    public static MemorySegment MagickGaussianBlurImage$address() {
        return MagickGaussianBlurImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGaussianBlurImage(MagickWand *, const double, const double)
     * }
     */
    public static int MagickGaussianBlurImage(MemorySegment x0, double x1, double x2) {
        var mh$ = MagickGaussianBlurImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGaussianBlurImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageAlphaChannel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageAlphaChannel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageAlphaChannel(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageAlphaChannel$descriptor() {
        return MagickGetImageAlphaChannel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageAlphaChannel(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageAlphaChannel$handle() {
        return MagickGetImageAlphaChannel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageAlphaChannel(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageAlphaChannel$address() {
        return MagickGetImageAlphaChannel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageAlphaChannel(MagickWand *)
     * }
     */
    public static int MagickGetImageAlphaChannel(MemorySegment x0) {
        var mh$ = MagickGetImageAlphaChannel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageAlphaChannel", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageBackgroundColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageBackgroundColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageBackgroundColor(MagickWand *, PixelWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageBackgroundColor$descriptor() {
        return MagickGetImageBackgroundColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageBackgroundColor(MagickWand *, PixelWand *)
     * }
     */
    public static MethodHandle MagickGetImageBackgroundColor$handle() {
        return MagickGetImageBackgroundColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageBackgroundColor(MagickWand *, PixelWand *)
     * }
     */
    public static MemorySegment MagickGetImageBackgroundColor$address() {
        return MagickGetImageBackgroundColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageBackgroundColor(MagickWand *, PixelWand *)
     * }
     */
    public static int MagickGetImageBackgroundColor(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickGetImageBackgroundColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageBackgroundColor", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageBluePrimary {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageBluePrimary");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageBluePrimary(MagickWand *, double *, double *, double *)
     * }
     */
    public static FunctionDescriptor MagickGetImageBluePrimary$descriptor() {
        return MagickGetImageBluePrimary.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageBluePrimary(MagickWand *, double *, double *, double *)
     * }
     */
    public static MethodHandle MagickGetImageBluePrimary$handle() {
        return MagickGetImageBluePrimary.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageBluePrimary(MagickWand *, double *, double *, double *)
     * }
     */
    public static MemorySegment MagickGetImageBluePrimary$address() {
        return MagickGetImageBluePrimary.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageBluePrimary(MagickWand *, double *, double *, double *)
     * }
     */
    public static int MagickGetImageBluePrimary(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = MagickGetImageBluePrimary.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageBluePrimary", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageBorderColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageBorderColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageBorderColor(MagickWand *, PixelWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageBorderColor$descriptor() {
        return MagickGetImageBorderColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageBorderColor(MagickWand *, PixelWand *)
     * }
     */
    public static MethodHandle MagickGetImageBorderColor$handle() {
        return MagickGetImageBorderColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageBorderColor(MagickWand *, PixelWand *)
     * }
     */
    public static MemorySegment MagickGetImageBorderColor$address() {
        return MagickGetImageBorderColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageBorderColor(MagickWand *, PixelWand *)
     * }
     */
    public static int MagickGetImageBorderColor(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickGetImageBorderColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageBorderColor", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageKurtosis {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageKurtosis");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageKurtosis(MagickWand *, double *, double *)
     * }
     */
    public static FunctionDescriptor MagickGetImageKurtosis$descriptor() {
        return MagickGetImageKurtosis.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageKurtosis(MagickWand *, double *, double *)
     * }
     */
    public static MethodHandle MagickGetImageKurtosis$handle() {
        return MagickGetImageKurtosis.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageKurtosis(MagickWand *, double *, double *)
     * }
     */
    public static MemorySegment MagickGetImageKurtosis$address() {
        return MagickGetImageKurtosis.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageKurtosis(MagickWand *, double *, double *)
     * }
     */
    public static int MagickGetImageKurtosis(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = MagickGetImageKurtosis.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageKurtosis", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageMean {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageMean");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageMean(MagickWand *, double *, double *)
     * }
     */
    public static FunctionDescriptor MagickGetImageMean$descriptor() {
        return MagickGetImageMean.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageMean(MagickWand *, double *, double *)
     * }
     */
    public static MethodHandle MagickGetImageMean$handle() {
        return MagickGetImageMean.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageMean(MagickWand *, double *, double *)
     * }
     */
    public static MemorySegment MagickGetImageMean$address() {
        return MagickGetImageMean.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageMean(MagickWand *, double *, double *)
     * }
     */
    public static int MagickGetImageMean(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = MagickGetImageMean.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageMean", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageRange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageRange");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageRange(MagickWand *, double *, double *)
     * }
     */
    public static FunctionDescriptor MagickGetImageRange$descriptor() {
        return MagickGetImageRange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageRange(MagickWand *, double *, double *)
     * }
     */
    public static MethodHandle MagickGetImageRange$handle() {
        return MagickGetImageRange.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageRange(MagickWand *, double *, double *)
     * }
     */
    public static MemorySegment MagickGetImageRange$address() {
        return MagickGetImageRange.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageRange(MagickWand *, double *, double *)
     * }
     */
    public static int MagickGetImageRange(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = MagickGetImageRange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageRange", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageColormapColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageColormapColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageColormapColor(MagickWand *, const size_t, PixelWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageColormapColor$descriptor() {
        return MagickGetImageColormapColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageColormapColor(MagickWand *, const size_t, PixelWand *)
     * }
     */
    public static MethodHandle MagickGetImageColormapColor$handle() {
        return MagickGetImageColormapColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageColormapColor(MagickWand *, const size_t, PixelWand *)
     * }
     */
    public static MemorySegment MagickGetImageColormapColor$address() {
        return MagickGetImageColormapColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageColormapColor(MagickWand *, const size_t, PixelWand *)
     * }
     */
    public static int MagickGetImageColormapColor(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = MagickGetImageColormapColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageColormapColor", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageDistortion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageDistortion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageDistortion(MagickWand *, const MagickWand *, const MetricType, double *)
     * }
     */
    public static FunctionDescriptor MagickGetImageDistortion$descriptor() {
        return MagickGetImageDistortion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageDistortion(MagickWand *, const MagickWand *, const MetricType, double *)
     * }
     */
    public static MethodHandle MagickGetImageDistortion$handle() {
        return MagickGetImageDistortion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageDistortion(MagickWand *, const MagickWand *, const MetricType, double *)
     * }
     */
    public static MemorySegment MagickGetImageDistortion$address() {
        return MagickGetImageDistortion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageDistortion(MagickWand *, const MagickWand *, const MetricType, double *)
     * }
     */
    public static int MagickGetImageDistortion(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3) {
        var mh$ = MagickGetImageDistortion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageDistortion", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageGreenPrimary {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageGreenPrimary");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageGreenPrimary(MagickWand *, double *, double *, double *)
     * }
     */
    public static FunctionDescriptor MagickGetImageGreenPrimary$descriptor() {
        return MagickGetImageGreenPrimary.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageGreenPrimary(MagickWand *, double *, double *, double *)
     * }
     */
    public static MethodHandle MagickGetImageGreenPrimary$handle() {
        return MagickGetImageGreenPrimary.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageGreenPrimary(MagickWand *, double *, double *, double *)
     * }
     */
    public static MemorySegment MagickGetImageGreenPrimary$address() {
        return MagickGetImageGreenPrimary.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageGreenPrimary(MagickWand *, double *, double *, double *)
     * }
     */
    public static int MagickGetImageGreenPrimary(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = MagickGetImageGreenPrimary.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageGreenPrimary", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageLength {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageLength");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageLength(MagickWand *, MagickSizeType *)
     * }
     */
    public static FunctionDescriptor MagickGetImageLength$descriptor() {
        return MagickGetImageLength.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageLength(MagickWand *, MagickSizeType *)
     * }
     */
    public static MethodHandle MagickGetImageLength$handle() {
        return MagickGetImageLength.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageLength(MagickWand *, MagickSizeType *)
     * }
     */
    public static MemorySegment MagickGetImageLength$address() {
        return MagickGetImageLength.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageLength(MagickWand *, MagickSizeType *)
     * }
     */
    public static int MagickGetImageLength(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickGetImageLength.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageLength", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageMatteColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageMatteColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageMatteColor(MagickWand *, PixelWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageMatteColor$descriptor() {
        return MagickGetImageMatteColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageMatteColor(MagickWand *, PixelWand *)
     * }
     */
    public static MethodHandle MagickGetImageMatteColor$handle() {
        return MagickGetImageMatteColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageMatteColor(MagickWand *, PixelWand *)
     * }
     */
    public static MemorySegment MagickGetImageMatteColor$address() {
        return MagickGetImageMatteColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageMatteColor(MagickWand *, PixelWand *)
     * }
     */
    public static int MagickGetImageMatteColor(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickGetImageMatteColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageMatteColor", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImagePage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImagePage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImagePage(MagickWand *, size_t *, size_t *, ssize_t *, ssize_t *)
     * }
     */
    public static FunctionDescriptor MagickGetImagePage$descriptor() {
        return MagickGetImagePage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImagePage(MagickWand *, size_t *, size_t *, ssize_t *, ssize_t *)
     * }
     */
    public static MethodHandle MagickGetImagePage$handle() {
        return MagickGetImagePage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImagePage(MagickWand *, size_t *, size_t *, ssize_t *, ssize_t *)
     * }
     */
    public static MemorySegment MagickGetImagePage$address() {
        return MagickGetImagePage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImagePage(MagickWand *, size_t *, size_t *, ssize_t *, ssize_t *)
     * }
     */
    public static int MagickGetImagePage(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = MagickGetImagePage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImagePage", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImagePixelColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImagePixelColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImagePixelColor(MagickWand *, const ssize_t, const ssize_t, PixelWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImagePixelColor$descriptor() {
        return MagickGetImagePixelColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImagePixelColor(MagickWand *, const ssize_t, const ssize_t, PixelWand *)
     * }
     */
    public static MethodHandle MagickGetImagePixelColor$handle() {
        return MagickGetImagePixelColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImagePixelColor(MagickWand *, const ssize_t, const ssize_t, PixelWand *)
     * }
     */
    public static MemorySegment MagickGetImagePixelColor$address() {
        return MagickGetImagePixelColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImagePixelColor(MagickWand *, const ssize_t, const ssize_t, PixelWand *)
     * }
     */
    public static int MagickGetImagePixelColor(MemorySegment x0, long x1, long x2, MemorySegment x3) {
        var mh$ = MagickGetImagePixelColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImagePixelColor", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageRedPrimary {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageRedPrimary");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageRedPrimary(MagickWand *, double *, double *, double *)
     * }
     */
    public static FunctionDescriptor MagickGetImageRedPrimary$descriptor() {
        return MagickGetImageRedPrimary.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageRedPrimary(MagickWand *, double *, double *, double *)
     * }
     */
    public static MethodHandle MagickGetImageRedPrimary$handle() {
        return MagickGetImageRedPrimary.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageRedPrimary(MagickWand *, double *, double *, double *)
     * }
     */
    public static MemorySegment MagickGetImageRedPrimary$address() {
        return MagickGetImageRedPrimary.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageRedPrimary(MagickWand *, double *, double *, double *)
     * }
     */
    public static int MagickGetImageRedPrimary(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = MagickGetImageRedPrimary.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageRedPrimary", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageResolution {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageResolution");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageResolution(MagickWand *, double *, double *)
     * }
     */
    public static FunctionDescriptor MagickGetImageResolution$descriptor() {
        return MagickGetImageResolution.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageResolution(MagickWand *, double *, double *)
     * }
     */
    public static MethodHandle MagickGetImageResolution$handle() {
        return MagickGetImageResolution.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageResolution(MagickWand *, double *, double *)
     * }
     */
    public static MemorySegment MagickGetImageResolution$address() {
        return MagickGetImageResolution.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageResolution(MagickWand *, double *, double *)
     * }
     */
    public static int MagickGetImageResolution(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = MagickGetImageResolution.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageResolution", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageWhitePoint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageWhitePoint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageWhitePoint(MagickWand *, double *, double *, double *)
     * }
     */
    public static FunctionDescriptor MagickGetImageWhitePoint$descriptor() {
        return MagickGetImageWhitePoint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageWhitePoint(MagickWand *, double *, double *, double *)
     * }
     */
    public static MethodHandle MagickGetImageWhitePoint$handle() {
        return MagickGetImageWhitePoint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageWhitePoint(MagickWand *, double *, double *, double *)
     * }
     */
    public static MemorySegment MagickGetImageWhitePoint$address() {
        return MagickGetImageWhitePoint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickGetImageWhitePoint(MagickWand *, double *, double *, double *)
     * }
     */
    public static int MagickGetImageWhitePoint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = MagickGetImageWhitePoint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageWhitePoint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickHaldClutImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickHaldClutImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickHaldClutImage(MagickWand *, const MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickHaldClutImage$descriptor() {
        return MagickHaldClutImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickHaldClutImage(MagickWand *, const MagickWand *)
     * }
     */
    public static MethodHandle MagickHaldClutImage$handle() {
        return MagickHaldClutImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickHaldClutImage(MagickWand *, const MagickWand *)
     * }
     */
    public static MemorySegment MagickHaldClutImage$address() {
        return MagickHaldClutImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickHaldClutImage(MagickWand *, const MagickWand *)
     * }
     */
    public static int MagickHaldClutImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickHaldClutImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickHaldClutImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickHasNextImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickHasNextImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickHasNextImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickHasNextImage$descriptor() {
        return MagickHasNextImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickHasNextImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickHasNextImage$handle() {
        return MagickHasNextImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickHasNextImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickHasNextImage$address() {
        return MagickHasNextImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickHasNextImage(MagickWand *)
     * }
     */
    public static int MagickHasNextImage(MemorySegment x0) {
        var mh$ = MagickHasNextImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickHasNextImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickHasPreviousImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickHasPreviousImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickHasPreviousImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickHasPreviousImage$descriptor() {
        return MagickHasPreviousImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickHasPreviousImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickHasPreviousImage$handle() {
        return MagickHasPreviousImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickHasPreviousImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickHasPreviousImage$address() {
        return MagickHasPreviousImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickHasPreviousImage(MagickWand *)
     * }
     */
    public static int MagickHasPreviousImage(MemorySegment x0) {
        var mh$ = MagickHasPreviousImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickHasPreviousImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickHoughLineImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickHoughLineImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickHoughLineImage(MagickWand *, const size_t, const size_t, const size_t)
     * }
     */
    public static FunctionDescriptor MagickHoughLineImage$descriptor() {
        return MagickHoughLineImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickHoughLineImage(MagickWand *, const size_t, const size_t, const size_t)
     * }
     */
    public static MethodHandle MagickHoughLineImage$handle() {
        return MagickHoughLineImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickHoughLineImage(MagickWand *, const size_t, const size_t, const size_t)
     * }
     */
    public static MemorySegment MagickHoughLineImage$address() {
        return MagickHoughLineImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickHoughLineImage(MagickWand *, const size_t, const size_t, const size_t)
     * }
     */
    public static int MagickHoughLineImage(MemorySegment x0, long x1, long x2, long x3) {
        var mh$ = MagickHoughLineImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickHoughLineImage", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickImplodeImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickImplodeImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickImplodeImage(MagickWand *, const double, const PixelInterpolateMethod)
     * }
     */
    public static FunctionDescriptor MagickImplodeImage$descriptor() {
        return MagickImplodeImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickImplodeImage(MagickWand *, const double, const PixelInterpolateMethod)
     * }
     */
    public static MethodHandle MagickImplodeImage$handle() {
        return MagickImplodeImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickImplodeImage(MagickWand *, const double, const PixelInterpolateMethod)
     * }
     */
    public static MemorySegment MagickImplodeImage$address() {
        return MagickImplodeImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickImplodeImage(MagickWand *, const double, const PixelInterpolateMethod)
     * }
     */
    public static int MagickImplodeImage(MemorySegment x0, double x1, int x2) {
        var mh$ = MagickImplodeImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickImplodeImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickImportImagePixels {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickImportImagePixels");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickImportImagePixels(MagickWand *, const ssize_t, const ssize_t, const size_t, const size_t, const char *, const StorageType, const void *)
     * }
     */
    public static FunctionDescriptor MagickImportImagePixels$descriptor() {
        return MagickImportImagePixels.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickImportImagePixels(MagickWand *, const ssize_t, const ssize_t, const size_t, const size_t, const char *, const StorageType, const void *)
     * }
     */
    public static MethodHandle MagickImportImagePixels$handle() {
        return MagickImportImagePixels.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickImportImagePixels(MagickWand *, const ssize_t, const ssize_t, const size_t, const size_t, const char *, const StorageType, const void *)
     * }
     */
    public static MemorySegment MagickImportImagePixels$address() {
        return MagickImportImagePixels.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickImportImagePixels(MagickWand *, const ssize_t, const ssize_t, const size_t, const size_t, const char *, const StorageType, const void *)
     * }
     */
    public static int MagickImportImagePixels(MemorySegment x0, long x1, long x2, long x3, long x4, MemorySegment x5, int x6, MemorySegment x7) {
        var mh$ = MagickImportImagePixels.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickImportImagePixels", x0, x1, x2, x3, x4, x5, x6, x7);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickInterpolativeResizeImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickInterpolativeResizeImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickInterpolativeResizeImage(MagickWand *, const size_t, const size_t, const PixelInterpolateMethod)
     * }
     */
    public static FunctionDescriptor MagickInterpolativeResizeImage$descriptor() {
        return MagickInterpolativeResizeImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickInterpolativeResizeImage(MagickWand *, const size_t, const size_t, const PixelInterpolateMethod)
     * }
     */
    public static MethodHandle MagickInterpolativeResizeImage$handle() {
        return MagickInterpolativeResizeImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickInterpolativeResizeImage(MagickWand *, const size_t, const size_t, const PixelInterpolateMethod)
     * }
     */
    public static MemorySegment MagickInterpolativeResizeImage$address() {
        return MagickInterpolativeResizeImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickInterpolativeResizeImage(MagickWand *, const size_t, const size_t, const PixelInterpolateMethod)
     * }
     */
    public static int MagickInterpolativeResizeImage(MemorySegment x0, long x1, long x2, int x3) {
        var mh$ = MagickInterpolativeResizeImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickInterpolativeResizeImage", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickInverseFourierTransformImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickInverseFourierTransformImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickInverseFourierTransformImage(MagickWand *, MagickWand *, const MagickBooleanType)
     * }
     */
    public static FunctionDescriptor MagickInverseFourierTransformImage$descriptor() {
        return MagickInverseFourierTransformImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickInverseFourierTransformImage(MagickWand *, MagickWand *, const MagickBooleanType)
     * }
     */
    public static MethodHandle MagickInverseFourierTransformImage$handle() {
        return MagickInverseFourierTransformImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickInverseFourierTransformImage(MagickWand *, MagickWand *, const MagickBooleanType)
     * }
     */
    public static MemorySegment MagickInverseFourierTransformImage$address() {
        return MagickInverseFourierTransformImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickInverseFourierTransformImage(MagickWand *, MagickWand *, const MagickBooleanType)
     * }
     */
    public static int MagickInverseFourierTransformImage(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = MagickInverseFourierTransformImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickInverseFourierTransformImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickKmeansImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickKmeansImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickKmeansImage(MagickWand *, const size_t, const size_t, const double)
     * }
     */
    public static FunctionDescriptor MagickKmeansImage$descriptor() {
        return MagickKmeansImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickKmeansImage(MagickWand *, const size_t, const size_t, const double)
     * }
     */
    public static MethodHandle MagickKmeansImage$handle() {
        return MagickKmeansImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickKmeansImage(MagickWand *, const size_t, const size_t, const double)
     * }
     */
    public static MemorySegment MagickKmeansImage$address() {
        return MagickKmeansImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickKmeansImage(MagickWand *, const size_t, const size_t, const double)
     * }
     */
    public static int MagickKmeansImage(MemorySegment x0, long x1, long x2, double x3) {
        var mh$ = MagickKmeansImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickKmeansImage", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickKuwaharaImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickKuwaharaImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickKuwaharaImage(MagickWand *, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickKuwaharaImage$descriptor() {
        return MagickKuwaharaImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickKuwaharaImage(MagickWand *, const double, const double)
     * }
     */
    public static MethodHandle MagickKuwaharaImage$handle() {
        return MagickKuwaharaImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickKuwaharaImage(MagickWand *, const double, const double)
     * }
     */
    public static MemorySegment MagickKuwaharaImage$address() {
        return MagickKuwaharaImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickKuwaharaImage(MagickWand *, const double, const double)
     * }
     */
    public static int MagickKuwaharaImage(MemorySegment x0, double x1, double x2) {
        var mh$ = MagickKuwaharaImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickKuwaharaImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickLabelImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickLabelImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickLabelImage(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickLabelImage$descriptor() {
        return MagickLabelImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickLabelImage(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickLabelImage$handle() {
        return MagickLabelImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickLabelImage(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickLabelImage$address() {
        return MagickLabelImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickLabelImage(MagickWand *, const char *)
     * }
     */
    public static int MagickLabelImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickLabelImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickLabelImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickLevelImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickLevelImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickLevelImage(MagickWand *, const double, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickLevelImage$descriptor() {
        return MagickLevelImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickLevelImage(MagickWand *, const double, const double, const double)
     * }
     */
    public static MethodHandle MagickLevelImage$handle() {
        return MagickLevelImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickLevelImage(MagickWand *, const double, const double, const double)
     * }
     */
    public static MemorySegment MagickLevelImage$address() {
        return MagickLevelImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickLevelImage(MagickWand *, const double, const double, const double)
     * }
     */
    public static int MagickLevelImage(MemorySegment x0, double x1, double x2, double x3) {
        var mh$ = MagickLevelImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickLevelImage", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickLevelImageColors {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickLevelImageColors");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickLevelImageColors(MagickWand *, const PixelWand *, const PixelWand *, const MagickBooleanType)
     * }
     */
    public static FunctionDescriptor MagickLevelImageColors$descriptor() {
        return MagickLevelImageColors.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickLevelImageColors(MagickWand *, const PixelWand *, const PixelWand *, const MagickBooleanType)
     * }
     */
    public static MethodHandle MagickLevelImageColors$handle() {
        return MagickLevelImageColors.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickLevelImageColors(MagickWand *, const PixelWand *, const PixelWand *, const MagickBooleanType)
     * }
     */
    public static MemorySegment MagickLevelImageColors$address() {
        return MagickLevelImageColors.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickLevelImageColors(MagickWand *, const PixelWand *, const PixelWand *, const MagickBooleanType)
     * }
     */
    public static int MagickLevelImageColors(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3) {
        var mh$ = MagickLevelImageColors.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickLevelImageColors", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickLevelizeImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickLevelizeImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickLevelizeImage(MagickWand *, const double, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickLevelizeImage$descriptor() {
        return MagickLevelizeImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickLevelizeImage(MagickWand *, const double, const double, const double)
     * }
     */
    public static MethodHandle MagickLevelizeImage$handle() {
        return MagickLevelizeImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickLevelizeImage(MagickWand *, const double, const double, const double)
     * }
     */
    public static MemorySegment MagickLevelizeImage$address() {
        return MagickLevelizeImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickLevelizeImage(MagickWand *, const double, const double, const double)
     * }
     */
    public static int MagickLevelizeImage(MemorySegment x0, double x1, double x2, double x3) {
        var mh$ = MagickLevelizeImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickLevelizeImage", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickLinearStretchImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickLinearStretchImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickLinearStretchImage(MagickWand *, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickLinearStretchImage$descriptor() {
        return MagickLinearStretchImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickLinearStretchImage(MagickWand *, const double, const double)
     * }
     */
    public static MethodHandle MagickLinearStretchImage$handle() {
        return MagickLinearStretchImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickLinearStretchImage(MagickWand *, const double, const double)
     * }
     */
    public static MemorySegment MagickLinearStretchImage$address() {
        return MagickLinearStretchImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickLinearStretchImage(MagickWand *, const double, const double)
     * }
     */
    public static int MagickLinearStretchImage(MemorySegment x0, double x1, double x2) {
        var mh$ = MagickLinearStretchImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickLinearStretchImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickLiquidRescaleImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickLiquidRescaleImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickLiquidRescaleImage(MagickWand *, const size_t, const size_t, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickLiquidRescaleImage$descriptor() {
        return MagickLiquidRescaleImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickLiquidRescaleImage(MagickWand *, const size_t, const size_t, const double, const double)
     * }
     */
    public static MethodHandle MagickLiquidRescaleImage$handle() {
        return MagickLiquidRescaleImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickLiquidRescaleImage(MagickWand *, const size_t, const size_t, const double, const double)
     * }
     */
    public static MemorySegment MagickLiquidRescaleImage$address() {
        return MagickLiquidRescaleImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickLiquidRescaleImage(MagickWand *, const size_t, const size_t, const double, const double)
     * }
     */
    public static int MagickLiquidRescaleImage(MemorySegment x0, long x1, long x2, double x3, double x4) {
        var mh$ = MagickLiquidRescaleImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickLiquidRescaleImage", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickLocalContrastImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickLocalContrastImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickLocalContrastImage(MagickWand *, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickLocalContrastImage$descriptor() {
        return MagickLocalContrastImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickLocalContrastImage(MagickWand *, const double, const double)
     * }
     */
    public static MethodHandle MagickLocalContrastImage$handle() {
        return MagickLocalContrastImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickLocalContrastImage(MagickWand *, const double, const double)
     * }
     */
    public static MemorySegment MagickLocalContrastImage$address() {
        return MagickLocalContrastImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickLocalContrastImage(MagickWand *, const double, const double)
     * }
     */
    public static int MagickLocalContrastImage(MemorySegment x0, double x1, double x2) {
        var mh$ = MagickLocalContrastImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickLocalContrastImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickMagnifyImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickMagnifyImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickMagnifyImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickMagnifyImage$descriptor() {
        return MagickMagnifyImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickMagnifyImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickMagnifyImage$handle() {
        return MagickMagnifyImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickMagnifyImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickMagnifyImage$address() {
        return MagickMagnifyImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickMagnifyImage(MagickWand *)
     * }
     */
    public static int MagickMagnifyImage(MemorySegment x0) {
        var mh$ = MagickMagnifyImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickMagnifyImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickMeanShiftImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickMeanShiftImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickMeanShiftImage(MagickWand *, const size_t, const size_t, const double)
     * }
     */
    public static FunctionDescriptor MagickMeanShiftImage$descriptor() {
        return MagickMeanShiftImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickMeanShiftImage(MagickWand *, const size_t, const size_t, const double)
     * }
     */
    public static MethodHandle MagickMeanShiftImage$handle() {
        return MagickMeanShiftImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickMeanShiftImage(MagickWand *, const size_t, const size_t, const double)
     * }
     */
    public static MemorySegment MagickMeanShiftImage$address() {
        return MagickMeanShiftImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickMeanShiftImage(MagickWand *, const size_t, const size_t, const double)
     * }
     */
    public static int MagickMeanShiftImage(MemorySegment x0, long x1, long x2, double x3) {
        var mh$ = MagickMeanShiftImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickMeanShiftImage", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickMinifyImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickMinifyImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickMinifyImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickMinifyImage$descriptor() {
        return MagickMinifyImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickMinifyImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickMinifyImage$handle() {
        return MagickMinifyImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickMinifyImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickMinifyImage$address() {
        return MagickMinifyImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickMinifyImage(MagickWand *)
     * }
     */
    public static int MagickMinifyImage(MemorySegment x0) {
        var mh$ = MagickMinifyImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickMinifyImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickModulateImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickModulateImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickModulateImage(MagickWand *, const double, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickModulateImage$descriptor() {
        return MagickModulateImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickModulateImage(MagickWand *, const double, const double, const double)
     * }
     */
    public static MethodHandle MagickModulateImage$handle() {
        return MagickModulateImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickModulateImage(MagickWand *, const double, const double, const double)
     * }
     */
    public static MemorySegment MagickModulateImage$address() {
        return MagickModulateImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickModulateImage(MagickWand *, const double, const double, const double)
     * }
     */
    public static int MagickModulateImage(MemorySegment x0, double x1, double x2, double x3) {
        var mh$ = MagickModulateImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickModulateImage", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickMorphologyImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT,
            MagickWand_h.C_LONG,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickMorphologyImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickMorphologyImage(MagickWand *, const MorphologyMethod, const ssize_t, const KernelInfo *)
     * }
     */
    public static FunctionDescriptor MagickMorphologyImage$descriptor() {
        return MagickMorphologyImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickMorphologyImage(MagickWand *, const MorphologyMethod, const ssize_t, const KernelInfo *)
     * }
     */
    public static MethodHandle MagickMorphologyImage$handle() {
        return MagickMorphologyImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickMorphologyImage(MagickWand *, const MorphologyMethod, const ssize_t, const KernelInfo *)
     * }
     */
    public static MemorySegment MagickMorphologyImage$address() {
        return MagickMorphologyImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickMorphologyImage(MagickWand *, const MorphologyMethod, const ssize_t, const KernelInfo *)
     * }
     */
    public static int MagickMorphologyImage(MemorySegment x0, int x1, long x2, MemorySegment x3) {
        var mh$ = MagickMorphologyImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickMorphologyImage", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickMotionBlurImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickMotionBlurImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickMotionBlurImage(MagickWand *, const double, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickMotionBlurImage$descriptor() {
        return MagickMotionBlurImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickMotionBlurImage(MagickWand *, const double, const double, const double)
     * }
     */
    public static MethodHandle MagickMotionBlurImage$handle() {
        return MagickMotionBlurImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickMotionBlurImage(MagickWand *, const double, const double, const double)
     * }
     */
    public static MemorySegment MagickMotionBlurImage$address() {
        return MagickMotionBlurImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickMotionBlurImage(MagickWand *, const double, const double, const double)
     * }
     */
    public static int MagickMotionBlurImage(MemorySegment x0, double x1, double x2, double x3) {
        var mh$ = MagickMotionBlurImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickMotionBlurImage", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickNegateImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickNegateImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickNegateImage(MagickWand *, const MagickBooleanType)
     * }
     */
    public static FunctionDescriptor MagickNegateImage$descriptor() {
        return MagickNegateImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickNegateImage(MagickWand *, const MagickBooleanType)
     * }
     */
    public static MethodHandle MagickNegateImage$handle() {
        return MagickNegateImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickNegateImage(MagickWand *, const MagickBooleanType)
     * }
     */
    public static MemorySegment MagickNegateImage$address() {
        return MagickNegateImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickNegateImage(MagickWand *, const MagickBooleanType)
     * }
     */
    public static int MagickNegateImage(MemorySegment x0, int x1) {
        var mh$ = MagickNegateImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickNegateImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickNewImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickNewImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickNewImage(MagickWand *, const size_t, const size_t, const PixelWand *)
     * }
     */
    public static FunctionDescriptor MagickNewImage$descriptor() {
        return MagickNewImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickNewImage(MagickWand *, const size_t, const size_t, const PixelWand *)
     * }
     */
    public static MethodHandle MagickNewImage$handle() {
        return MagickNewImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickNewImage(MagickWand *, const size_t, const size_t, const PixelWand *)
     * }
     */
    public static MemorySegment MagickNewImage$address() {
        return MagickNewImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickNewImage(MagickWand *, const size_t, const size_t, const PixelWand *)
     * }
     */
    public static int MagickNewImage(MemorySegment x0, long x1, long x2, MemorySegment x3) {
        var mh$ = MagickNewImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickNewImage", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickNextImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickNextImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickNextImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickNextImage$descriptor() {
        return MagickNextImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickNextImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickNextImage$handle() {
        return MagickNextImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickNextImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickNextImage$address() {
        return MagickNextImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickNextImage(MagickWand *)
     * }
     */
    public static int MagickNextImage(MemorySegment x0) {
        var mh$ = MagickNextImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickNextImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickNormalizeImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickNormalizeImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickNormalizeImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickNormalizeImage$descriptor() {
        return MagickNormalizeImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickNormalizeImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickNormalizeImage$handle() {
        return MagickNormalizeImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickNormalizeImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickNormalizeImage$address() {
        return MagickNormalizeImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickNormalizeImage(MagickWand *)
     * }
     */
    public static int MagickNormalizeImage(MemorySegment x0) {
        var mh$ = MagickNormalizeImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickNormalizeImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickOilPaintImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickOilPaintImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickOilPaintImage(MagickWand *, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickOilPaintImage$descriptor() {
        return MagickOilPaintImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickOilPaintImage(MagickWand *, const double, const double)
     * }
     */
    public static MethodHandle MagickOilPaintImage$handle() {
        return MagickOilPaintImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickOilPaintImage(MagickWand *, const double, const double)
     * }
     */
    public static MemorySegment MagickOilPaintImage$address() {
        return MagickOilPaintImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickOilPaintImage(MagickWand *, const double, const double)
     * }
     */
    public static int MagickOilPaintImage(MemorySegment x0, double x1, double x2) {
        var mh$ = MagickOilPaintImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickOilPaintImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickOpaquePaintImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickOpaquePaintImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickOpaquePaintImage(MagickWand *, const PixelWand *, const PixelWand *, const double, const MagickBooleanType)
     * }
     */
    public static FunctionDescriptor MagickOpaquePaintImage$descriptor() {
        return MagickOpaquePaintImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickOpaquePaintImage(MagickWand *, const PixelWand *, const PixelWand *, const double, const MagickBooleanType)
     * }
     */
    public static MethodHandle MagickOpaquePaintImage$handle() {
        return MagickOpaquePaintImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickOpaquePaintImage(MagickWand *, const PixelWand *, const PixelWand *, const double, const MagickBooleanType)
     * }
     */
    public static MemorySegment MagickOpaquePaintImage$address() {
        return MagickOpaquePaintImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickOpaquePaintImage(MagickWand *, const PixelWand *, const PixelWand *, const double, const MagickBooleanType)
     * }
     */
    public static int MagickOpaquePaintImage(MemorySegment x0, MemorySegment x1, MemorySegment x2, double x3, int x4) {
        var mh$ = MagickOpaquePaintImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickOpaquePaintImage", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickOptimizeImageTransparency {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickOptimizeImageTransparency");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickOptimizeImageTransparency(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickOptimizeImageTransparency$descriptor() {
        return MagickOptimizeImageTransparency.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickOptimizeImageTransparency(MagickWand *)
     * }
     */
    public static MethodHandle MagickOptimizeImageTransparency$handle() {
        return MagickOptimizeImageTransparency.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickOptimizeImageTransparency(MagickWand *)
     * }
     */
    public static MemorySegment MagickOptimizeImageTransparency$address() {
        return MagickOptimizeImageTransparency.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickOptimizeImageTransparency(MagickWand *)
     * }
     */
    public static int MagickOptimizeImageTransparency(MemorySegment x0) {
        var mh$ = MagickOptimizeImageTransparency.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickOptimizeImageTransparency", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickOrderedDitherImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickOrderedDitherImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickOrderedDitherImage(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickOrderedDitherImage$descriptor() {
        return MagickOrderedDitherImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickOrderedDitherImage(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickOrderedDitherImage$handle() {
        return MagickOrderedDitherImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickOrderedDitherImage(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickOrderedDitherImage$address() {
        return MagickOrderedDitherImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickOrderedDitherImage(MagickWand *, const char *)
     * }
     */
    public static int MagickOrderedDitherImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickOrderedDitherImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickOrderedDitherImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickPolynomialImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickPolynomialImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickPolynomialImage(MagickWand *, const size_t, const double *)
     * }
     */
    public static FunctionDescriptor MagickPolynomialImage$descriptor() {
        return MagickPolynomialImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickPolynomialImage(MagickWand *, const size_t, const double *)
     * }
     */
    public static MethodHandle MagickPolynomialImage$handle() {
        return MagickPolynomialImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickPolynomialImage(MagickWand *, const size_t, const double *)
     * }
     */
    public static MemorySegment MagickPolynomialImage$address() {
        return MagickPolynomialImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickPolynomialImage(MagickWand *, const size_t, const double *)
     * }
     */
    public static int MagickPolynomialImage(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = MagickPolynomialImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickPolynomialImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickTransparentPaintImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickTransparentPaintImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickTransparentPaintImage(MagickWand *, const PixelWand *, const double, const double, const MagickBooleanType invert)
     * }
     */
    public static FunctionDescriptor MagickTransparentPaintImage$descriptor() {
        return MagickTransparentPaintImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickTransparentPaintImage(MagickWand *, const PixelWand *, const double, const double, const MagickBooleanType invert)
     * }
     */
    public static MethodHandle MagickTransparentPaintImage$handle() {
        return MagickTransparentPaintImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickTransparentPaintImage(MagickWand *, const PixelWand *, const double, const double, const MagickBooleanType invert)
     * }
     */
    public static MemorySegment MagickTransparentPaintImage$address() {
        return MagickTransparentPaintImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickTransparentPaintImage(MagickWand *, const PixelWand *, const double, const double, const MagickBooleanType invert)
     * }
     */
    public static int MagickTransparentPaintImage(MemorySegment x0, MemorySegment x1, double x2, double x3, int invert) {
        var mh$ = MagickTransparentPaintImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickTransparentPaintImage", x0, x1, x2, x3, invert);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, invert);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickPingImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickPingImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickPingImage(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickPingImage$descriptor() {
        return MagickPingImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickPingImage(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickPingImage$handle() {
        return MagickPingImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickPingImage(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickPingImage$address() {
        return MagickPingImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickPingImage(MagickWand *, const char *)
     * }
     */
    public static int MagickPingImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickPingImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickPingImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickPingImageBlob {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickPingImageBlob");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickPingImageBlob(MagickWand *, const void *, const size_t)
     * }
     */
    public static FunctionDescriptor MagickPingImageBlob$descriptor() {
        return MagickPingImageBlob.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickPingImageBlob(MagickWand *, const void *, const size_t)
     * }
     */
    public static MethodHandle MagickPingImageBlob$handle() {
        return MagickPingImageBlob.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickPingImageBlob(MagickWand *, const void *, const size_t)
     * }
     */
    public static MemorySegment MagickPingImageBlob$address() {
        return MagickPingImageBlob.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickPingImageBlob(MagickWand *, const void *, const size_t)
     * }
     */
    public static int MagickPingImageBlob(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = MagickPingImageBlob.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickPingImageBlob", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickPingImageFile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickPingImageFile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickPingImageFile(MagickWand *, FILE *)
     * }
     */
    public static FunctionDescriptor MagickPingImageFile$descriptor() {
        return MagickPingImageFile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickPingImageFile(MagickWand *, FILE *)
     * }
     */
    public static MethodHandle MagickPingImageFile$handle() {
        return MagickPingImageFile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickPingImageFile(MagickWand *, FILE *)
     * }
     */
    public static MemorySegment MagickPingImageFile$address() {
        return MagickPingImageFile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickPingImageFile(MagickWand *, FILE *)
     * }
     */
    public static int MagickPingImageFile(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickPingImageFile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickPingImageFile", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickPolaroidImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickPolaroidImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickPolaroidImage(MagickWand *, const DrawingWand *, const char *, const double, const PixelInterpolateMethod)
     * }
     */
    public static FunctionDescriptor MagickPolaroidImage$descriptor() {
        return MagickPolaroidImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickPolaroidImage(MagickWand *, const DrawingWand *, const char *, const double, const PixelInterpolateMethod)
     * }
     */
    public static MethodHandle MagickPolaroidImage$handle() {
        return MagickPolaroidImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickPolaroidImage(MagickWand *, const DrawingWand *, const char *, const double, const PixelInterpolateMethod)
     * }
     */
    public static MemorySegment MagickPolaroidImage$address() {
        return MagickPolaroidImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickPolaroidImage(MagickWand *, const DrawingWand *, const char *, const double, const PixelInterpolateMethod)
     * }
     */
    public static int MagickPolaroidImage(MemorySegment x0, MemorySegment x1, MemorySegment x2, double x3, int x4) {
        var mh$ = MagickPolaroidImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickPolaroidImage", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickPosterizeImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickPosterizeImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickPosterizeImage(MagickWand *, const size_t, const DitherMethod)
     * }
     */
    public static FunctionDescriptor MagickPosterizeImage$descriptor() {
        return MagickPosterizeImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickPosterizeImage(MagickWand *, const size_t, const DitherMethod)
     * }
     */
    public static MethodHandle MagickPosterizeImage$handle() {
        return MagickPosterizeImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickPosterizeImage(MagickWand *, const size_t, const DitherMethod)
     * }
     */
    public static MemorySegment MagickPosterizeImage$address() {
        return MagickPosterizeImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickPosterizeImage(MagickWand *, const size_t, const DitherMethod)
     * }
     */
    public static int MagickPosterizeImage(MemorySegment x0, long x1, int x2) {
        var mh$ = MagickPosterizeImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickPosterizeImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickPreviousImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickPreviousImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickPreviousImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickPreviousImage$descriptor() {
        return MagickPreviousImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickPreviousImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickPreviousImage$handle() {
        return MagickPreviousImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickPreviousImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickPreviousImage$address() {
        return MagickPreviousImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickPreviousImage(MagickWand *)
     * }
     */
    public static int MagickPreviousImage(MemorySegment x0) {
        var mh$ = MagickPreviousImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickPreviousImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickQuantizeImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG,
            MagickWand_h.C_INT,
            MagickWand_h.C_LONG,
            MagickWand_h.C_INT,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickQuantizeImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickQuantizeImage(MagickWand *, const size_t, const ColorspaceType, const size_t, const DitherMethod, const MagickBooleanType)
     * }
     */
    public static FunctionDescriptor MagickQuantizeImage$descriptor() {
        return MagickQuantizeImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickQuantizeImage(MagickWand *, const size_t, const ColorspaceType, const size_t, const DitherMethod, const MagickBooleanType)
     * }
     */
    public static MethodHandle MagickQuantizeImage$handle() {
        return MagickQuantizeImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickQuantizeImage(MagickWand *, const size_t, const ColorspaceType, const size_t, const DitherMethod, const MagickBooleanType)
     * }
     */
    public static MemorySegment MagickQuantizeImage$address() {
        return MagickQuantizeImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickQuantizeImage(MagickWand *, const size_t, const ColorspaceType, const size_t, const DitherMethod, const MagickBooleanType)
     * }
     */
    public static int MagickQuantizeImage(MemorySegment x0, long x1, int x2, long x3, int x4, int x5) {
        var mh$ = MagickQuantizeImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickQuantizeImage", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickQuantizeImages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG,
            MagickWand_h.C_INT,
            MagickWand_h.C_LONG,
            MagickWand_h.C_INT,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickQuantizeImages");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickQuantizeImages(MagickWand *, const size_t, const ColorspaceType, const size_t, const DitherMethod, const MagickBooleanType)
     * }
     */
    public static FunctionDescriptor MagickQuantizeImages$descriptor() {
        return MagickQuantizeImages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickQuantizeImages(MagickWand *, const size_t, const ColorspaceType, const size_t, const DitherMethod, const MagickBooleanType)
     * }
     */
    public static MethodHandle MagickQuantizeImages$handle() {
        return MagickQuantizeImages.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickQuantizeImages(MagickWand *, const size_t, const ColorspaceType, const size_t, const DitherMethod, const MagickBooleanType)
     * }
     */
    public static MemorySegment MagickQuantizeImages$address() {
        return MagickQuantizeImages.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickQuantizeImages(MagickWand *, const size_t, const ColorspaceType, const size_t, const DitherMethod, const MagickBooleanType)
     * }
     */
    public static int MagickQuantizeImages(MemorySegment x0, long x1, int x2, long x3, int x4, int x5) {
        var mh$ = MagickQuantizeImages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickQuantizeImages", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickRangeThresholdImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickRangeThresholdImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickRangeThresholdImage(MagickWand *, const double, const double, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickRangeThresholdImage$descriptor() {
        return MagickRangeThresholdImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickRangeThresholdImage(MagickWand *, const double, const double, const double, const double)
     * }
     */
    public static MethodHandle MagickRangeThresholdImage$handle() {
        return MagickRangeThresholdImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickRangeThresholdImage(MagickWand *, const double, const double, const double, const double)
     * }
     */
    public static MemorySegment MagickRangeThresholdImage$address() {
        return MagickRangeThresholdImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickRangeThresholdImage(MagickWand *, const double, const double, const double, const double)
     * }
     */
    public static int MagickRangeThresholdImage(MemorySegment x0, double x1, double x2, double x3, double x4) {
        var mh$ = MagickRangeThresholdImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickRangeThresholdImage", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickRotationalBlurImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickRotationalBlurImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickRotationalBlurImage(MagickWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickRotationalBlurImage$descriptor() {
        return MagickRotationalBlurImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickRotationalBlurImage(MagickWand *, const double)
     * }
     */
    public static MethodHandle MagickRotationalBlurImage$handle() {
        return MagickRotationalBlurImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickRotationalBlurImage(MagickWand *, const double)
     * }
     */
    public static MemorySegment MagickRotationalBlurImage$address() {
        return MagickRotationalBlurImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickRotationalBlurImage(MagickWand *, const double)
     * }
     */
    public static int MagickRotationalBlurImage(MemorySegment x0, double x1) {
        var mh$ = MagickRotationalBlurImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickRotationalBlurImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickRaiseImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickRaiseImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickRaiseImage(MagickWand *, const size_t, const size_t, const ssize_t, const ssize_t, const MagickBooleanType)
     * }
     */
    public static FunctionDescriptor MagickRaiseImage$descriptor() {
        return MagickRaiseImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickRaiseImage(MagickWand *, const size_t, const size_t, const ssize_t, const ssize_t, const MagickBooleanType)
     * }
     */
    public static MethodHandle MagickRaiseImage$handle() {
        return MagickRaiseImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickRaiseImage(MagickWand *, const size_t, const size_t, const ssize_t, const ssize_t, const MagickBooleanType)
     * }
     */
    public static MemorySegment MagickRaiseImage$address() {
        return MagickRaiseImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickRaiseImage(MagickWand *, const size_t, const size_t, const ssize_t, const ssize_t, const MagickBooleanType)
     * }
     */
    public static int MagickRaiseImage(MemorySegment x0, long x1, long x2, long x3, long x4, int x5) {
        var mh$ = MagickRaiseImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickRaiseImage", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickRandomThresholdImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickRandomThresholdImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickRandomThresholdImage(MagickWand *, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickRandomThresholdImage$descriptor() {
        return MagickRandomThresholdImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickRandomThresholdImage(MagickWand *, const double, const double)
     * }
     */
    public static MethodHandle MagickRandomThresholdImage$handle() {
        return MagickRandomThresholdImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickRandomThresholdImage(MagickWand *, const double, const double)
     * }
     */
    public static MemorySegment MagickRandomThresholdImage$address() {
        return MagickRandomThresholdImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickRandomThresholdImage(MagickWand *, const double, const double)
     * }
     */
    public static int MagickRandomThresholdImage(MemorySegment x0, double x1, double x2) {
        var mh$ = MagickRandomThresholdImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickRandomThresholdImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickReadImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickReadImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickReadImage(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickReadImage$descriptor() {
        return MagickReadImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickReadImage(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickReadImage$handle() {
        return MagickReadImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickReadImage(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickReadImage$address() {
        return MagickReadImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickReadImage(MagickWand *, const char *)
     * }
     */
    public static int MagickReadImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickReadImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickReadImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickReadImageBlob {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickReadImageBlob");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickReadImageBlob(MagickWand *, const void *, const size_t)
     * }
     */
    public static FunctionDescriptor MagickReadImageBlob$descriptor() {
        return MagickReadImageBlob.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickReadImageBlob(MagickWand *, const void *, const size_t)
     * }
     */
    public static MethodHandle MagickReadImageBlob$handle() {
        return MagickReadImageBlob.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickReadImageBlob(MagickWand *, const void *, const size_t)
     * }
     */
    public static MemorySegment MagickReadImageBlob$address() {
        return MagickReadImageBlob.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickReadImageBlob(MagickWand *, const void *, const size_t)
     * }
     */
    public static int MagickReadImageBlob(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = MagickReadImageBlob.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickReadImageBlob", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickReadImageFile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickReadImageFile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickReadImageFile(MagickWand *, FILE *)
     * }
     */
    public static FunctionDescriptor MagickReadImageFile$descriptor() {
        return MagickReadImageFile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickReadImageFile(MagickWand *, FILE *)
     * }
     */
    public static MethodHandle MagickReadImageFile$handle() {
        return MagickReadImageFile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickReadImageFile(MagickWand *, FILE *)
     * }
     */
    public static MemorySegment MagickReadImageFile$address() {
        return MagickReadImageFile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickReadImageFile(MagickWand *, FILE *)
     * }
     */
    public static int MagickReadImageFile(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickReadImageFile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickReadImageFile", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickRemapImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickRemapImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickRemapImage(MagickWand *, const MagickWand *, const DitherMethod)
     * }
     */
    public static FunctionDescriptor MagickRemapImage$descriptor() {
        return MagickRemapImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickRemapImage(MagickWand *, const MagickWand *, const DitherMethod)
     * }
     */
    public static MethodHandle MagickRemapImage$handle() {
        return MagickRemapImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickRemapImage(MagickWand *, const MagickWand *, const DitherMethod)
     * }
     */
    public static MemorySegment MagickRemapImage$address() {
        return MagickRemapImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickRemapImage(MagickWand *, const MagickWand *, const DitherMethod)
     * }
     */
    public static int MagickRemapImage(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = MagickRemapImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickRemapImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickRemoveImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickRemoveImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickRemoveImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickRemoveImage$descriptor() {
        return MagickRemoveImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickRemoveImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickRemoveImage$handle() {
        return MagickRemoveImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickRemoveImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickRemoveImage$address() {
        return MagickRemoveImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickRemoveImage(MagickWand *)
     * }
     */
    public static int MagickRemoveImage(MemorySegment x0) {
        var mh$ = MagickRemoveImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickRemoveImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickResampleImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickResampleImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickResampleImage(MagickWand *, const double, const double, const FilterType)
     * }
     */
    public static FunctionDescriptor MagickResampleImage$descriptor() {
        return MagickResampleImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickResampleImage(MagickWand *, const double, const double, const FilterType)
     * }
     */
    public static MethodHandle MagickResampleImage$handle() {
        return MagickResampleImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickResampleImage(MagickWand *, const double, const double, const FilterType)
     * }
     */
    public static MemorySegment MagickResampleImage$address() {
        return MagickResampleImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickResampleImage(MagickWand *, const double, const double, const FilterType)
     * }
     */
    public static int MagickResampleImage(MemorySegment x0, double x1, double x2, int x3) {
        var mh$ = MagickResampleImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickResampleImage", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickResetImagePage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickResetImagePage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickResetImagePage(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickResetImagePage$descriptor() {
        return MagickResetImagePage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickResetImagePage(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickResetImagePage$handle() {
        return MagickResetImagePage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickResetImagePage(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickResetImagePage$address() {
        return MagickResetImagePage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickResetImagePage(MagickWand *, const char *)
     * }
     */
    public static int MagickResetImagePage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickResetImagePage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickResetImagePage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickResizeImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickResizeImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickResizeImage(MagickWand *, const size_t, const size_t, const FilterType)
     * }
     */
    public static FunctionDescriptor MagickResizeImage$descriptor() {
        return MagickResizeImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickResizeImage(MagickWand *, const size_t, const size_t, const FilterType)
     * }
     */
    public static MethodHandle MagickResizeImage$handle() {
        return MagickResizeImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickResizeImage(MagickWand *, const size_t, const size_t, const FilterType)
     * }
     */
    public static MemorySegment MagickResizeImage$address() {
        return MagickResizeImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickResizeImage(MagickWand *, const size_t, const size_t, const FilterType)
     * }
     */
    public static int MagickResizeImage(MemorySegment x0, long x1, long x2, int x3) {
        var mh$ = MagickResizeImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickResizeImage", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickRollImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickRollImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickRollImage(MagickWand *, const ssize_t, const ssize_t)
     * }
     */
    public static FunctionDescriptor MagickRollImage$descriptor() {
        return MagickRollImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickRollImage(MagickWand *, const ssize_t, const ssize_t)
     * }
     */
    public static MethodHandle MagickRollImage$handle() {
        return MagickRollImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickRollImage(MagickWand *, const ssize_t, const ssize_t)
     * }
     */
    public static MemorySegment MagickRollImage$address() {
        return MagickRollImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickRollImage(MagickWand *, const ssize_t, const ssize_t)
     * }
     */
    public static int MagickRollImage(MemorySegment x0, long x1, long x2) {
        var mh$ = MagickRollImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickRollImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickRotateImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickRotateImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickRotateImage(MagickWand *, const PixelWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickRotateImage$descriptor() {
        return MagickRotateImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickRotateImage(MagickWand *, const PixelWand *, const double)
     * }
     */
    public static MethodHandle MagickRotateImage$handle() {
        return MagickRotateImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickRotateImage(MagickWand *, const PixelWand *, const double)
     * }
     */
    public static MemorySegment MagickRotateImage$address() {
        return MagickRotateImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickRotateImage(MagickWand *, const PixelWand *, const double)
     * }
     */
    public static int MagickRotateImage(MemorySegment x0, MemorySegment x1, double x2) {
        var mh$ = MagickRotateImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickRotateImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSampleImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSampleImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSampleImage(MagickWand *, const size_t, const size_t)
     * }
     */
    public static FunctionDescriptor MagickSampleImage$descriptor() {
        return MagickSampleImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSampleImage(MagickWand *, const size_t, const size_t)
     * }
     */
    public static MethodHandle MagickSampleImage$handle() {
        return MagickSampleImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSampleImage(MagickWand *, const size_t, const size_t)
     * }
     */
    public static MemorySegment MagickSampleImage$address() {
        return MagickSampleImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSampleImage(MagickWand *, const size_t, const size_t)
     * }
     */
    public static int MagickSampleImage(MemorySegment x0, long x1, long x2) {
        var mh$ = MagickSampleImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSampleImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickScaleImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickScaleImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickScaleImage(MagickWand *, const size_t, const size_t)
     * }
     */
    public static FunctionDescriptor MagickScaleImage$descriptor() {
        return MagickScaleImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickScaleImage(MagickWand *, const size_t, const size_t)
     * }
     */
    public static MethodHandle MagickScaleImage$handle() {
        return MagickScaleImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickScaleImage(MagickWand *, const size_t, const size_t)
     * }
     */
    public static MemorySegment MagickScaleImage$address() {
        return MagickScaleImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickScaleImage(MagickWand *, const size_t, const size_t)
     * }
     */
    public static int MagickScaleImage(MemorySegment x0, long x1, long x2) {
        var mh$ = MagickScaleImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickScaleImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSegmentImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT,
            MagickWand_h.C_INT,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSegmentImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSegmentImage(MagickWand *, const ColorspaceType, const MagickBooleanType, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickSegmentImage$descriptor() {
        return MagickSegmentImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSegmentImage(MagickWand *, const ColorspaceType, const MagickBooleanType, const double, const double)
     * }
     */
    public static MethodHandle MagickSegmentImage$handle() {
        return MagickSegmentImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSegmentImage(MagickWand *, const ColorspaceType, const MagickBooleanType, const double, const double)
     * }
     */
    public static MemorySegment MagickSegmentImage$address() {
        return MagickSegmentImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSegmentImage(MagickWand *, const ColorspaceType, const MagickBooleanType, const double, const double)
     * }
     */
    public static int MagickSegmentImage(MemorySegment x0, int x1, int x2, double x3, double x4) {
        var mh$ = MagickSegmentImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSegmentImage", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSelectiveBlurImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSelectiveBlurImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSelectiveBlurImage(MagickWand *, const double, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickSelectiveBlurImage$descriptor() {
        return MagickSelectiveBlurImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSelectiveBlurImage(MagickWand *, const double, const double, const double)
     * }
     */
    public static MethodHandle MagickSelectiveBlurImage$handle() {
        return MagickSelectiveBlurImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSelectiveBlurImage(MagickWand *, const double, const double, const double)
     * }
     */
    public static MemorySegment MagickSelectiveBlurImage$address() {
        return MagickSelectiveBlurImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSelectiveBlurImage(MagickWand *, const double, const double, const double)
     * }
     */
    public static int MagickSelectiveBlurImage(MemorySegment x0, double x1, double x2, double x3) {
        var mh$ = MagickSelectiveBlurImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSelectiveBlurImage", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSeparateImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSeparateImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSeparateImage(MagickWand *, const ChannelType)
     * }
     */
    public static FunctionDescriptor MagickSeparateImage$descriptor() {
        return MagickSeparateImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSeparateImage(MagickWand *, const ChannelType)
     * }
     */
    public static MethodHandle MagickSeparateImage$handle() {
        return MagickSeparateImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSeparateImage(MagickWand *, const ChannelType)
     * }
     */
    public static MemorySegment MagickSeparateImage$address() {
        return MagickSeparateImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSeparateImage(MagickWand *, const ChannelType)
     * }
     */
    public static int MagickSeparateImage(MemorySegment x0, int x1) {
        var mh$ = MagickSeparateImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSeparateImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSepiaToneImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSepiaToneImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSepiaToneImage(MagickWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickSepiaToneImage$descriptor() {
        return MagickSepiaToneImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSepiaToneImage(MagickWand *, const double)
     * }
     */
    public static MethodHandle MagickSepiaToneImage$handle() {
        return MagickSepiaToneImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSepiaToneImage(MagickWand *, const double)
     * }
     */
    public static MemorySegment MagickSepiaToneImage$address() {
        return MagickSepiaToneImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSepiaToneImage(MagickWand *, const double)
     * }
     */
    public static int MagickSepiaToneImage(MemorySegment x0, double x1) {
        var mh$ = MagickSepiaToneImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSepiaToneImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImage(MagickWand *, const MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickSetImage$descriptor() {
        return MagickSetImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImage(MagickWand *, const MagickWand *)
     * }
     */
    public static MethodHandle MagickSetImage$handle() {
        return MagickSetImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImage(MagickWand *, const MagickWand *)
     * }
     */
    public static MemorySegment MagickSetImage$address() {
        return MagickSetImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImage(MagickWand *, const MagickWand *)
     * }
     */
    public static int MagickSetImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickSetImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageAlpha {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetImageAlpha");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageAlpha(MagickWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickSetImageAlpha$descriptor() {
        return MagickSetImageAlpha.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageAlpha(MagickWand *, const double)
     * }
     */
    public static MethodHandle MagickSetImageAlpha$handle() {
        return MagickSetImageAlpha.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageAlpha(MagickWand *, const double)
     * }
     */
    public static MemorySegment MagickSetImageAlpha$address() {
        return MagickSetImageAlpha.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageAlpha(MagickWand *, const double)
     * }
     */
    public static int MagickSetImageAlpha(MemorySegment x0, double x1) {
        var mh$ = MagickSetImageAlpha.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageAlpha", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageAlphaChannel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetImageAlphaChannel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageAlphaChannel(MagickWand *, const AlphaChannelOption)
     * }
     */
    public static FunctionDescriptor MagickSetImageAlphaChannel$descriptor() {
        return MagickSetImageAlphaChannel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageAlphaChannel(MagickWand *, const AlphaChannelOption)
     * }
     */
    public static MethodHandle MagickSetImageAlphaChannel$handle() {
        return MagickSetImageAlphaChannel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageAlphaChannel(MagickWand *, const AlphaChannelOption)
     * }
     */
    public static MemorySegment MagickSetImageAlphaChannel$address() {
        return MagickSetImageAlphaChannel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageAlphaChannel(MagickWand *, const AlphaChannelOption)
     * }
     */
    public static int MagickSetImageAlphaChannel(MemorySegment x0, int x1) {
        var mh$ = MagickSetImageAlphaChannel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageAlphaChannel", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageBackgroundColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetImageBackgroundColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageBackgroundColor(MagickWand *, const PixelWand *)
     * }
     */
    public static FunctionDescriptor MagickSetImageBackgroundColor$descriptor() {
        return MagickSetImageBackgroundColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageBackgroundColor(MagickWand *, const PixelWand *)
     * }
     */
    public static MethodHandle MagickSetImageBackgroundColor$handle() {
        return MagickSetImageBackgroundColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageBackgroundColor(MagickWand *, const PixelWand *)
     * }
     */
    public static MemorySegment MagickSetImageBackgroundColor$address() {
        return MagickSetImageBackgroundColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageBackgroundColor(MagickWand *, const PixelWand *)
     * }
     */
    public static int MagickSetImageBackgroundColor(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickSetImageBackgroundColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageBackgroundColor", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageBluePrimary {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetImageBluePrimary");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageBluePrimary(MagickWand *, const double, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickSetImageBluePrimary$descriptor() {
        return MagickSetImageBluePrimary.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageBluePrimary(MagickWand *, const double, const double, const double)
     * }
     */
    public static MethodHandle MagickSetImageBluePrimary$handle() {
        return MagickSetImageBluePrimary.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageBluePrimary(MagickWand *, const double, const double, const double)
     * }
     */
    public static MemorySegment MagickSetImageBluePrimary$address() {
        return MagickSetImageBluePrimary.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageBluePrimary(MagickWand *, const double, const double, const double)
     * }
     */
    public static int MagickSetImageBluePrimary(MemorySegment x0, double x1, double x2, double x3) {
        var mh$ = MagickSetImageBluePrimary.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageBluePrimary", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageBorderColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetImageBorderColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageBorderColor(MagickWand *, const PixelWand *)
     * }
     */
    public static FunctionDescriptor MagickSetImageBorderColor$descriptor() {
        return MagickSetImageBorderColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageBorderColor(MagickWand *, const PixelWand *)
     * }
     */
    public static MethodHandle MagickSetImageBorderColor$handle() {
        return MagickSetImageBorderColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageBorderColor(MagickWand *, const PixelWand *)
     * }
     */
    public static MemorySegment MagickSetImageBorderColor$address() {
        return MagickSetImageBorderColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageBorderColor(MagickWand *, const PixelWand *)
     * }
     */
    public static int MagickSetImageBorderColor(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickSetImageBorderColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageBorderColor", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetImageColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageColor(MagickWand *, const PixelWand *)
     * }
     */
    public static FunctionDescriptor MagickSetImageColor$descriptor() {
        return MagickSetImageColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageColor(MagickWand *, const PixelWand *)
     * }
     */
    public static MethodHandle MagickSetImageColor$handle() {
        return MagickSetImageColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageColor(MagickWand *, const PixelWand *)
     * }
     */
    public static MemorySegment MagickSetImageColor$address() {
        return MagickSetImageColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageColor(MagickWand *, const PixelWand *)
     * }
     */
    public static int MagickSetImageColor(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickSetImageColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageColor", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageColormapColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetImageColormapColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageColormapColor(MagickWand *, const size_t, const PixelWand *)
     * }
     */
    public static FunctionDescriptor MagickSetImageColormapColor$descriptor() {
        return MagickSetImageColormapColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageColormapColor(MagickWand *, const size_t, const PixelWand *)
     * }
     */
    public static MethodHandle MagickSetImageColormapColor$handle() {
        return MagickSetImageColormapColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageColormapColor(MagickWand *, const size_t, const PixelWand *)
     * }
     */
    public static MemorySegment MagickSetImageColormapColor$address() {
        return MagickSetImageColormapColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageColormapColor(MagickWand *, const size_t, const PixelWand *)
     * }
     */
    public static int MagickSetImageColormapColor(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = MagickSetImageColormapColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageColormapColor", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageColorspace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetImageColorspace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageColorspace(MagickWand *, const ColorspaceType)
     * }
     */
    public static FunctionDescriptor MagickSetImageColorspace$descriptor() {
        return MagickSetImageColorspace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageColorspace(MagickWand *, const ColorspaceType)
     * }
     */
    public static MethodHandle MagickSetImageColorspace$handle() {
        return MagickSetImageColorspace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageColorspace(MagickWand *, const ColorspaceType)
     * }
     */
    public static MemorySegment MagickSetImageColorspace$address() {
        return MagickSetImageColorspace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageColorspace(MagickWand *, const ColorspaceType)
     * }
     */
    public static int MagickSetImageColorspace(MemorySegment x0, int x1) {
        var mh$ = MagickSetImageColorspace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageColorspace", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageCompose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetImageCompose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageCompose(MagickWand *, const CompositeOperator)
     * }
     */
    public static FunctionDescriptor MagickSetImageCompose$descriptor() {
        return MagickSetImageCompose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageCompose(MagickWand *, const CompositeOperator)
     * }
     */
    public static MethodHandle MagickSetImageCompose$handle() {
        return MagickSetImageCompose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageCompose(MagickWand *, const CompositeOperator)
     * }
     */
    public static MemorySegment MagickSetImageCompose$address() {
        return MagickSetImageCompose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageCompose(MagickWand *, const CompositeOperator)
     * }
     */
    public static int MagickSetImageCompose(MemorySegment x0, int x1) {
        var mh$ = MagickSetImageCompose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageCompose", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageCompression {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetImageCompression");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageCompression(MagickWand *, const CompressionType)
     * }
     */
    public static FunctionDescriptor MagickSetImageCompression$descriptor() {
        return MagickSetImageCompression.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageCompression(MagickWand *, const CompressionType)
     * }
     */
    public static MethodHandle MagickSetImageCompression$handle() {
        return MagickSetImageCompression.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageCompression(MagickWand *, const CompressionType)
     * }
     */
    public static MemorySegment MagickSetImageCompression$address() {
        return MagickSetImageCompression.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageCompression(MagickWand *, const CompressionType)
     * }
     */
    public static int MagickSetImageCompression(MemorySegment x0, int x1) {
        var mh$ = MagickSetImageCompression.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageCompression", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageDelay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetImageDelay");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageDelay(MagickWand *, const size_t)
     * }
     */
    public static FunctionDescriptor MagickSetImageDelay$descriptor() {
        return MagickSetImageDelay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageDelay(MagickWand *, const size_t)
     * }
     */
    public static MethodHandle MagickSetImageDelay$handle() {
        return MagickSetImageDelay.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageDelay(MagickWand *, const size_t)
     * }
     */
    public static MemorySegment MagickSetImageDelay$address() {
        return MagickSetImageDelay.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageDelay(MagickWand *, const size_t)
     * }
     */
    public static int MagickSetImageDelay(MemorySegment x0, long x1) {
        var mh$ = MagickSetImageDelay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageDelay", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageDepth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetImageDepth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageDepth(MagickWand *, const size_t)
     * }
     */
    public static FunctionDescriptor MagickSetImageDepth$descriptor() {
        return MagickSetImageDepth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageDepth(MagickWand *, const size_t)
     * }
     */
    public static MethodHandle MagickSetImageDepth$handle() {
        return MagickSetImageDepth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageDepth(MagickWand *, const size_t)
     * }
     */
    public static MemorySegment MagickSetImageDepth$address() {
        return MagickSetImageDepth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageDepth(MagickWand *, const size_t)
     * }
     */
    public static int MagickSetImageDepth(MemorySegment x0, long x1) {
        var mh$ = MagickSetImageDepth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageDepth", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageDispose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetImageDispose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageDispose(MagickWand *, const DisposeType)
     * }
     */
    public static FunctionDescriptor MagickSetImageDispose$descriptor() {
        return MagickSetImageDispose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageDispose(MagickWand *, const DisposeType)
     * }
     */
    public static MethodHandle MagickSetImageDispose$handle() {
        return MagickSetImageDispose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageDispose(MagickWand *, const DisposeType)
     * }
     */
    public static MemorySegment MagickSetImageDispose$address() {
        return MagickSetImageDispose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageDispose(MagickWand *, const DisposeType)
     * }
     */
    public static int MagickSetImageDispose(MemorySegment x0, int x1) {
        var mh$ = MagickSetImageDispose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageDispose", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageCompressionQuality {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetImageCompressionQuality");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageCompressionQuality(MagickWand *, const size_t)
     * }
     */
    public static FunctionDescriptor MagickSetImageCompressionQuality$descriptor() {
        return MagickSetImageCompressionQuality.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageCompressionQuality(MagickWand *, const size_t)
     * }
     */
    public static MethodHandle MagickSetImageCompressionQuality$handle() {
        return MagickSetImageCompressionQuality.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageCompressionQuality(MagickWand *, const size_t)
     * }
     */
    public static MemorySegment MagickSetImageCompressionQuality$address() {
        return MagickSetImageCompressionQuality.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageCompressionQuality(MagickWand *, const size_t)
     * }
     */
    public static int MagickSetImageCompressionQuality(MemorySegment x0, long x1) {
        var mh$ = MagickSetImageCompressionQuality.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageCompressionQuality", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageEndian {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetImageEndian");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageEndian(MagickWand *, const EndianType)
     * }
     */
    public static FunctionDescriptor MagickSetImageEndian$descriptor() {
        return MagickSetImageEndian.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageEndian(MagickWand *, const EndianType)
     * }
     */
    public static MethodHandle MagickSetImageEndian$handle() {
        return MagickSetImageEndian.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageEndian(MagickWand *, const EndianType)
     * }
     */
    public static MemorySegment MagickSetImageEndian$address() {
        return MagickSetImageEndian.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageEndian(MagickWand *, const EndianType)
     * }
     */
    public static int MagickSetImageEndian(MemorySegment x0, int x1) {
        var mh$ = MagickSetImageEndian.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageEndian", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageExtent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetImageExtent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageExtent(MagickWand *, const size_t, const size_t)
     * }
     */
    public static FunctionDescriptor MagickSetImageExtent$descriptor() {
        return MagickSetImageExtent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageExtent(MagickWand *, const size_t, const size_t)
     * }
     */
    public static MethodHandle MagickSetImageExtent$handle() {
        return MagickSetImageExtent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageExtent(MagickWand *, const size_t, const size_t)
     * }
     */
    public static MemorySegment MagickSetImageExtent$address() {
        return MagickSetImageExtent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageExtent(MagickWand *, const size_t, const size_t)
     * }
     */
    public static int MagickSetImageExtent(MemorySegment x0, long x1, long x2) {
        var mh$ = MagickSetImageExtent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageExtent", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageFilename {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetImageFilename");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageFilename(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickSetImageFilename$descriptor() {
        return MagickSetImageFilename.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageFilename(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickSetImageFilename$handle() {
        return MagickSetImageFilename.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageFilename(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickSetImageFilename$address() {
        return MagickSetImageFilename.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageFilename(MagickWand *, const char *)
     * }
     */
    public static int MagickSetImageFilename(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickSetImageFilename.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageFilename", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageFilter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetImageFilter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageFilter(MagickWand *, const FilterType)
     * }
     */
    public static FunctionDescriptor MagickSetImageFilter$descriptor() {
        return MagickSetImageFilter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageFilter(MagickWand *, const FilterType)
     * }
     */
    public static MethodHandle MagickSetImageFilter$handle() {
        return MagickSetImageFilter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageFilter(MagickWand *, const FilterType)
     * }
     */
    public static MemorySegment MagickSetImageFilter$address() {
        return MagickSetImageFilter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageFilter(MagickWand *, const FilterType)
     * }
     */
    public static int MagickSetImageFilter(MemorySegment x0, int x1) {
        var mh$ = MagickSetImageFilter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageFilter", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageFormat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetImageFormat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageFormat(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickSetImageFormat$descriptor() {
        return MagickSetImageFormat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageFormat(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickSetImageFormat$handle() {
        return MagickSetImageFormat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageFormat(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickSetImageFormat$address() {
        return MagickSetImageFormat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageFormat(MagickWand *, const char *)
     * }
     */
    public static int MagickSetImageFormat(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickSetImageFormat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageFormat", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageFuzz {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetImageFuzz");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageFuzz(MagickWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickSetImageFuzz$descriptor() {
        return MagickSetImageFuzz.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageFuzz(MagickWand *, const double)
     * }
     */
    public static MethodHandle MagickSetImageFuzz$handle() {
        return MagickSetImageFuzz.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageFuzz(MagickWand *, const double)
     * }
     */
    public static MemorySegment MagickSetImageFuzz$address() {
        return MagickSetImageFuzz.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageFuzz(MagickWand *, const double)
     * }
     */
    public static int MagickSetImageFuzz(MemorySegment x0, double x1) {
        var mh$ = MagickSetImageFuzz.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageFuzz", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageGamma {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetImageGamma");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageGamma(MagickWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickSetImageGamma$descriptor() {
        return MagickSetImageGamma.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageGamma(MagickWand *, const double)
     * }
     */
    public static MethodHandle MagickSetImageGamma$handle() {
        return MagickSetImageGamma.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageGamma(MagickWand *, const double)
     * }
     */
    public static MemorySegment MagickSetImageGamma$address() {
        return MagickSetImageGamma.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageGamma(MagickWand *, const double)
     * }
     */
    public static int MagickSetImageGamma(MemorySegment x0, double x1) {
        var mh$ = MagickSetImageGamma.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageGamma", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageGravity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetImageGravity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageGravity(MagickWand *, const GravityType)
     * }
     */
    public static FunctionDescriptor MagickSetImageGravity$descriptor() {
        return MagickSetImageGravity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageGravity(MagickWand *, const GravityType)
     * }
     */
    public static MethodHandle MagickSetImageGravity$handle() {
        return MagickSetImageGravity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageGravity(MagickWand *, const GravityType)
     * }
     */
    public static MemorySegment MagickSetImageGravity$address() {
        return MagickSetImageGravity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageGravity(MagickWand *, const GravityType)
     * }
     */
    public static int MagickSetImageGravity(MemorySegment x0, int x1) {
        var mh$ = MagickSetImageGravity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageGravity", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageGreenPrimary {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetImageGreenPrimary");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageGreenPrimary(MagickWand *, const double, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickSetImageGreenPrimary$descriptor() {
        return MagickSetImageGreenPrimary.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageGreenPrimary(MagickWand *, const double, const double, const double)
     * }
     */
    public static MethodHandle MagickSetImageGreenPrimary$handle() {
        return MagickSetImageGreenPrimary.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageGreenPrimary(MagickWand *, const double, const double, const double)
     * }
     */
    public static MemorySegment MagickSetImageGreenPrimary$address() {
        return MagickSetImageGreenPrimary.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageGreenPrimary(MagickWand *, const double, const double, const double)
     * }
     */
    public static int MagickSetImageGreenPrimary(MemorySegment x0, double x1, double x2, double x3) {
        var mh$ = MagickSetImageGreenPrimary.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageGreenPrimary", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageInterlaceScheme {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetImageInterlaceScheme");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageInterlaceScheme(MagickWand *, const InterlaceType)
     * }
     */
    public static FunctionDescriptor MagickSetImageInterlaceScheme$descriptor() {
        return MagickSetImageInterlaceScheme.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageInterlaceScheme(MagickWand *, const InterlaceType)
     * }
     */
    public static MethodHandle MagickSetImageInterlaceScheme$handle() {
        return MagickSetImageInterlaceScheme.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageInterlaceScheme(MagickWand *, const InterlaceType)
     * }
     */
    public static MemorySegment MagickSetImageInterlaceScheme$address() {
        return MagickSetImageInterlaceScheme.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageInterlaceScheme(MagickWand *, const InterlaceType)
     * }
     */
    public static int MagickSetImageInterlaceScheme(MemorySegment x0, int x1) {
        var mh$ = MagickSetImageInterlaceScheme.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageInterlaceScheme", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageInterpolateMethod {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetImageInterpolateMethod");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageInterpolateMethod(MagickWand *, const PixelInterpolateMethod)
     * }
     */
    public static FunctionDescriptor MagickSetImageInterpolateMethod$descriptor() {
        return MagickSetImageInterpolateMethod.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageInterpolateMethod(MagickWand *, const PixelInterpolateMethod)
     * }
     */
    public static MethodHandle MagickSetImageInterpolateMethod$handle() {
        return MagickSetImageInterpolateMethod.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageInterpolateMethod(MagickWand *, const PixelInterpolateMethod)
     * }
     */
    public static MemorySegment MagickSetImageInterpolateMethod$address() {
        return MagickSetImageInterpolateMethod.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageInterpolateMethod(MagickWand *, const PixelInterpolateMethod)
     * }
     */
    public static int MagickSetImageInterpolateMethod(MemorySegment x0, int x1) {
        var mh$ = MagickSetImageInterpolateMethod.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageInterpolateMethod", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageIterations {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetImageIterations");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageIterations(MagickWand *, const size_t)
     * }
     */
    public static FunctionDescriptor MagickSetImageIterations$descriptor() {
        return MagickSetImageIterations.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageIterations(MagickWand *, const size_t)
     * }
     */
    public static MethodHandle MagickSetImageIterations$handle() {
        return MagickSetImageIterations.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageIterations(MagickWand *, const size_t)
     * }
     */
    public static MemorySegment MagickSetImageIterations$address() {
        return MagickSetImageIterations.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageIterations(MagickWand *, const size_t)
     * }
     */
    public static int MagickSetImageIterations(MemorySegment x0, long x1) {
        var mh$ = MagickSetImageIterations.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageIterations", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageMask {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetImageMask");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageMask(MagickWand *, const PixelMask, const MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickSetImageMask$descriptor() {
        return MagickSetImageMask.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageMask(MagickWand *, const PixelMask, const MagickWand *)
     * }
     */
    public static MethodHandle MagickSetImageMask$handle() {
        return MagickSetImageMask.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageMask(MagickWand *, const PixelMask, const MagickWand *)
     * }
     */
    public static MemorySegment MagickSetImageMask$address() {
        return MagickSetImageMask.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageMask(MagickWand *, const PixelMask, const MagickWand *)
     * }
     */
    public static int MagickSetImageMask(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = MagickSetImageMask.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageMask", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageMatte {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetImageMatte");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageMatte(MagickWand *, const MagickBooleanType)
     * }
     */
    public static FunctionDescriptor MagickSetImageMatte$descriptor() {
        return MagickSetImageMatte.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageMatte(MagickWand *, const MagickBooleanType)
     * }
     */
    public static MethodHandle MagickSetImageMatte$handle() {
        return MagickSetImageMatte.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageMatte(MagickWand *, const MagickBooleanType)
     * }
     */
    public static MemorySegment MagickSetImageMatte$address() {
        return MagickSetImageMatte.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageMatte(MagickWand *, const MagickBooleanType)
     * }
     */
    public static int MagickSetImageMatte(MemorySegment x0, int x1) {
        var mh$ = MagickSetImageMatte.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageMatte", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageMatteColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetImageMatteColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageMatteColor(MagickWand *, const PixelWand *)
     * }
     */
    public static FunctionDescriptor MagickSetImageMatteColor$descriptor() {
        return MagickSetImageMatteColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageMatteColor(MagickWand *, const PixelWand *)
     * }
     */
    public static MethodHandle MagickSetImageMatteColor$handle() {
        return MagickSetImageMatteColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageMatteColor(MagickWand *, const PixelWand *)
     * }
     */
    public static MemorySegment MagickSetImageMatteColor$address() {
        return MagickSetImageMatteColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageMatteColor(MagickWand *, const PixelWand *)
     * }
     */
    public static int MagickSetImageMatteColor(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickSetImageMatteColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageMatteColor", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageOrientation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetImageOrientation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageOrientation(MagickWand *, const OrientationType)
     * }
     */
    public static FunctionDescriptor MagickSetImageOrientation$descriptor() {
        return MagickSetImageOrientation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageOrientation(MagickWand *, const OrientationType)
     * }
     */
    public static MethodHandle MagickSetImageOrientation$handle() {
        return MagickSetImageOrientation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageOrientation(MagickWand *, const OrientationType)
     * }
     */
    public static MemorySegment MagickSetImageOrientation$address() {
        return MagickSetImageOrientation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageOrientation(MagickWand *, const OrientationType)
     * }
     */
    public static int MagickSetImageOrientation(MemorySegment x0, int x1) {
        var mh$ = MagickSetImageOrientation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageOrientation", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImagePage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetImagePage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImagePage(MagickWand *, const size_t, const size_t, const ssize_t, const ssize_t)
     * }
     */
    public static FunctionDescriptor MagickSetImagePage$descriptor() {
        return MagickSetImagePage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImagePage(MagickWand *, const size_t, const size_t, const ssize_t, const ssize_t)
     * }
     */
    public static MethodHandle MagickSetImagePage$handle() {
        return MagickSetImagePage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImagePage(MagickWand *, const size_t, const size_t, const ssize_t, const ssize_t)
     * }
     */
    public static MemorySegment MagickSetImagePage$address() {
        return MagickSetImagePage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImagePage(MagickWand *, const size_t, const size_t, const ssize_t, const ssize_t)
     * }
     */
    public static int MagickSetImagePage(MemorySegment x0, long x1, long x2, long x3, long x4) {
        var mh$ = MagickSetImagePage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImagePage", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImagePixelColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetImagePixelColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImagePixelColor(MagickWand *, const ssize_t, const ssize_t, const PixelWand *)
     * }
     */
    public static FunctionDescriptor MagickSetImagePixelColor$descriptor() {
        return MagickSetImagePixelColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImagePixelColor(MagickWand *, const ssize_t, const ssize_t, const PixelWand *)
     * }
     */
    public static MethodHandle MagickSetImagePixelColor$handle() {
        return MagickSetImagePixelColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImagePixelColor(MagickWand *, const ssize_t, const ssize_t, const PixelWand *)
     * }
     */
    public static MemorySegment MagickSetImagePixelColor$address() {
        return MagickSetImagePixelColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImagePixelColor(MagickWand *, const ssize_t, const ssize_t, const PixelWand *)
     * }
     */
    public static int MagickSetImagePixelColor(MemorySegment x0, long x1, long x2, MemorySegment x3) {
        var mh$ = MagickSetImagePixelColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImagePixelColor", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageRedPrimary {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetImageRedPrimary");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageRedPrimary(MagickWand *, const double, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickSetImageRedPrimary$descriptor() {
        return MagickSetImageRedPrimary.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageRedPrimary(MagickWand *, const double, const double, const double)
     * }
     */
    public static MethodHandle MagickSetImageRedPrimary$handle() {
        return MagickSetImageRedPrimary.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageRedPrimary(MagickWand *, const double, const double, const double)
     * }
     */
    public static MemorySegment MagickSetImageRedPrimary$address() {
        return MagickSetImageRedPrimary.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageRedPrimary(MagickWand *, const double, const double, const double)
     * }
     */
    public static int MagickSetImageRedPrimary(MemorySegment x0, double x1, double x2, double x3) {
        var mh$ = MagickSetImageRedPrimary.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageRedPrimary", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageRenderingIntent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetImageRenderingIntent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageRenderingIntent(MagickWand *, const RenderingIntent)
     * }
     */
    public static FunctionDescriptor MagickSetImageRenderingIntent$descriptor() {
        return MagickSetImageRenderingIntent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageRenderingIntent(MagickWand *, const RenderingIntent)
     * }
     */
    public static MethodHandle MagickSetImageRenderingIntent$handle() {
        return MagickSetImageRenderingIntent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageRenderingIntent(MagickWand *, const RenderingIntent)
     * }
     */
    public static MemorySegment MagickSetImageRenderingIntent$address() {
        return MagickSetImageRenderingIntent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageRenderingIntent(MagickWand *, const RenderingIntent)
     * }
     */
    public static int MagickSetImageRenderingIntent(MemorySegment x0, int x1) {
        var mh$ = MagickSetImageRenderingIntent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageRenderingIntent", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageResolution {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetImageResolution");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageResolution(MagickWand *, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickSetImageResolution$descriptor() {
        return MagickSetImageResolution.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageResolution(MagickWand *, const double, const double)
     * }
     */
    public static MethodHandle MagickSetImageResolution$handle() {
        return MagickSetImageResolution.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageResolution(MagickWand *, const double, const double)
     * }
     */
    public static MemorySegment MagickSetImageResolution$address() {
        return MagickSetImageResolution.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageResolution(MagickWand *, const double, const double)
     * }
     */
    public static int MagickSetImageResolution(MemorySegment x0, double x1, double x2) {
        var mh$ = MagickSetImageResolution.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageResolution", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageScene {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetImageScene");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageScene(MagickWand *, const size_t)
     * }
     */
    public static FunctionDescriptor MagickSetImageScene$descriptor() {
        return MagickSetImageScene.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageScene(MagickWand *, const size_t)
     * }
     */
    public static MethodHandle MagickSetImageScene$handle() {
        return MagickSetImageScene.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageScene(MagickWand *, const size_t)
     * }
     */
    public static MemorySegment MagickSetImageScene$address() {
        return MagickSetImageScene.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageScene(MagickWand *, const size_t)
     * }
     */
    public static int MagickSetImageScene(MemorySegment x0, long x1) {
        var mh$ = MagickSetImageScene.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageScene", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageTicksPerSecond {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetImageTicksPerSecond");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageTicksPerSecond(MagickWand *, const ssize_t)
     * }
     */
    public static FunctionDescriptor MagickSetImageTicksPerSecond$descriptor() {
        return MagickSetImageTicksPerSecond.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageTicksPerSecond(MagickWand *, const ssize_t)
     * }
     */
    public static MethodHandle MagickSetImageTicksPerSecond$handle() {
        return MagickSetImageTicksPerSecond.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageTicksPerSecond(MagickWand *, const ssize_t)
     * }
     */
    public static MemorySegment MagickSetImageTicksPerSecond$address() {
        return MagickSetImageTicksPerSecond.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageTicksPerSecond(MagickWand *, const ssize_t)
     * }
     */
    public static int MagickSetImageTicksPerSecond(MemorySegment x0, long x1) {
        var mh$ = MagickSetImageTicksPerSecond.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageTicksPerSecond", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetImageType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageType(MagickWand *, const ImageType)
     * }
     */
    public static FunctionDescriptor MagickSetImageType$descriptor() {
        return MagickSetImageType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageType(MagickWand *, const ImageType)
     * }
     */
    public static MethodHandle MagickSetImageType$handle() {
        return MagickSetImageType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageType(MagickWand *, const ImageType)
     * }
     */
    public static MemorySegment MagickSetImageType$address() {
        return MagickSetImageType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageType(MagickWand *, const ImageType)
     * }
     */
    public static int MagickSetImageType(MemorySegment x0, int x1) {
        var mh$ = MagickSetImageType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageType", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageUnits {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetImageUnits");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageUnits(MagickWand *, const ResolutionType)
     * }
     */
    public static FunctionDescriptor MagickSetImageUnits$descriptor() {
        return MagickSetImageUnits.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageUnits(MagickWand *, const ResolutionType)
     * }
     */
    public static MethodHandle MagickSetImageUnits$handle() {
        return MagickSetImageUnits.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageUnits(MagickWand *, const ResolutionType)
     * }
     */
    public static MemorySegment MagickSetImageUnits$address() {
        return MagickSetImageUnits.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageUnits(MagickWand *, const ResolutionType)
     * }
     */
    public static int MagickSetImageUnits(MemorySegment x0, int x1) {
        var mh$ = MagickSetImageUnits.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageUnits", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageWhitePoint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetImageWhitePoint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageWhitePoint(MagickWand *, const double, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickSetImageWhitePoint$descriptor() {
        return MagickSetImageWhitePoint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageWhitePoint(MagickWand *, const double, const double, const double)
     * }
     */
    public static MethodHandle MagickSetImageWhitePoint$handle() {
        return MagickSetImageWhitePoint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageWhitePoint(MagickWand *, const double, const double, const double)
     * }
     */
    public static MemorySegment MagickSetImageWhitePoint$address() {
        return MagickSetImageWhitePoint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetImageWhitePoint(MagickWand *, const double, const double, const double)
     * }
     */
    public static int MagickSetImageWhitePoint(MemorySegment x0, double x1, double x2, double x3) {
        var mh$ = MagickSetImageWhitePoint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageWhitePoint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickShadeImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickShadeImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickShadeImage(MagickWand *, const MagickBooleanType, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickShadeImage$descriptor() {
        return MagickShadeImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickShadeImage(MagickWand *, const MagickBooleanType, const double, const double)
     * }
     */
    public static MethodHandle MagickShadeImage$handle() {
        return MagickShadeImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickShadeImage(MagickWand *, const MagickBooleanType, const double, const double)
     * }
     */
    public static MemorySegment MagickShadeImage$address() {
        return MagickShadeImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickShadeImage(MagickWand *, const MagickBooleanType, const double, const double)
     * }
     */
    public static int MagickShadeImage(MemorySegment x0, int x1, double x2, double x3) {
        var mh$ = MagickShadeImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickShadeImage", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickShadowImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickShadowImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickShadowImage(MagickWand *, const double, const double, const ssize_t, const ssize_t)
     * }
     */
    public static FunctionDescriptor MagickShadowImage$descriptor() {
        return MagickShadowImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickShadowImage(MagickWand *, const double, const double, const ssize_t, const ssize_t)
     * }
     */
    public static MethodHandle MagickShadowImage$handle() {
        return MagickShadowImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickShadowImage(MagickWand *, const double, const double, const ssize_t, const ssize_t)
     * }
     */
    public static MemorySegment MagickShadowImage$address() {
        return MagickShadowImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickShadowImage(MagickWand *, const double, const double, const ssize_t, const ssize_t)
     * }
     */
    public static int MagickShadowImage(MemorySegment x0, double x1, double x2, long x3, long x4) {
        var mh$ = MagickShadowImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickShadowImage", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSharpenImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSharpenImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSharpenImage(MagickWand *, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickSharpenImage$descriptor() {
        return MagickSharpenImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSharpenImage(MagickWand *, const double, const double)
     * }
     */
    public static MethodHandle MagickSharpenImage$handle() {
        return MagickSharpenImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSharpenImage(MagickWand *, const double, const double)
     * }
     */
    public static MemorySegment MagickSharpenImage$address() {
        return MagickSharpenImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSharpenImage(MagickWand *, const double, const double)
     * }
     */
    public static int MagickSharpenImage(MemorySegment x0, double x1, double x2) {
        var mh$ = MagickSharpenImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSharpenImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickShaveImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickShaveImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickShaveImage(MagickWand *, const size_t, const size_t)
     * }
     */
    public static FunctionDescriptor MagickShaveImage$descriptor() {
        return MagickShaveImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickShaveImage(MagickWand *, const size_t, const size_t)
     * }
     */
    public static MethodHandle MagickShaveImage$handle() {
        return MagickShaveImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickShaveImage(MagickWand *, const size_t, const size_t)
     * }
     */
    public static MemorySegment MagickShaveImage$address() {
        return MagickShaveImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickShaveImage(MagickWand *, const size_t, const size_t)
     * }
     */
    public static int MagickShaveImage(MemorySegment x0, long x1, long x2) {
        var mh$ = MagickShaveImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickShaveImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickShearImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickShearImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickShearImage(MagickWand *, const PixelWand *, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickShearImage$descriptor() {
        return MagickShearImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickShearImage(MagickWand *, const PixelWand *, const double, const double)
     * }
     */
    public static MethodHandle MagickShearImage$handle() {
        return MagickShearImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickShearImage(MagickWand *, const PixelWand *, const double, const double)
     * }
     */
    public static MemorySegment MagickShearImage$address() {
        return MagickShearImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickShearImage(MagickWand *, const PixelWand *, const double, const double)
     * }
     */
    public static int MagickShearImage(MemorySegment x0, MemorySegment x1, double x2, double x3) {
        var mh$ = MagickShearImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickShearImage", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSigmoidalContrastImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSigmoidalContrastImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSigmoidalContrastImage(MagickWand *, const MagickBooleanType, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickSigmoidalContrastImage$descriptor() {
        return MagickSigmoidalContrastImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSigmoidalContrastImage(MagickWand *, const MagickBooleanType, const double, const double)
     * }
     */
    public static MethodHandle MagickSigmoidalContrastImage$handle() {
        return MagickSigmoidalContrastImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSigmoidalContrastImage(MagickWand *, const MagickBooleanType, const double, const double)
     * }
     */
    public static MemorySegment MagickSigmoidalContrastImage$address() {
        return MagickSigmoidalContrastImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSigmoidalContrastImage(MagickWand *, const MagickBooleanType, const double, const double)
     * }
     */
    public static int MagickSigmoidalContrastImage(MemorySegment x0, int x1, double x2, double x3) {
        var mh$ = MagickSigmoidalContrastImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSigmoidalContrastImage", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSketchImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSketchImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSketchImage(MagickWand *, const double, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickSketchImage$descriptor() {
        return MagickSketchImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSketchImage(MagickWand *, const double, const double, const double)
     * }
     */
    public static MethodHandle MagickSketchImage$handle() {
        return MagickSketchImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSketchImage(MagickWand *, const double, const double, const double)
     * }
     */
    public static MemorySegment MagickSketchImage$address() {
        return MagickSketchImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSketchImage(MagickWand *, const double, const double, const double)
     * }
     */
    public static int MagickSketchImage(MemorySegment x0, double x1, double x2, double x3) {
        var mh$ = MagickSketchImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSketchImage", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSolarizeImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSolarizeImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSolarizeImage(MagickWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickSolarizeImage$descriptor() {
        return MagickSolarizeImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSolarizeImage(MagickWand *, const double)
     * }
     */
    public static MethodHandle MagickSolarizeImage$handle() {
        return MagickSolarizeImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSolarizeImage(MagickWand *, const double)
     * }
     */
    public static MemorySegment MagickSolarizeImage$address() {
        return MagickSolarizeImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSolarizeImage(MagickWand *, const double)
     * }
     */
    public static int MagickSolarizeImage(MemorySegment x0, double x1) {
        var mh$ = MagickSolarizeImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSolarizeImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSparseColorImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT,
            MagickWand_h.C_LONG,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSparseColorImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSparseColorImage(MagickWand *, const SparseColorMethod, const size_t, const double *)
     * }
     */
    public static FunctionDescriptor MagickSparseColorImage$descriptor() {
        return MagickSparseColorImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSparseColorImage(MagickWand *, const SparseColorMethod, const size_t, const double *)
     * }
     */
    public static MethodHandle MagickSparseColorImage$handle() {
        return MagickSparseColorImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSparseColorImage(MagickWand *, const SparseColorMethod, const size_t, const double *)
     * }
     */
    public static MemorySegment MagickSparseColorImage$address() {
        return MagickSparseColorImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSparseColorImage(MagickWand *, const SparseColorMethod, const size_t, const double *)
     * }
     */
    public static int MagickSparseColorImage(MemorySegment x0, int x1, long x2, MemorySegment x3) {
        var mh$ = MagickSparseColorImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSparseColorImage", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSpliceImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSpliceImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSpliceImage(MagickWand *, const size_t, const size_t, const ssize_t, const ssize_t)
     * }
     */
    public static FunctionDescriptor MagickSpliceImage$descriptor() {
        return MagickSpliceImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSpliceImage(MagickWand *, const size_t, const size_t, const ssize_t, const ssize_t)
     * }
     */
    public static MethodHandle MagickSpliceImage$handle() {
        return MagickSpliceImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSpliceImage(MagickWand *, const size_t, const size_t, const ssize_t, const ssize_t)
     * }
     */
    public static MemorySegment MagickSpliceImage$address() {
        return MagickSpliceImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSpliceImage(MagickWand *, const size_t, const size_t, const ssize_t, const ssize_t)
     * }
     */
    public static int MagickSpliceImage(MemorySegment x0, long x1, long x2, long x3, long x4) {
        var mh$ = MagickSpliceImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSpliceImage", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSpreadImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSpreadImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSpreadImage(MagickWand *, const PixelInterpolateMethod, const double)
     * }
     */
    public static FunctionDescriptor MagickSpreadImage$descriptor() {
        return MagickSpreadImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSpreadImage(MagickWand *, const PixelInterpolateMethod, const double)
     * }
     */
    public static MethodHandle MagickSpreadImage$handle() {
        return MagickSpreadImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSpreadImage(MagickWand *, const PixelInterpolateMethod, const double)
     * }
     */
    public static MemorySegment MagickSpreadImage$address() {
        return MagickSpreadImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSpreadImage(MagickWand *, const PixelInterpolateMethod, const double)
     * }
     */
    public static int MagickSpreadImage(MemorySegment x0, int x1, double x2) {
        var mh$ = MagickSpreadImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSpreadImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickStatisticImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickStatisticImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickStatisticImage(MagickWand *, const StatisticType, const size_t, const size_t)
     * }
     */
    public static FunctionDescriptor MagickStatisticImage$descriptor() {
        return MagickStatisticImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickStatisticImage(MagickWand *, const StatisticType, const size_t, const size_t)
     * }
     */
    public static MethodHandle MagickStatisticImage$handle() {
        return MagickStatisticImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickStatisticImage(MagickWand *, const StatisticType, const size_t, const size_t)
     * }
     */
    public static MemorySegment MagickStatisticImage$address() {
        return MagickStatisticImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickStatisticImage(MagickWand *, const StatisticType, const size_t, const size_t)
     * }
     */
    public static int MagickStatisticImage(MemorySegment x0, int x1, long x2, long x3) {
        var mh$ = MagickStatisticImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickStatisticImage", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickStripImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickStripImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickStripImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickStripImage$descriptor() {
        return MagickStripImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickStripImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickStripImage$handle() {
        return MagickStripImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickStripImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickStripImage$address() {
        return MagickStripImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickStripImage(MagickWand *)
     * }
     */
    public static int MagickStripImage(MemorySegment x0) {
        var mh$ = MagickStripImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickStripImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSwirlImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSwirlImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSwirlImage(MagickWand *, const double, const PixelInterpolateMethod)
     * }
     */
    public static FunctionDescriptor MagickSwirlImage$descriptor() {
        return MagickSwirlImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSwirlImage(MagickWand *, const double, const PixelInterpolateMethod)
     * }
     */
    public static MethodHandle MagickSwirlImage$handle() {
        return MagickSwirlImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSwirlImage(MagickWand *, const double, const PixelInterpolateMethod)
     * }
     */
    public static MemorySegment MagickSwirlImage$address() {
        return MagickSwirlImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSwirlImage(MagickWand *, const double, const PixelInterpolateMethod)
     * }
     */
    public static int MagickSwirlImage(MemorySegment x0, double x1, int x2) {
        var mh$ = MagickSwirlImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSwirlImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickTintImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickTintImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickTintImage(MagickWand *, const PixelWand *, const PixelWand *)
     * }
     */
    public static FunctionDescriptor MagickTintImage$descriptor() {
        return MagickTintImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickTintImage(MagickWand *, const PixelWand *, const PixelWand *)
     * }
     */
    public static MethodHandle MagickTintImage$handle() {
        return MagickTintImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickTintImage(MagickWand *, const PixelWand *, const PixelWand *)
     * }
     */
    public static MemorySegment MagickTintImage$address() {
        return MagickTintImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickTintImage(MagickWand *, const PixelWand *, const PixelWand *)
     * }
     */
    public static int MagickTintImage(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = MagickTintImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickTintImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickTransformImageColorspace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickTransformImageColorspace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickTransformImageColorspace(MagickWand *, const ColorspaceType)
     * }
     */
    public static FunctionDescriptor MagickTransformImageColorspace$descriptor() {
        return MagickTransformImageColorspace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickTransformImageColorspace(MagickWand *, const ColorspaceType)
     * }
     */
    public static MethodHandle MagickTransformImageColorspace$handle() {
        return MagickTransformImageColorspace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickTransformImageColorspace(MagickWand *, const ColorspaceType)
     * }
     */
    public static MemorySegment MagickTransformImageColorspace$address() {
        return MagickTransformImageColorspace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickTransformImageColorspace(MagickWand *, const ColorspaceType)
     * }
     */
    public static int MagickTransformImageColorspace(MemorySegment x0, int x1) {
        var mh$ = MagickTransformImageColorspace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickTransformImageColorspace", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickTransposeImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickTransposeImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickTransposeImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickTransposeImage$descriptor() {
        return MagickTransposeImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickTransposeImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickTransposeImage$handle() {
        return MagickTransposeImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickTransposeImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickTransposeImage$address() {
        return MagickTransposeImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickTransposeImage(MagickWand *)
     * }
     */
    public static int MagickTransposeImage(MemorySegment x0) {
        var mh$ = MagickTransposeImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickTransposeImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickTransverseImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickTransverseImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickTransverseImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickTransverseImage$descriptor() {
        return MagickTransverseImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickTransverseImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickTransverseImage$handle() {
        return MagickTransverseImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickTransverseImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickTransverseImage$address() {
        return MagickTransverseImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickTransverseImage(MagickWand *)
     * }
     */
    public static int MagickTransverseImage(MemorySegment x0) {
        var mh$ = MagickTransverseImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickTransverseImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickThresholdImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickThresholdImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickThresholdImage(MagickWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickThresholdImage$descriptor() {
        return MagickThresholdImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickThresholdImage(MagickWand *, const double)
     * }
     */
    public static MethodHandle MagickThresholdImage$handle() {
        return MagickThresholdImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickThresholdImage(MagickWand *, const double)
     * }
     */
    public static MemorySegment MagickThresholdImage$address() {
        return MagickThresholdImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickThresholdImage(MagickWand *, const double)
     * }
     */
    public static int MagickThresholdImage(MemorySegment x0, double x1) {
        var mh$ = MagickThresholdImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickThresholdImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickThumbnailImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickThumbnailImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickThumbnailImage(MagickWand *, const size_t, const size_t)
     * }
     */
    public static FunctionDescriptor MagickThumbnailImage$descriptor() {
        return MagickThumbnailImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickThumbnailImage(MagickWand *, const size_t, const size_t)
     * }
     */
    public static MethodHandle MagickThumbnailImage$handle() {
        return MagickThumbnailImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickThumbnailImage(MagickWand *, const size_t, const size_t)
     * }
     */
    public static MemorySegment MagickThumbnailImage$address() {
        return MagickThumbnailImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickThumbnailImage(MagickWand *, const size_t, const size_t)
     * }
     */
    public static int MagickThumbnailImage(MemorySegment x0, long x1, long x2) {
        var mh$ = MagickThumbnailImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickThumbnailImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickTrimImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickTrimImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickTrimImage(MagickWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickTrimImage$descriptor() {
        return MagickTrimImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickTrimImage(MagickWand *, const double)
     * }
     */
    public static MethodHandle MagickTrimImage$handle() {
        return MagickTrimImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickTrimImage(MagickWand *, const double)
     * }
     */
    public static MemorySegment MagickTrimImage$address() {
        return MagickTrimImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickTrimImage(MagickWand *, const double)
     * }
     */
    public static int MagickTrimImage(MemorySegment x0, double x1) {
        var mh$ = MagickTrimImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickTrimImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickUniqueImageColors {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickUniqueImageColors");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickUniqueImageColors(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickUniqueImageColors$descriptor() {
        return MagickUniqueImageColors.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickUniqueImageColors(MagickWand *)
     * }
     */
    public static MethodHandle MagickUniqueImageColors$handle() {
        return MagickUniqueImageColors.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickUniqueImageColors(MagickWand *)
     * }
     */
    public static MemorySegment MagickUniqueImageColors$address() {
        return MagickUniqueImageColors.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickUniqueImageColors(MagickWand *)
     * }
     */
    public static int MagickUniqueImageColors(MemorySegment x0) {
        var mh$ = MagickUniqueImageColors.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickUniqueImageColors", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickUnsharpMaskImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickUnsharpMaskImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickUnsharpMaskImage(MagickWand *, const double, const double, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickUnsharpMaskImage$descriptor() {
        return MagickUnsharpMaskImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickUnsharpMaskImage(MagickWand *, const double, const double, const double, const double)
     * }
     */
    public static MethodHandle MagickUnsharpMaskImage$handle() {
        return MagickUnsharpMaskImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickUnsharpMaskImage(MagickWand *, const double, const double, const double, const double)
     * }
     */
    public static MemorySegment MagickUnsharpMaskImage$address() {
        return MagickUnsharpMaskImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickUnsharpMaskImage(MagickWand *, const double, const double, const double, const double)
     * }
     */
    public static int MagickUnsharpMaskImage(MemorySegment x0, double x1, double x2, double x3, double x4) {
        var mh$ = MagickUnsharpMaskImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickUnsharpMaskImage", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickVignetteImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickVignetteImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickVignetteImage(MagickWand *, const double, const double, const ssize_t, const ssize_t)
     * }
     */
    public static FunctionDescriptor MagickVignetteImage$descriptor() {
        return MagickVignetteImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickVignetteImage(MagickWand *, const double, const double, const ssize_t, const ssize_t)
     * }
     */
    public static MethodHandle MagickVignetteImage$handle() {
        return MagickVignetteImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickVignetteImage(MagickWand *, const double, const double, const ssize_t, const ssize_t)
     * }
     */
    public static MemorySegment MagickVignetteImage$address() {
        return MagickVignetteImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickVignetteImage(MagickWand *, const double, const double, const ssize_t, const ssize_t)
     * }
     */
    public static int MagickVignetteImage(MemorySegment x0, double x1, double x2, long x3, long x4) {
        var mh$ = MagickVignetteImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickVignetteImage", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickWaveImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickWaveImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickWaveImage(MagickWand *, const double, const double, const PixelInterpolateMethod)
     * }
     */
    public static FunctionDescriptor MagickWaveImage$descriptor() {
        return MagickWaveImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickWaveImage(MagickWand *, const double, const double, const PixelInterpolateMethod)
     * }
     */
    public static MethodHandle MagickWaveImage$handle() {
        return MagickWaveImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickWaveImage(MagickWand *, const double, const double, const PixelInterpolateMethod)
     * }
     */
    public static MemorySegment MagickWaveImage$address() {
        return MagickWaveImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickWaveImage(MagickWand *, const double, const double, const PixelInterpolateMethod)
     * }
     */
    public static int MagickWaveImage(MemorySegment x0, double x1, double x2, int x3) {
        var mh$ = MagickWaveImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickWaveImage", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickWaveletDenoiseImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickWaveletDenoiseImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickWaveletDenoiseImage(MagickWand *, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickWaveletDenoiseImage$descriptor() {
        return MagickWaveletDenoiseImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickWaveletDenoiseImage(MagickWand *, const double, const double)
     * }
     */
    public static MethodHandle MagickWaveletDenoiseImage$handle() {
        return MagickWaveletDenoiseImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickWaveletDenoiseImage(MagickWand *, const double, const double)
     * }
     */
    public static MemorySegment MagickWaveletDenoiseImage$address() {
        return MagickWaveletDenoiseImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickWaveletDenoiseImage(MagickWand *, const double, const double)
     * }
     */
    public static int MagickWaveletDenoiseImage(MemorySegment x0, double x1, double x2) {
        var mh$ = MagickWaveletDenoiseImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickWaveletDenoiseImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickWhiteBalanceImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickWhiteBalanceImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickWhiteBalanceImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickWhiteBalanceImage$descriptor() {
        return MagickWhiteBalanceImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickWhiteBalanceImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickWhiteBalanceImage$handle() {
        return MagickWhiteBalanceImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickWhiteBalanceImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickWhiteBalanceImage$address() {
        return MagickWhiteBalanceImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickWhiteBalanceImage(MagickWand *)
     * }
     */
    public static int MagickWhiteBalanceImage(MemorySegment x0) {
        var mh$ = MagickWhiteBalanceImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickWhiteBalanceImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickWhiteThresholdImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickWhiteThresholdImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickWhiteThresholdImage(MagickWand *, const PixelWand *)
     * }
     */
    public static FunctionDescriptor MagickWhiteThresholdImage$descriptor() {
        return MagickWhiteThresholdImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickWhiteThresholdImage(MagickWand *, const PixelWand *)
     * }
     */
    public static MethodHandle MagickWhiteThresholdImage$handle() {
        return MagickWhiteThresholdImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickWhiteThresholdImage(MagickWand *, const PixelWand *)
     * }
     */
    public static MemorySegment MagickWhiteThresholdImage$address() {
        return MagickWhiteThresholdImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickWhiteThresholdImage(MagickWand *, const PixelWand *)
     * }
     */
    public static int MagickWhiteThresholdImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickWhiteThresholdImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickWhiteThresholdImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickWriteImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickWriteImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickWriteImage(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickWriteImage$descriptor() {
        return MagickWriteImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickWriteImage(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickWriteImage$handle() {
        return MagickWriteImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickWriteImage(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickWriteImage$address() {
        return MagickWriteImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickWriteImage(MagickWand *, const char *)
     * }
     */
    public static int MagickWriteImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickWriteImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickWriteImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickWriteImageFile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickWriteImageFile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickWriteImageFile(MagickWand *, FILE *)
     * }
     */
    public static FunctionDescriptor MagickWriteImageFile$descriptor() {
        return MagickWriteImageFile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickWriteImageFile(MagickWand *, FILE *)
     * }
     */
    public static MethodHandle MagickWriteImageFile$handle() {
        return MagickWriteImageFile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickWriteImageFile(MagickWand *, FILE *)
     * }
     */
    public static MemorySegment MagickWriteImageFile$address() {
        return MagickWriteImageFile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickWriteImageFile(MagickWand *, FILE *)
     * }
     */
    public static int MagickWriteImageFile(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickWriteImageFile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickWriteImageFile", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickWriteImages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickWriteImages");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickWriteImages(MagickWand *, const char *, const MagickBooleanType)
     * }
     */
    public static FunctionDescriptor MagickWriteImages$descriptor() {
        return MagickWriteImages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickWriteImages(MagickWand *, const char *, const MagickBooleanType)
     * }
     */
    public static MethodHandle MagickWriteImages$handle() {
        return MagickWriteImages.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickWriteImages(MagickWand *, const char *, const MagickBooleanType)
     * }
     */
    public static MemorySegment MagickWriteImages$address() {
        return MagickWriteImages.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickWriteImages(MagickWand *, const char *, const MagickBooleanType)
     * }
     */
    public static int MagickWriteImages(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = MagickWriteImages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickWriteImages", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageProgressMonitor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetImageProgressMonitor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickProgressMonitor MagickSetImageProgressMonitor(MagickWand *, const MagickProgressMonitor, void *)
     * }
     */
    public static FunctionDescriptor MagickSetImageProgressMonitor$descriptor() {
        return MagickSetImageProgressMonitor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickProgressMonitor MagickSetImageProgressMonitor(MagickWand *, const MagickProgressMonitor, void *)
     * }
     */
    public static MethodHandle MagickSetImageProgressMonitor$handle() {
        return MagickSetImageProgressMonitor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickProgressMonitor MagickSetImageProgressMonitor(MagickWand *, const MagickProgressMonitor, void *)
     * }
     */
    public static MemorySegment MagickSetImageProgressMonitor$address() {
        return MagickSetImageProgressMonitor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickProgressMonitor MagickSetImageProgressMonitor(MagickWand *, const MagickProgressMonitor, void *)
     * }
     */
    public static MemorySegment MagickSetImageProgressMonitor(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = MagickSetImageProgressMonitor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageProgressMonitor", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickAppendImages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickAppendImages");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickAppendImages(MagickWand *, const MagickBooleanType)
     * }
     */
    public static FunctionDescriptor MagickAppendImages$descriptor() {
        return MagickAppendImages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickAppendImages(MagickWand *, const MagickBooleanType)
     * }
     */
    public static MethodHandle MagickAppendImages$handle() {
        return MagickAppendImages.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickAppendImages(MagickWand *, const MagickBooleanType)
     * }
     */
    public static MemorySegment MagickAppendImages$address() {
        return MagickAppendImages.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickAppendImages(MagickWand *, const MagickBooleanType)
     * }
     */
    public static MemorySegment MagickAppendImages(MemorySegment x0, int x1) {
        var mh$ = MagickAppendImages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickAppendImages", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickChannelFxImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickChannelFxImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickChannelFxImage(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickChannelFxImage$descriptor() {
        return MagickChannelFxImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickChannelFxImage(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickChannelFxImage$handle() {
        return MagickChannelFxImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickChannelFxImage(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickChannelFxImage$address() {
        return MagickChannelFxImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickChannelFxImage(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickChannelFxImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickChannelFxImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickChannelFxImage", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickCoalesceImages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickCoalesceImages");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickCoalesceImages(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickCoalesceImages$descriptor() {
        return MagickCoalesceImages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickCoalesceImages(MagickWand *)
     * }
     */
    public static MethodHandle MagickCoalesceImages$handle() {
        return MagickCoalesceImages.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickCoalesceImages(MagickWand *)
     * }
     */
    public static MemorySegment MagickCoalesceImages$address() {
        return MagickCoalesceImages.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickCoalesceImages(MagickWand *)
     * }
     */
    public static MemorySegment MagickCoalesceImages(MemorySegment x0) {
        var mh$ = MagickCoalesceImages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickCoalesceImages", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickCombineImages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickCombineImages");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickCombineImages(MagickWand *, const ColorspaceType)
     * }
     */
    public static FunctionDescriptor MagickCombineImages$descriptor() {
        return MagickCombineImages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickCombineImages(MagickWand *, const ColorspaceType)
     * }
     */
    public static MethodHandle MagickCombineImages$handle() {
        return MagickCombineImages.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickCombineImages(MagickWand *, const ColorspaceType)
     * }
     */
    public static MemorySegment MagickCombineImages$address() {
        return MagickCombineImages.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickCombineImages(MagickWand *, const ColorspaceType)
     * }
     */
    public static MemorySegment MagickCombineImages(MemorySegment x0, int x1) {
        var mh$ = MagickCombineImages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickCombineImages", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickCompareImages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickCompareImages");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickCompareImages(MagickWand *, const MagickWand *, const MetricType, double *)
     * }
     */
    public static FunctionDescriptor MagickCompareImages$descriptor() {
        return MagickCompareImages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickCompareImages(MagickWand *, const MagickWand *, const MetricType, double *)
     * }
     */
    public static MethodHandle MagickCompareImages$handle() {
        return MagickCompareImages.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickCompareImages(MagickWand *, const MagickWand *, const MetricType, double *)
     * }
     */
    public static MemorySegment MagickCompareImages$address() {
        return MagickCompareImages.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickCompareImages(MagickWand *, const MagickWand *, const MetricType, double *)
     * }
     */
    public static MemorySegment MagickCompareImages(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3) {
        var mh$ = MagickCompareImages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickCompareImages", x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickCompareImagesLayers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickCompareImagesLayers");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickCompareImagesLayers(MagickWand *, const LayerMethod)
     * }
     */
    public static FunctionDescriptor MagickCompareImagesLayers$descriptor() {
        return MagickCompareImagesLayers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickCompareImagesLayers(MagickWand *, const LayerMethod)
     * }
     */
    public static MethodHandle MagickCompareImagesLayers$handle() {
        return MagickCompareImagesLayers.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickCompareImagesLayers(MagickWand *, const LayerMethod)
     * }
     */
    public static MemorySegment MagickCompareImagesLayers$address() {
        return MagickCompareImagesLayers.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickCompareImagesLayers(MagickWand *, const LayerMethod)
     * }
     */
    public static MemorySegment MagickCompareImagesLayers(MemorySegment x0, int x1) {
        var mh$ = MagickCompareImagesLayers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickCompareImagesLayers", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickComplexImages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickComplexImages");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickComplexImages(MagickWand *, const ComplexOperator)
     * }
     */
    public static FunctionDescriptor MagickComplexImages$descriptor() {
        return MagickComplexImages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickComplexImages(MagickWand *, const ComplexOperator)
     * }
     */
    public static MethodHandle MagickComplexImages$handle() {
        return MagickComplexImages.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickComplexImages(MagickWand *, const ComplexOperator)
     * }
     */
    public static MemorySegment MagickComplexImages$address() {
        return MagickComplexImages.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickComplexImages(MagickWand *, const ComplexOperator)
     * }
     */
    public static MemorySegment MagickComplexImages(MemorySegment x0, int x1) {
        var mh$ = MagickComplexImages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickComplexImages", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDeconstructImages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickDeconstructImages");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickDeconstructImages(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickDeconstructImages$descriptor() {
        return MagickDeconstructImages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickDeconstructImages(MagickWand *)
     * }
     */
    public static MethodHandle MagickDeconstructImages$handle() {
        return MagickDeconstructImages.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickDeconstructImages(MagickWand *)
     * }
     */
    public static MemorySegment MagickDeconstructImages$address() {
        return MagickDeconstructImages.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickDeconstructImages(MagickWand *)
     * }
     */
    public static MemorySegment MagickDeconstructImages(MemorySegment x0) {
        var mh$ = MagickDeconstructImages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDeconstructImages", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickFxImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickFxImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickFxImage(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickFxImage$descriptor() {
        return MagickFxImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickFxImage(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickFxImage$handle() {
        return MagickFxImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickFxImage(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickFxImage$address() {
        return MagickFxImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickFxImage(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickFxImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickFxImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickFxImage", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickGetImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImage$descriptor() {
        return MagickGetImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickGetImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImage$handle() {
        return MagickGetImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickGetImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImage$address() {
        return MagickGetImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickGetImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImage(MemorySegment x0) {
        var mh$ = MagickGetImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImage", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageMask {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageMask");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickGetImageMask(MagickWand *, const PixelMask)
     * }
     */
    public static FunctionDescriptor MagickGetImageMask$descriptor() {
        return MagickGetImageMask.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickGetImageMask(MagickWand *, const PixelMask)
     * }
     */
    public static MethodHandle MagickGetImageMask$handle() {
        return MagickGetImageMask.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickGetImageMask(MagickWand *, const PixelMask)
     * }
     */
    public static MemorySegment MagickGetImageMask$address() {
        return MagickGetImageMask.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickGetImageMask(MagickWand *, const PixelMask)
     * }
     */
    public static MemorySegment MagickGetImageMask(MemorySegment x0, int x1) {
        var mh$ = MagickGetImageMask.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageMask", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageRegion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG,
            MagickWand_h.C_LONG
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageRegion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickGetImageRegion(MagickWand *, const size_t, const size_t, const ssize_t, const ssize_t)
     * }
     */
    public static FunctionDescriptor MagickGetImageRegion$descriptor() {
        return MagickGetImageRegion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickGetImageRegion(MagickWand *, const size_t, const size_t, const ssize_t, const ssize_t)
     * }
     */
    public static MethodHandle MagickGetImageRegion$handle() {
        return MagickGetImageRegion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickGetImageRegion(MagickWand *, const size_t, const size_t, const ssize_t, const ssize_t)
     * }
     */
    public static MemorySegment MagickGetImageRegion$address() {
        return MagickGetImageRegion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickGetImageRegion(MagickWand *, const size_t, const size_t, const ssize_t, const ssize_t)
     * }
     */
    public static MemorySegment MagickGetImageRegion(MemorySegment x0, long x1, long x2, long x3, long x4) {
        var mh$ = MagickGetImageRegion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageRegion", x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickMergeImageLayers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickMergeImageLayers");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickMergeImageLayers(MagickWand *, const LayerMethod)
     * }
     */
    public static FunctionDescriptor MagickMergeImageLayers$descriptor() {
        return MagickMergeImageLayers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickMergeImageLayers(MagickWand *, const LayerMethod)
     * }
     */
    public static MethodHandle MagickMergeImageLayers$handle() {
        return MagickMergeImageLayers.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickMergeImageLayers(MagickWand *, const LayerMethod)
     * }
     */
    public static MemorySegment MagickMergeImageLayers$address() {
        return MagickMergeImageLayers.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickMergeImageLayers(MagickWand *, const LayerMethod)
     * }
     */
    public static MemorySegment MagickMergeImageLayers(MemorySegment x0, int x1) {
        var mh$ = MagickMergeImageLayers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickMergeImageLayers", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickMorphImages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickMorphImages");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickMorphImages(MagickWand *, const size_t)
     * }
     */
    public static FunctionDescriptor MagickMorphImages$descriptor() {
        return MagickMorphImages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickMorphImages(MagickWand *, const size_t)
     * }
     */
    public static MethodHandle MagickMorphImages$handle() {
        return MagickMorphImages.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickMorphImages(MagickWand *, const size_t)
     * }
     */
    public static MemorySegment MagickMorphImages$address() {
        return MagickMorphImages.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickMorphImages(MagickWand *, const size_t)
     * }
     */
    public static MemorySegment MagickMorphImages(MemorySegment x0, long x1) {
        var mh$ = MagickMorphImages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickMorphImages", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickMontageImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickMontageImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickMontageImage(MagickWand *, const DrawingWand *, const char *, const char *, const MontageMode, const char *)
     * }
     */
    public static FunctionDescriptor MagickMontageImage$descriptor() {
        return MagickMontageImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickMontageImage(MagickWand *, const DrawingWand *, const char *, const char *, const MontageMode, const char *)
     * }
     */
    public static MethodHandle MagickMontageImage$handle() {
        return MagickMontageImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickMontageImage(MagickWand *, const DrawingWand *, const char *, const char *, const MontageMode, const char *)
     * }
     */
    public static MemorySegment MagickMontageImage$address() {
        return MagickMontageImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickMontageImage(MagickWand *, const DrawingWand *, const char *, const char *, const MontageMode, const char *)
     * }
     */
    public static MemorySegment MagickMontageImage(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, int x4, MemorySegment x5) {
        var mh$ = MagickMontageImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickMontageImage", x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickOptimizeImageLayers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickOptimizeImageLayers");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickOptimizeImageLayers(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickOptimizeImageLayers$descriptor() {
        return MagickOptimizeImageLayers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickOptimizeImageLayers(MagickWand *)
     * }
     */
    public static MethodHandle MagickOptimizeImageLayers$handle() {
        return MagickOptimizeImageLayers.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickOptimizeImageLayers(MagickWand *)
     * }
     */
    public static MemorySegment MagickOptimizeImageLayers$address() {
        return MagickOptimizeImageLayers.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickOptimizeImageLayers(MagickWand *)
     * }
     */
    public static MemorySegment MagickOptimizeImageLayers(MemorySegment x0) {
        var mh$ = MagickOptimizeImageLayers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickOptimizeImageLayers", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickPreviewImages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickPreviewImages");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickPreviewImages(MagickWand *wand, const PreviewType)
     * }
     */
    public static FunctionDescriptor MagickPreviewImages$descriptor() {
        return MagickPreviewImages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickPreviewImages(MagickWand *wand, const PreviewType)
     * }
     */
    public static MethodHandle MagickPreviewImages$handle() {
        return MagickPreviewImages.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickPreviewImages(MagickWand *wand, const PreviewType)
     * }
     */
    public static MemorySegment MagickPreviewImages$address() {
        return MagickPreviewImages.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickPreviewImages(MagickWand *wand, const PreviewType)
     * }
     */
    public static MemorySegment MagickPreviewImages(MemorySegment wand, int x1) {
        var mh$ = MagickPreviewImages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickPreviewImages", wand, x1);
            }
            return (MemorySegment)mh$.invokeExact(wand, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSimilarityImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT,
            MagickWand_h.C_DOUBLE,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSimilarityImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickSimilarityImage(MagickWand *, const MagickWand *, const MetricType, const double, RectangleInfo *, double *)
     * }
     */
    public static FunctionDescriptor MagickSimilarityImage$descriptor() {
        return MagickSimilarityImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickSimilarityImage(MagickWand *, const MagickWand *, const MetricType, const double, RectangleInfo *, double *)
     * }
     */
    public static MethodHandle MagickSimilarityImage$handle() {
        return MagickSimilarityImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickSimilarityImage(MagickWand *, const MagickWand *, const MetricType, const double, RectangleInfo *, double *)
     * }
     */
    public static MemorySegment MagickSimilarityImage$address() {
        return MagickSimilarityImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickSimilarityImage(MagickWand *, const MagickWand *, const MetricType, const double, RectangleInfo *, double *)
     * }
     */
    public static MemorySegment MagickSimilarityImage(MemorySegment x0, MemorySegment x1, int x2, double x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = MagickSimilarityImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSimilarityImage", x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSmushImages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT,
            MagickWand_h.C_LONG
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSmushImages");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickSmushImages(MagickWand *, const MagickBooleanType, const ssize_t)
     * }
     */
    public static FunctionDescriptor MagickSmushImages$descriptor() {
        return MagickSmushImages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickSmushImages(MagickWand *, const MagickBooleanType, const ssize_t)
     * }
     */
    public static MethodHandle MagickSmushImages$handle() {
        return MagickSmushImages.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickSmushImages(MagickWand *, const MagickBooleanType, const ssize_t)
     * }
     */
    public static MemorySegment MagickSmushImages$address() {
        return MagickSmushImages.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickSmushImages(MagickWand *, const MagickBooleanType, const ssize_t)
     * }
     */
    public static MemorySegment MagickSmushImages(MemorySegment x0, int x1, long x2) {
        var mh$ = MagickSmushImages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSmushImages", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSteganoImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSteganoImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickSteganoImage(MagickWand *, const MagickWand *, const ssize_t)
     * }
     */
    public static FunctionDescriptor MagickSteganoImage$descriptor() {
        return MagickSteganoImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickSteganoImage(MagickWand *, const MagickWand *, const ssize_t)
     * }
     */
    public static MethodHandle MagickSteganoImage$handle() {
        return MagickSteganoImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickSteganoImage(MagickWand *, const MagickWand *, const ssize_t)
     * }
     */
    public static MemorySegment MagickSteganoImage$address() {
        return MagickSteganoImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickSteganoImage(MagickWand *, const MagickWand *, const ssize_t)
     * }
     */
    public static MemorySegment MagickSteganoImage(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = MagickSteganoImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSteganoImage", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickStereoImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickStereoImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickStereoImage(MagickWand *, const MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickStereoImage$descriptor() {
        return MagickStereoImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickStereoImage(MagickWand *, const MagickWand *)
     * }
     */
    public static MethodHandle MagickStereoImage$handle() {
        return MagickStereoImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickStereoImage(MagickWand *, const MagickWand *)
     * }
     */
    public static MemorySegment MagickStereoImage$address() {
        return MagickStereoImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickStereoImage(MagickWand *, const MagickWand *)
     * }
     */
    public static MemorySegment MagickStereoImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickStereoImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickStereoImage", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickTextureImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickTextureImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickTextureImage(MagickWand *, const MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickTextureImage$descriptor() {
        return MagickTextureImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickTextureImage(MagickWand *, const MagickWand *)
     * }
     */
    public static MethodHandle MagickTextureImage$handle() {
        return MagickTextureImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickTextureImage(MagickWand *, const MagickWand *)
     * }
     */
    public static MemorySegment MagickTextureImage$address() {
        return MagickTextureImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickTextureImage(MagickWand *, const MagickWand *)
     * }
     */
    public static MemorySegment MagickTextureImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickTextureImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickTextureImage", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageOrientation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageOrientation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern OrientationType MagickGetImageOrientation(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageOrientation$descriptor() {
        return MagickGetImageOrientation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern OrientationType MagickGetImageOrientation(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageOrientation$handle() {
        return MagickGetImageOrientation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern OrientationType MagickGetImageOrientation(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageOrientation$address() {
        return MagickGetImageOrientation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern OrientationType MagickGetImageOrientation(MagickWand *)
     * }
     */
    public static int MagickGetImageOrientation(MemorySegment x0) {
        var mh$ = MagickGetImageOrientation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageOrientation", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageHistogram {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageHistogram");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PixelWand **MagickGetImageHistogram(MagickWand *, size_t *)
     * }
     */
    public static FunctionDescriptor MagickGetImageHistogram$descriptor() {
        return MagickGetImageHistogram.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PixelWand **MagickGetImageHistogram(MagickWand *, size_t *)
     * }
     */
    public static MethodHandle MagickGetImageHistogram$handle() {
        return MagickGetImageHistogram.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern PixelWand **MagickGetImageHistogram(MagickWand *, size_t *)
     * }
     */
    public static MemorySegment MagickGetImageHistogram$address() {
        return MagickGetImageHistogram.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern PixelWand **MagickGetImageHistogram(MagickWand *, size_t *)
     * }
     */
    public static MemorySegment MagickGetImageHistogram(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickGetImageHistogram.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageHistogram", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageRenderingIntent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageRenderingIntent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern RenderingIntent MagickGetImageRenderingIntent(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageRenderingIntent$descriptor() {
        return MagickGetImageRenderingIntent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern RenderingIntent MagickGetImageRenderingIntent(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageRenderingIntent$handle() {
        return MagickGetImageRenderingIntent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern RenderingIntent MagickGetImageRenderingIntent(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageRenderingIntent$address() {
        return MagickGetImageRenderingIntent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern RenderingIntent MagickGetImageRenderingIntent(MagickWand *)
     * }
     */
    public static int MagickGetImageRenderingIntent(MemorySegment x0) {
        var mh$ = MagickGetImageRenderingIntent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageRenderingIntent", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageUnits {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageUnits");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ResolutionType MagickGetImageUnits(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageUnits$descriptor() {
        return MagickGetImageUnits.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ResolutionType MagickGetImageUnits(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageUnits$handle() {
        return MagickGetImageUnits.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ResolutionType MagickGetImageUnits(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageUnits$address() {
        return MagickGetImageUnits.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ResolutionType MagickGetImageUnits(MagickWand *)
     * }
     */
    public static int MagickGetImageUnits(MemorySegment x0) {
        var mh$ = MagickGetImageUnits.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageUnits", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageColors {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_LONG,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageColors");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t MagickGetImageColors(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageColors$descriptor() {
        return MagickGetImageColors.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t MagickGetImageColors(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageColors$handle() {
        return MagickGetImageColors.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern size_t MagickGetImageColors(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageColors$address() {
        return MagickGetImageColors.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern size_t MagickGetImageColors(MagickWand *)
     * }
     */
    public static long MagickGetImageColors(MemorySegment x0) {
        var mh$ = MagickGetImageColors.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageColors", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageCompressionQuality {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_LONG,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageCompressionQuality");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t MagickGetImageCompressionQuality(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageCompressionQuality$descriptor() {
        return MagickGetImageCompressionQuality.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t MagickGetImageCompressionQuality(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageCompressionQuality$handle() {
        return MagickGetImageCompressionQuality.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern size_t MagickGetImageCompressionQuality(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageCompressionQuality$address() {
        return MagickGetImageCompressionQuality.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern size_t MagickGetImageCompressionQuality(MagickWand *)
     * }
     */
    public static long MagickGetImageCompressionQuality(MemorySegment x0) {
        var mh$ = MagickGetImageCompressionQuality.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageCompressionQuality", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageDelay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_LONG,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageDelay");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t MagickGetImageDelay(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageDelay$descriptor() {
        return MagickGetImageDelay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t MagickGetImageDelay(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageDelay$handle() {
        return MagickGetImageDelay.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern size_t MagickGetImageDelay(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageDelay$address() {
        return MagickGetImageDelay.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern size_t MagickGetImageDelay(MagickWand *)
     * }
     */
    public static long MagickGetImageDelay(MemorySegment x0) {
        var mh$ = MagickGetImageDelay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageDelay", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageDepth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_LONG,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageDepth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t MagickGetImageDepth(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageDepth$descriptor() {
        return MagickGetImageDepth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t MagickGetImageDepth(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageDepth$handle() {
        return MagickGetImageDepth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern size_t MagickGetImageDepth(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageDepth$address() {
        return MagickGetImageDepth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern size_t MagickGetImageDepth(MagickWand *)
     * }
     */
    public static long MagickGetImageDepth(MemorySegment x0) {
        var mh$ = MagickGetImageDepth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageDepth", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageHeight {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_LONG,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageHeight");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t MagickGetImageHeight(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageHeight$descriptor() {
        return MagickGetImageHeight.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t MagickGetImageHeight(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageHeight$handle() {
        return MagickGetImageHeight.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern size_t MagickGetImageHeight(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageHeight$address() {
        return MagickGetImageHeight.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern size_t MagickGetImageHeight(MagickWand *)
     * }
     */
    public static long MagickGetImageHeight(MemorySegment x0) {
        var mh$ = MagickGetImageHeight.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageHeight", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageIterations {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_LONG,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageIterations");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t MagickGetImageIterations(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageIterations$descriptor() {
        return MagickGetImageIterations.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t MagickGetImageIterations(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageIterations$handle() {
        return MagickGetImageIterations.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern size_t MagickGetImageIterations(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageIterations$address() {
        return MagickGetImageIterations.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern size_t MagickGetImageIterations(MagickWand *)
     * }
     */
    public static long MagickGetImageIterations(MemorySegment x0) {
        var mh$ = MagickGetImageIterations.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageIterations", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageScene {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_LONG,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageScene");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t MagickGetImageScene(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageScene$descriptor() {
        return MagickGetImageScene.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t MagickGetImageScene(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageScene$handle() {
        return MagickGetImageScene.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern size_t MagickGetImageScene(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageScene$address() {
        return MagickGetImageScene.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern size_t MagickGetImageScene(MagickWand *)
     * }
     */
    public static long MagickGetImageScene(MemorySegment x0) {
        var mh$ = MagickGetImageScene.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageScene", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageTicksPerSecond {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_LONG,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageTicksPerSecond");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t MagickGetImageTicksPerSecond(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageTicksPerSecond$descriptor() {
        return MagickGetImageTicksPerSecond.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t MagickGetImageTicksPerSecond(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageTicksPerSecond$handle() {
        return MagickGetImageTicksPerSecond.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern size_t MagickGetImageTicksPerSecond(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageTicksPerSecond$address() {
        return MagickGetImageTicksPerSecond.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern size_t MagickGetImageTicksPerSecond(MagickWand *)
     * }
     */
    public static long MagickGetImageTicksPerSecond(MemorySegment x0) {
        var mh$ = MagickGetImageTicksPerSecond.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageTicksPerSecond", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageWidth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_LONG,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageWidth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t MagickGetImageWidth(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageWidth$descriptor() {
        return MagickGetImageWidth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t MagickGetImageWidth(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageWidth$handle() {
        return MagickGetImageWidth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern size_t MagickGetImageWidth(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageWidth$address() {
        return MagickGetImageWidth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern size_t MagickGetImageWidth(MagickWand *)
     * }
     */
    public static long MagickGetImageWidth(MemorySegment x0) {
        var mh$ = MagickGetImageWidth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageWidth", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetNumberImages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_LONG,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetNumberImages");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t MagickGetNumberImages(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetNumberImages$descriptor() {
        return MagickGetNumberImages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t MagickGetNumberImages(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetNumberImages$handle() {
        return MagickGetNumberImages.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern size_t MagickGetNumberImages(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetNumberImages$address() {
        return MagickGetNumberImages.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern size_t MagickGetNumberImages(MagickWand *)
     * }
     */
    public static long MagickGetNumberImages(MemorySegment x0) {
        var mh$ = MagickGetNumberImages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetNumberImages", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageBlob {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageBlob");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned char *MagickGetImageBlob(MagickWand *, size_t *)
     * }
     */
    public static FunctionDescriptor MagickGetImageBlob$descriptor() {
        return MagickGetImageBlob.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned char *MagickGetImageBlob(MagickWand *, size_t *)
     * }
     */
    public static MethodHandle MagickGetImageBlob$handle() {
        return MagickGetImageBlob.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned char *MagickGetImageBlob(MagickWand *, size_t *)
     * }
     */
    public static MemorySegment MagickGetImageBlob$address() {
        return MagickGetImageBlob.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned char *MagickGetImageBlob(MagickWand *, size_t *)
     * }
     */
    public static MemorySegment MagickGetImageBlob(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickGetImageBlob.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageBlob", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImagesBlob {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImagesBlob");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned char *MagickGetImagesBlob(MagickWand *, size_t *)
     * }
     */
    public static FunctionDescriptor MagickGetImagesBlob$descriptor() {
        return MagickGetImagesBlob.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned char *MagickGetImagesBlob(MagickWand *, size_t *)
     * }
     */
    public static MethodHandle MagickGetImagesBlob$handle() {
        return MagickGetImagesBlob.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned char *MagickGetImagesBlob(MagickWand *, size_t *)
     * }
     */
    public static MemorySegment MagickGetImagesBlob$address() {
        return MagickGetImagesBlob.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned char *MagickGetImagesBlob(MagickWand *, size_t *)
     * }
     */
    public static MemorySegment MagickGetImagesBlob(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickGetImagesBlob.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImagesBlob", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageVirtualPixelMethod {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetImageVirtualPixelMethod");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VirtualPixelMethod MagickGetImageVirtualPixelMethod(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageVirtualPixelMethod$descriptor() {
        return MagickGetImageVirtualPixelMethod.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VirtualPixelMethod MagickGetImageVirtualPixelMethod(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageVirtualPixelMethod$handle() {
        return MagickGetImageVirtualPixelMethod.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VirtualPixelMethod MagickGetImageVirtualPixelMethod(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageVirtualPixelMethod$address() {
        return MagickGetImageVirtualPixelMethod.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VirtualPixelMethod MagickGetImageVirtualPixelMethod(MagickWand *)
     * }
     */
    public static int MagickGetImageVirtualPixelMethod(MemorySegment x0) {
        var mh$ = MagickGetImageVirtualPixelMethod.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageVirtualPixelMethod", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageVirtualPixelMethod {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_INT
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetImageVirtualPixelMethod");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VirtualPixelMethod MagickSetImageVirtualPixelMethod(MagickWand *, const VirtualPixelMethod)
     * }
     */
    public static FunctionDescriptor MagickSetImageVirtualPixelMethod$descriptor() {
        return MagickSetImageVirtualPixelMethod.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VirtualPixelMethod MagickSetImageVirtualPixelMethod(MagickWand *, const VirtualPixelMethod)
     * }
     */
    public static MethodHandle MagickSetImageVirtualPixelMethod$handle() {
        return MagickSetImageVirtualPixelMethod.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VirtualPixelMethod MagickSetImageVirtualPixelMethod(MagickWand *, const VirtualPixelMethod)
     * }
     */
    public static MemorySegment MagickSetImageVirtualPixelMethod$address() {
        return MagickSetImageVirtualPixelMethod.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VirtualPixelMethod MagickSetImageVirtualPixelMethod(MagickWand *, const VirtualPixelMethod)
     * }
     */
    public static int MagickSetImageVirtualPixelMethod(MemorySegment x0, int x1) {
        var mh$ = MagickSetImageVirtualPixelMethod.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageVirtualPixelMethod", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetException {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetException");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *MagickGetException(const MagickWand *, ExceptionType *)
     * }
     */
    public static FunctionDescriptor MagickGetException$descriptor() {
        return MagickGetException.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *MagickGetException(const MagickWand *, ExceptionType *)
     * }
     */
    public static MethodHandle MagickGetException$handle() {
        return MagickGetException.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *MagickGetException(const MagickWand *, ExceptionType *)
     * }
     */
    public static MemorySegment MagickGetException$address() {
        return MagickGetException.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *MagickGetException(const MagickWand *, ExceptionType *)
     * }
     */
    public static MemorySegment MagickGetException(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickGetException.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetException", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetExceptionType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetExceptionType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ExceptionType MagickGetExceptionType(const MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetExceptionType$descriptor() {
        return MagickGetExceptionType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ExceptionType MagickGetExceptionType(const MagickWand *)
     * }
     */
    public static MethodHandle MagickGetExceptionType$handle() {
        return MagickGetExceptionType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ExceptionType MagickGetExceptionType(const MagickWand *)
     * }
     */
    public static MemorySegment MagickGetExceptionType$address() {
        return MagickGetExceptionType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ExceptionType MagickGetExceptionType(const MagickWand *)
     * }
     */
    public static int MagickGetExceptionType(MemorySegment x0) {
        var mh$ = MagickGetExceptionType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetExceptionType", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IsMagickWand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("IsMagickWand");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType IsMagickWand(const MagickWand *)
     * }
     */
    public static FunctionDescriptor IsMagickWand$descriptor() {
        return IsMagickWand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType IsMagickWand(const MagickWand *)
     * }
     */
    public static MethodHandle IsMagickWand$handle() {
        return IsMagickWand.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType IsMagickWand(const MagickWand *)
     * }
     */
    public static MemorySegment IsMagickWand$address() {
        return IsMagickWand.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType IsMagickWand(const MagickWand *)
     * }
     */
    public static int IsMagickWand(MemorySegment x0) {
        var mh$ = IsMagickWand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IsMagickWand", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickClearException {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickClearException");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickClearException(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickClearException$descriptor() {
        return MagickClearException.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickClearException(MagickWand *)
     * }
     */
    public static MethodHandle MagickClearException$handle() {
        return MagickClearException.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickClearException(MagickWand *)
     * }
     */
    public static MemorySegment MagickClearException$address() {
        return MagickClearException.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickClearException(MagickWand *)
     * }
     */
    public static int MagickClearException(MemorySegment x0) {
        var mh$ = MagickClearException.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickClearException", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetIteratorIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_INT,
            MagickWand_h.C_POINTER,
            MagickWand_h.C_LONG
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetIteratorIndex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetIteratorIndex(MagickWand *, const ssize_t)
     * }
     */
    public static FunctionDescriptor MagickSetIteratorIndex$descriptor() {
        return MagickSetIteratorIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetIteratorIndex(MagickWand *, const ssize_t)
     * }
     */
    public static MethodHandle MagickSetIteratorIndex$handle() {
        return MagickSetIteratorIndex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetIteratorIndex(MagickWand *, const ssize_t)
     * }
     */
    public static MemorySegment MagickSetIteratorIndex$address() {
        return MagickSetIteratorIndex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickBooleanType MagickSetIteratorIndex(MagickWand *, const ssize_t)
     * }
     */
    public static int MagickSetIteratorIndex(MemorySegment x0, long x1) {
        var mh$ = MagickSetIteratorIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetIteratorIndex", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CloneMagickWand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("CloneMagickWand");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *CloneMagickWand(const MagickWand *)
     * }
     */
    public static FunctionDescriptor CloneMagickWand$descriptor() {
        return CloneMagickWand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *CloneMagickWand(const MagickWand *)
     * }
     */
    public static MethodHandle CloneMagickWand$handle() {
        return CloneMagickWand.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *CloneMagickWand(const MagickWand *)
     * }
     */
    public static MemorySegment CloneMagickWand$address() {
        return CloneMagickWand.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *CloneMagickWand(const MagickWand *)
     * }
     */
    public static MemorySegment CloneMagickWand(MemorySegment x0) {
        var mh$ = CloneMagickWand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CloneMagickWand", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DestroyMagickWand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("DestroyMagickWand");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *DestroyMagickWand(MagickWand *)
     * }
     */
    public static FunctionDescriptor DestroyMagickWand$descriptor() {
        return DestroyMagickWand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *DestroyMagickWand(MagickWand *)
     * }
     */
    public static MethodHandle DestroyMagickWand$handle() {
        return DestroyMagickWand.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *DestroyMagickWand(MagickWand *)
     * }
     */
    public static MemorySegment DestroyMagickWand$address() {
        return DestroyMagickWand.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *DestroyMagickWand(MagickWand *)
     * }
     */
    public static MemorySegment DestroyMagickWand(MemorySegment x0) {
        var mh$ = DestroyMagickWand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DestroyMagickWand", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NewMagickWand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER    );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("NewMagickWand");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *NewMagickWand()
     * }
     */
    public static FunctionDescriptor NewMagickWand$descriptor() {
        return NewMagickWand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *NewMagickWand()
     * }
     */
    public static MethodHandle NewMagickWand$handle() {
        return NewMagickWand.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *NewMagickWand()
     * }
     */
    public static MemorySegment NewMagickWand$address() {
        return NewMagickWand.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *NewMagickWand()
     * }
     */
    public static MemorySegment NewMagickWand() {
        var mh$ = NewMagickWand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NewMagickWand");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NewMagickWandFromImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("NewMagickWandFromImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *NewMagickWandFromImage(const Image *)
     * }
     */
    public static FunctionDescriptor NewMagickWandFromImage$descriptor() {
        return NewMagickWandFromImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *NewMagickWandFromImage(const Image *)
     * }
     */
    public static MethodHandle NewMagickWandFromImage$handle() {
        return NewMagickWandFromImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *NewMagickWandFromImage(const Image *)
     * }
     */
    public static MemorySegment NewMagickWandFromImage$address() {
        return NewMagickWandFromImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *NewMagickWandFromImage(const Image *)
     * }
     */
    public static MemorySegment NewMagickWandFromImage(MemorySegment x0) {
        var mh$ = NewMagickWandFromImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NewMagickWandFromImage", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetIteratorIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_LONG,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickGetIteratorIndex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ssize_t MagickGetIteratorIndex(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetIteratorIndex$descriptor() {
        return MagickGetIteratorIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ssize_t MagickGetIteratorIndex(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetIteratorIndex$handle() {
        return MagickGetIteratorIndex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ssize_t MagickGetIteratorIndex(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetIteratorIndex$address() {
        return MagickGetIteratorIndex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ssize_t MagickGetIteratorIndex(MagickWand *)
     * }
     */
    public static long MagickGetIteratorIndex(MemorySegment x0) {
        var mh$ = MagickGetIteratorIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetIteratorIndex", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ClearMagickWand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("ClearMagickWand");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ClearMagickWand(MagickWand *)
     * }
     */
    public static FunctionDescriptor ClearMagickWand$descriptor() {
        return ClearMagickWand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ClearMagickWand(MagickWand *)
     * }
     */
    public static MethodHandle ClearMagickWand$handle() {
        return ClearMagickWand.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ClearMagickWand(MagickWand *)
     * }
     */
    public static MemorySegment ClearMagickWand$address() {
        return ClearMagickWand.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ClearMagickWand(MagickWand *)
     * }
     */
    public static void ClearMagickWand(MemorySegment x0) {
        var mh$ = ClearMagickWand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ClearMagickWand", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickWandGenesis {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickWandGenesis");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickWandGenesis()
     * }
     */
    public static FunctionDescriptor MagickWandGenesis$descriptor() {
        return MagickWandGenesis.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickWandGenesis()
     * }
     */
    public static MethodHandle MagickWandGenesis$handle() {
        return MagickWandGenesis.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickWandGenesis()
     * }
     */
    public static MemorySegment MagickWandGenesis$address() {
        return MagickWandGenesis.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickWandGenesis()
     * }
     */
    public static void MagickWandGenesis() {
        var mh$ = MagickWandGenesis.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickWandGenesis");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickWandTerminus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickWandTerminus");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickWandTerminus()
     * }
     */
    public static FunctionDescriptor MagickWandTerminus$descriptor() {
        return MagickWandTerminus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickWandTerminus()
     * }
     */
    public static MethodHandle MagickWandTerminus$handle() {
        return MagickWandTerminus.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickWandTerminus()
     * }
     */
    public static MemorySegment MagickWandTerminus$address() {
        return MagickWandTerminus.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickWandTerminus()
     * }
     */
    public static void MagickWandTerminus() {
        var mh$ = MagickWandTerminus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickWandTerminus");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickRelinquishMemory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MagickWand_h.C_POINTER,
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickRelinquishMemory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *MagickRelinquishMemory(void *)
     * }
     */
    public static FunctionDescriptor MagickRelinquishMemory$descriptor() {
        return MagickRelinquishMemory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *MagickRelinquishMemory(void *)
     * }
     */
    public static MethodHandle MagickRelinquishMemory$handle() {
        return MagickRelinquishMemory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *MagickRelinquishMemory(void *)
     * }
     */
    public static MemorySegment MagickRelinquishMemory$address() {
        return MagickRelinquishMemory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *MagickRelinquishMemory(void *)
     * }
     */
    public static MemorySegment MagickRelinquishMemory(MemorySegment x0) {
        var mh$ = MagickRelinquishMemory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickRelinquishMemory", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickResetIterator {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickResetIterator");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickResetIterator(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickResetIterator$descriptor() {
        return MagickResetIterator.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickResetIterator(MagickWand *)
     * }
     */
    public static MethodHandle MagickResetIterator$handle() {
        return MagickResetIterator.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickResetIterator(MagickWand *)
     * }
     */
    public static MemorySegment MagickResetIterator$address() {
        return MagickResetIterator.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickResetIterator(MagickWand *)
     * }
     */
    public static void MagickResetIterator(MemorySegment x0) {
        var mh$ = MagickResetIterator.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickResetIterator", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetFirstIterator {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetFirstIterator");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickSetFirstIterator(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickSetFirstIterator$descriptor() {
        return MagickSetFirstIterator.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickSetFirstIterator(MagickWand *)
     * }
     */
    public static MethodHandle MagickSetFirstIterator$handle() {
        return MagickSetFirstIterator.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickSetFirstIterator(MagickWand *)
     * }
     */
    public static MemorySegment MagickSetFirstIterator$address() {
        return MagickSetFirstIterator.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickSetFirstIterator(MagickWand *)
     * }
     */
    public static void MagickSetFirstIterator(MemorySegment x0) {
        var mh$ = MagickSetFirstIterator.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetFirstIterator", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetLastIterator {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MagickWand_h.C_POINTER
        );

        public static final MemorySegment ADDR = MagickWand_h.findOrThrow("MagickSetLastIterator");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickSetLastIterator(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickSetLastIterator$descriptor() {
        return MagickSetLastIterator.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickSetLastIterator(MagickWand *)
     * }
     */
    public static MethodHandle MagickSetLastIterator$handle() {
        return MagickSetLastIterator.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickSetLastIterator(MagickWand *)
     * }
     */
    public static MemorySegment MagickSetLastIterator$address() {
        return MagickSetLastIterator.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickSetLastIterator(MagickWand *)
     * }
     */
    public static void MagickSetLastIterator(MemorySegment x0) {
        var mh$ = MagickSetLastIterator.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetLastIterator", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}

