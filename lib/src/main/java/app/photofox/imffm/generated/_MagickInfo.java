// Generated by jextract

package app.photofox.imffm.generated;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _MagickInfo {
 *     char *name;
 *     char *description;
 *     char *version;
 *     char *mime_type;
 *     char *note;
 *     char *module;
 *     DecodeImageHandler *decoder;
 *     EncodeImageHandler *encoder;
 *     ImageInfo *image_info;
 *     IsImageFormatHandler *magick;
 *     MagickFormatType format_type;
 *     MagickStatusType flags;
 *     SemaphoreInfo *semaphore;
 *     size_t signature;
 *     void *client_data;
 * }
 * }
 */
public class _MagickInfo {

    _MagickInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MagickWand_h.C_POINTER.withName("name"),
        MagickWand_h.C_POINTER.withName("description"),
        MagickWand_h.C_POINTER.withName("version"),
        MagickWand_h.C_POINTER.withName("mime_type"),
        MagickWand_h.C_POINTER.withName("note"),
        MagickWand_h.C_POINTER.withName("module"),
        MagickWand_h.C_POINTER.withName("decoder"),
        MagickWand_h.C_POINTER.withName("encoder"),
        MagickWand_h.C_POINTER.withName("image_info"),
        MagickWand_h.C_POINTER.withName("magick"),
        MagickWand_h.C_INT.withName("format_type"),
        MagickWand_h.C_INT.withName("flags"),
        MagickWand_h.C_POINTER.withName("semaphore"),
        MagickWand_h.C_LONG.withName("signature"),
        MagickWand_h.C_POINTER.withName("client_data")
    ).withName("_MagickInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *name
     * }
     */
    public static final AddressLayout name$layout() {
        return name$LAYOUT;
    }

    private static final long name$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *name
     * }
     */
    public static final long name$offset() {
        return name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *name
     * }
     */
    public static MemorySegment name(MemorySegment struct) {
        return struct.get(name$LAYOUT, name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *name
     * }
     */
    public static void name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(name$LAYOUT, name$OFFSET, fieldValue);
    }

    private static final AddressLayout description$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("description"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *description
     * }
     */
    public static final AddressLayout description$layout() {
        return description$LAYOUT;
    }

    private static final long description$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *description
     * }
     */
    public static final long description$offset() {
        return description$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *description
     * }
     */
    public static MemorySegment description(MemorySegment struct) {
        return struct.get(description$LAYOUT, description$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *description
     * }
     */
    public static void description(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(description$LAYOUT, description$OFFSET, fieldValue);
    }

    private static final AddressLayout version$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *version
     * }
     */
    public static final AddressLayout version$layout() {
        return version$LAYOUT;
    }

    private static final long version$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *version
     * }
     */
    public static final long version$offset() {
        return version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *version
     * }
     */
    public static MemorySegment version(MemorySegment struct) {
        return struct.get(version$LAYOUT, version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *version
     * }
     */
    public static void version(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(version$LAYOUT, version$OFFSET, fieldValue);
    }

    private static final AddressLayout mime_type$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("mime_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *mime_type
     * }
     */
    public static final AddressLayout mime_type$layout() {
        return mime_type$LAYOUT;
    }

    private static final long mime_type$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *mime_type
     * }
     */
    public static final long mime_type$offset() {
        return mime_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *mime_type
     * }
     */
    public static MemorySegment mime_type(MemorySegment struct) {
        return struct.get(mime_type$LAYOUT, mime_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *mime_type
     * }
     */
    public static void mime_type(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(mime_type$LAYOUT, mime_type$OFFSET, fieldValue);
    }

    private static final AddressLayout note$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("note"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *note
     * }
     */
    public static final AddressLayout note$layout() {
        return note$LAYOUT;
    }

    private static final long note$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *note
     * }
     */
    public static final long note$offset() {
        return note$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *note
     * }
     */
    public static MemorySegment note(MemorySegment struct) {
        return struct.get(note$LAYOUT, note$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *note
     * }
     */
    public static void note(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(note$LAYOUT, note$OFFSET, fieldValue);
    }

    private static final AddressLayout module$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("module"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *module
     * }
     */
    public static final AddressLayout module$layout() {
        return module$LAYOUT;
    }

    private static final long module$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *module
     * }
     */
    public static final long module$offset() {
        return module$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *module
     * }
     */
    public static MemorySegment module(MemorySegment struct) {
        return struct.get(module$LAYOUT, module$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *module
     * }
     */
    public static void module(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(module$LAYOUT, module$OFFSET, fieldValue);
    }

    private static final AddressLayout decoder$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("decoder"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DecodeImageHandler *decoder
     * }
     */
    public static final AddressLayout decoder$layout() {
        return decoder$LAYOUT;
    }

    private static final long decoder$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DecodeImageHandler *decoder
     * }
     */
    public static final long decoder$offset() {
        return decoder$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DecodeImageHandler *decoder
     * }
     */
    public static MemorySegment decoder(MemorySegment struct) {
        return struct.get(decoder$LAYOUT, decoder$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DecodeImageHandler *decoder
     * }
     */
    public static void decoder(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(decoder$LAYOUT, decoder$OFFSET, fieldValue);
    }

    private static final AddressLayout encoder$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("encoder"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * EncodeImageHandler *encoder
     * }
     */
    public static final AddressLayout encoder$layout() {
        return encoder$LAYOUT;
    }

    private static final long encoder$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * EncodeImageHandler *encoder
     * }
     */
    public static final long encoder$offset() {
        return encoder$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * EncodeImageHandler *encoder
     * }
     */
    public static MemorySegment encoder(MemorySegment struct) {
        return struct.get(encoder$LAYOUT, encoder$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * EncodeImageHandler *encoder
     * }
     */
    public static void encoder(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(encoder$LAYOUT, encoder$OFFSET, fieldValue);
    }

    private static final AddressLayout image_info$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("image_info"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImageInfo *image_info
     * }
     */
    public static final AddressLayout image_info$layout() {
        return image_info$LAYOUT;
    }

    private static final long image_info$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImageInfo *image_info
     * }
     */
    public static final long image_info$offset() {
        return image_info$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImageInfo *image_info
     * }
     */
    public static MemorySegment image_info(MemorySegment struct) {
        return struct.get(image_info$LAYOUT, image_info$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImageInfo *image_info
     * }
     */
    public static void image_info(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(image_info$LAYOUT, image_info$OFFSET, fieldValue);
    }

    private static final AddressLayout magick$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("magick"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * IsImageFormatHandler *magick
     * }
     */
    public static final AddressLayout magick$layout() {
        return magick$LAYOUT;
    }

    private static final long magick$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * IsImageFormatHandler *magick
     * }
     */
    public static final long magick$offset() {
        return magick$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * IsImageFormatHandler *magick
     * }
     */
    public static MemorySegment magick(MemorySegment struct) {
        return struct.get(magick$LAYOUT, magick$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * IsImageFormatHandler *magick
     * }
     */
    public static void magick(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(magick$LAYOUT, magick$OFFSET, fieldValue);
    }

    private static final OfInt format_type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("format_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * MagickFormatType format_type
     * }
     */
    public static final OfInt format_type$layout() {
        return format_type$LAYOUT;
    }

    private static final long format_type$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * MagickFormatType format_type
     * }
     */
    public static final long format_type$offset() {
        return format_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * MagickFormatType format_type
     * }
     */
    public static int format_type(MemorySegment struct) {
        return struct.get(format_type$LAYOUT, format_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * MagickFormatType format_type
     * }
     */
    public static void format_type(MemorySegment struct, int fieldValue) {
        struct.set(format_type$LAYOUT, format_type$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * MagickStatusType flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 84;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * MagickStatusType flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * MagickStatusType flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * MagickStatusType flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final AddressLayout semaphore$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("semaphore"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SemaphoreInfo *semaphore
     * }
     */
    public static final AddressLayout semaphore$layout() {
        return semaphore$LAYOUT;
    }

    private static final long semaphore$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SemaphoreInfo *semaphore
     * }
     */
    public static final long semaphore$offset() {
        return semaphore$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SemaphoreInfo *semaphore
     * }
     */
    public static MemorySegment semaphore(MemorySegment struct) {
        return struct.get(semaphore$LAYOUT, semaphore$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SemaphoreInfo *semaphore
     * }
     */
    public static void semaphore(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(semaphore$LAYOUT, semaphore$OFFSET, fieldValue);
    }

    private static final OfLong signature$LAYOUT = (OfLong)$LAYOUT.select(groupElement("signature"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t signature
     * }
     */
    public static final OfLong signature$layout() {
        return signature$LAYOUT;
    }

    private static final long signature$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t signature
     * }
     */
    public static final long signature$offset() {
        return signature$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t signature
     * }
     */
    public static long signature(MemorySegment struct) {
        return struct.get(signature$LAYOUT, signature$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t signature
     * }
     */
    public static void signature(MemorySegment struct, long fieldValue) {
        struct.set(signature$LAYOUT, signature$OFFSET, fieldValue);
    }

    private static final AddressLayout client_data$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("client_data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *client_data
     * }
     */
    public static final AddressLayout client_data$layout() {
        return client_data$LAYOUT;
    }

    private static final long client_data$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *client_data
     * }
     */
    public static final long client_data$offset() {
        return client_data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *client_data
     * }
     */
    public static MemorySegment client_data(MemorySegment struct) {
        return struct.get(client_data$LAYOUT, client_data$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *client_data
     * }
     */
    public static void client_data(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(client_data$LAYOUT, client_data$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

