// Generated by jextract

package app.photofox.imffm.generated;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _PixelInfo {
 *     ClassType storage_class;
 *     ColorspaceType colorspace;
 *     PixelTrait alpha_trait;
 *     double fuzz;
 *     size_t depth;
 *     MagickSizeType count;
 *     MagickRealType red;
 *     MagickRealType green;
 *     MagickRealType blue;
 *     MagickRealType black;
 *     MagickRealType alpha;
 *     MagickRealType index;
 * }
 * }
 */
public class _PixelInfo {

    _PixelInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MagickWand_h.C_INT.withName("storage_class"),
        MagickWand_h.C_INT.withName("colorspace"),
        MagickWand_h.C_INT.withName("alpha_trait"),
        MemoryLayout.paddingLayout(4),
        MagickWand_h.C_DOUBLE.withName("fuzz"),
        MagickWand_h.C_LONG.withName("depth"),
        MagickWand_h.C_LONG_LONG.withName("count"),
        MagickWand_h.C_DOUBLE.withName("red"),
        MagickWand_h.C_DOUBLE.withName("green"),
        MagickWand_h.C_DOUBLE.withName("blue"),
        MagickWand_h.C_DOUBLE.withName("black"),
        MagickWand_h.C_DOUBLE.withName("alpha"),
        MagickWand_h.C_DOUBLE.withName("index")
    ).withName("_PixelInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt storage_class$LAYOUT = (OfInt)$LAYOUT.select(groupElement("storage_class"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ClassType storage_class
     * }
     */
    public static final OfInt storage_class$layout() {
        return storage_class$LAYOUT;
    }

    private static final long storage_class$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ClassType storage_class
     * }
     */
    public static final long storage_class$offset() {
        return storage_class$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ClassType storage_class
     * }
     */
    public static int storage_class(MemorySegment struct) {
        return struct.get(storage_class$LAYOUT, storage_class$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ClassType storage_class
     * }
     */
    public static void storage_class(MemorySegment struct, int fieldValue) {
        struct.set(storage_class$LAYOUT, storage_class$OFFSET, fieldValue);
    }

    private static final OfInt colorspace$LAYOUT = (OfInt)$LAYOUT.select(groupElement("colorspace"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ColorspaceType colorspace
     * }
     */
    public static final OfInt colorspace$layout() {
        return colorspace$LAYOUT;
    }

    private static final long colorspace$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ColorspaceType colorspace
     * }
     */
    public static final long colorspace$offset() {
        return colorspace$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ColorspaceType colorspace
     * }
     */
    public static int colorspace(MemorySegment struct) {
        return struct.get(colorspace$LAYOUT, colorspace$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ColorspaceType colorspace
     * }
     */
    public static void colorspace(MemorySegment struct, int fieldValue) {
        struct.set(colorspace$LAYOUT, colorspace$OFFSET, fieldValue);
    }

    private static final OfInt alpha_trait$LAYOUT = (OfInt)$LAYOUT.select(groupElement("alpha_trait"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PixelTrait alpha_trait
     * }
     */
    public static final OfInt alpha_trait$layout() {
        return alpha_trait$LAYOUT;
    }

    private static final long alpha_trait$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PixelTrait alpha_trait
     * }
     */
    public static final long alpha_trait$offset() {
        return alpha_trait$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PixelTrait alpha_trait
     * }
     */
    public static int alpha_trait(MemorySegment struct) {
        return struct.get(alpha_trait$LAYOUT, alpha_trait$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PixelTrait alpha_trait
     * }
     */
    public static void alpha_trait(MemorySegment struct, int fieldValue) {
        struct.set(alpha_trait$LAYOUT, alpha_trait$OFFSET, fieldValue);
    }

    private static final OfDouble fuzz$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("fuzz"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double fuzz
     * }
     */
    public static final OfDouble fuzz$layout() {
        return fuzz$LAYOUT;
    }

    private static final long fuzz$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double fuzz
     * }
     */
    public static final long fuzz$offset() {
        return fuzz$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double fuzz
     * }
     */
    public static double fuzz(MemorySegment struct) {
        return struct.get(fuzz$LAYOUT, fuzz$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double fuzz
     * }
     */
    public static void fuzz(MemorySegment struct, double fieldValue) {
        struct.set(fuzz$LAYOUT, fuzz$OFFSET, fieldValue);
    }

    private static final OfLong depth$LAYOUT = (OfLong)$LAYOUT.select(groupElement("depth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t depth
     * }
     */
    public static final OfLong depth$layout() {
        return depth$LAYOUT;
    }

    private static final long depth$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t depth
     * }
     */
    public static final long depth$offset() {
        return depth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t depth
     * }
     */
    public static long depth(MemorySegment struct) {
        return struct.get(depth$LAYOUT, depth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t depth
     * }
     */
    public static void depth(MemorySegment struct, long fieldValue) {
        struct.set(depth$LAYOUT, depth$OFFSET, fieldValue);
    }

    private static final OfLong count$LAYOUT = (OfLong)$LAYOUT.select(groupElement("count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * MagickSizeType count
     * }
     */
    public static final OfLong count$layout() {
        return count$LAYOUT;
    }

    private static final long count$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * MagickSizeType count
     * }
     */
    public static final long count$offset() {
        return count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * MagickSizeType count
     * }
     */
    public static long count(MemorySegment struct) {
        return struct.get(count$LAYOUT, count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * MagickSizeType count
     * }
     */
    public static void count(MemorySegment struct, long fieldValue) {
        struct.set(count$LAYOUT, count$OFFSET, fieldValue);
    }

    private static final OfDouble red$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("red"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * MagickRealType red
     * }
     */
    public static final OfDouble red$layout() {
        return red$LAYOUT;
    }

    private static final long red$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * MagickRealType red
     * }
     */
    public static final long red$offset() {
        return red$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * MagickRealType red
     * }
     */
    public static double red(MemorySegment struct) {
        return struct.get(red$LAYOUT, red$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * MagickRealType red
     * }
     */
    public static void red(MemorySegment struct, double fieldValue) {
        struct.set(red$LAYOUT, red$OFFSET, fieldValue);
    }

    private static final OfDouble green$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("green"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * MagickRealType green
     * }
     */
    public static final OfDouble green$layout() {
        return green$LAYOUT;
    }

    private static final long green$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * MagickRealType green
     * }
     */
    public static final long green$offset() {
        return green$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * MagickRealType green
     * }
     */
    public static double green(MemorySegment struct) {
        return struct.get(green$LAYOUT, green$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * MagickRealType green
     * }
     */
    public static void green(MemorySegment struct, double fieldValue) {
        struct.set(green$LAYOUT, green$OFFSET, fieldValue);
    }

    private static final OfDouble blue$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("blue"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * MagickRealType blue
     * }
     */
    public static final OfDouble blue$layout() {
        return blue$LAYOUT;
    }

    private static final long blue$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * MagickRealType blue
     * }
     */
    public static final long blue$offset() {
        return blue$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * MagickRealType blue
     * }
     */
    public static double blue(MemorySegment struct) {
        return struct.get(blue$LAYOUT, blue$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * MagickRealType blue
     * }
     */
    public static void blue(MemorySegment struct, double fieldValue) {
        struct.set(blue$LAYOUT, blue$OFFSET, fieldValue);
    }

    private static final OfDouble black$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("black"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * MagickRealType black
     * }
     */
    public static final OfDouble black$layout() {
        return black$LAYOUT;
    }

    private static final long black$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * MagickRealType black
     * }
     */
    public static final long black$offset() {
        return black$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * MagickRealType black
     * }
     */
    public static double black(MemorySegment struct) {
        return struct.get(black$LAYOUT, black$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * MagickRealType black
     * }
     */
    public static void black(MemorySegment struct, double fieldValue) {
        struct.set(black$LAYOUT, black$OFFSET, fieldValue);
    }

    private static final OfDouble alpha$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("alpha"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * MagickRealType alpha
     * }
     */
    public static final OfDouble alpha$layout() {
        return alpha$LAYOUT;
    }

    private static final long alpha$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * MagickRealType alpha
     * }
     */
    public static final long alpha$offset() {
        return alpha$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * MagickRealType alpha
     * }
     */
    public static double alpha(MemorySegment struct) {
        return struct.get(alpha$LAYOUT, alpha$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * MagickRealType alpha
     * }
     */
    public static void alpha(MemorySegment struct, double fieldValue) {
        struct.set(alpha$LAYOUT, alpha$OFFSET, fieldValue);
    }

    private static final OfDouble index$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("index"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * MagickRealType index
     * }
     */
    public static final OfDouble index$layout() {
        return index$LAYOUT;
    }

    private static final long index$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * MagickRealType index
     * }
     */
    public static final long index$offset() {
        return index$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * MagickRealType index
     * }
     */
    public static double index(MemorySegment struct) {
        return struct.get(index$LAYOUT, index$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * MagickRealType index
     * }
     */
    public static void index(MemorySegment struct, double fieldValue) {
        struct.set(index$LAYOUT, index$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

